From 4f0a565b8305a7f689bed22fd4b5055d7abe942b Mon Sep 17 00:00:00 2001
From: Harshitha Prem <quic_hprem@quicinc.com>
Date: Thu, 6 Apr 2023 21:39:33 +0530
Subject: [PATCH] wifi: ath12k: avoid deadlock during regulatory update in
 ath12k_regd_update()

Running this test in a loop it is easy to reproduce an rtnl deadlock:

iw reg set FI
ifconfig wlan0 down

What happens is that thread A (workqueue) tries to update the regulatory by
acquiring the rtnl_lock of ar->regd_update_work and thread B (ifconfig)
tries to stop the interface via cancel_work_sync(&ar->regd_update_work)
in ath12k_mac_op_stop().

The sequence of deadlock is:

1. Thread B calls rtnl_lock().

2. Thread A starts to run and calls rtnl_lock() from within
   ath12k_regd_update_work(), then enters wait state because the lock is owned by
   thread B.

3. Thread B continues to run and tries to call
   cancel_work_sync(&ar->regd_update_work), but thread A is in
   ath12k_regd_update_work() waiting for rtnl_lock(). So cancel_work_sync()
   forever waits for ath12k_regd_update_work() to finish and we have a deadlock.

Fix this by switching from using regulatory_set_wiphy_regd_sync() to
regulatory_set_wiphy_regd(). Now cfg80211 will schedule another workqueue which
handles the locking on it's own. So the ath12k workqueue can simply exit without
taking any locks, avoiding the deadlock.

Signed-off-by: Wen Gong <quic_wgong@quicinc.com>
Signed-off-by: Harshitha Prem <quic_hprem@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/reg.c | 6 +-----
 drivers/net/wireless/ath/ath12k/wmi.c | 2 +-
 2 files changed, 2 insertions(+), 6 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/reg.c b/drivers/net/wireless/ath/ath12k/reg.c
index 5e45a0f..4332c27 100644
--- a/drivers/net/wireless/ath/ath12k/reg.c
+++ b/drivers/net/wireless/ath/ath12k/reg.c
@@ -414,11 +414,7 @@ int ath12k_regd_update(struct ath12k *ar, bool init)
 		goto err;
 	}
 
-	rtnl_lock();
-	wiphy_lock(ah->hw->wiphy);
-	ret = regulatory_set_wiphy_regd_sync(ah->hw->wiphy, regd_copy);
-	wiphy_unlock(ah->hw->wiphy);
-	rtnl_unlock();
+	ret = regulatory_set_wiphy_regd(ah->hw->wiphy, regd_copy);
 
 	kfree(regd_copy);
 
diff --git a/drivers/net/wireless/ath/ath12k/wmi.c b/drivers/net/wireless/ath/ath12k/wmi.c
index 2118b82..d3bf7ce 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -7988,8 +7988,8 @@ static int ath12k_reg_handle_chan_list(struct ath12k_base *ab,
 		ar = ab->pdevs[pdev_idx].ar;
 		kfree(ab->new_regd[pdev_idx]);
 		ab->new_regd[pdev_idx] = regd;
+		queue_work(ab->workqueue, &ar->regd_update_work);
 
-		ieee80211_queue_work(ar->ah->hw, &ar->regd_update_work);
 	} else {
 		/* Multiple events for the same *ar is not expected. But we
 		 * can still clear any previously stored default_regd if we
-- 
2.17.1

