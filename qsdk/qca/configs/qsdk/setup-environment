#!/bin/bash
#
# Copyright (c) 2022 Qualcomm Innovation Center, Inc. All rights reserved.
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
SCRIPT_DIR=$(dirname ${BASH_SOURCE[0]})
TOP_DIR="$SCRIPT_DIR/../../../"
declare -a profile
declare -a debug
declare -a profile_name

ret_val=1

#echo "Help options, Run command with -h [$0 -h]"
usage()
{
	echo "Usage: qca/configs/qsdk/setup-environment [-t <ipq807x|ipq60xx|ipq50xx|ipq95xx|ipq53xx>] [-a <32|64>] [-p <256|512|16M|512enterprise|512open|bigendian|enterprise|open|premium>] [-d <y|n>] [-i <Debug|Debug+Kasan>]" 1>&2;
	echo "For eg:"
	echo "qca/configs/qsdk/setup-environment -t ipq807x -a 32 -p premium -d n"
	echo "qca/configs/qsdk/setup-environment -t ipq53xx -a 64 -p open -d y -i Debug"
	echo "Please run \"make clean\" if this is an existing workspace"
	exit 1;
}
soc_list=("ipq807x" "ipq60xx" "ipq50xx" "ipq95xx" "ipq53xx")
arch_list=("32" "64")

populate_profile_list()
{
	profile=()
	profile_name=()
	for qsdk_profile in $(find $SCRIPT_DIR/ -name 'ipq*.config' ! -name '*qbuilder*' | sort );do
		filename=$(basename $qsdk_profile)
		profile+=( "${filename%.*}" )
		QSDK_profile=$(grep -oP "CONFIG_TARGET_.*\KQSDK_[a-zA-Z0-9]*" $qsdk_profile)
		name=${QSDK_profile:-"None"}
		profile_name+=( "$name" )
	done
}

read_inputs()
{
	in_soc=""
	in_arch=""
	input=""
	debug_in=""
	debug_input=""
	local OPTIND
	while getopts ":t:a:p:d:i:h" arg;do
		case "${arg}" in
			t)
				in_soc=${OPTARG}
				if [[ "${in_soc}" != "ipq807x" && "${in_soc}" != "ipq60xx" && "${in_soc}" != "ipq50xx" && "${in_soc}" != "ipq95xx" && "${in_soc}" != "ipq53xx" ]]; then
					echo -e "\n\033[0;31mInvalid target passed as input - ${in_soc}\033[0m"
					usage
					exit 1
				fi
				;;
			a)
				in_arch=${OPTARG}
				if [[ "${in_arch}" != "32" && "${in_arch}" != "64" ]]; then
					echo -e "\n\033[0;31mInvalid build type passed as input - ${in_arch}\033[0m"
					usage
					exit 1
				fi
				;;
			p)
				input=${OPTARG}
				if [[ "${input}" != "256" && "${input}" != "512" && "${input}" != "16M" && "${input}" != "512enterprise" && "${input}" != "512open" && "${input}" != "bigendian" && "${input}" != "enterprise" && "${input}" != "enterprise" && "${input}" != "open" && "${input}" != "premium" ]]; then
				echo -e "\n\033[0;31mInvalid profile passed as input - ${input}\033[0m"
					usage
					exit 1
				fi
				;;
			d)
				debug_in=${OPTARG}
				if [[ "${debug_in}" != "y" && "${debug_in}" != "n" ]]; then
					echo -e "\n\033[0;31mInvalid debug option passed as input - ${debug_in}\033[0m"
					usage
					exit 1
				fi
				;;
			i)
				debug_input=${OPTARG}
				if [[ "${debug_input}" != "Debug" && "${debug_input}" != "Debug+Kasan" ]]; then
					echo -e "\n\033[0;31mInvalid debug profile passed as input - ${debug_input}\033[0m"
					usage
					exit 1
				fi
				;;
			h | *)
				usage
				exit 0
				;;
		esac
	done
	shift "$((OPTIND-1))"

	if [ -z $in_soc ]; then
		echo ""
		echo -e "\t1) ipq807x ( Hawkeye )"
		echo -e "\t2) ipq60xx ( Cypress )"
		echo -e "\t3) ipq50xx ( Maple ) "
		echo -e "\t4) ipq95xx ( Alder ) "
		echo -e "\t5) ipq53xx ( Miami ) "
		read -p "Please enter your choice of target[1..5] : " in_soc
		echo ""

		if [[ $in_soc -lt 1 || $in_soc -gt 5 ]]; then
			echo "Wrong input.. exiting"
			return 1
		fi
		in_soc=${soc_list[$in_soc-1]}
	fi

	if [ -z $in_arch ]; then
		echo -e "\t1) 32 Bit"
		echo -e "\t2) 64 bit"
		read -p "Please enter your choice of build type[1..2] : " in_arch
		echo ""

		if [[ $in_arch -lt 1 || $in_arch -gt 2 ]]; then
		        echo "Wrong input.. exiting"
			return 1
		fi
		in_arch=${arch_list[$in_arch-1]}
	fi

	qsdk_target=$in_soc
	arch=$in_arch
	if [ "$arch" -eq "64" ];then
		qsdk_subtarget="generic"
	else if [ "$arch" -eq "32" ];then
		qsdk_subtarget="${qsdk_target}_32"
		fi
	fi

	populate_profile_list
	if [ -z $input ]; then
		echo -e "\n\033[36m**** List of supported QSDK profiles *****\033[0m"
		index=1
		for i in ${profile[@]};do
			echo -e "\t$index) ${i:4}"
			index=$(( $index+1 ))
		done
		read -p "Choose the profile [1..${#profile[@]}] : " input
		if [[ $input -lt 1 || $input -gt ${#profile[@]} ]];then
			echo "Please enter a valid input...Exiting"
			return 1
		fi
	else
		index=0
		string="ipq_"$input
		for i in ${profile[@]};do
			index=$(( $index+1 ))
			if [ ${string} == ${i} ]; then
				break
			fi
		done
		input="$index"
	fi
	declare qsdk_profile=${profile[$(( $input -1 ))]}
	pfile=${profile[$(( $input -1 ))]}
	pname=${profile_name[$(( $input -1 ))]}
	echo -e "\n\033[36mSelected configuration: ${qsdk_target} - ${qsdk_subtarget} - ${qsdk_profile}\033[0m"

	if [ -z $debug_in ]; then
		read -p "Debug build required ? [y/n] : " debug_in
	fi
	case $debug_in in
		'y')    debug=("Debug" "Debug+Kasan")
			if [ -z $debug_input ]; then
				debug=("Debug" "Debug+Kasan")
				# Check for debug builds
				index=1
				for i in ${debug[@]};do
					echo -e "\t$index) $i"
					index=$(( $index+1 ))
				done

				read -p "Choose the option for debug build : " debug_input
			else
				index=1
				for i in ${debug[@]};do
					if [ ${debug_input} == ${i} ]; then
						break
					fi
					index=$(( $index+1 ))
				done
				debug_input=$index
			fi
			case $debug_input in
				1)	if [[ "$pname" = QSDK_16M ]];then
					       cat $SCRIPT_DIR/${pfile}.config \
						       $SCRIPT_DIR/ipq_debug_16M > $TOP_DIR/.config
				       else
					       cat $SCRIPT_DIR/${pfile}.config \
						       $SCRIPT_DIR/ipq_debug > $TOP_DIR/.config
				       fi
				       ;;

				2)	cat $SCRIPT_DIR/${pfile}.config \
					       $SCRIPT_DIR/ipq_debug_kasan > $TOP_DIR/.config
				       ;;

				*)	echo "Wrong input .... exiting"
					return 1
					;;
		       esac
		       ;;

		'n')
		       cp $SCRIPT_DIR/${pfile}.config $TOP_DIR/.config
		       ;;
		*)
			echo "Wrong input .... exiting"
			return 1
			;;
	esac
	echo "CONFIG_TARGET_${qsdk_target}=y" >> $TOP_DIR/.config

	# Set subtarget
	echo "CONFIG_TARGET_${qsdk_target}_${qsdk_subtarget}=y" >> $TOP_DIR/.config
	echo "CONFIG_TARGET_${qsdk_target}_${qsdk_subtarget}_${pname}=y" >> $TOP_DIR/.config
	return 0
}

read_inputs $@
ret_val=$?
if [ $ret_val == 0 ];then
	cd $TOP_DIR
	umask 022
	make package/symlinks
	echo -e "\n================= Executing "make defconfig" =============="
	make defconfig

	echo -e "\033[0;32m# Selected target:      $(grep CONFIG_TARGET_BOARD= .config | cut -d "\"" -f 2)\033[0m"
	echo -e "\033[0;32m# Selected subtarget:   $(grep CONFIG_TARGET_SUBTARGET= .config | cut -d "\"" -f 2)\033[0m"
	echo -e "\033[0;32m# Selected profile:     $(grep CONFIG_TARGET_PROFILE= .config | cut -d "\"" -f 2)\033[0m"
	echo "#"
	echo ""
	echo '================= .config is generated, you can build using below commands =============='
	echo ""
	echo "PLEASE RUN MAKE COMMAND FROM THE LIST OF BUILD OPTIONS AVAILABLE :"
	echo -e "\t\t make -j8 V=s (Verbose logs)"
	echo -e "\t\t make -j8 V=e (No detailed logs)"
	echo -e "\t\t time make -j8 V=s (Verbose logs with total time taken by build)"
	echo ""
	echo "************ If you face any error, please rerun with 'make -j1 V=s'.*************"
	echo ""
fi
