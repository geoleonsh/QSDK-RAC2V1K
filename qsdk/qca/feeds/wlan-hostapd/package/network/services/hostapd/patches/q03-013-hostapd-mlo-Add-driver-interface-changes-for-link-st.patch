From 5d2b00604ed6170c83481a569ab43d7a7395a10b Mon Sep 17 00:00:00 2001
From: Rameshkumar Sundaram <quic_ramess@quicinc.com>
Date: Wed, 5 Oct 2022 16:44:26 +0530
Subject: [PATCH] hostapd: : mlo : Add driver interface changes for link sta
 setup

Add nl80211 driver support for ADD, MODIFY and REMOVE
link STA.
Add changes to wpa_driver_nl80211_sta_add,set_sta_flag
routines to pass MLD Mac Address and MLO Link id in
NL commands.

Reusing the existing hostapd_sta_add() routine for
link sta add/modify using new argument (bool link_add_mod).
since the parameters are almost similar for both add sta/set sta
and add link sta/modify link sta.
set variable of
hostapd_sta_add_params will be used to differentiate between
ADD and MODIFY Link STA requests.
Add additional Arguments to hostapd_sta_add and hostap_sta_set_flags
to pass mld mac address and link id.

Signed-off-by: Rameshkumar Sundaram <quic_ramess@quicinc.com>
Signed-off-by: Sriram R <quic_srirrama@quicinc.com>
---
 src/ap/ap_drv_ops.c          |  23 +++--
 src/ap/ap_drv_ops.h          |  18 +++-
 src/ap/ieee802_11.c          |   2 +-
 src/ap/sta_info.c            |   8 +-
 src/drivers/driver.h         |  27 +++++-
 src/drivers/driver_atheros.c |   2 +-
 src/drivers/driver_bsd.c     |   2 +-
 src/drivers/driver_hostap.c  |   3 +-
 src/drivers/driver_nl80211.c | 174 +++++++++++++++++++++++++++++++++--
 wpa_supplicant/driver_i.h    |   5 +-
 wpa_supplicant/ibss_rsn.c    |   4 +-
 11 files changed, 239 insertions(+), 29 deletions(-)

--- a/src/ap/ap_drv_ops.c
+++ b/src/ap/ap_drv_ops.c
@@ -272,12 +272,12 @@ int hostapd_set_authorized(struct hostap
 		return hostapd_sta_set_flags(hapd, sta->addr,
 					     hostapd_sta_flags_to_drv(
 						     sta->flags),
-					     WPA_STA_AUTHORIZED, ~0);
+					     WPA_STA_AUTHORIZED, ~0, NULL, -1);
 	}
 
 	return hostapd_sta_set_flags(hapd, sta->addr,
 				     hostapd_sta_flags_to_drv(sta->flags),
-				     0, ~WPA_STA_AUTHORIZED);
+				     0, ~WPA_STA_AUTHORIZED, NULL, -1);
 }
 
 
@@ -293,7 +293,7 @@ int hostapd_set_sta_flags(struct hostapd
 	flags_or = total_flags & set_flags;
 	flags_and = total_flags | ~set_flags;
 	return hostapd_sta_set_flags(hapd, sta->addr, total_flags,
-				     flags_or, flags_and);
+				     flags_or, flags_and, NULL, -1);
 }
 
 
@@ -430,7 +430,7 @@ int hostapd_sta_add(struct hostapd_data
 		    size_t eht_capab_len,
 		    const struct ieee80211_he_6ghz_band_cap *he_6ghz_capab,
 		    u32 flags, u8 qosinfo, u8 vht_opmode, int supp_p2p_ps,
-		    int set)
+		    int set, bool link_add_mod, int link_id, const u8 *mld_addr)
 {
 	struct hostapd_sta_add_params params;
 
@@ -438,6 +438,8 @@ int hostapd_sta_add(struct hostapd_data
 		return 0;
 	if (hapd->driver->sta_add == NULL)
 		return 0;
+	if (link_add_mod && hapd->driver->link_sta_add_mod == NULL)
+		return 0;
 
 	os_memset(&params, 0, sizeof(params));
 	params.addr = addr;
@@ -459,7 +461,13 @@ int hostapd_sta_add(struct hostapd_data
 	params.qosinfo = qosinfo;
 	params.support_p2p_ps = supp_p2p_ps;
 	params.set = set;
-	return hapd->driver->sta_add(hapd->drv_priv, &params);
+	params.link_id = link_id;
+	params.mld_addr = mld_addr;
+
+	if (link_add_mod)
+		return hapd->driver->link_sta_add_mod(hapd->drv_priv, &params);
+	else
+		return hapd->driver->sta_add(hapd->drv_priv, &params);
 }
 
 
@@ -606,12 +614,13 @@ int hostapd_set_frag(struct hostapd_data
 
 
 int hostapd_sta_set_flags(struct hostapd_data *hapd, u8 *addr,
-			  int total_flags, int flags_or, int flags_and)
+			  int total_flags, int flags_or, int flags_and,
+			  const u8 *mld_addr, int link_id)
 {
 	if (!hapd->driver || !hapd->drv_priv || !hapd->driver->sta_set_flags)
 		return 0;
 	return hapd->driver->sta_set_flags(hapd->drv_priv, addr, total_flags,
-					   flags_or, flags_and);
+					   flags_or, flags_and, mld_addr, link_id);
 }
 
 
--- a/src/ap/ap_drv_ops.h
+++ b/src/ap/ap_drv_ops.h
@@ -47,7 +47,7 @@ int hostapd_sta_add(struct hostapd_data
 		    size_t eht_capab_len,
 		    const struct ieee80211_he_6ghz_band_cap *he_6ghz_capab,
 		    u32 flags, u8 qosinfo, u8 vht_opmode, int supp_p2p_ps,
-		    int set);
+		    int set, bool link_add_mod, int link_id, const u8 *mld_addr);
 int hostapd_set_privacy(struct hostapd_data *hapd, int enabled);
 int hostapd_set_generic_elem(struct hostapd_data *hapd, const u8 *elem,
 			     size_t elem_len);
@@ -74,7 +74,8 @@ int hostapd_set_freq(struct hostapd_data
 int hostapd_set_rts(struct hostapd_data *hapd, int rts);
 int hostapd_set_frag(struct hostapd_data *hapd, int frag);
 int hostapd_sta_set_flags(struct hostapd_data *hapd, u8 *addr,
-			  int total_flags, int flags_or, int flags_and);
+			  int total_flags, int flags_or, int flags_and,
+			  const u8 *mld_addr, int link_id);
 int hostapd_sta_set_airtime_weight(struct hostapd_data *hapd, const u8 *addr,
 				   unsigned int weight);
 int hostapd_set_country(struct hostapd_data *hapd, const char *country);
@@ -170,12 +171,13 @@ static inline int hostapd_drv_set_counte
 
 static inline int hostapd_drv_set_sta_vlan(const char *ifname,
 					   struct hostapd_data *hapd,
-					   const u8 *addr, int vlan_id)
+					   const u8 *addr, int vlan_id,
+					   int link_id)
 {
 	if (hapd->driver == NULL || hapd->driver->set_sta_vlan == NULL)
 		return 0;
 	return hapd->driver->set_sta_vlan(hapd->drv_priv, addr, ifname,
-					  vlan_id);
+					  vlan_id, link_id);
 }
 
 static inline int hostapd_drv_get_inact_sec(struct hostapd_data *hapd,
@@ -194,6 +196,14 @@ static inline int hostapd_drv_sta_remove
 	return hapd->driver->sta_remove(hapd->drv_priv, addr);
 }
 
+static inline int hostapd_drv_link_sta_remove(struct hostapd_data *hapd,
+					 const u8 *mld_addr, int link_id)
+{
+	if (!hapd->driver || !hapd->driver->sta_remove || !hapd->drv_priv)
+		return 0;
+	return hapd->driver->link_sta_remove(hapd->drv_priv, mld_addr, link_id);
+}
+
 static inline int hostapd_drv_hapd_send_eapol(struct hostapd_data *hapd,
 					      const u8 *addr, const u8 *data,
 					      size_t data_len, int encrypt,
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -4393,7 +4393,7 @@ static int add_associated_sta(struct hos
 			    sta->he_6ghz_capab,
 			    sta->flags | WLAN_STA_ASSOC, sta->qosinfo,
 			    sta->vht_opmode, sta->p2p_ie ? 1 : 0,
-			    set)) {
+			    set, false, -1, NULL)) {
 		hostapd_logger(hapd, sta->addr,
 			       HOSTAPD_MODULE_IEEE80211, HOSTAPD_LEVEL_NOTICE,
 			       "Could not %s STA to kernel driver",
--- a/src/ap/sta_info.c
+++ b/src/ap/sta_info.c
@@ -1097,6 +1097,7 @@ int ap_sta_bind_vlan(struct hostapd_data
 	struct hostapd_vlan *vlan = NULL;
 	int ret;
 	int old_vlanid = sta->vlan_id_bound;
+	int link_id = -1;
 
 	if ((sta->flags & WLAN_STA_WDS) && sta->vlan_id == 0) {
 		wpa_printf(MSG_DEBUG,
@@ -1153,7 +1154,10 @@ skip_counting:
 	if (wpa_auth_sta_set_vlan(sta->wpa_sm, sta->vlan_id) < 0)
 		wpa_printf(MSG_INFO, "Failed to update VLAN-ID for WPA");
 
-	ret = hostapd_drv_set_sta_vlan(iface, hapd, sta->addr, sta->vlan_id);
+	if (hapd->mld)
+		link_id = hapd->iface->mlo_link_id;
+
+	ret = hostapd_drv_set_sta_vlan(iface, hapd, sta->addr, sta->vlan_id, link_id);
 	if (ret < 0) {
 		hostapd_logger(hapd, sta->addr, HOSTAPD_MODULE_IEEE80211,
 			       HOSTAPD_LEVEL_DEBUG, "could not bind the STA "
@@ -1606,7 +1610,7 @@ int ap_sta_re_add(struct hostapd_data *h
 			    sta->supported_rates,
 			    sta->supported_rates_len,
 			    0, NULL, NULL, NULL, 0, NULL, 0, NULL,
-			    sta->flags, 0, 0, 0, 0)) {
+			    sta->flags, 0, 0, 0, 0, false, -1, NULL)) {
 		hostapd_logger(hapd, sta->addr,
 			       HOSTAPD_MODULE_IEEE80211,
 			       HOSTAPD_LEVEL_NOTICE,
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -2543,6 +2543,8 @@ struct hostapd_sta_add_params {
 	size_t supp_oper_classes_len;
 	int support_p2p_ps;
 	u16 ru_punct_bitmap;
+	int link_id; /* Link id of the ML STA */
+	const u8 *mld_addr; /* MLD MAC address */
 };
 
 struct mac_address {
@@ -3751,6 +3753,24 @@ struct wpa_driver_ops {
 	int (*sta_add)(void *priv, struct hostapd_sta_add_params *params);
 
 	/**
+	 * link_sta_add_mod - Add/Modify a link station entry(for ML STA)
+	 * @priv: Private driver interface data
+	 * @params: Link Station parameters
+	 * Returns: 0 on success, -1 on failure
+	 *
+	 * This function is used to add or modify (params->set 1) a link station
+	 * entry in the driver.
+	 */
+	int (*link_sta_add_mod)(void *priv, struct hostapd_sta_add_params *params);
+	/**
+	 * link_sta_remove - Delete a Link Station entry (for ML STA)
+	 * @priv: Private driver interface data
+	 * @mld_addr - MLD MAC Address of the ML Station
+	 * @link_id - Link id of ML Station
+	 */
+	int (*link_sta_remove)(void *priv, const u8 *mld_addr, int link_id);
+
+	/**
 	 * get_inact_sec - Get station inactivity duration (AP only)
 	 * @priv: Private driver interface data
 	 * @addr: Station address
@@ -3797,11 +3817,13 @@ struct wpa_driver_ops {
 	 * @total_flags: Bitmap of all WPA_STA_* flags currently set
 	 * @flags_or: Bitmap of WPA_STA_* flags to add
 	 * @flags_and: Bitmap of WPA_STA_* flags to us as a mask
+	 * @mld_addr: MLD Station Address
+	 * @link_id: Link ID for ML associated STA
 	 * Returns: 0 on success, -1 on failure
 	 */
 	int (*sta_set_flags)(void *priv, const u8 *addr,
 			     unsigned int total_flags, unsigned int flags_or,
-			     unsigned int flags_and);
+			     unsigned int flags_and, const u8 *mld_addr, int link_id);
 
 	/**
 	 * sta_set_airtime_weight - Set station airtime weight (AP only)
@@ -3867,6 +3889,7 @@ struct wpa_driver_ops {
 	 * @ifname: Interface (main or virtual BSS or VLAN)
 	 * @addr: MAC address of the associated station
 	 * @vlan_id: VLAN ID
+	 * @link_id: Link id corresponding to the STA
 	 * Returns: 0 on success, -1 on failure
 	 *
 	 * This function is used to bind a station to a specific virtual
@@ -3876,7 +3899,7 @@ struct wpa_driver_ops {
 	 * domains to be used with a single BSS.
 	 */
 	int (*set_sta_vlan)(void *priv, const u8 *addr, const char *ifname,
-			    int vlan_id);
+			    int vlan_id, int link_id);
 
 	/**
 	 * commit - Optional commit changes handler (AP only)
--- a/src/drivers/driver_atheros.c
+++ b/src/drivers/driver_atheros.c
@@ -452,7 +452,7 @@ atheros_set_sta_authorized(void *priv, c
 static int
 atheros_sta_set_flags(void *priv, const u8 *addr,
 		      unsigned int total_flags, unsigned int flags_or,
-		      unsigned int flags_and)
+		      unsigned int flags_and, const u8 *mld_addr, int link_id)
 {
 	/* For now, only support setting Authorized flag */
 	if (flags_or & WPA_STA_AUTHORIZED)
--- a/src/drivers/driver_bsd.c
+++ b/src/drivers/driver_bsd.c
@@ -1059,7 +1059,7 @@ bsd_deinit(void *priv)
 static int
 bsd_set_sta_authorized(void *priv, const u8 *addr,
 		       unsigned int total_flags, unsigned int flags_or,
-		       unsigned int flags_and)
+		       unsigned int flags_and, const u8 *mld_addr, int link_id)
 {
 	int authorized = -1;
 
--- a/src/drivers/driver_hostap.c
+++ b/src/drivers/driver_hostap.c
@@ -327,7 +327,8 @@ static int hostap_send_eapol(void *priv,
 
 static int hostap_sta_set_flags(void *priv, const u8 *addr,
 				unsigned int total_flags, unsigned int flags_or,
-				unsigned int flags_and)
+				unsigned int flags_and, const u8 *mld_addr,
+				int link_id)
 {
 	struct hostap_driver_data *drv = priv;
 	struct prism2_hostapd_param param;
@@ -663,7 +664,7 @@ static int hostap_sta_remove(void *priv,
 	struct hostap_driver_data *drv = priv;
 	struct prism2_hostapd_param param;
 
-	hostap_sta_set_flags(drv, addr, 0, 0, ~WPA_STA_AUTHORIZED);
+	hostap_sta_set_flags(drv, addr, 0, 0, ~WPA_STA_AUTHORIZED, NULL, -1);
 
 	memset(&param, 0, sizeof(param));
 	param.cmd = PRISM2_HOSTAPD_REMOVE_STA;
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -5428,7 +5428,136 @@ static u32 sta_plink_state_nl80211(enum
 	return -1;
 }
 #endif /* CONFIG_MESH */
+static int wpa_driver_nl80211_link_sta_remove(void *priv, const u8 *mld_addr,
+					      int link_id)
+{
+	struct i802_bss *bss = priv;
+	struct wpa_driver_nl80211_data *drv = bss->drv;
+	struct nl_msg *msg;
+	int ret = -ENOBUFS;
+
+	if (!mld_addr || link_id < 0)
+		return -EINVAL;
+
+	msg = nl80211_bss_msg(bss, 0, NL80211_CMD_REMOVE_LINK_STA);
+
+	if (!msg || nla_put(msg, NL80211_ATTR_MLD_ADDR, ETH_ALEN, mld_addr) ||
+	    nla_put_u8(msg, NL80211_ATTR_MLO_LINK_ID, link_id))
+		goto fail;
+	ret = send_and_recv_msgs(drv, msg, NULL, NULL, NULL, NULL);
+	msg = NULL;
+	if (ret)
+		wpa_printf(MSG_DEBUG, "nl80211: NL80211_CMD_REMOVE_LINK_STA "
+			   "result: %d (%s)", ret, strerror(-ret));
+fail:
+	nlmsg_free(msg);
+	return ret;
+}
+
+static int wpa_driver_nl80211_link_sta_add_modify(void* priv,
+						  struct hostapd_sta_add_params *params)
+{
+	struct i802_bss *bss = priv;
+	struct wpa_driver_nl80211_data *drv = bss->drv;
+	struct nl_msg *msg;
+	int ret = -ENOBUFS;
+	bool add = !params->set; /* If set=1 then we are modifying */
+
+	wpa_printf(MSG_DEBUG, "nl80211: %s LINK STA", add ? "ADD":"MODIFY");
+	wpa_printf(MSG_DEBUG, "nl80211: ifindex=%d", bss->ifindex);
+	wpa_printf(MSG_DEBUG, "nl80211: link_id=%u", params->link_id);
+	wpa_printf(MSG_DEBUG, "nl80211: link_addr " MACSTR, MAC2STR(params->addr));
+	wpa_printf(MSG_DEBUG, "nl80211: MLD addr " MACSTR, MAC2STR(params->mld_addr));
+
+	if (!params->mld_addr || params->link_id < 0)
+		return -EINVAL;
+
+	if (add && (!params->addr || !params->supp_rates || !params->supp_rates_len))
+		return -EINVAL; /* Link mac and rates needed for ADD */
+
+	msg = nl80211_bss_msg(bss, 0, params->set ? NL80211_CMD_MODIFY_LINK_STA :
+				NL80211_CMD_ADD_LINK_STA);
+
+	if (!msg || nla_put(msg, NL80211_ATTR_MLD_ADDR, ETH_ALEN, params->mld_addr) ||
+	    nla_put_u8(msg, NL80211_ATTR_MLO_LINK_ID, params->link_id))
+		goto fail;
+
+	if (params->addr && nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, params->addr))
+		goto fail;
+
+	if (params->supp_rates && params->supp_rates_len) {
+		wpa_hexdump(MSG_DEBUG, "  * supported rates",
+			    params->supp_rates, params->supp_rates_len);
+		if (nla_put(msg, NL80211_ATTR_STA_SUPPORTED_RATES,
+		    params->supp_rates_len, params->supp_rates))
+			goto fail;
+	}
+
+	if (params->ht_capabilities) {
+		wpa_hexdump(MSG_DEBUG, "  * ht_capabilities",
+			    (u8 *) params->ht_capabilities,
+			    sizeof(*params->ht_capabilities));
+		if (nla_put(msg, NL80211_ATTR_HT_CAPABILITY,
+			    sizeof(*params->ht_capabilities),
+			    params->ht_capabilities))
+			goto fail;
+	}
+
+	if (params->vht_capabilities) {
+		wpa_hexdump(MSG_DEBUG, "  * vht_capabilities",
+			    (u8 *) params->vht_capabilities,
+			    sizeof(*params->vht_capabilities));
+		if (nla_put(msg, NL80211_ATTR_VHT_CAPABILITY,
+			    sizeof(*params->vht_capabilities),
+			    params->vht_capabilities))
+			goto fail;
+	}
+
+	if (params->he_capab) {
+		wpa_hexdump(MSG_DEBUG, "  * he_capab",
+			    (u8 *) params->he_capab, params->he_capab_len);
+		if (nla_put(msg, NL80211_ATTR_HE_CAPABILITY,
+			    params->he_capab_len, params->he_capab))
+			goto fail;
+	}
+
+	if (params->he_6ghz_capab) {
+		wpa_hexdump(MSG_DEBUG, "  * he_6ghz_capab",
+			    (u8 *) params->he_6ghz_capab,
+			    sizeof(*params->he_6ghz_capab));
+		if (nla_put(msg, NL80211_ATTR_HE_6GHZ_CAPABILITY,
+			    sizeof(*params->he_6ghz_capab),
+			    params->he_6ghz_capab))
+			goto fail;
+	}
+
+	if (params->eht_capab) {
+		wpa_hexdump(MSG_DEBUG, "  * eht_capab",
+			    (u8 *) params->eht_capab, params->eht_capab_len);
+		if (nla_put(msg, NL80211_ATTR_EHT_CAPABILITY,
+			    params->eht_capab_len, params->eht_capab))
+			goto fail;
+	}
+	if (params->vht_opmode_enabled) {
+		wpa_printf(MSG_DEBUG, "  * opmode=%u", params->vht_opmode);
+		if (nla_put_u8(msg, NL80211_ATTR_OPMODE_NOTIF,
+			       params->vht_opmode))
+			goto fail;
+	}
+
+	ret = send_and_recv_msgs(drv, msg, NULL, NULL, NULL, NULL);
+	msg = NULL;
+	if (ret)
+		wpa_printf(MSG_DEBUG, "nl80211: NL80211_CMD_%s_LINK_STA "
+			   "result: %d (%s)", add ? "ADD" : "MODIFY", ret,
+			   strerror(-ret));
+	if (ret == -EEXIST)
+		ret = 0;
+fail:
+	nlmsg_free(msg);
+	return ret;
 
+}
 
 static int wpa_driver_nl80211_sta_add(void *priv,
 				      struct hostapd_sta_add_params *params)
@@ -5450,6 +5579,17 @@ static int wpa_driver_nl80211_sta_add(vo
 	if (!msg || nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, params->addr))
 		goto fail;
 
+	if (params->mld_addr) {
+		wpa_printf(MSG_DEBUG, "MLD Address " MACSTR, MAC2STR(params->mld_addr));
+		if (nla_put(msg, NL80211_ATTR_MLD_ADDR, ETH_ALEN, params->mld_addr))
+			goto fail;
+	}
+	if (drv->mlo_link_id >= 0 && params->link_id >= 0) {
+		wpa_printf(MSG_DEBUG, "MLO link id %u", params->link_id);
+		if (nla_put_u8(msg, NL80211_ATTR_MLO_LINK_ID, params->link_id))
+			goto fail;
+	}
+
 	/*
 	 * Set the below properties only in one of the following cases:
 	 * 1. New station is added, already associated.
@@ -6160,7 +6300,9 @@ static int wpa_driver_nl80211_hapd_send_
 static int wpa_driver_nl80211_sta_set_flags(void *priv, const u8 *addr,
 					    unsigned int total_flags,
 					    unsigned int flags_or,
-					    unsigned int flags_and)
+					    unsigned int flags_and,
+					    const u8 *mld_addr,
+					    int link_id)
 {
 	struct i802_bss *bss = priv;
 	struct nl_msg *msg;
@@ -6176,6 +6318,17 @@ static int wpa_driver_nl80211_sta_set_fl
 	    nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, addr))
 		goto fail;
 
+	if (mld_addr) {
+		wpa_printf(MSG_DEBUG, "MLD Address " MACSTR, MAC2STR(mld_addr));
+		if (nla_put(msg, NL80211_ATTR_MLD_ADDR, ETH_ALEN, mld_addr))
+			goto fail;
+	}
+	if (link_id >= 0) {
+		wpa_printf(MSG_DEBUG, "MLO link id %u", link_id);
+		if (nla_put_u8(msg, NL80211_ATTR_MLO_LINK_ID, link_id))
+			goto fail;
+	}
+
 	/*
 	 * Backwards compatibility version using NL80211_ATTR_STA_FLAGS. This
 	 * can be removed eventually.
@@ -7987,7 +8140,8 @@ fail:
 
 
 static int i802_set_sta_vlan(struct i802_bss *bss, const u8 *addr,
-			     const char *ifname, int vlan_id)
+			     const char *ifname, int vlan_id,
+			     int link_id)
 {
 	struct wpa_driver_nl80211_data *drv = bss->drv;
 	struct nl_msg *msg;
@@ -8006,6 +8160,11 @@ static int i802_set_sta_vlan(struct i802
 		return -ENOBUFS;
 	}
 
+	if (link_id >= 0 && nla_put_u8(msg, NL80211_ATTR_MLO_LINK_ID, link_id)) {
+		nlmsg_free(msg);
+		return -ENOBUFS;
+	}
+
 	ret = send_and_recv_msgs(drv, msg, NULL, NULL, NULL, NULL);
 	if (ret < 0) {
 		wpa_printf(MSG_ERROR, "nl80211: NL80211_ATTR_STA_VLAN (addr="
@@ -8258,7 +8417,7 @@ static int i802_set_wds_sta(void *priv,
 			wpa_printf(MSG_ERROR, "nl80211: Failed to set WDS STA "
 				   "interface %s up", name);
 		}
-		return i802_set_sta_vlan(priv, addr, name, 0);
+		return i802_set_sta_vlan(priv, addr, name, 0, -1);
 	} else {
 		if (bridge_ifname &&
 		    linux_br_del_if(drv->global->ioctl_sock, bridge_ifname,
@@ -8267,7 +8426,7 @@ static int i802_set_wds_sta(void *priv,
 				   "nl80211: Failed to remove interface %s from bridge %s: %s",
 				   name, bridge_ifname, strerror(errno));
 
-		i802_set_sta_vlan(priv, addr, bss->ifname, 0);
+		i802_set_sta_vlan(priv, addr, bss->ifname, 0, -1);
 		nl80211_remove_iface(drv, if_nametoindex(name));
 		os_memset(&event, 0, sizeof(event));
 		event.wds_sta_interface.sta_addr = addr;
@@ -10449,10 +10608,11 @@ static int driver_nl80211_sta_remove(voi
 
 
 static int driver_nl80211_set_sta_vlan(void *priv, const u8 *addr,
-				       const char *ifname, int vlan_id)
+				       const char *ifname, int vlan_id,
+				       int link_id)
 {
 	struct i802_bss *bss = priv;
-	return i802_set_sta_vlan(bss, addr, ifname, vlan_id);
+	return i802_set_sta_vlan(bss, addr, ifname, vlan_id, link_id);
 }
 
 
@@ -13538,6 +13698,8 @@ const struct wpa_driver_ops wpa_driver_n
 	.get_hw_feature_data = nl80211_get_hw_feature_data,
 	.sta_add = wpa_driver_nl80211_sta_add,
 	.sta_remove = driver_nl80211_sta_remove,
+	.link_sta_add_mod = wpa_driver_nl80211_link_sta_add_modify,
+	.link_sta_remove = wpa_driver_nl80211_link_sta_remove,
 	.tx_control_port = nl80211_tx_control_port,
 	.hapd_send_eapol = wpa_driver_nl80211_hapd_send_eapol,
 	.sta_set_flags = wpa_driver_nl80211_sta_set_flags,
--- a/wpa_supplicant/driver_i.h
+++ b/wpa_supplicant/driver_i.h
@@ -388,12 +388,13 @@ static inline int wpa_drv_hapd_send_eapo
 
 static inline int wpa_drv_sta_set_flags(struct wpa_supplicant *wpa_s,
 					const u8 *addr, int total_flags,
-					int flags_or, int flags_and)
+					int flags_or, int flags_and,
+					const u8 *mld_addr, int link_id)
 {
 	if (wpa_s->driver->sta_set_flags)
 		return wpa_s->driver->sta_set_flags(wpa_s->drv_priv, addr,
 						    total_flags, flags_or,
-						    flags_and);
+						    flags_and, mld_addr, link_id);
 	return -1;
 }
 
--- a/wpa_supplicant/ibss_rsn.c
+++ b/wpa_supplicant/ibss_rsn.c
@@ -391,12 +391,12 @@ static void ibss_set_sta_authorized(stru
 	if (authorized) {
 		res = wpa_drv_sta_set_flags(ibss_rsn->wpa_s, peer->addr,
 					    WPA_STA_AUTHORIZED,
-					    WPA_STA_AUTHORIZED, ~0);
+					    WPA_STA_AUTHORIZED, ~0, NULL, -1);
 		wpa_printf(MSG_DEBUG, "AUTH: " MACSTR " authorizing port",
 			   MAC2STR(peer->addr));
 	} else {
 		res = wpa_drv_sta_set_flags(ibss_rsn->wpa_s, peer->addr,
-					    0, 0, ~WPA_STA_AUTHORIZED);
+					    0, 0, ~WPA_STA_AUTHORIZED, NULL, -1);
 		wpa_printf(MSG_DEBUG, "AUTH: " MACSTR " unauthorizing port",
 			   MAC2STR(peer->addr));
 	}
