From 912e8b685dee949c80f6ef6ce2a39dad627b3d16 Mon Sep 17 00:00:00 2001
From: Aaradhana Sahu <quic_aarasahu@quicinc.com>
Date: Fri, 10 Feb 2023 15:28:42 +0530
Subject: [PATCH] cfg80211: add rts threshold support for MLO

Currently, all vaps rts threshold update when we run
"iw phy<x> set rts <rts threshold value|off>" for MLO.
But, should be update only for one vap not for all vaps,
this is happen because in MLO case we have only one phy.

So, add changes to support rts threshold by parsing link id
and moving iw phy command to iw dev command for MLO.

command:
iw dev wlan# set rts -l <link_id> <rts threshold|off>

Signed-off-by: Aaradhana Sahu <quic_aarasahu@quicinc.com>
---
 include/net/cfg80211.h     |  3 ++-
 net/wireless/nl80211.c     | 23 ++++++++++++++++++++++-
 net/wireless/rdev-ops.h    |  7 ++++---
 net/wireless/trace.h       |  5 +++--
 net/wireless/wext-compat.c |  6 +++---
 5 files changed, 34 insertions(+), 10 deletions(-)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index 34e1e75..cd8d908 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -4559,7 +4559,8 @@ struct cfg80211_ops {
 	int	(*set_mcast_rate)(struct wiphy *wiphy, struct net_device *dev,
 				  int rate[NUM_NL80211_BANDS]);
 
-	int	(*set_wiphy_params)(struct wiphy *wiphy, u32 changed);
+	int	(*set_wiphy_params)(struct wiphy *wiphy, u32 changed,
+				    struct wireless_dev *wdev, unsigned int link_id);
 
 	int	(*set_tx_power)(struct wiphy *wiphy, struct wireless_dev *wdev,
 				enum nl80211_tx_power_setting type, int mbm,
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 5bacebc..58a61a3 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -3978,6 +3978,8 @@ static int nl80211_set_wiphy(struct sk_buff *skb, struct genl_info *info)
 		u32 old_frag_threshold, old_rts_threshold;
 		u8 old_coverage_class;
 		u32 old_txq_limit, old_txq_memory_limit, old_txq_quantum;
+		struct wireless_dev *rts_wdev = wdev;
+		unsigned int link;
 
 		if (!rdev->ops->set_wiphy_params) {
 			result = -EOPNOTSUPP;
@@ -4010,7 +4012,26 @@ static int nl80211_set_wiphy(struct sk_buff *skb, struct genl_info *info)
 		if (changed & WIPHY_PARAM_TXQ_QUANTUM)
 			rdev->wiphy.txq_quantum = txq_quantum;
 
-		result = rdev_set_wiphy_params(rdev, changed);
+		if (rts_wdev && rts_wdev->valid_links) {
+			if (!info->attrs[NL80211_ATTR_MLO_LINK_ID]) {
+				result = -EINVAL;
+				goto out;
+			}
+
+			link = nla_get_u8(info->attrs[NL80211_ATTR_MLO_LINK_ID]);
+
+			if (!(rts_wdev->valid_links & BIT(link))) {
+				result = -ENOLINK;
+				goto out;
+			}
+			result = rdev_set_wiphy_params(rdev, changed, rts_wdev, link);
+		} else {
+			if (!info->attrs[NL80211_ATTR_MLO_LINK_ID])
+				result = rdev_set_wiphy_params(rdev, changed, rts_wdev, 0);
+			else
+				result = -EINVAL;
+		}
+
 		if (result) {
 			rdev->wiphy.retry_short = old_retry_short;
 			rdev->wiphy.retry_long = old_retry_long;
diff --git a/net/wireless/rdev-ops.h b/net/wireless/rdev-ops.h
index 66f5db4..3e78ceb 100644
--- a/net/wireless/rdev-ops.h
+++ b/net/wireless/rdev-ops.h
@@ -560,15 +560,16 @@ static inline int rdev_leave_ibss(struct cfg80211_registered_device *rdev,
 }
 
 static inline int
-rdev_set_wiphy_params(struct cfg80211_registered_device *rdev, u32 changed)
+rdev_set_wiphy_params(struct cfg80211_registered_device *rdev, u32 changed,
+		      struct wireless_dev *wdev, unsigned int link_id)
 {
 	int ret;
 
 	if (!rdev->ops->set_wiphy_params)
 		return -EOPNOTSUPP;
 
-	trace_rdev_set_wiphy_params(&rdev->wiphy, changed);
-	ret = rdev->ops->set_wiphy_params(&rdev->wiphy, changed);
+	trace_rdev_set_wiphy_params(&rdev->wiphy, changed, wdev, link_id);
+	ret = rdev->ops->set_wiphy_params(&rdev->wiphy, changed, wdev, link_id);
 	trace_rdev_return_int(&rdev->wiphy, ret);
 	return ret;
 }
diff --git a/net/wireless/trace.h b/net/wireless/trace.h
index e125e61..ef8c0cd 100644
--- a/net/wireless/trace.h
+++ b/net/wireless/trace.h
@@ -1568,8 +1568,9 @@ TRACE_EVENT(rdev_join_ocb,
 );
 
 TRACE_EVENT(rdev_set_wiphy_params,
-	TP_PROTO(struct wiphy *wiphy, u32 changed),
-	TP_ARGS(wiphy, changed),
+	TP_PROTO(struct wiphy *wiphy, u32 changed, struct wireless_dev *wdev,
+		unsigned int link_id),
+	TP_ARGS(wiphy, changed, wdev, link_id),
 	TP_STRUCT__entry(
 		WIPHY_ENTRY
 		__field(u32, changed)
diff --git a/net/wireless/wext-compat.c b/net/wireless/wext-compat.c
index 627aff0..46eaccf 100644
--- a/net/wireless/wext-compat.c
+++ b/net/wireless/wext-compat.c
@@ -268,7 +268,7 @@ int cfg80211_wext_siwrts(struct net_device *dev,
 		wdev->wiphy->rts_threshold = rts->value;
 	}
 
-	err = rdev_set_wiphy_params(rdev, WIPHY_PARAM_RTS_THRESHOLD);
+	err = rdev_set_wiphy_params(rdev, WIPHY_PARAM_RTS_THRESHOLD, wdev, 0);
 
 	if (err)
 		wdev->wiphy->rts_threshold = orts;
@@ -313,7 +313,7 @@ int cfg80211_wext_siwfrag(struct net_device *dev,
 		wdev->wiphy->frag_threshold = frag->value & ~0x1;
 	}
 
-	err = rdev_set_wiphy_params(rdev, WIPHY_PARAM_FRAG_THRESHOLD);
+	err = rdev_set_wiphy_params(rdev, WIPHY_PARAM_FRAG_THRESHOLD, wdev, 0);
 	if (err)
 		wdev->wiphy->frag_threshold = ofrag;
 out:
@@ -366,7 +366,7 @@ static int cfg80211_wext_siwretry(struct net_device *dev,
 		changed |= WIPHY_PARAM_RETRY_SHORT;
 	}
 
-	err = rdev_set_wiphy_params(rdev, changed);
+	err = rdev_set_wiphy_params(rdev, changed, wdev, 0);
 	if (err) {
 		wdev->wiphy->retry_short = oshort;
 		wdev->wiphy->retry_long = olong;
-- 
2.17.1

