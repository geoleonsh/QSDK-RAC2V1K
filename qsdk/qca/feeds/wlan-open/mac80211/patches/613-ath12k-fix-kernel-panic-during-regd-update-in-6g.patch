From dec47afa581324756fd33fc0451fa5ed0f41b1d1 Mon Sep 17 00:00:00 2001
From: Balamurugan Selvarajan <quic_bselvara@quicinc.com>
Date: Fri, 8 Apr 2022 12:51:32 +0530
Subject: [PATCH] ath12k: fix kernel panic during regd update in 6g

during regd update for 6g, the cfg80211 parses the
band->chan_6g in cfg80211 which is causing null
dereference. Handled this as part of driver.

The regulatory patches for 6g will be brought in separately.

Signed-off-by: Balamurugan Selvarajan <quic_bselvara@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h | 13 ++++++--
 drivers/net/wireless/ath/ath12k/mac.c  | 45 +++++++++++++++++++-------
 2 files changed, 44 insertions(+), 14 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index a45a64e..374b6f3 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -444,9 +444,16 @@ struct ath12k_sta {
 #endif
 };
 
-#define ATH12K_MIN_5G_FREQ 4150
-#define ATH12K_MIN_6G_FREQ 5925
-#define ATH12K_MAX_6G_FREQ 7115
+#define ATH12K_HALF_20MHZ_BW 10
+#define ATH12K_5G_MIN_CENTER 4900
+#define ATH12K_5G_MAX_CENTER 5920
+#define ATH12K_6G_MIN_CENTER 5935
+#define ATH12K_6G_MAX_CENTER 7115
+#define ATH12K_MIN_5G_FREQ (ATH12K_5G_MIN_CENTER - ATH12K_HALF_20MHZ_BW)
+#define ATH12K_MAX_5G_FREQ (ATH12K_5G_MAX_CENTER + ATH12K_HALF_20MHZ_BW)
+#define ATH12K_MIN_6G_FREQ (ATH12K_6G_MIN_CENTER - ATH12K_HALF_20MHZ_BW)
+#define ATH12K_MAX_6G_FREQ (ATH12K_6G_MAX_CENTER + ATH12K_HALF_20MHZ_BW)
+
 #define ATH12K_NUM_CHANS 101
 #define ATH12K_MAX_5G_CHAN 173
 
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index b7131ef..0bed832 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -8434,6 +8434,9 @@ static int ath12k_mac_setup_channels_rates(struct ath12k *ar,
 	struct ath12k_hal_reg_capabilities_ext *reg_cap;
 	void *channels;
 	u32 phy_id;
+	struct ieee80211_6ghz_channel *chan_6g;
+	int i = 0;
+
 
 	BUILD_BUG_ON((ARRAY_SIZE(ath12k_2ghz_channels) +
 		      ARRAY_SIZE(ath12k_5ghz_channels) +
@@ -8467,28 +8470,48 @@ static int ath12k_mac_setup_channels_rates(struct ath12k *ar,
 	}
 
 	if (supported_bands & WMI_HOST_WLAN_5G_CAP) {
-		if (reg_cap->high_5ghz_chan >= ATH12K_MAX_6G_FREQ) {
-			channels = kmemdup(ath12k_6ghz_channels,
-					   sizeof(ath12k_6ghz_channels), GFP_KERNEL);
-			if (!channels) {
-				kfree(ar->mac.sbands[NL80211_BAND_2GHZ].channels);
-				return -ENOMEM;
+		if (reg_cap->high_5ghz_chan <= ATH12K_MAX_6G_FREQ &&
+		    reg_cap->low_5ghz_chan >= ATH12K_MIN_6G_FREQ) {
+			band = &ar->mac.sbands[NL80211_BAND_6GHZ];
+			band->band = NL80211_BAND_6GHZ;
+			for (i = 0; i < NL80211_REG_NUM_POWER_MODES; i++) {
+				channels = kmemdup(ath12k_6ghz_channels,
+						   sizeof(ath12k_6ghz_channels), GFP_KERNEL);
+				chan_6g = kzalloc(sizeof(*chan_6g), GFP_ATOMIC);
+				if (!channels || !chan_6g) {
+					kfree(ar->mac.sbands[NL80211_BAND_2GHZ].channels);
+					break;
+				}
+				chan_6g->channels = channels;
+				chan_6g->n_channels = ARRAY_SIZE(ath12k_6ghz_channels);
+				band->chan_6g[i] = chan_6g;
+				channels = NULL;
+				chan_6g = NULL;
 			}
 
+			if (i < NL80211_REG_NUM_POWER_MODES) {
+				for (i = i - 1; i >= 0; i--) {
+					chan_6g = band->chan_6g[i];
+					kfree(chan_6g->channels);
+					kfree(chan_6g);
+				}
+				return -ENOMEM;
+			}
 			ar->supports_6ghz = true;
-			band = &ar->mac.sbands[NL80211_BAND_6GHZ];
-			band->band = NL80211_BAND_6GHZ;
-			band->n_channels = ARRAY_SIZE(ath12k_6ghz_channels);
-			band->channels = channels;
 			band->n_bitrates = ath12k_a_rates_size;
 			band->bitrates = ath12k_a_rates;
 			ar->hw->wiphy->bands[NL80211_BAND_6GHZ] = band;
 			ath12k_mac_update_ch_list(ar, band,
 						  reg_cap->low_5ghz_chan,
 						  reg_cap->high_5ghz_chan);
+
+			band->n_channels = band->chan_6g[0]->n_channels;
+			band->channels = band->chan_6g[0]->channels;
 		}
 
-		if (reg_cap->low_5ghz_chan < ATH12K_MIN_6G_FREQ) {
+		if ((reg_cap->low_5ghz_chan >= ATH12K_MIN_5G_FREQ) &&
+		    ((reg_cap->high_5ghz_chan < ATH12K_MAX_5G_FREQ) ||
+		    ((reg_cap->high_5ghz_chan - ATH12K_5G_MAX_CENTER) < (ATH12K_HALF_20MHZ_BW * 2)))) {
 			channels = kmemdup(ath12k_5ghz_channels,
 					   sizeof(ath12k_5ghz_channels),
 					   GFP_KERNEL);
-- 
2.17.1

