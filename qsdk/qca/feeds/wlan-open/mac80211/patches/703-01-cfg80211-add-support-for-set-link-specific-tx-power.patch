From 923be8cd3d5d81390b76dd88f9b5c23852cf5339 Mon Sep 17 00:00:00 2001
From: Aaradhana Sahu <quic_aarasahu@quicinc.com>
Date: Fri, 16 Dec 2022 15:44:23 +0530
Subject: [PATCH] cfg80211: add support for set link specific tx power

Currently, we set tx power form user space according to
phy and each phy has particular band and tx power,but
in multi-link operation each phy has more than one
link and each link is working on different band, tx power.

So, add support set tx power according to link id.

Signed-off-by: Aaradhana Sahu <quic_aarasahu@quicinc.com>
---
 include/net/cfg80211.h     |  3 ++-
 net/wireless/nl80211.c     | 28 ++++++++++++++++++++++++----
 net/wireless/rdev-ops.h    | 10 +++++++---
 net/wireless/trace.h       |  5 +++--
 net/wireless/wext-compat.c |  2 +-
 5 files changed, 37 insertions(+), 11 deletions(-)

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -4562,7 +4562,8 @@ struct cfg80211_ops {
 	int	(*set_wiphy_params)(struct wiphy *wiphy, u32 changed);
 
 	int	(*set_tx_power)(struct wiphy *wiphy, struct wireless_dev *wdev,
-				enum nl80211_tx_power_setting type, int mbm);
+				enum nl80211_tx_power_setting type, int mbm,
+				unsigned int link_id);
 	int	(*get_tx_power)(struct wiphy *wiphy, struct wireless_dev *wdev,
 				unsigned int link_id, int *dbm);
 
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -3792,6 +3792,7 @@ static int nl80211_set_wiphy(struct sk_b
 		struct wireless_dev *txp_wdev = wdev;
 		enum nl80211_tx_power_setting type;
 		int idx, mbm = 0;
+		unsigned int link_id;
 
 		if (!(rdev->wiphy.features & NL80211_FEATURE_VIF_TXPOWER))
 			txp_wdev = NULL;
@@ -3814,10 +3815,52 @@ static int nl80211_set_wiphy(struct sk_b
 			idx = NL80211_ATTR_WIPHY_TX_POWER_LEVEL;
 			mbm = nla_get_u32(info->attrs[idx]);
 		}
-
-		result = rdev_set_tx_power(rdev, txp_wdev, type, mbm);
-		if (result)
-			goto out;
+		if (txp_wdev && txp_wdev->valid_links) {
+			if (!info->attrs[NL80211_ATTR_MLO_LINK_ID]) {
+				result = -EINVAL;
+				goto out;
+			}
+			link_id = nla_get_u8(info->attrs[NL80211_ATTR_MLO_LINK_ID]);
+			if (!(txp_wdev->valid_links & BIT(link_id))) {
+				result = -ENOLINK;
+				goto out;
+			}
+
+			wdev_lock(txp_wdev);
+			result = rdev_set_tx_power(rdev, txp_wdev, type, mbm, link_id);
+			if (result) {
+				wdev_unlock(txp_wdev);
+				goto out;
+			}
+			wdev_unlock(txp_wdev);
+		} else {
+			if (!info->attrs[NL80211_ATTR_MLO_LINK_ID]) {
+				if (txp_wdev) {
+					wdev_lock(txp_wdev);
+					result = rdev_set_tx_power(rdev, txp_wdev,
+								   type, mbm, 0);
+					if (result) {
+						wdev_unlock(txp_wdev);
+						goto out;
+					}
+					wdev_unlock(txp_wdev);
+				} else {
+					if (!rdev->wiphy.num_hw) {
+						result = rdev_set_tx_power(rdev, NULL,
+									   type, mbm, 0);
+
+						if (result)
+							goto out;
+					} else {
+						result = -EOPNOTSUPP;
+						goto out;
+					}
+				}
+			} else {
+				result = -EINVAL;
+				goto out;
+			}
+               }
 	}
 
 	if (info->attrs[NL80211_ATTR_WIPHY_ANTENNA_TX] &&
--- a/net/wireless/rdev-ops.h
+++ b/net/wireless/rdev-ops.h
@@ -575,11 +575,13 @@ rdev_set_wiphy_params(struct cfg80211_re
 
 static inline int rdev_set_tx_power(struct cfg80211_registered_device *rdev,
 				    struct wireless_dev *wdev,
-				    enum nl80211_tx_power_setting type, int mbm)
+				    enum nl80211_tx_power_setting type,
+				    int mbm, unsigned int link_id)
 {
 	int ret;
-	trace_rdev_set_tx_power(&rdev->wiphy, wdev, type, mbm);
-	ret = rdev->ops->set_tx_power(&rdev->wiphy, wdev, type, mbm);
+
+	trace_rdev_set_tx_power(&rdev->wiphy, wdev, type, mbm, link_id);
+	ret = rdev->ops->set_tx_power(&rdev->wiphy, wdev, type, mbm, link_id);
 	trace_rdev_return_int(&rdev->wiphy, ret);
 	return ret;
 }
--- a/net/wireless/trace.h
+++ b/net/wireless/trace.h
@@ -1590,22 +1590,25 @@ DEFINE_EVENT(wiphy_wdev_evt, rdev_get_tx
 
 TRACE_EVENT(rdev_set_tx_power,
 	TP_PROTO(struct wiphy *wiphy, struct wireless_dev *wdev,
-		 enum nl80211_tx_power_setting type, int mbm),
-	TP_ARGS(wiphy, wdev, type, mbm),
+		 enum nl80211_tx_power_setting type, int mbm,
+		 unsigned int link_id),
+	TP_ARGS(wiphy, wdev, type, mbm, link_id),
 	TP_STRUCT__entry(
 		WIPHY_ENTRY
 		WDEV_ENTRY
 		__field(enum nl80211_tx_power_setting, type)
 		__field(int, mbm)
+		__field(unsigned int, link_id)
 	),
 	TP_fast_assign(
 		WIPHY_ASSIGN;
 		WDEV_ASSIGN;
 		__entry->type = type;
 		__entry->mbm = mbm;
+		__entry->link_id = link_id
 	),
-	TP_printk(WIPHY_PR_FMT ", " WDEV_PR_FMT ", type: %u, mbm: %d",
-		  WIPHY_PR_ARG, WDEV_PR_ARG,__entry->type, __entry->mbm)
+	TP_printk(WIPHY_PR_FMT ", " WDEV_PR_FMT ", type: %u, mbm: %d, link_id: %d",
+		  WIPHY_PR_ARG, WDEV_PR_ARG,__entry->type, __entry->mbm, __entry->link_id)
 );
 
 TRACE_EVENT(rdev_return_int_int,
--- a/net/wireless/wext-compat.c
+++ b/net/wireless/wext-compat.c
@@ -952,7 +952,7 @@ static int cfg80211_wext_siwtxpower(stru
 	}
 
 	wiphy_lock(&rdev->wiphy);
-	ret = rdev_set_tx_power(rdev, wdev, type, DBM_TO_MBM(dbm));
+	ret = rdev_set_tx_power(rdev, wdev, type, DBM_TO_MBM(dbm), 0);
 	wiphy_unlock(&rdev->wiphy);
 
 	return ret;
