From 2f15a450cff5918f2f1c5d8be92c2930d0aacd5e Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Sun, 7 May 2023 23:05:14 +0530
Subject: [PATCH] ath12k: add ring descriptor and srng dump prints

When the destination ring descriptors are not valid, print the ring descriptor
content and crash the host rather than reaping next descriptor.
This helps hardware to debug the exact problematic descriptor
from the crash dump.

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debug.c | 31 +++++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/debug.h | 17 ++++++++++++++
 drivers/net/wireless/ath/ath12k/dp_rx.c |  8 +++++--
 drivers/net/wireless/ath/ath12k/hw.c    |  4 ++++
 drivers/net/wireless/ath/ath12k/hw.h    |  1 +
 5 files changed, 59 insertions(+), 2 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/debug.c
+++ b/drivers/net/wireless/ath/ath12k/debug.c
@@ -112,4 +112,35 @@ void ath12k_dbg_dump(struct ath12k_base
 	}
 }
 
+void ath12k_err_dump(struct ath12k_base *ab, const char *msg,
+		     const char *prefix, const void *buf,
+		     size_t len, struct hal_srng *srng)
+{
+	char linebuf[512];
+	size_t linebuflen;
+	const void *ptr;
+
+	if (msg)
+		ath12k_err(ab, msg);
+
+	for (ptr = buf; (ptr - buf) < len; ptr += 16) {
+		linebuflen = 0;
+		linebuflen += scnprintf(linebuf + linebuflen,
+					sizeof(linebuf) - linebuflen,
+					"%s%08x: ",
+					(prefix ? prefix : ""),
+					(unsigned int)(ptr - buf));
+		hex_dump_to_buffer(ptr, len - (ptr - buf), 16, 1,
+				   linebuf + linebuflen,
+				   sizeof(linebuf) - linebuflen, true);
+		dev_err(ab->dev, "%s\n", linebuf);
+	}
+
+	if (srng->ring_dir == HAL_SRNG_DIR_DST)
+		dev_err(ab->dev, "ring_base_vaddr=%px tp=0x%X size=0x%X cached_hp=0x%X",
+			srng->ring_base_vaddr,
+			srng->u.dst_ring.tp,
+			srng->ring_size,
+			srng->u.dst_ring.cached_hp);
+}
 #endif /* CPTCFG_ATH12K_DEBUG */
--- a/drivers/net/wireless/ath/ath12k/debug.h
+++ b/drivers/net/wireless/ath/ath12k/debug.h
@@ -51,6 +51,9 @@ void ath12k_dbg_dump(struct ath12k_base
 		     enum ath12k_debug_mask mask,
 		     const char *msg, const char *prefix,
 		     const void *buf, size_t len);
+void ath12k_err_dump(struct ath12k_base *ab, const char *msg,
+                     const char *prefix, const void *buf,
+                     size_t len, struct hal_srng *srng);
 #else /* CPTCFG_ATH12K_DEBUG */
 static inline int __ath12k_dbg(struct ath12k_base *ab,
 			       enum ath12k_debug_mask dbg_mask,
@@ -65,6 +68,12 @@ static inline void ath12k_dbg_dump(struc
 				   const void *buf, size_t len)
 {
 }
+
+static inline void ath12k_err_dump(struct ath12k_base *ab, const char *msg,
+                     const char *prefix, const void *buf,
+                     size_t len, struct hal_srng *srng)
+{
+}
 #endif /* CPTCFG_ATH12K_DEBUG */
 
 #define ath12k_dbg(ar, dbg_mask, fmt, ...)			\
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -4214,6 +4214,7 @@ int ath12k_dp_rx_process_err(struct ath1
 	dma_addr_t paddr;
 	u32 *desc;
 	bool is_frag, drop = false;
+	char buf[64] = {0};
 
 	tot_n_bufs_reaped = 0;
 	quota = budget;
@@ -4236,9 +4237,10 @@ int ath12k_dp_rx_process_err(struct ath1
 		ret = ath12k_hal_desc_reo_parse_err(ab, desc, &paddr,
 						    &desc_bank);
 		if (ret) {
-			ath12k_warn(ab, "failed to parse error reo desc %d\n",
-				    ret);
-			continue;
+			scnprintf(buf, sizeof(buf), "failed to parse error reo desc %d\n", ret);
+			ath12k_err_dump(ab, buf, "rx err desc: ", reo_desc,
+					sizeof(*reo_desc), srng);
+			BUG_ON(1);
 		}
 		link_desc_va = link_desc_banks[desc_bank].vaddr +
 			       (paddr - link_desc_banks[desc_bank].paddr);
@@ -4635,6 +4637,7 @@ int ath12k_dp_rx_process_wbm_err(struct
 	struct ath12k_soc_dp_stats *soc_stats = &ab->soc_stats;
 	int ret;
 	u8 src_link_id;
+	char buf[64] = {0};
 
 	__skb_queue_head_init(&msdu_list);
 
@@ -4652,10 +4655,10 @@ int ath12k_dp_rx_process_wbm_err(struct
 
 		ret = ath12k_hal_wbm_desc_parse_err(ab, rx_desc, &err_info);
 		if (ret) {
-			ath12k_warn(ab,
-				    "failed to parse rx error in wbm_rel ring desc %d\n",
-				    ret);
-			continue;
+			scnprintf(buf, sizeof(buf), "failed to parse rx error in wbm_rel ring desc %d\n", ret);
+			ath12k_err_dump(ab, buf, "wbm err desc: ", rx_desc,
+					sizeof(struct hal_wbm_release_ring), srng);
+			BUG_ON(1);
 		}
 
 		desc_info = (struct ath12k_rx_desc_info *)err_info.rx_desc;
--- a/drivers/net/wireless/ath/ath12k/dp_mon.c
+++ b/drivers/net/wireless/ath/ath12k/dp_mon.c
@@ -2552,6 +2552,7 @@ int ath12k_dp_mon_buf_replenish(struct a
 		mon_buf->paddr_lo = lower_32_bits(paddr);
 		mon_buf->paddr_hi = upper_32_bits(paddr);
 		mon_buf->cookie = cookie;
+		mon_buf->magic = DP_MON_MAGIC_VALUE;
 
 		req_entries--;
 	}
@@ -3648,6 +3649,7 @@ int ath12k_dp_mon_srng_process(struct at
 	u64 cookie;
 	u32 hal_status, end_reason, ppdu_id, end_offset;
 	int num_buffs_reaped = 0, srng_id, buf_id;
+	char buf[64] = {0};
 
 	__skb_queue_head_init(&skb_list);
 
@@ -3676,6 +3678,13 @@ int ath12k_dp_mon_srng_process(struct at
 			goto move_next;
 		}
 
+		if (unlikely(mon_dst_desc->magic != DP_MON_MAGIC_VALUE)) {
+			scnprintf(buf, sizeof(buf), "invalid mon dest desc in mon srng process\n");
+			ath12k_err_dump(ab, buf, "mon dest desc: ", mon_dst_desc,
+					sizeof(*mon_dst_desc), srng);
+			BUG_ON(1);
+		}
+
 		cookie = mon_dst_desc->cookie;
 		ppdu_id = mon_dst_desc->ppdu_id;
 		buf_id = u32_get_bits(cookie, DP_RXDMA_BUF_COOKIE_BUF_ID);
@@ -3815,6 +3824,7 @@ int ath12k_dp_mon_rx_process_stats(struc
 	int num_buffs_reaped = 0, srng_id, buf_id;
 	u32 hal_status, rx_buf_sz, end_reason, end_offset;
 	u16 log_type = 0;
+	char buf[64] = {0};
 
 	__skb_queue_head_init(&skb_list);
 
@@ -3837,6 +3847,13 @@ int ath12k_dp_mon_rx_process_stats(struc
 			goto move_next;
 		}
 
+		if (unlikely(mon_dst_desc->magic != DP_MON_MAGIC_VALUE)) {
+			scnprintf(buf, sizeof(buf), "invalid mon dest desc in mon stats process\n");
+			ath12k_err_dump(ab, buf, "mon dest desc: ", mon_dst_desc,
+					sizeof(*mon_dst_desc), srng);
+			BUG_ON(1);
+		}
+
 		cookie = mon_dst_desc->cookie;
 		buf_id = u32_get_bits(cookie, DP_RXDMA_BUF_COOKIE_BUF_ID);
 
--- a/drivers/net/wireless/ath/ath12k/dp_mon.h
+++ b/drivers/net/wireless/ath/ath12k/dp_mon.h
@@ -15,6 +15,8 @@
 
 #define ATH12K_WIFIRX_DOT11_OFFSET	5
 
+#define DP_MON_MAGIC_VALUE	0xDECAFEED
+
 enum dp_mon_tx_ppdu_info_type {
 	DP_MON_TX_PROT_PPDU_INFO,
 	DP_MON_TX_DATA_PPDU_INFO
--- a/drivers/net/wireless/ath/ath12k/hal_desc.h
+++ b/drivers/net/wireless/ath/ath12k/hal_desc.h
@@ -2903,7 +2903,8 @@ struct hal_tcl_entrance_from_ppe_ring {
 struct hal_mon_buf_ring {
 	u32 paddr_lo;
 	u32 paddr_hi;
-	u64 cookie;
+	u32 cookie;
+	u32 magic;
 };
 
 /* hal_mon_buf_ring
@@ -2930,7 +2931,7 @@ struct hal_mon_buf_ring {
 
 struct hal_mon_dest_desc {
 	u32 cookie;
-	u32 reserved;
+	u32 magic;
 	u32 ppdu_id;
 	u32 info0;
 };
