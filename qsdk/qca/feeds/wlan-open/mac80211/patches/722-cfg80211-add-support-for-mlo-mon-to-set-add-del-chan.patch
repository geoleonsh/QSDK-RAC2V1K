From 642959241c8e5830ce68b0cb8a0ad818d8550e0c Mon Sep 17 00:00:00 2001
From: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
Date: Sun, 26 Mar 2023 00:38:33 +0530
Subject: [PATCH] cfg80211: add support for mlo mon to set/add/del channel

This change is to add support for mlo monitor with set, add, and
del.

To capture multiple channels in a single netdev execute following cmd
iw phy0 interface add mon0 type monitor

Either the channel can be set before IFUP or default channel will be
configured.

To stop capturing on a channel in mlo mode, set the current channel
again to stop capturing it.

For instance, if mon0 is capturing 2ghz(Channel : 6) and 5ghz (Channel :
36), to stop capturing on 5ghz set channel 36 on mon0 to stop capturing
it.

Signed-off-by: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
---
 include/net/cfg80211.h       | 17 +++++++++++++++++
 include/uapi/linux/nl80211.h |  9 +++++++++
 net/wireless/chan.c          | 22 ++++++++++++++++++++++
 net/wireless/core.h          |  6 ++++++
 net/wireless/nl80211.c       |  9 ++++++++-
 net/wireless/rdev-ops.h      | 22 ++++++++++++++++++++++
 net/wireless/trace.h         | 32 ++++++++++++++++++++++++++++++++
 net/wireless/util.c          | 20 ++++++++++++++++++++
 8 files changed, 136 insertions(+), 1 deletion(-)

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -4581,6 +4581,12 @@ struct cfg80211_ops {
 	int	(*set_monitor_channel)(struct wiphy *wiphy,
 				       struct cfg80211_chan_def *chandef);
 
+	int	(*add_monitor_channel)(struct wiphy *wiphy,
+				       struct cfg80211_chan_def *chandef);
+
+	int	(*del_monitor_channel)(struct wiphy *wiphy,
+				       struct cfg80211_chan_def *chandef);
+
 	int	(*scan)(struct wiphy *wiphy,
 			struct cfg80211_scan_request *request);
 	void	(*abort_scan)(struct wiphy *wiphy, struct wireless_dev *wdev);
@@ -8956,6 +8962,17 @@ bool cfg80211_per_hw_iface_comb_advertis
 int cfg80211_get_hw_idx_by_chan(struct wiphy *wiphy,
 				const struct ieee80211_channel *chan);
 
+/**
+ * cfg80211_get_hw_idx_by_freq - get the hw index by the frequency
+ *
+ * @wiphy: the wiphy
+ * @freq: Frequency for which the matching hw idx is required
+ *
+ * returns -1 in case the freq is not supported by any of the constituent
+ *	hw
+ */
+int cfg80211_get_hw_idx_by_freq(struct wiphy *wiphy, int freq);
+
 /*
  * cfg80211_stop_iface - trigger interface disconnection
  *
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@ -2820,6 +2820,12 @@ enum nl80211_commands {
  *      corresponds to the lowest 20MHZ channel. Each bit set to 1
  *      indicates that radar is detected in that sub-channel.
  *
+ * @NL80211_ATTR_ADD_MULTI_CHAN: Add channel to the radio, this is used
+ *  for monitor interface (u32).
+ *
+ * @NL80211_ATTR_DEL_MULTI_CHAN: Delete channel from the radio, this is used
+ *  for monitor interface (u32).
+ *
  * @NUM_NL80211_ATTR: total number of nl80211_attrs available
  * @NL80211_ATTR_MAX: highest attribute number currently defined
  * @__NL80211_ATTR_AFTER_LAST: internal use
@@ -3375,6 +3381,9 @@ enum nl80211_attrs {
 	NL80211_ATTR_RADAR_BITMAP,
 
 	NL80211_ATTR_EHT_240MHZ_CAPABILITY,
+
+	NL80211_ATTR_ADD_MULTI_CHAN,
+	NL80211_ATTR_DEL_MULTI_CHAN,
 	/* add attributes here, update the policy in nl80211.c */
 
 	__NL80211_ATTR_AFTER_LAST,
--- a/net/wireless/chan.c
+++ b/net/wireless/chan.c
@@ -1585,6 +1585,28 @@ int cfg80211_set_monitor_channel(struct
 	return rdev_set_monitor_channel(rdev, chandef);
 }
 
+int cfg80211_add_monitor_channel(struct cfg80211_registered_device *rdev,
+				 struct cfg80211_chan_def *chandef)
+{
+	if (!rdev->ops->add_monitor_channel)
+		return -EOPNOTSUPP;
+	if (!cfg80211_has_monitors_only(rdev))
+		return -EBUSY;
+
+	return rdev_add_monitor_channel(rdev, chandef);
+}
+
+int cfg80211_del_monitor_channel(struct cfg80211_registered_device *rdev,
+				 struct cfg80211_chan_def *chandef)
+{
+	if (!rdev->ops->del_monitor_channel)
+		return -EOPNOTSUPP;
+	if (!cfg80211_has_monitors_only(rdev))
+		return -EBUSY;
+
+	return rdev_del_monitor_channel(rdev, chandef);
+}
+
 bool cfg80211_any_usable_channels(struct wiphy *wiphy,
 				  unsigned long sband_mask,
 				  u32 prohibited_flags)
--- a/net/wireless/core.h
+++ b/net/wireless/core.h
@@ -515,6 +515,12 @@ static inline unsigned int elapsed_jiffi
 int cfg80211_set_monitor_channel(struct cfg80211_registered_device *rdev,
 				 struct cfg80211_chan_def *chandef);
 
+int cfg80211_add_monitor_channel(struct cfg80211_registered_device *rdev,
+				 struct cfg80211_chan_def *chandef);
+
+int cfg80211_del_monitor_channel(struct cfg80211_registered_device *rdev,
+				 struct cfg80211_chan_def *chandef);
+
 int ieee80211_get_ratemask(struct ieee80211_supported_band *sband,
 			   const u8 *rates, unsigned int n_rates,
 			   u32 *mask);
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -873,6 +873,8 @@ static const struct nla_policy nl80211_p
 			{ .type = NLA_BINARY,
 			  .len = NL80211_EHT240_MAX_CAPABILITY_LEN },
 #endif
+	[NL80211_ATTR_ADD_MULTI_CHAN] = { .type = NLA_U32 },
+	[NL80211_ATTR_DEL_MULTI_CHAN] = { .type = NLA_U32 },
 };
 
 /* policy for the key attributes */
@@ -3633,7 +3635,12 @@ static int __nl80211_set_channel(struct
 	case NL80211_IFTYPE_MESH_POINT:
 		return cfg80211_set_mesh_channel(rdev, wdev, &chandef);
 	case NL80211_IFTYPE_MONITOR:
-		return cfg80211_set_monitor_channel(rdev, &chandef);
+		if (info->attrs[NL80211_ATTR_ADD_MULTI_CHAN])
+			return cfg80211_add_monitor_channel(rdev, &chandef);
+		else if (info->attrs[NL80211_ATTR_DEL_MULTI_CHAN])
+			return cfg80211_del_monitor_channel(rdev, &chandef);
+		else
+			return cfg80211_set_monitor_channel(rdev, &chandef);
 	default:
 		break;
 	}
--- a/net/wireless/rdev-ops.h
+++ b/net/wireless/rdev-ops.h
@@ -442,6 +442,28 @@ rdev_set_monitor_channel(struct cfg80211
 	return ret;
 }
 
+static inline int
+rdev_add_monitor_channel(struct cfg80211_registered_device *rdev,
+			 struct cfg80211_chan_def *chandef)
+{
+	int ret;
+	trace_rdev_add_monitor_channel(&rdev->wiphy, chandef);
+	ret = rdev->ops->add_monitor_channel(&rdev->wiphy, chandef);
+	trace_rdev_return_int(&rdev->wiphy, ret);
+	return ret;
+}
+
+static inline int
+rdev_del_monitor_channel(struct cfg80211_registered_device *rdev,
+			 struct cfg80211_chan_def *chandef)
+{
+	int ret;
+	trace_rdev_del_monitor_channel(&rdev->wiphy, chandef);
+	ret = rdev->ops->del_monitor_channel(&rdev->wiphy, chandef);
+	trace_rdev_return_int(&rdev->wiphy, ret);
+	return ret;
+}
+
 static inline int rdev_scan(struct cfg80211_registered_device *rdev,
 			    struct cfg80211_scan_request *request)
 {
--- a/net/wireless/trace.h
+++ b/net/wireless/trace.h
@@ -1244,6 +1244,38 @@ TRACE_EVENT(rdev_set_monitor_channel,
 		  WIPHY_PR_ARG, CHAN_DEF_PR_ARG)
 );
 
+TRACE_EVENT(rdev_add_monitor_channel,
+	TP_PROTO(struct wiphy *wiphy,
+		 struct cfg80211_chan_def *chandef),
+	TP_ARGS(wiphy, chandef),
+	TP_STRUCT__entry(
+		WIPHY_ENTRY
+		CHAN_DEF_ENTRY
+	),
+	TP_fast_assign(
+		WIPHY_ASSIGN;
+		CHAN_DEF_ASSIGN(chandef);
+	),
+	TP_printk(WIPHY_PR_FMT ", " CHAN_DEF_PR_FMT,
+		  WIPHY_PR_ARG, CHAN_DEF_PR_ARG)
+);
+
+TRACE_EVENT(rdev_del_monitor_channel,
+	TP_PROTO(struct wiphy *wiphy,
+		 struct cfg80211_chan_def *chandef),
+	TP_ARGS(wiphy, chandef),
+	TP_STRUCT__entry(
+		WIPHY_ENTRY
+		CHAN_DEF_ENTRY
+	),
+	TP_fast_assign(
+		WIPHY_ASSIGN;
+		CHAN_DEF_ASSIGN(chandef);
+	),
+	TP_printk(WIPHY_PR_FMT ", " CHAN_DEF_PR_FMT,
+		  WIPHY_PR_ARG, CHAN_DEF_PR_ARG)
+);
+
 TRACE_EVENT(rdev_auth,
 	TP_PROTO(struct wiphy *wiphy, struct net_device *netdev,
 		 struct cfg80211_auth_request *req),
--- a/net/wireless/util.c
+++ b/net/wireless/util.c
@@ -2278,6 +2278,26 @@ cfg80211_get_hw_idx_by_chan(struct wiphy
 }
 EXPORT_SYMBOL(cfg80211_get_hw_idx_by_chan);
 
+int
+cfg80211_get_hw_idx_by_freq(struct wiphy *wiphy, int freq)
+{
+	int i;
+	struct ieee80211_chans_per_hw *hw_chans;
+
+	if (freq <= 0)
+		return -1;
+
+	for (i = 0; i < wiphy->num_hw; i++) {
+		hw_chans = wiphy->hw_chans[i];
+		if (hw_chans->n_chans && (freq >= hw_chans->chans[0].center_freq) &&
+		    (freq <= hw_chans->chans[hw_chans->n_chans - 1].center_freq))
+				return i;
+	}
+
+	return -1;
+}
+EXPORT_SYMBOL(cfg80211_get_hw_idx_by_freq);
+
 int cfg80211_iter_combinations(struct wiphy *wiphy,
 			       struct iface_combination_params *params,
 			       void (*iter)(const struct ieee80211_iface_combination *c,
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -103,6 +103,7 @@ static const struct ieee80211_channel at
 
 static const struct ieee80211_channel ath12k_6ghz_channels[] = {
 	CHAN6G(1, 5955, 0),
+	CHAN6G(2, 5935, 0),
 	CHAN6G(5, 5975, 0),
 	CHAN6G(9, 5995, 0),
 	CHAN6G(13, 6015, 0),
@@ -161,9 +162,6 @@ static const struct ieee80211_channel at
 	CHAN6G(225, 7075, 0),
 	CHAN6G(229, 7095, 0),
 	CHAN6G(233, 7115, 0),
-
-	/* new addition in IEEE Std 802.11ax-2021 */
-	CHAN6G(2, 5935, 0),
 };
 
 static struct ieee80211_rate ath12k_legacy_rates[] = {
