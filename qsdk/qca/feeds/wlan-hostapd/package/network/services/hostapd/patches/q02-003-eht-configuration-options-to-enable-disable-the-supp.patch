From 1194cfc2d5835f2cb64b94eaae4431f3995fdc60 Mon Sep 17 00:00:00 2001
From: Muna Sinada <quic_msinada@quicinc.com>
Date: Thu, 28 Apr 2022 02:09:05 -0700
Subject: [PATCH] tests: Clean up EHT test script

Remove test cases that are no longer valid and add functionality to
enable compiler flag for disabling EHT mode. Also adds missing
functionality in Hostapd and WPA Supplicant for disabling EHT mode.

Signed-off-by: Muna Sinada <quic_msinada@quicinc.com>
---
 src/drivers/driver.h              |  7 +++++++
 src/drivers/driver_nl80211.c      | 14 ++++++++++++--
 wpa_supplicant/Makefile           | 11 +++++++++++
 wpa_supplicant/ap.c               |  5 +++++
 wpa_supplicant/config.c           |  4 ++++
 wpa_supplicant/config_file.c      |  3 +++
 wpa_supplicant/config_ssid.h      | 12 ++++++++++++
 wpa_supplicant/ctrl_iface.c       |  7 ++++---
 wpa_supplicant/events.c           |  2 ++
 wpa_supplicant/sme.c              |  3 +++
 wpa_supplicant/wpa_cli.c          |  3 +++
 wpa_supplicant/wpa_supplicant_i.h |  4 ++++
 22 files changed, 157 insertions(+), 12 deletions(-)

--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -6104,6 +6104,14 @@ static int wpa_driver_nl80211_ap(struct
 		return -1;
 	}
 
+#ifdef CONFIG_EHT_OVERRIDES
+	if (params->disable_eht) {
+		wpa_printf(MSG_DEBUG, "  * EHT disabled");
+		if (nla_put_flag(msg, NL80211_ATTR_DISABLE_EHT))
+			return -1;
+	}
+#endif /* CONFIG_EHT_OVERRIDES */
+
 	return 0;
 }
 
--- a/wpa_supplicant/Makefile
+++ b/wpa_supplicant/Makefile
@@ -211,6 +211,10 @@ ifdef CONFIG_HE_OVERRIDES
 CFLAGS += -DCONFIG_HE_OVERRIDES
 endif
 
+ifdef CONFIG_EHT_OVERRIDES
+CFLAGS += -DCONFIG_EHT_OVERRIDES
+endif
+
 ifndef CONFIG_BACKEND
 CONFIG_BACKEND=file
 endif
--- a/wpa_supplicant/ap.c
+++ b/wpa_supplicant/ap.c
@@ -397,6 +397,11 @@ int wpa_supplicant_conf_ap_ht(struct wpa
 				 HT_CAP_INFO_TX_STBC |
 				 HT_CAP_INFO_MAX_AMSDU_SIZE);
 
+			if (mode->eht_capab[wpas_mode_to_ieee80211_mode(
+					    ssid->mode)].eht_supported &&
+			    ssid->eht)
+				conf->ieee80211be = 1;
+
 			/* check this before VHT, because setting oper chan
 			 * width and friends is the same call for HE and VHT
 			 * and checks if conf->ieee8021ax == 1 */
--- a/wpa_supplicant/config.c
+++ b/wpa_supplicant/config.c
@@ -2831,6 +2831,9 @@ static const struct parse_data ssid_fiel
 #ifdef CONFIG_HE_OVERRIDES
 	{ INT_RANGE(disable_he, 0, 1)},
 #endif /* CONFIG_HE_OVERRIDES */
+#ifdef CONFIG_EHT_OVERRIDES
+	{ INT_RANGE(disable_eht, 0, 1)},
+#endif /* CONFIG_EHT_OVERRIDES */
 	{ INT(ap_max_inactivity) },
 	{ INT(dtim_period) },
 	{ INT(beacon_int) },
@@ -3350,6 +3353,7 @@ void wpa_config_set_network_defaults(str
 	ssid->ht = 1;
 	ssid->vht = 1;
 	ssid->he = 1;
+	ssid->eht = 1;
 #ifdef IEEE8021X_EAPOL
 	ssid->eapol_flags = DEFAULT_EAPOL_FLAGS;
 	ssid->eap_workaround = DEFAULT_EAP_WORKAROUND;
--- a/wpa_supplicant/config_file.c
+++ b/wpa_supplicant/config_file.c
@@ -896,7 +896,9 @@ static void wpa_config_write_network(FIL
 #ifdef CONFIG_HE_OVERRIDES
 	INT(disable_he);
 #endif /* CONFIG_HE_OVERRIDES */
+#ifdef CONFIG_EHT_OVERRIDES
 	INT(disable_eht);
+#endif /*CONFIG_EHT_OVERRIDES */
 	INT(disable_40mhz_scan);
 	INT(beacon_tx_mode);
 	INT(enable_160mhz_bw);
--- a/wpa_supplicant/config_ssid.h
+++ b/wpa_supplicant/config_ssid.h
@@ -590,6 +590,8 @@ struct wpa_ssid {
 
 	int he;
 
+	int eht;
+
 	enum oper_chan_width max_oper_chwidth;
 
 	unsigned int vht_center_freq1;
@@ -837,6 +839,16 @@ struct wpa_ssid {
 	int disable_he;
 #endif /* CONFIG_HE_OVERRIDES */
 
+#ifdef CONFIG_EHT_OVERRIDES
+	/**
+	 * disable_eht - Disable EHT (IEEE 802.11be) for this network
+	 *
+	 * By default, use it if it is available, but this can be configured
+	 * to 1 to have it disabled.
+	 */
+	int disable_eht;
+#endif /* CONFIG_EHT_OVERRIDES */
+
 	/**
 	 * ap_max_inactivity - Timeout in seconds to detect STA's inactivity
 	 *
--- a/wpa_supplicant/sme.c
+++ b/wpa_supplicant/sme.c
@@ -2427,7 +2427,9 @@ mscs_fail:
 #ifdef CONFIG_HE_OVERRIDES
 	wpa_supplicant_apply_he_overrides(wpa_s, ssid, &params);
 #endif /* CONFIG_HE_OVERRIDES */
+#ifdef CONFIG_EHT_OVERRIDES
 	wpa_supplicant_apply_eht_overrides(wpa_s, ssid, &params);
+#endif /* CONFIG_EHT_OVERRIDES */
 #ifdef CONFIG_IEEE80211R
 	if (auth_type == WLAN_AUTH_FT && wpa_s->sme.ft_ies &&
 	    get_ie(wpa_s->sme.ft_ies, wpa_s->sme.ft_ies_len,
--- a/wpa_supplicant/wpa_cli.c
+++ b/wpa_supplicant/wpa_cli.c
@@ -1484,7 +1484,9 @@ static const char *network_fields[] = {
 #ifdef CONFIG_HE_OVERRIDES
 	"disable_he",
 #endif /* CONFIG_HE_OVERRIDES */
+#ifdef CONFIG_EHT_OVERRIDES
 	"disable_eht",
+#endif /* CONFIG_EHT_OVERRIDES */
 	"ap_max_inactivity", "dtim_period", "beacon_int",
 #ifdef CONFIG_MACSEC
 	"macsec_policy",
