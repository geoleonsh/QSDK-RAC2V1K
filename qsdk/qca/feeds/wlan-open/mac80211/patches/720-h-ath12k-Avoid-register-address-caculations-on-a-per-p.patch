From a337a9e12b60667eb4f40e249b150053110f33f8 Mon Sep 17 00:00:00 2001
From: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Date: Sun, 5 Mar 2023 19:28:43 -0800
Subject: [PATCH 2/2] ath12k: Avoid register address caculations on a  per packet
 basis

Precompute the datapath registers addresses and use it directly to save
cpu time. Do not compute the addresses on a per packet basis.

Signed-off-by: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
Signed-off-by: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_tx.c | 21 +++++++--------
 drivers/net/wireless/ath/ath12k/hal.c   | 47 ++++++++++++++++++++++-----------
 drivers/net/wireless/ath/ath12k/hal.h   | 20 +++++---------
 drivers/net/wireless/ath/ath12k/mac.c   |  4 +--
 4 files changed, 50 insertions(+), 42 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/dp_tx.c b/drivers/net/wireless/ath/ath12k/dp_tx.c
index 5974191..816418b 100644
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -85,7 +85,7 @@ struct ath12k_tx_desc_info *ath12k_dp_tx_assign_buffer_nolock(struct ath12k_dp *
 					struct ath12k_tx_desc_info,
 					list);
 	if (!desc) {
-		ath12k_warn(dp->ab, "failed to allocate data Tx buffer\n");
+		ath12k_dbg(dp->ab, ATH12K_DBG_DP_TX, "failed to allocate data Tx desc\n");
 		return NULL;
 	}
 
@@ -164,7 +164,6 @@ int ath12k_dp_tx_direct(struct ath12k_link_vif *arvif, struct sk_buff *skb)
 	struct dp_tx_ring *tx_ring;
 	struct device *dev = arvif->dev;
 	void *hal_tcl_desc;
-	void *mem = ab->mem;
 	struct hal_tcl_data_cmd tcl_desc;
 	u8 hal_ring_id, ring_id;
 	dma_addr_t paddr;
@@ -203,14 +202,14 @@ int ath12k_dp_tx_direct(struct ath12k_link_vif *arvif, struct sk_buff *skb)
 	hal_ring_id = ring_id + HAL_SRNG_RING_ID_SW2TCL1;
 	tcl_ring = &ab->hal.srng_list[hal_ring_id];
 
-	ath12k_hal_srng_access_src_ring_begin_nolock(ab, tcl_ring);
+	ath12k_hal_srng_access_src_ring_begin_nolock(tcl_ring);
 
 	hal_tcl_desc = (void *)ath12k_hal_srng_src_get_next_entry_nolock(ab, tcl_ring);
 	if (unlikely(!hal_tcl_desc)) {
 		/* NOTE: It is highly unlikely we'll be running out of tcl_ring
 		 * desc because the desc is directly enqueued onto hw queue.
 		 */
-		ath12k_hal_srng_access_umac_src_ring_end_nolock(mem, tcl_ring);
+		ath12k_hal_srng_access_umac_src_ring_end_nolock(tcl_ring);
 		ab->soc_stats.tx_err.desc_na[ring_id]++;
 		ret = -ENOMEM;
 		goto fail_unmap_dma;
@@ -229,7 +228,7 @@ int ath12k_dp_tx_direct(struct ath12k_link_vif *arvif, struct sk_buff *skb)
 	tcl_desc.info5 = 0;
 	memcpy(hal_tcl_desc, &tcl_desc, sizeof(tcl_desc));
 	dsb(st);
-	ath12k_hal_srng_access_umac_src_ring_end_nolock(mem, tcl_ring);
+	ath12k_hal_srng_access_umac_src_ring_end_nolock(tcl_ring);
 
 	atomic_inc(&ar->dp.num_tx_pending);
 
@@ -287,7 +286,7 @@ int ath12k_dp_tx(struct ath12k *ar, struct ath12k_link_vif *arvif,
 	tx_desc = ath12k_dp_tx_assign_buffer_nolock(dp, ti.ring_id);
 	if (unlikely(!tx_desc)) {
 		ab->soc_stats.tx_err.txbuf_na[ti.ring_id]++;
-		return -ENOSPC;
+		return -ENOMEM;
 	}
 
 	ti.bank_id = arvif->bank_id;
@@ -454,13 +453,13 @@ int ath12k_dp_tx(struct ath12k *ar, struct ath12k_link_vif *arvif,
 	hal_ring_id = tx_ring->tcl_data_ring.ring_id;
 	tcl_ring = &ab->hal.srng_list[hal_ring_id];
 
-	ath12k_hal_srng_access_src_ring_begin_nolock(ab, tcl_ring);
+	ath12k_hal_srng_access_src_ring_begin_nolock(tcl_ring);
 	hal_tcl_desc = ath12k_hal_srng_src_get_next_entry(ab, tcl_ring);
 	if (unlikely(!hal_tcl_desc)) {
 		/* NOTE: It is highly unlikely we'll be running out of tcl_ring
 		 * desc because the desc is directly enqueued onto hw queue.
 		 */
-		ath12k_hal_srng_access_umac_src_ring_end_nolock(ab->mem, tcl_ring);
+		ath12k_hal_srng_access_umac_src_ring_end_nolock(tcl_ring);
 		ab->soc_stats.tx_err.desc_na[ti.ring_id]++;
 		ret = -ENOMEM;
 
@@ -483,7 +482,7 @@ int ath12k_dp_tx(struct ath12k *ar, struct ath12k_link_vif *arvif,
 	tcl_cmd->info4 = arvif->desc.info4;
 	tcl_cmd->info5 = 0;
 
-	ath12k_hal_srng_access_umac_src_ring_end_nolock(ab->mem, tcl_ring);
+	ath12k_hal_srng_access_umac_src_ring_end_nolock(tcl_ring);
 
 	ath12k_dbg_dump(ab, ATH12K_DBG_DP_TX, NULL, "dp tx msdu: ",
 			skb->data, skb->len);
@@ -976,7 +975,7 @@ int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
 
 	valid_entries = ath12k_hal_srng_dst_num_free(ab, status_ring, false);
 	if (!valid_entries) {
-		ath12k_hal_srng_access_umac_dst_ring_end_nolock(ab->mem, status_ring);
+		ath12k_hal_srng_access_umac_dst_ring_end_nolock(status_ring);
 		return 0;
 	}
 
@@ -1072,7 +1071,7 @@ int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
 						   skb_ext_desc, tx_ring->tcl_data_ring_id);
 		}
 	}
-	ath12k_hal_srng_access_umac_dst_ring_end_nolock(ab->mem, status_ring);
+	ath12k_hal_srng_access_umac_dst_ring_end_nolock(status_ring);
 	dev_kfree_skb_list_fast(&free_list_head);
 
 	return (orig_budget - budget);
diff --git a/drivers/net/wireless/ath/ath12k/hal.c b/drivers/net/wireless/ath/ath12k/hal.c
index cea5562..98b6aa2 100644
--- a/drivers/net/wireless/ath/ath12k/hal.c
+++ b/drivers/net/wireless/ath/ath12k/hal.c
@@ -2024,16 +2024,23 @@ int ath12k_hal_srng_setup(struct ath12k_base *ab, enum hal_ring_type type,
 		srng->u.src_ring.low_threshold = params->low_threshold *
 						 srng->entry_size;
 		if (srng_config->mac_type == ATH12K_HAL_SRNG_UMAC) {
-			if (!ab->hw_params->supports_shadow_regs)
+			if (!ab->hw_params->supports_shadow_regs) {
 				srng->u.src_ring.hp_addr =
 					(u32 *)((unsigned long)ab->mem + reg_base);
-			else
-				ath12k_dbg(ab, ATH12K_DBG_HAL,
-					   "hal type %d ring_num %d reg_base 0x%x shadow 0x%lx\n",
-					   type, ring_num,
-					   reg_base,
-					   (unsigned long)srng->u.src_ring.hp_addr -
-					   (unsigned long)ab->mem);
+				if (type  == HAL_TCL_DATA) {
+					srng->u.src_ring.hp_addr_direct =
+						(u32 *)((unsigned long)ab->mem +
+						HAL_DP_REG_WINDOW_OFFSET +
+						(reg_base & WINDOW_RANGE_MASK));
+				}
+			} else {
+					ath12k_dbg(ab, ATH12K_DBG_HAL,
+						   "hal type %d ring_num %d reg_base 0x%x shadow 0x%lx\n",
+						type, ring_num,
+						reg_base,
+						(unsigned long)srng->u.src_ring.hp_addr -
+						(unsigned long)ab->mem);
+			}
 		} else {
 			idx = ring_id - HAL_SRNG_RING_ID_DMAC_CMN_ID_START;
 			srng->u.src_ring.hp_addr = (void *)(hal->wrp.vaddr +
@@ -2054,17 +2061,25 @@ int ath12k_hal_srng_setup(struct ath12k_base *ab, enum hal_ring_type type,
 		srng->u.dst_ring.cached_hp = 0;
 		srng->u.dst_ring.hp_addr = (void *)(hal->rdp.vaddr + ring_id);
 		if (srng_config->mac_type == ATH12K_HAL_SRNG_UMAC) {
-			if (!ab->hw_params->supports_shadow_regs)
+			if (!ab->hw_params->supports_shadow_regs) {
 				srng->u.dst_ring.tp_addr =
 					(u32 *)((unsigned long)ab->mem + reg_base +
 					(HAL_REO1_RING_TP - HAL_REO1_RING_HP));
-			else
-				ath12k_dbg(ab, ATH12K_DBG_HAL,
-					   "type %d ring_num %d target_reg 0x%x shadow 0x%lx\n",
-					   type, ring_num,
-					   reg_base + HAL_REO1_RING_TP - HAL_REO1_RING_HP,
-					   (unsigned long)srng->u.dst_ring.tp_addr -
-					   (unsigned long)ab->mem);
+				if (type  == HAL_WBM2SW_RELEASE) {
+					srng->u.dst_ring.tp_addr_direct =
+						(u32 *)((unsigned long)ab->mem +
+						(reg_base & WINDOW_RANGE_MASK) +
+						HAL_DP_REG_WINDOW_OFFSET +
+						(HAL_REO1_RING_TP - HAL_REO1_RING_HP));
+				}
+			} else {
+					ath12k_dbg(ab, ATH12K_DBG_HAL,
+						   "type %d ring_num %d target_reg 0x%x shadow 0x%lx\n",
+						type, ring_num,
+						reg_base + HAL_REO1_RING_TP - HAL_REO1_RING_HP,
+						(unsigned long)srng->u.dst_ring.tp_addr -
+						(unsigned long)ab->mem);
+			}
 		} else {
 			/* For PMAC & DMAC rings, tail pointer updates will be done
 			 * through FW by writing to a shared memory location
diff --git a/drivers/net/wireless/ath/ath12k/hal.h b/drivers/net/wireless/ath/ath12k/hal.h
index aeebf1d..4702ee2 100644
--- a/drivers/net/wireless/ath/ath12k/hal.h
+++ b/drivers/net/wireless/ath/ath12k/hal.h
@@ -749,6 +749,7 @@ struct hal_srng {
 			 * accessed through SW structure
 			 */
 			u32 *tp_addr;
+			u32 *tp_addr_direct;
 
 			/* Current SW loop cnt */
 			u32 loop_cnt;
@@ -778,6 +779,7 @@ struct hal_srng {
 			 * through SW structure
 			 */
 			u32 *hp_addr;
+			u32 *hp_addr_direct;
 
 			/* Low threshold - in number of ring entries */
 			u32 low_threshold;
@@ -1237,8 +1239,7 @@ u32 *ath12k_hal_srng_src_get_next_entry_nolock(struct ath12k_base *ab,
 }
 
 static inline
-void ath12k_hal_srng_access_src_ring_begin_nolock(void *mem,
-						  struct hal_srng *srng)
+void ath12k_hal_srng_access_src_ring_begin_nolock(struct hal_srng *srng)
 {
 	srng->u.src_ring.cached_tp = *(volatile u32 *)srng->u.src_ring.tp_addr;
 }
@@ -1254,26 +1255,19 @@ void ath12k_hal_srng_access_dst_ring_begin_nolock(struct ath12k_base *ab,
 }
 
 static inline
-void ath12k_hal_srng_access_umac_src_ring_end_nolock(void *mem,
-						     struct hal_srng *srng)
+void ath12k_hal_srng_access_umac_src_ring_end_nolock(struct hal_srng *srng)
 {
-	u32 offset = (unsigned long)srng->u.src_ring.hp_addr - (unsigned long)mem;
-
 	srng->u.src_ring.last_tp =
 			*(volatile u32 *)srng->u.src_ring.tp_addr;
-	writel_relaxed(srng->u.src_ring.hp, mem + HAL_DP_REG_WINDOW_OFFSET
-		  + (offset & WINDOW_RANGE_MASK));
+	writel_relaxed(srng->u.src_ring.hp, srng->u.src_ring.hp_addr_direct);
 	srng->timestamp = jiffies;
 }
 
 static inline
-void ath12k_hal_srng_access_umac_dst_ring_end_nolock(void *mem,
-						     struct hal_srng *srng)
+void ath12k_hal_srng_access_umac_dst_ring_end_nolock(struct hal_srng *srng)
 {
-	u32 offset = (unsigned long)srng->u.dst_ring.tp_addr - (unsigned long)mem;
 	srng->u.dst_ring.last_hp = *srng->u.dst_ring.hp_addr;
-	writel_relaxed(srng->u.dst_ring.tp, mem + HAL_DP_REG_WINDOW_OFFSET
-		       + (offset & WINDOW_RANGE_MASK));
+	writel_relaxed(srng->u.dst_ring.tp, srng->u.dst_ring.tp_addr_direct);
 	srng->timestamp = jiffies;
 }
 
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 2d86b08..950a29a 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -8425,8 +8425,8 @@ static void ath12k_mac_op_tx(struct ieee80211_hw *hw,
 	if (skb->fast_xmit) {
 		ret = ath12k_dp_tx_direct(arvif, skb);
 		if (unlikely(ret)) {
-			ath12k_warn(ar->ab, "failed to transmit frame %d\n",
-				    ret);
+			ath12k_dbg(arvif->ar->ab, ATH12K_DBG_MAC,
+				   "failed to transmit frame %d\n", ret);
 			ieee80211_free_txskb(hw, skb);
 		}
 		return;
-- 
2.7.4

