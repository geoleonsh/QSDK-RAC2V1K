From ff9277b5439dfaad25138019973980994660aa8e Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Thu, 22 Jun 2023 13:05:12 +0530
Subject: [PATCH 2/2] wifi: ath12k: Add nwifi header length check in tkip path

Readded the missed fix on the nwifi header length check on tkip
path. Due to this it ended in array out bound issue.

Fixes: If632f16261ef5d79 ("ath12k: Add warning to detect buffer overflow")

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_rx.c | 8 ++++++++
 1 file changed, 8 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -3162,8 +3162,9 @@ exit:
 }
 
 static bool ath12k_dp_rx_check_max_nwifi_hdr_len(struct ath12k_base *ab,
-						struct hal_rx_desc *rx_desc,
-						struct sk_buff *msdu)
+						 struct hal_rx_desc *rx_desc,
+						 struct sk_buff *msdu,
+						 const char *msg)
 {
 	struct ieee80211_hdr *hdr;
 	u32 hdr_len;
@@ -3172,10 +3173,10 @@ static bool ath12k_dp_rx_check_max_nwifi
 	hdr_len = ieee80211_hdrlen(hdr->frame_control);
 	if (unlikely(hdr_len > sizeof(*hdr))) {
 		ab->soc_stats.invalid_rbm++;
-		ath12k_dbg_dump(ab, ATH12K_DBG_DATA, NULL, "msdu_data",
-				msdu->data, msdu->len);
-		ath12k_dbg_dump(ab, ATH12K_DBG_DATA, NULL, "rx_desc",
-				rx_desc, sizeof(*rx_desc));
+		ath12k_err_dump(ab, msg, "msdu_data: ", msdu->data, msdu->len,
+				NULL);
+		ath12k_err_dump(ab, NULL, "rx_desc: ", rx_desc, sizeof(*rx_desc),
+				NULL);
 		return true;
 	}
 
@@ -3246,7 +3247,9 @@ static int ath12k_dp_rx_process_msdu(str
 	ath12k_dp_rx_h_fetch_info(ab, rx_desc, rx_info);
 
 	if (rx_info->decap_type == DP_RX_DECAP_TYPE_NATIVE_WIFI &&
-	    ath12k_dp_rx_check_max_nwifi_hdr_len(ab, rx_desc, msdu)) {
+	    ath12k_dp_rx_check_max_nwifi_hdr_len(ab, rx_desc, msdu,
+						 "Invalid len in Rx\n")) {
+		WARN_ON_ONCE(1);
 		ret = -EINVAL;
 		goto free_out;
 	}
@@ -3693,6 +3696,13 @@ mic_fail:
 		    RX_FLAG_IV_STRIPPED | RX_FLAG_DECRYPTED;
 	skb_pull(msdu, hal_rx_desc_sz);
 
+	if (rx_info.decap_type == DP_RX_DECAP_TYPE_NATIVE_WIFI &&
+	    ath12k_dp_rx_check_max_nwifi_hdr_len(ab, rx_desc, msdu,
+						 "Invalid len in verify tkip\n")) {
+		WARN_ON_ONCE(1);
+		return -EINVAL;
+	}
+
 	ath12k_dp_rx_h_ppdu(ar, &rx_info);
 	ath12k_dp_rx_h_undecap(ar, msdu, rx_desc,
 			       HAL_ENCRYPT_TYPE_TKIP_MIC, rxs, true);
@@ -4416,8 +4426,11 @@ static int ath12k_dp_rx_h_null_q_desc(st
 	ath12k_dp_rx_h_fetch_info(ab, desc, rx_info);
 
 	if (rx_info->decap_type == DP_RX_DECAP_TYPE_NATIVE_WIFI &&
-	    ath12k_dp_rx_check_max_nwifi_hdr_len(ab, desc, msdu))
+	    ath12k_dp_rx_check_max_nwifi_hdr_len(ab, desc, msdu,
+						 "Invalid len in Null queue\n")) {
+		WARN_ON_ONCE(1);
 		return -EINVAL;
+	}
 
 	ath12k_dp_rx_h_ppdu(ar, rx_info);
 	fast_rx = false;
@@ -4504,6 +4517,13 @@ static bool ath12k_dp_rx_h_tkip_mic_err(
 	skb_put(msdu, hal_rx_desc_sz + l3pad_bytes + msdu_len);
 	skb_pull(msdu, hal_rx_desc_sz + l3pad_bytes);
 
+	if (rx_info->decap_type == DP_RX_DECAP_TYPE_NATIVE_WIFI &&
+	    ath12k_dp_rx_check_max_nwifi_hdr_len(ab, desc, msdu,
+						 "Invalid len in tkip mic err\n")) {
+		WARN_ON_ONCE(1);
+		return true;
+	}
+
 	ath12k_dp_rx_h_ppdu(ar, rx_info);
 
 	rx_info->rx_status->flag |= (RX_FLAG_MMIC_STRIPPED | RX_FLAG_MMIC_ERROR |
@@ -4547,8 +4567,11 @@ static bool ath12k_dp_rx_h_4addr_null_fr
 	skb_pull(msdu, hal_rx_desc_sz + l3pad_bytes);
 
 	if (rx_info->decap_type == DP_RX_DECAP_TYPE_NATIVE_WIFI &&
-	    ath12k_dp_rx_check_max_nwifi_hdr_len(ab, rx_desc, msdu))
+	    ath12k_dp_rx_check_max_nwifi_hdr_len(ab, rx_desc, msdu,
+						 "Invalid len in 4addr Null frame\n")) {
+		WARN_ON_ONCE(1);
 		return true;
+	}
 
 	ath12k_dp_rx_h_ppdu(ar, rx_info);
 
--- a/drivers/net/wireless/ath/ath12k/debug.c
+++ b/drivers/net/wireless/ath/ath12k/debug.c
@@ -143,7 +143,7 @@ void ath12k_err_dump(struct ath12k_base
 		dev_err(ab->dev, "%s\n", linebuf);
 	}
 
-	if (srng->ring_dir == HAL_SRNG_DIR_DST)
+	if (srng && srng->ring_dir == HAL_SRNG_DIR_DST)
 		dev_err(ab->dev, "ring_base_vaddr=%px tp=0x%X size=0x%X cached_hp=0x%X",
 			srng->ring_base_vaddr,
 			srng->u.dst_ring.tp,
