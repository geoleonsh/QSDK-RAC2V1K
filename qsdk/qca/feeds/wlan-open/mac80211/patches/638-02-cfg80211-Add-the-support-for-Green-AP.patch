From c49bbfe89c84003624a7b00a5aa2f63dc5b5121d Mon Sep 17 00:00:00 2001
From: Sivashankari Madhavan <quic_sivamadh@quicinc.com>
Date: Wed, 18 May 2022 10:37:23 +0530
Subject: [PATCH] cfg80211: Add the support for Green AP

Adds the cfg80211 changes for supporting Green AP

Signed-off-by: Sivashankari Madhavan <quic_sivamadh@quicinc.com>
---
 include/net/cfg80211.h       | 10 ++++++----
 include/uapi/linux/nl80211.h | 18 ++++++++++++++----
 net/wireless/nl80211.c       | 24 +++++++++++++++++-------
 net/wireless/rdev-ops.h      |  6 +++---
 net/wireless/trace.h         |  2 +-
 5 files changed, 41 insertions(+), 19 deletions(-)

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -1409,6 +1409,8 @@ struct cfg80211_ap_settings {
 	struct cfg80211_unsol_bcast_probe_resp unsol_bcast_probe_resp;
 	struct cfg80211_mbssid_config mbssid_config;
 	enum nl80211_beacon_tx_mode beacon_tx_mode;
+	bool ap_ps_valid;
+	bool ap_ps_enable;
 };
 
 /**
@@ -4009,8 +4011,8 @@ struct mgmt_frame_regs {
  * @set_rekey_data: give the data necessary for GTK rekeying to the driver
  *
  * @start_ap: Start acting in AP mode defined by the parameters.
- * @change_beacon: Change the beacon parameters for an access point mode
- *	interface. This should reject the call when AP mode wasn't started.
+ * @update_ap: Update parameters for an access point mode interface.
+ *	This should reject the call when AP mode wasn't started.
  * @stop_ap: Stop being an AP, including stopping beaconing.
  *
  * @add_station: Add a new station.
@@ -4373,8 +4375,8 @@ struct cfg80211_ops {
 
 	int	(*start_ap)(struct wiphy *wiphy, struct net_device *dev,
 			    struct cfg80211_ap_settings *settings);
-	int	(*change_beacon)(struct wiphy *wiphy, struct net_device *dev,
-				 struct cfg80211_ap_settings *info);
+	int	(*update_ap)(struct wiphy *wiphy, struct net_device *dev,
+			     struct cfg80211_ap_settings *settings);
 	int	(*stop_ap)(struct wiphy *wiphy, struct net_device *dev,
 			   unsigned int link_id);
 
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@ -387,11 +387,13 @@
  *	or %NL80211_ATTR_MAC.
  *
  * @NL80211_CMD_GET_BEACON: (not used)
- * @NL80211_CMD_SET_BEACON: change the beacon on an access point interface
+ * @NL80211_CMD_UPDATE_AP: Update AP parameters which can vary at the
+ * 	runtime of BSS. change the beacon on an access point interface
  *	using the %NL80211_ATTR_BEACON_HEAD and %NL80211_ATTR_BEACON_TAIL
  *	attributes. For drivers that generate the beacon and probe responses
- *	internally, the following attributes must be provided: %NL80211_ATTR_IE,
- *	%NL80211_ATTR_IE_PROBE_RESP and %NL80211_ATTR_IE_ASSOC_RESP.
+ *	internally, the following attributes must be provided for the
+ *	beacon update: %NL80211_ATTR_IE, %NL80211_ATTR_IE_PROBE_RESP and
+ *	%NL80211_ATTR_IE_ASSOC_RESP.
  * @NL80211_CMD_START_AP: Start AP operation on an AP interface, parameters
  *	are like for %NL80211_CMD_SET_BEACON, and additionally parameters that
  *	do not change are used, these include %NL80211_ATTR_BEACON_INTERVAL,
@@ -1310,7 +1312,8 @@ enum nl80211_commands {
 	NL80211_CMD_DEL_KEY,
 
 	NL80211_CMD_GET_BEACON,
-	NL80211_CMD_SET_BEACON,
+	NL80211_CMD_UPDATE_AP,
+	NL80211_CMD_SET_BEACON = NL80211_CMD_UPDATE_AP,
 	NL80211_CMD_START_AP,
 	NL80211_CMD_NEW_BEACON = NL80211_CMD_START_AP,
 	NL80211_CMD_STOP_AP,
@@ -2561,6 +2564,11 @@ enum nl80211_commands {
  *	association request when used with NL80211_CMD_NEW_STATION). Can be set
  *	only if %NL80211_STA_FLAG_WME is set.
  *
+ * @NL80211_ATTR_AP_PS: enable/disable AP power save.
+ * 	This attribute type is u8 and valid range is 0 to 1.
+ * 	0 for disable AP power save mode.
+ * 	1 for enable AP power save mode.
+ *
  * @NL80211_ATTR_FTM_RESPONDER: nested attribute which user-space can include
  *	in %NL80211_CMD_START_AP or %NL80211_CMD_SET_BEACON for fine timing
  *	measurement (FTM) responder functionality and containing parameters as
@@ -3328,6 +3336,8 @@ enum nl80211_attrs {
 
 	NL80211_ATTR_RU_PUNCT_BITMAP,
 
+	NL80211_ATTR_AP_PS,
+
 	/* add attributes here, update the policy in nl80211.c */
 
 	__NL80211_ATTR_AFTER_LAST,
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -855,6 +855,7 @@ static const struct nla_policy nl80211_p
 		NLA_POLICY_MAX(NLA_U8, NL80211_RU_PUNCT_SUPP_BW_320),
 	[NL80211_ATTR_RU_PUNCT_SUPP_HE] = { .type = NLA_FLAG },
 	[NL80211_ATTR_RU_PUNCT_BITMAP] = { .type = NLA_U16 },
+	[NL80211_ATTR_AP_PS] = NLA_POLICY_MAX(NLA_U8, 1),
 };
 
 /* policy for the key attributes */
@@ -6296,7 +6297,7 @@ out:
 	return err;
 }
 
-static int nl80211_set_beacon(struct sk_buff *skb, struct genl_info *info)
+static int nl80211_update_ap(struct sk_buff *skb, struct genl_info *info)
 {
 	struct cfg80211_registered_device *rdev = info->user_ptr[0];
 	unsigned int link_id = nl80211_link_id(info->attrs);
@@ -6304,12 +6305,13 @@ static int nl80211_set_beacon(struct sk_
 	struct wireless_dev *wdev = dev->ieee80211_ptr;
 	struct cfg80211_ap_settings *params;
 	int err;
+	bool haveinfo = false;
 
 	if (dev->ieee80211_ptr->iftype != NL80211_IFTYPE_AP &&
 	    dev->ieee80211_ptr->iftype != NL80211_IFTYPE_P2P_GO)
 		return -EOPNOTSUPP;
 
-	if (!rdev->ops->change_beacon)
+	if (!rdev->ops->update_ap)
 		return -EOPNOTSUPP;
 
 	if (!wdev->links[link_id].ap.beacon_interval)
@@ -6319,8 +6321,16 @@ static int nl80211_set_beacon(struct sk_
 	if (!params)
 		return -ENOMEM;
 
+	memset(params, 0, sizeof(*params));
+
+	if (info->attrs[NL80211_ATTR_AP_PS]) {
+		params->ap_ps_enable = nla_get_u8(info->attrs[NL80211_ATTR_AP_PS]);
+		params->ap_ps_valid = true;
+		haveinfo = true;
+	}
+
 	err = nl80211_parse_beacon(rdev, info->attrs, &params->beacon);
-	if (err)
+	if (err & !haveinfo)
 		goto out;
 
 	if (info->attrs[NL80211_ATTR_FILS_DISCOVERY]) {
@@ -6332,7 +6342,7 @@ static int nl80211_set_beacon(struct sk_
 	}
 
 	wdev_lock(wdev);
-	err = rdev_change_beacon(rdev, dev, params);
+	err = rdev_update_ap(rdev, dev, params);
 	wdev_unlock(wdev);
 
 out:
@@ -16790,10 +16800,10 @@ static const struct genl_small_ops nl802
 		.internal_flags = IFLAGS(NL80211_FLAG_NEED_NETDEV_UP),
 	},
 	{
-		.cmd = NL80211_CMD_SET_BEACON,
+		.cmd = NL80211_CMD_UPDATE_AP,
 		.validate = GENL_DONT_VALIDATE_STRICT | GENL_DONT_VALIDATE_DUMP,
 		.flags = GENL_UNS_ADMIN_PERM,
-		.doit = nl80211_set_beacon,
+		.doit = nl80211_update_ap,
 		.internal_flags = IFLAGS(NL80211_FLAG_NEED_NETDEV_UP |
 					 NL80211_FLAG_MLO_VALID_LINK_ID),
 	},
--- a/net/wireless/rdev-ops.h
+++ b/net/wireless/rdev-ops.h
@@ -165,13 +165,13 @@ static inline int rdev_start_ap(struct c
 	return ret;
 }
 
-static inline int rdev_change_beacon(struct cfg80211_registered_device *rdev,
+static inline int rdev_update_ap(struct cfg80211_registered_device *rdev,
 				     struct net_device *dev,
 				     struct cfg80211_ap_settings *info)
 {
 	int ret;
-	trace_rdev_change_beacon(&rdev->wiphy, dev, info);
-	ret = rdev->ops->change_beacon(&rdev->wiphy, dev, info);
+	trace_rdev_update_ap(&rdev->wiphy, dev, info);
+	ret = rdev->ops->update_ap(&rdev->wiphy, dev, info);
 	trace_rdev_return_int(&rdev->wiphy, ret);
 	return ret;
 }
--- a/net/wireless/trace.h
+++ b/net/wireless/trace.h
@@ -597,7 +597,7 @@ TRACE_EVENT(rdev_start_ap,
 		  __entry->inactivity_timeout, __entry->link_id)
 );
 
-TRACE_EVENT(rdev_change_beacon,
+TRACE_EVENT(rdev_update_ap,
 	TP_PROTO(struct wiphy *wiphy, struct net_device *netdev,
 		 struct cfg80211_ap_settings *info),
 	TP_ARGS(wiphy, netdev, info),
