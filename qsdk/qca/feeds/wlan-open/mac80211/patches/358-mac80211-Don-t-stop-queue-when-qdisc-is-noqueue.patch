From f79327c3c3ef964c0d6d98643b5fd47acbe8e1dc Mon Sep 17 00:00:00 2001
From: Tamizh Chelvam Raja <quic_tamizhr@quicinc.com>
Date: Wed, 22 Jun 2022 12:48:05 +0530
Subject: [PATCH] mac80211: Don't stop queue when qdisc is noqueue

User can set noqueue for an interface and mac80211
doesn't know about the qdisc configuration, so it
stop queues in some scenarios and that cause below
warning messages flood on the console.

Example callbacks:

* ieee80211_rx_napi->ieee80211_rx_list->        ieee80211_prepare_and_rx_handle
							|
__ieee80211_stop_queue<-ieee80211_add_pending_skb <- ieee80211_rx_h_mesh_fwding

* ieee80211_add_pending_skbs->__ieee80211_stop_queue

Virtual device wlanX asks to queue packet!

To avoid this warning, enable vif specific debugfs
entry to notify that qdisc is configured with
noqueue and do not stop the queue for the netdev. And
drop the pkt in mac80211 until the hw queue started again.

Signed-off-by: Tamizh Chelvam Raja <quic_tamizhr@quicinc.com>
---
 include/net/mac80211.h        |  2 ++
 net/mac80211/debugfs_netdev.c | 28 ++++++++++++++++++++++++++++
 net/mac80211/tx.c             |  8 ++++++++
 net/mac80211/util.c           | 13 ++++++++++++-
 4 files changed, 50 insertions(+), 1 deletion(-)

--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -1911,6 +1911,7 @@ struct ieee80211_vif {
 	bool rx_mcast_action_reg;
 
 	bool txqs_stopped[IEEE80211_NUM_ACS];
+	bool noqueue_enable;
 
 	struct ieee80211_vif *mbssid_tx_vif;
 
--- a/net/mac80211/debugfs_netdev.c
+++ b/net/mac80211/debugfs_netdev.c
@@ -323,6 +323,32 @@ static ssize_t ieee80211_if_parse_bmiss_
 
 IEEE80211_IF_FILE_RW(bmiss_threshold);
 
+static ssize_t ieee80211_if_fmt_noqueue_enable(const struct ieee80211_sub_if_data *sdata,
+					       char *buf, int buflen)
+{
+	return snprintf(buf, buflen, "%u\n", sdata->vif.noqueue_enable);
+}
+
+static ssize_t ieee80211_if_parse_noqueue_enable(struct ieee80211_sub_if_data *sdata,
+						 const char *buf, int buflen)
+{
+	int ret;
+	u8 val;
+
+	ret = kstrtou8(buf, 0, &val);
+	if (ret)
+		return ret;
+
+	if (val > 1)
+		return -EINVAL;
+
+	sdata->vif.noqueue_enable = val;
+
+	return buflen;
+}
+
+IEEE80211_IF_FILE_RW(noqueue_enable);
+
 static ssize_t ieee80211_if_parse_tkip_mic_test(
 	struct ieee80211_sub_if_data *sdata, const char *buf, int buflen)
 {
@@ -708,6 +734,7 @@ static void add_ap_files(struct ieee8021
 	DEBUGFS_ADD_MODE(tkip_mic_test, 0200);
 	DEBUGFS_ADD_MODE(multicast_to_unicast, 0600);
 	DEBUGFS_ADD_MODE(bmiss_threshold, 0600);
+	DEBUGFS_ADD_MODE(noqueue_enable, 0600);
 }
 
 static void add_vlan_files(struct ieee80211_sub_if_data *sdata)
@@ -729,6 +756,7 @@ static void add_mesh_files(struct ieee80
 	DEBUGFS_ADD_MODE(tsf, 0600);
 	DEBUGFS_ADD_MODE(estab_plinks, 0400);
 	DEBUGFS_ADD_MODE(bmiss_threshold, 0600);
+	DEBUGFS_ADD_MODE(noqueue_enable, 0600);
 }
 
 static void add_mesh_stats(struct ieee80211_sub_if_data *sdata)
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -417,8 +417,12 @@ void ieee80211_propagate_queue_wake(stru
 			if (ac_queue == queue ||
 			    (sdata->vif.cab_queue == queue &&
 			     local->queue_stop_reasons[ac_queue] == 0 &&
-			     skb_queue_empty(&local->pending[ac_queue])))
+			     skb_queue_empty(&local->pending[ac_queue]))) {
+				if (sdata->vif.noqueue_enable)
+					continue;
+
 				netif_wake_subqueue(sdata->dev, ac);
+			}
 		}
 	}
 }
@@ -517,6 +521,9 @@ static void __ieee80211_stop_queue(struc
 		for (ac = 0; ac < n_acs; ac++) {
 			if (sdata->vif.hw_queue[ac] == queue ||
 			    sdata->vif.cab_queue == queue) {
+				if (!local->ops->wake_tx_queue && sdata->vif.noqueue_enable)
+					continue;
+
 				if (!local->ops->wake_tx_queue) {
 					netif_stop_subqueue(sdata->dev, ac);
 					continue;
