From 4447245ddbb14efe98f6b4979ebb705c1fb2baa2 Mon Sep 17 00:00:00 2001
From: Sriram R <quic_srirrama@quicinc.com>
Date: Fri, 22 Apr 2022 10:30:15 +0530
Subject: [PATCH] hostapd: add rnr changes to include neighboring MLD

Update the RNR element carried in beacon and probe response
of each link bss of an MLD to carry the partner info.

Signed-off-by: Sriram R <quic_srirrama@quicinc.com>
---
 src/ap/ieee802_11.c          | 165 +++++++++++++++++++++++++++++++----
 src/common/ieee802_11_defs.h |   2 +
 2 files changed, 149 insertions(+), 18 deletions(-)

--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -6585,15 +6585,17 @@ static size_t hostapd_eid_rnr_iface_len(
 					struct hostapd_data *reporting_hapd,
 					size_t *current_len,
 					int ema_bss_index_1,
-					int ema_bss_index_2)
+					int ema_bss_index_2,
+					bool mld_update)
 {
 	size_t total_len = 0, len = *current_len;
 	int tbtt_count = 0;
 	size_t i, start = 0;
+	u8 tbtt_info_len = mld_update ? RNR_TBTT_MLD_INFO_LEN : RNR_TBTT_INFO_LEN;
 
 	while (start < hapd->iface->num_bss) {
 		if (!len ||
-		    len + RNR_TBTT_HEADER_LEN + RNR_TBTT_INFO_LEN > 255) {
+		    len + RNR_TBTT_HEADER_LEN + tbtt_info_len > 255) {
 			len = RNR_HEADER_LEN;
 			total_len += RNR_HEADER_LEN;
 		}
@@ -6615,12 +6617,33 @@ static size_t hostapd_eid_rnr_iface_len(
 			    (i >= ema_bss_index_1) && (i < ema_bss_index_2))
 				continue;
 
-			if (len + RNR_TBTT_INFO_LEN > 255 ||
+			if (!mld_update) {
+				/* For non-mld update, if the current BSS is part of
+				 * same MLD then in MLD TBTT info the basic info will
+				 * be present hence we can skip to add it without MLD
+				 * params. However if the BSS is not part of same MLD
+				 * then it needs to be added */
+				if ((!reporting_hapd->mld || !bss->mld) ||
+				    (reporting_hapd->mld != bss->mld))
+					goto co_location_rnr_len;
+
+				else
+					continue;
+			}
+
+			/* MLD BSS are reported in separate Neighbor Info */
+			if ((!bss->mld && mld_update) || (bss->mld && !mld_update))
+				continue;
+
+			/* TODO: Misc MBSSID + MLO RNR exceptions */
+
+co_location_rnr_len:
+			if (len + tbtt_info_len > 255 ||
 			    tbtt_count >= RNR_TBTT_INFO_COUNT_MAX)
 				break;
 
-			len += RNR_TBTT_INFO_LEN;
-			total_len += RNR_TBTT_INFO_LEN;
+			len += tbtt_info_len;
+			total_len += tbtt_info_len;
 			tbtt_count++;
 		}
 		start = i;
@@ -6670,6 +6693,47 @@ enum colocation_mode get_colocation_mode
 }
 
 
+static size_t hostapd_eid_rnr_mlo_len(struct hostapd_data *hapd, u32 type,
+				      size_t *current_len)
+{
+	struct hostapd_iface *iface;
+	size_t len = 0;
+	size_t i;
+
+	if (!hapd->iface || !hapd->iface->interfaces)
+		return 0;
+
+	if (!hapd->mld)
+		return 0;
+
+	if (type != WLAN_FC_STYPE_BEACON && type != WLAN_FC_STYPE_PROBE_RESP)
+		return 0;
+
+	for (i = 0; i < hapd->iface->interfaces->count; i++) {
+		iface = hapd->iface->interfaces->iface[i];
+
+		if (!iface)
+			continue;
+
+		if (iface == hapd->iface)
+			continue;
+
+		if (hapd->iconf->channel == iface->conf->channel)
+			continue;
+
+		if (!iface->bss[0]->mld)
+			continue;
+
+		len += hostapd_eid_rnr_iface_len(iface->bss[0], hapd,
+						 current_len,
+						 ema_not_applicable,
+						 ema_not_applicable,
+						 true);
+	}
+
+	return len;
+}
+
 static size_t hostapd_eid_rnr_colocation_len(struct hostapd_data *hapd,
 					     size_t *current_len)
 {
@@ -6683,6 +6747,9 @@ static size_t hostapd_eid_rnr_colocation
 	for (i = 0; i < hapd->iface->interfaces->count; i++) {
 		iface = hapd->iface->interfaces->iface[i];
 
+		if (!iface)
+			continue;
+
 		if (iface == hapd->iface ||
 		    !is_6ghz_op_class(iface->conf->op_class))
 			continue;
@@ -6690,7 +6757,8 @@ static size_t hostapd_eid_rnr_colocation
 		len += hostapd_eid_rnr_iface_len(iface->bss[0], hapd,
 						 current_len,
 						 ema_not_applicable,
-						 ema_not_applicable);
+						 ema_not_applicable,
+						 false);
 	}
 
 	return len;
@@ -6718,7 +6786,8 @@ size_t hostapd_eid_rnr_len(struct hostap
 			total_len += hostapd_eid_rnr_iface_len(hapd, hapd,
 							       &current_len,
 							       ema_not_applicable,
-							       ema_not_applicable);
+							       ema_not_applicable,
+							       false);
 		break;
 
 	case WLAN_FC_STYPE_ACTION:
@@ -6726,13 +6795,16 @@ size_t hostapd_eid_rnr_len(struct hostap
 			total_len += hostapd_eid_rnr_iface_len(hapd, hapd,
 							       &current_len,
 							       ema_not_applicable,
-							       ema_not_applicable);
+							       ema_not_applicable,
+							       false);
 		break;
 
 	default:
 		break;
 	}
 
+	total_len += hostapd_eid_rnr_mlo_len(hapd, type, &current_len);
+
 	return total_len;
 }
 
@@ -6795,7 +6867,8 @@ static u8 * hostapd_eid_nr_db(struct hos
 static u8 * hostapd_eid_rnr_iface(struct hostapd_data *hapd,
 				  struct hostapd_data *reporting_hapd,
 				  u8 *eid, size_t *current_len,
-				  int ema_bss_index_1, int ema_bss_index_2)
+				  int ema_bss_index_1, int ema_bss_index_2,
+				  bool mld_update)
 {
 	struct hostapd_data *bss;
 	struct hostapd_iface *iface = hapd->iface;
@@ -6804,6 +6877,8 @@ static u8 * hostapd_eid_rnr_iface(struct
 	int ch_width = hostapd_get_oper_chwidth(hapd->iconf);
 	u8 *tbtt_count_pos, *eid_start = eid, *size_offset = (eid - len) + 1;
 	u8 tbtt_count = 0, op_class, channel, bss_param;
+	u8 tbtt_info_len = mld_update ? RNR_TBTT_MLD_INFO_LEN : RNR_TBTT_INFO_LEN;
+	u8 bss_param_change_count = 0;
 
 	if (!(iface->drv_flags & WPA_DRIVER_FLAGS_AP_CSA) || !iface->freq)
 		return eid;
@@ -6820,7 +6895,7 @@ static u8 * hostapd_eid_rnr_iface(struct
 
 	while (start < iface->num_bss) {
 		if (!len ||
-		    len + RNR_TBTT_HEADER_LEN + RNR_TBTT_INFO_LEN > 255) {
+		    len + RNR_TBTT_HEADER_LEN + tbtt_info_len > 255) {
 			eid_start = eid;
 			*eid++ = WLAN_EID_REDUCED_NEIGHBOR_REPORT;
 			size_offset = eid++;
@@ -6829,7 +6904,7 @@ static u8 * hostapd_eid_rnr_iface(struct
 		}
 
 		tbtt_count_pos = eid++;
-		*eid++ = RNR_TBTT_INFO_LEN;
+		*eid++ = tbtt_info_len;
 		*eid++ = op_class;
 		*eid++ = hapd->iconf->channel;
 		len += RNR_TBTT_HEADER_LEN;
@@ -6848,7 +6923,28 @@ static u8 * hostapd_eid_rnr_iface(struct
 			    (i >= ema_bss_index_1) && (i < ema_bss_index_2))
 				continue;
 
-			if (len + RNR_TBTT_INFO_LEN > 255 ||
+			if (!mld_update) {
+				/* For non-mld update, if the current BSS is part of
+				 * same MLD then in MLD TBTT info the basic info will
+				 * be present hence we can skip to add it without MLD
+				 * params. However if the BSS is not part of same MLD
+				 * then it needs to be added */
+				if ((!reporting_hapd->mld || !bss->mld) ||
+				    (reporting_hapd->mld != bss->mld))
+					goto co_location_rnr;
+
+				else
+					continue;
+			}
+
+			/* MLD BSS are reported in separate Neighbor Info */
+			if ((!bss->mld && mld_update) || (bss->mld && !mld_update))
+				continue;
+
+			/* TODO: Misc MBSSID + MLO RNR exceptions */
+
+co_location_rnr:
+			if (len + tbtt_info_len > 255 ||
 			    tbtt_count >= RNR_TBTT_INFO_COUNT_MAX)
 				break;
 
@@ -6884,7 +6980,35 @@ static u8 * hostapd_eid_rnr_iface(struct
 
 			*eid++ = bss_param;
 			*eid++ = RNR_20_MHZ_PSD_MAX_TXPOWER - 1;
-			len += RNR_TBTT_INFO_LEN;
+
+			if (!mld_update) {
+				len += tbtt_info_len;
+				tbtt_count += 1;
+				continue;
+			}
+
+			if (!reporting_hapd->iconf->mbssid) {
+				if (!reporting_hapd->mld)
+					*eid++ = bss->mld->mld_id + 1;
+				else if (reporting_hapd->mld->mld_id == bss->mld->mld_id)
+					*eid++ = 0;
+				else
+					*eid++ = bss->mld->mld_id + 1;
+			} else {
+				/* TODO check if no non TX vap is also not part of MLD */
+				if (!reporting_hapd->mld)
+					*eid++ = bss->mld->mld_id + 1;
+				else if (reporting_hapd->mld->mld_id == bss->mld->mld_id)
+					*eid++ = 0;
+				/* TODO Misc MBSSID cases - involving non Tx mlds */
+			}
+
+			*eid++ = (bss->iface->mlo_link_id) |
+				 (bss_param_change_count & 0xf) << 4;
+
+			/* TODO bss param update info */
+			*eid++ = bss_param_change_count << 4 & 0xf0;
+			len += tbtt_info_len;
 			tbtt_count += 1;
 		}
 
@@ -6913,18 +7037,60 @@ static u8 * hostapd_eid_rnr_colocation(s
 	for (i = 0; i < hapd->iface->interfaces->count; i++) {
 		iface = hapd->iface->interfaces->iface[i];
 
+		if (!iface)
+			continue;
+
 		if (iface == hapd->iface ||
 		    !is_6ghz_op_class(iface->conf->op_class))
 			continue;
 
 		eid = hostapd_eid_rnr_iface(iface->bss[0], hapd, eid,
 					    current_len, ema_not_applicable,
-					    ema_not_applicable);
+					    ema_not_applicable, false);
 	}
 
 	return eid;
 }
 
+static u8 * hostapd_eid_rnr_mlo(struct hostapd_data *hapd, u32 type, u8 *eid,
+				  size_t *current_len)
+{
+	struct hostapd_iface *iface;
+	size_t i;
+
+	if (!hapd->iface || !hapd->iface->interfaces)
+		return eid;
+
+	if (!hapd->mld)
+		return eid;
+
+	if (type != WLAN_FC_STYPE_BEACON && type != WLAN_FC_STYPE_PROBE_RESP)
+		return eid;
+
+	for (i = 0; i < hapd->iface->interfaces->count; i++) {
+		iface = hapd->iface->interfaces->iface[i];
+
+		if (!iface)
+			continue;
+
+		if (iface == hapd->iface)
+			continue;
+
+		if (hapd->iconf->channel == iface->conf->channel)
+			continue;
+
+		if (!iface->bss[0]->mld)
+			continue;
+
+		eid = hostapd_eid_rnr_iface(iface->bss[0], hapd,
+					     eid, current_len,
+					     ema_not_applicable,
+					     ema_not_applicable,
+					     true);
+	}
+
+	return eid;
+}
 
 u8 * hostapd_eid_rnr(struct hostapd_data *hapd, u8 *eid, u32 type)
 {
@@ -6948,7 +7114,8 @@ u8 * hostapd_eid_rnr(struct hostapd_data
 			eid = hostapd_eid_rnr_iface(hapd, hapd, eid,
 						    &current_len,
 						    ema_not_applicable,
-						    ema_not_applicable);
+						    ema_not_applicable,
+						    false);
 		break;
 
 	case WLAN_FC_STYPE_ACTION:
@@ -6956,13 +7123,16 @@ u8 * hostapd_eid_rnr(struct hostapd_data
 			eid = hostapd_eid_rnr_iface(hapd, hapd,	eid,
 						    &current_len,
 						    ema_not_applicable,
-						    ema_not_applicable);
+						    ema_not_applicable,
+						    false);
 		break;
 
 	default:
 		return eid_start;
 	}
 
+	eid = hostapd_eid_rnr_mlo(hapd, type, eid, &current_len);
+
 	if (eid == eid_start + 2)
 		return eid_start;
 
@@ -7084,7 +7254,8 @@ size_t hostapd_eid_mbssid_len(struct hos
 								hostapd_mbssid_get_tx_bss(hapd),
 								&rnr_cur_len,
 								rnr_count,
-								bss_index);
+								bss_index,
+								false);
 		}
 	}
 
--- a/src/common/ieee802_11_defs.h
+++ b/src/common/ieee802_11_defs.h
@@ -2472,8 +2472,10 @@ struct ieee80211_he_mu_edca_parameter_se
 #define RNR_HEADER_LEN                              2
 #define RNR_TBTT_HEADER_LEN                         4
 #define RNR_TBTT_INFO_COUNT(x)                      (((x) & 0xf) << 4)
+#define RNR_TBTT_LINK_ID(x)                	    (((x) & 0xf) << 4)
 #define RNR_TBTT_INFO_COUNT_MAX                     16
 #define RNR_TBTT_INFO_LEN                           13
+#define RNR_TBTT_MLD_INFO_LEN                       16
 #define RNR_NEIGHBOR_AP_OFFSET_UNKNOWN              255
 /* Figure 9-632a - BSS Parameters subfield format */
 #define RNR_BSS_PARAM_OCT_RECOMMENDED               BIT(0)
