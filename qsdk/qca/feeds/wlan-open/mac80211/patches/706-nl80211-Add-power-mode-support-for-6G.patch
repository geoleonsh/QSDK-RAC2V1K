From 1ddc2a5498dd7bdfd2e86a231588351890e27ad9 Mon Sep 17 00:00:00 2001
From: Amutha Ravikumar <quic_aravikum@quicinc.com>
Date: Wed, 15 Feb 2023 14:35:31 +0530
Subject: nl80211: Add power mode support for 6 GHz

During RRM link measurement testing, power mode of STA/AP
is not sent properly during 6G. Hence implemented the support
to calculate power mode of STA and AP from parsing wireless_dev
structure.

Signed-off-by: Amutha Ravikumar <quic_aravikum@quicinc.com>
---
 include/net/cfg80211.h  |  3 +++
 net/mac80211/cfg.c      | 41 +++++++++++++++++++++++++++++++++++++++++
 net/wireless/nl80211.c  |  2 ++
 net/wireless/rdev-ops.h | 11 +++++++++++
 4 files changed, 57 insertions(+)

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -4698,6 +4698,9 @@ struct cfg80211_ops {
 				    unsigned int link_id,
 				    struct cfg80211_chan_def *chandef);
 
+	enum nl80211_regulatory_power_modes
+		(*get_ap_6ghz_pwr_mode)(struct wireless_dev *wdev);
+
 	int	(*add_tx_ts)(struct wiphy *wiphy, struct net_device *dev,
 			     u8 tsid, const u8 *peer, u8 user_prio,
 			     u16 admitted_time);
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -4444,6 +4444,46 @@ static int ieee80211_set_ap_chanwidth(st
 	return ret;
 }
 
+static enum nl80211_regulatory_power_modes
+ieee80211_get_ap_6ghz_pwr_mode(struct wireless_dev *wdev)
+{
+	struct ieee80211_sub_if_data *sdata;
+	enum nl80211_regulatory_power_modes mode = NL80211_REG_AP_LPI;
+	enum ieee80211_ap_reg_power ap_power_type;
+
+	if (!wdev)
+		return mode;
+	switch (wdev->iftype) {
+	case NL80211_IFTYPE_AP:
+		mode = wdev->reg_6g_power_mode;
+		break;
+	case NL80211_IFTYPE_STATION:
+		sdata = IEEE80211_WDEV_TO_SUB_IF(wdev);
+		if (!ieee80211_sdata_running(sdata) ||
+		    !(sdata->flags & IEEE80211_SDATA_IN_DRIVER)) {
+				sdata_info(sdata, "sdata not running");
+				return mode;
+		}
+		/* If STA is not yet associated then assign power type
+		 * by default as IEEE80211_REG_LPI_AP */
+		if (sdata->vif.bss_conf.power_type ==
+		    IEEE80211_REG_UNSET_AP) {
+			ap_power_type = IEEE80211_REG_LPI_AP;
+		} else {
+			ap_power_type = sdata->vif.bss_conf.power_type;
+		}
+		/* ieee80211_ap_reg_power starts with 0 since they used
+		 * IEEE80211_REG_UNSET_AP as first parameter. Hence reduced
+		 * ap_power_type by offset 1 to match with 6g_reg_power_mode */
+		mode = GET_POWER_MODE_FOR_NON_AP_STA(wdev->reg_6g_power_mode, ap_power_type - 1);
+		break;
+	default:
+		/* do nothing */
+		break;
+	}
+	return mode;
+}
+
 static int ieee80211_add_tx_ts(struct wiphy *wiphy, struct net_device *dev,
 			       u8 tsid, const u8 *peer, u8 up,
 			       u16 admitted_time)
@@ -5212,6 +5252,7 @@ const struct cfg80211_ops mac80211_confi
 	.channel_switch = ieee80211_channel_switch,
 	.set_qos_map = ieee80211_set_qos_map,
 	.set_ap_chanwidth = ieee80211_set_ap_chanwidth,
+	.get_ap_6ghz_pwr_mode = ieee80211_get_ap_6ghz_pwr_mode,
 	.add_tx_ts = ieee80211_add_tx_ts,
 	.del_tx_ts = ieee80211_del_tx_ts,
 	.start_nan = ieee80211_start_nan,
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -3419,7 +3419,8 @@ static int nl80211_parse_ru_punct_bitmap
 
 int nl80211_parse_chandef(struct cfg80211_registered_device *rdev,
 			  struct genl_info *info,
-			  struct cfg80211_chan_def *chandef)
+			  struct cfg80211_chan_def *chandef,
+			  struct wireless_dev *wdev)
 {
 	struct netlink_ext_ack *extack = genl_info_extack(info);
 	struct nlattr **attrs = info->attrs;
@@ -3438,6 +3439,8 @@ int nl80211_parse_chandef(struct cfg8021
 
 	if (info->attrs[NL80211_ATTR_6G_REG_POWER_MODE])
 		mode = nla_get_u8(info->attrs[NL80211_ATTR_6G_REG_POWER_MODE]);
+	else if (wdev)
+		mode = rdev_get_ap_6ghz_pwr_mode(rdev, wdev);
 
 	memset(chandef, 0, sizeof(*chandef));
 
@@ -3585,7 +3588,7 @@ static int __nl80211_set_channel(struct
 		link_id = 0;
 	}
 
-	result = nl80211_parse_chandef(rdev, info, &chandef);
+	result = nl80211_parse_chandef(rdev, info, &chandef, wdev);
 	if (result)
 		return result;
 
@@ -6493,7 +6496,7 @@ static int nl80211_start_ap(struct sk_bu
 	}
 
 	if (info->attrs[NL80211_ATTR_WIPHY_FREQ]) {
-		err = nl80211_parse_chandef(rdev, info, &params->chandef);
+		err = nl80211_parse_chandef(rdev, info, &params->chandef, wdev);
 		if (err)
 			goto out;
 	} else if (wdev->valid_links) {
@@ -9628,7 +9631,7 @@ static int nl80211_trigger_scan(struct s
 		return -EBUSY;
 
 	if (info->attrs[NL80211_ATTR_WIPHY_FREQ]) {
-		if (nl80211_parse_chandef(rdev, info, &chandef)) {
+		if (nl80211_parse_chandef(rdev, info, &chandef, wdev)) {
 			return -EINVAL;
 		}
 		chandef_found = true;
@@ -10447,7 +10450,7 @@ static int nl80211_start_radar_detection
 	if (dfs_region == NL80211_DFS_UNSET)
 		goto unlock;
 
-	err = nl80211_parse_chandef(rdev, info, &chandef);
+	err = nl80211_parse_chandef(rdev, info, &chandef, wdev);
 	if (err)
 		goto unlock;
 
@@ -10541,7 +10544,7 @@ static int nl80211_notify_radar_detectio
 		return -EINVAL;
 	}
 
-	err = nl80211_parse_chandef(rdev, info, &chandef);
+	err = nl80211_parse_chandef(rdev, info, &chandef, wdev);
 	if (err) {
 		GENL_SET_ERR_MSG(info, "Unable to extract chandef info");
 		return err;
@@ -10740,7 +10743,7 @@ static int nl80211_channel_switch(struct
 	}
 
 skip_beacons:
-	err = nl80211_parse_chandef(rdev, info, &params.chandef);
+	err = nl80211_parse_chandef(rdev, info, &params.chandef, wdev);
 	if (err)
 		goto free;
 
@@ -11825,6 +11828,7 @@ static int nl80211_join_ibss(struct sk_b
 	struct cfg80211_ibss_params ibss;
 	struct wiphy *wiphy;
 	struct cfg80211_cached_keys *connkeys = NULL;
+	struct wireless_dev *wdev = dev->ieee80211_ptr;
 	int err;
 
 	memset(&ibss, 0, sizeof(ibss));
@@ -11847,7 +11851,7 @@ static int nl80211_join_ibss(struct sk_b
 	if (!rdev->ops->join_ibss)
 		return -EOPNOTSUPP;
 
-	if (dev->ieee80211_ptr->iftype != NL80211_IFTYPE_ADHOC)
+	if (wdev->iftype != NL80211_IFTYPE_ADHOC)
 		return -EOPNOTSUPP;
 
 	wiphy = &rdev->wiphy;
@@ -11866,7 +11870,7 @@ static int nl80211_join_ibss(struct sk_b
 		ibss.ie_len = nla_len(info->attrs[NL80211_ATTR_IE]);
 	}
 
-	err = nl80211_parse_chandef(rdev, info, &ibss.chandef);
+	err = nl80211_parse_chandef(rdev, info, &ibss.chandef, wdev);
 	if (err)
 		return err;
 
@@ -12840,7 +12844,7 @@ static int nl80211_remain_on_channel(str
 	    duration > rdev->wiphy.max_remain_on_channel_duration)
 		return -EINVAL;
 
-	err = nl80211_parse_chandef(rdev, info, &chandef);
+	err = nl80211_parse_chandef(rdev, info, &chandef, wdev);
 	if (err)
 		return err;
 
@@ -13054,7 +13058,7 @@ static int nl80211_tx_mgmt(struct sk_buf
 	 */
 	chandef.chan = NULL;
 	if (info->attrs[NL80211_ATTR_WIPHY_FREQ]) {
-		err = nl80211_parse_chandef(rdev, info, &chandef);
+		err = nl80211_parse_chandef(rdev, info, &chandef, wdev);
 		if (err)
 			return err;
 	}
@@ -13459,7 +13463,8 @@ static int nl80211_join_ocb(struct sk_bu
 	struct ocb_setup setup = {};
 	int err;
 
-	err = nl80211_parse_chandef(rdev, info, &setup.chandef);
+	err = nl80211_parse_chandef(rdev, info, &setup.chandef,
+				    dev->ieee80211_ptr);
 	if (err)
 		return err;
 
@@ -13538,7 +13543,8 @@ static int nl80211_join_mesh(struct sk_b
 		cfg.auto_open_plinks = false;
 
 	if (info->attrs[NL80211_ATTR_WIPHY_FREQ]) {
-		err = nl80211_parse_chandef(rdev, info, &setup.chandef);
+		err = nl80211_parse_chandef(rdev, info, &setup.chandef,
+					    dev->ieee80211_ptr);
 		if (err)
 			return err;
 	} else {
@@ -15873,7 +15879,7 @@ static int nl80211_tdls_channel_switch(s
 	    !info->attrs[NL80211_ATTR_OPER_CLASS])
 		return -EINVAL;
 
-	err = nl80211_parse_chandef(rdev, info, &chandef);
+	err = nl80211_parse_chandef(rdev, info, &chandef, wdev);
 	if (err)
 		return err;
 
--- a/net/wireless/rdev-ops.h
+++ b/net/wireless/rdev-ops.h
@@ -1130,6 +1130,19 @@ rdev_set_ap_chanwidth(struct cfg80211_re
 	return ret;
 }
 
+static inline enum nl80211_regulatory_power_modes
+rdev_get_ap_6ghz_pwr_mode(struct cfg80211_registered_device *rdev,
+			  struct wireless_dev *wdev)
+{
+	enum nl80211_regulatory_power_modes ret = NL80211_REG_AP_LPI;
+	trace_rdev_get_ap_6ghz_pwr_mode(wdev);
+	if (rdev->ops->get_ap_6ghz_pwr_mode)
+		ret = rdev->ops->get_ap_6ghz_pwr_mode(wdev);
+	trace_rdev_return_enum(&rdev->wiphy, ret);
+	return ret;
+}
+
+
 static inline int
 rdev_add_tx_ts(struct cfg80211_registered_device *rdev,
 	       struct net_device *dev, u8 tsid, const u8 *peer,
--- a/net/wireless/trace.h
+++ b/net/wireless/trace.h
@@ -292,6 +292,21 @@ TRACE_EVENT(rdev_return_int,
 	TP_printk(WIPHY_PR_FMT ", returned: %d", WIPHY_PR_ARG, __entry->ret)
 );
 
+TRACE_EVENT(rdev_return_enum,
+        TP_PROTO(struct wiphy *wiphy,
+		  enum nl80211_regulatory_power_modes ret),
+        TP_ARGS(wiphy, ret),
+        TP_STRUCT__entry(
+                WIPHY_ENTRY
+                __field(enum nl80211_regulatory_power_modes, ret)
+        ),
+        TP_fast_assign(
+                WIPHY_ASSIGN;
+                __entry->ret = ret;
+        ),
+        TP_printk(WIPHY_PR_FMT ", returned: %d", WIPHY_PR_ARG, __entry->ret)
+);
+
 TRACE_EVENT(rdev_scan,
 	TP_PROTO(struct wiphy *wiphy, struct cfg80211_scan_request *request),
 	TP_ARGS(wiphy, request),
@@ -2383,6 +2398,14 @@ TRACE_EVENT(rdev_set_ap_chanwidth,
 		  __entry->link_id)
 );
 
+TRACE_EVENT(rdev_get_ap_6ghz_pwr_mode,
+        TP_PROTO(struct wireless_dev *wdev),
+        TP_ARGS(wdev),
+        TP_STRUCT__entry(WDEV_ENTRY),
+        TP_fast_assign(WDEV_ASSIGN),
+        TP_printk(WDEV_PR_FMT, WDEV_PR_ARG)
+);
+
 TRACE_EVENT(rdev_add_tx_ts,
 	TP_PROTO(struct wiphy *wiphy, struct net_device *netdev,
 		 u8 tsid, const u8 *peer, u8 user_prio, u16 admitted_time),
--- a/net/wireless/pmsr.c
+++ b/net/wireless/pmsr.c
@@ -185,7 +185,8 @@ static int pmsr_parse_ftm(struct cfg8021
 static int pmsr_parse_peer(struct cfg80211_registered_device *rdev,
 			   struct nlattr *peer,
 			   struct cfg80211_pmsr_request_peer *out,
-			   struct genl_info *info)
+			   struct genl_info *info,
+			   struct wireless_dev *wdev)
 {
 	struct nlattr *tb[NL80211_PMSR_PEER_ATTR_MAX + 1];
 	struct nlattr *req[NL80211_PMSR_REQ_ATTR_MAX + 1];
@@ -214,7 +215,7 @@ static int pmsr_parse_peer(struct cfg802
 	if (err)
 		return err;
 
-	err = nl80211_parse_chandef(rdev, info, &out->chandef);
+	err = nl80211_parse_chandef(rdev, info, &out->chandef, wdev);
 	if (err)
 		return err;
 
@@ -317,7 +318,8 @@ int nl80211_pmsr_start(struct sk_buff *s
 	idx = 0;
 	nla_for_each_nested(peer, peers, rem) {
 		/* NB: this reuses info->attrs, but we no longer need it */
-		err = pmsr_parse_peer(rdev, peer, &req->peers[idx], info);
+		err = pmsr_parse_peer(rdev, peer, &req->peers[idx], info,
+				      wdev);
 		if (err)
 			goto out_err;
 		idx++;
--- a/net/wireless/nl80211.h
+++ b/net/wireless/nl80211.h
@@ -24,7 +24,8 @@ static inline u64 wdev_id(struct wireles
 
 int nl80211_parse_chandef(struct cfg80211_registered_device *rdev,
 			  struct genl_info *info,
-			  struct cfg80211_chan_def *chandef);
+			  struct cfg80211_chan_def *chandef,
+			  struct wireless_dev *wdev);
 int nl80211_parse_random_mac(struct nlattr **attrs,
 			     u8 *mac_addr, u8 *mac_addr_mask);
 
