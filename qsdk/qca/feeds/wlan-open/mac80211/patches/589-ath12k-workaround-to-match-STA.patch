From 01a2515a28f07de490cca2d7e1f24f9321b5d344 Mon Sep 17 00:00:00 2001
From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Date: Mon, 28 Feb 2022 18:47:16 -0800
Subject: [PATCH] ath12k: workaround to match STA

Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>

--- a/include/linux/ieee80211.h
+++ b/include/linux/ieee80211.h
@@ -2885,6 +2885,8 @@ ieee80211_he_spr_size(const u8 *he_spr_i
 #define IEEE80211_EHT_OPER_CHAN_WIDTH_160MHZ	3
 #define IEEE80211_EHT_OPER_CHAN_WIDTH_320MHZ	4
 
+#define IEEE80211_EHT_OPER_PRESENT_BM		0x8
+
 /* Calculate 802.11be EHT capabilities IE Tx/Rx EHT MCS NSS Support Field size */
 static inline u8
 ieee80211_eht_mcs_nss_size(const struct ieee80211_he_cap_elem *he_cap,
@@ -2956,6 +2958,9 @@ ieee80211_eht_capa_size_ok(const u8 *he_
 	if (len < needed || !he_capa)
 		return false;
 
+	/* WAR: always set to true */
+	return true;
+
 	needed += ieee80211_eht_mcs_nss_size((const void *)he_capa,
 					     (const void *)data);
 	if (len < needed)
--- a/net/mac80211/eht.c
+++ b/net/mac80211/eht.c
@@ -16,7 +16,6 @@ ieee80211_eht_cap_ie_to_sta_eht_cap(stru
 				    struct link_sta_info *link_sta)
 {
 	struct ieee80211_sta_eht_cap *eht_cap = &link_sta->pub->eht_cap;
-	struct ieee80211_he_cap_elem *he_cap_ie_elem = (void *)he_cap_ie;
 	u8 eht_ppe_size = 0;
 	u8 mcs_nss_size;
 	u8 eht_total_size = sizeof(eht_cap->eht_cap_elem);
@@ -29,8 +28,11 @@ ieee80211_eht_cap_ie_to_sta_eht_cap(stru
 					 ieee80211_vif_type_p2p(&sdata->vif)))
 		return;
 
-	mcs_nss_size = ieee80211_eht_mcs_nss_size(he_cap_ie_elem,
+	mcs_nss_size = eht_cap_len - sizeof(struct ieee80211_eht_cap_elem_fixed);
+	/* WAR: compute based on capabilities
+	 * mcs_nss_size = ieee80211_eht_mcs_nss_size(he_cap_ie_elem,
 						  &eht_cap_ie_elem->fixed);
+	 */
 
 	eht_total_size += mcs_nss_size;
 
--- a/net/mac80211/vht.c
+++ b/net/mac80211/vht.c
@@ -529,10 +529,12 @@ void ieee80211_sta_set_rx_nss(struct lin
 
 	if (link_sta->pub->eht_cap.has_eht) {
 		int i;
+		int eht_mcs_set_size = ieee80211_eht_mcs_nss_size(&link_sta->pub->he_cap,
+								  &link_sta->pub->eht_cap);
 		const u8 *rx_nss_mcs = (void *)&link_sta->pub->eht_cap.eht_mcs_nss_supp;
 
 		/* get the max nss for EHT over all possible bandwidths and mcs */
-		for (i = 0; i < sizeof(struct ieee80211_eht_mcs_nss_supp); i++)
+		for (i = 0; i < eht_mcs_set_size; i++)
 			eht_rx_nss = max_t(u8, eht_rx_nss,
 					   u8_get_bits(rx_nss_mcs[i],
 						       IEEE80211_EHT_MCS_NSS_RX));
