From 322e6750640950fbf6585da516fd24d085312f0e Mon Sep 17 00:00:00 2001
From: Manish Dharanenthiran <quic_mdharane@quicinc.com>
Date: Sun, 4 Sep 2022 15:45:37 +0530
Subject: [PATCH] ath12k: Update obss color detection notify to queue work

"obss_color_collision_event" will be calling mac80211
to update the color collision bitmap received from
firmware. mac80211 eventually calls netlink broadcast
to notify about the color detection. In netlink_broadcast,
it acquires mutex lock before consuming the SKB internally.

Since color collision event is called within tasklet
context, this leads to kernel reporting "Scheduling while
atomic" if the mutex lock waits in the netlink API.

Modify the color collision event to be notified from
the queue instead of interrupt context.

Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |  2 ++
 drivers/net/wireless/ath/ath12k/mac.c  | 14 ++++++++++++++
 drivers/net/wireless/ath/ath12k/wmi.c  | 17 ++++++++++++-----
 3 files changed, 28 insertions(+), 5 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -358,6 +358,8 @@ struct ath12k_vif {
 	struct dentry *debugfs_twt;
 #endif /* CPTCFG_ATH12K_DEBUGFS */
 	struct work_struct update_bcn_template_work;
+	u64 obss_color_bitmap;
+	struct work_struct update_obss_color_notify_work;
 };
 
 struct ath12k_vif_iter {
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -7385,6 +7385,26 @@ static void ath12k_update_bcn_template_w
 				arvif->vdev_id, ret);
 }
 
+static void ath12k_update_obss_color_notify_work(struct work_struct *work)
+{
+	struct ath12k_vif *arvif = container_of(work, struct ath12k_vif,
+					update_obss_color_notify_work);
+	struct ath12k *ar;
+
+	ar = arvif->ar;
+
+	if (!ar)
+		return;
+
+	mutex_lock(&ar->conf_mutex);
+	if (arvif->is_created)
+		ieeee80211_obss_color_collision_notify(arvif->vif,
+						       arvif->obss_color_bitmap,
+						       GFP_KERNEL);
+	arvif->obss_color_bitmap = 0;
+	mutex_unlock(&ar->conf_mutex);
+}
+
 static int ath12k_mac_vdev_create(struct ath12k *ar, struct ieee80211_vif *vif)
 {
 	struct ath12k_base *ab = ar->ab;
@@ -7726,7 +7746,9 @@ static int ath12k_mac_op_add_interface(s
 	INIT_LIST_HEAD(&arvif->list);
 	arvif->key_cipher = INVALID_CIPHER;
 
+	INIT_WORK(&arvif->update_obss_color_notify_work, ath12k_update_obss_color_notify_work);
 	INIT_WORK(&arvif->update_bcn_template_work, ath12k_update_bcn_template_work);
+
 	for (i = 0; i < ARRAY_SIZE(arvif->bitrate_mask.control); i++) {
 		arvif->bitrate_mask.control[i].legacy = 0xffffffff;
 		arvif->bitrate_mask.control[i].gi = NL80211_TXRATE_FORCE_SGI;
@@ -7784,6 +7806,7 @@ static void ath12k_mac_op_remove_interfa
 	struct ath12k_base *ab;
 	int ret;
 
+	cancel_work_sync(&arvif->update_obss_color_notify_work);
 	cancel_work_sync(&arvif->update_bcn_template_work);
 
 	mutex_lock(&ah->conf_mutex);
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -9001,6 +9001,7 @@ ath12k_wmi_obss_color_collision_event(st
 	const void **tb;
 	const struct wmi_obss_color_collision_event *ev;
 	struct ath12k_vif *arvif;
+	struct ath12k *ar;
 	int ret;
 
 	tb = ath12k_wmi_tlv_parse_alloc(ab, skb->data, skb->len, GFP_ATOMIC);
@@ -9014,7 +9015,7 @@ ath12k_wmi_obss_color_collision_event(st
 	ev = tb[WMI_TAG_OBSS_COLOR_COLLISION_EVT];
 	if (!ev) {
 		ath12k_warn(ab, "failed to fetch obss color collision ev");
-		goto exit;
+		goto unlock;
 	}
 
 	arvif = ath12k_mac_get_arvif_by_vdev_id(ab, ev->vdev_id);
@@ -9022,17 +9023,20 @@ ath12k_wmi_obss_color_collision_event(st
 	{
 		ath12k_warn(ab, "failed to find arvif with vedv id %d in obss_color_collision_event\n",
 				ev->vdev_id);
-		goto exit;
+		goto unlock;
 	}
+
 	switch (ev->evt_type) {
 	case WMI_BSS_COLOR_COLLISION_DETECTION:
-		ieeee80211_obss_color_collision_notify(arvif->vif, ev->obss_color_bitmap,
-						       GFP_KERNEL);
+		ar = arvif->ar;
+		arvif->obss_color_bitmap = ev->obss_color_bitmap;
 
 		ath12k_dbg(ab, ATH12K_DBG_WMI,
 				"OBSS color collision detected vdev:%d, event:%d, bitmap:%08llx\n",
 				ev->vdev_id, ev->evt_type, ev->obss_color_bitmap);
-		break;
+		rcu_read_unlock();
+		ieee80211_queue_work(ar->ah->hw, &arvif->update_obss_color_notify_work);
+		goto exit;
 	case WMI_BSS_COLOR_COLLISION_DISABLE:
 	case WMI_BSS_COLOR_FREE_SLOT_TIMER_EXPIRY:
 	case WMI_BSS_COLOR_FREE_SLOT_AVAILABLE:
@@ -9042,9 +9046,10 @@ ath12k_wmi_obss_color_collision_event(st
 		goto exit;
 	}
 
+unlock:
+	rcu_read_unlock();
 exit:
 	kfree(tb);
-	rcu_read_unock();
 }
 
 static void ath12k_wmi_tlv_op_rx(struct ath12k_base *ab, struct sk_buff *skb)
