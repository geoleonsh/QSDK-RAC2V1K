From 62bc5631b4f097de6eef25e3fae3817e78ab8289 Mon Sep 17 00:00:00 2001
From: Ramya Gnanasekar <quic_rgnanase@quicinc.com>
Date: Thu, 27 Oct 2022 01:02:41 +0530
Subject: [PATCH] ath12k: 240MHz Q-Q vendor IE support

240MHz is Q-Q feature and it should be advertised through
vendor IE in beacon, probe request/response and association.

This patch has changes copy advertised 240MHz capabilities
through NL and then override the STA phy capabilities with
copied one during STA association.

Signed-off-by: Ramya Gnanasekar <quic_rgnanase@quicinc.com>

--- a/include/linux/ieee80211.h
+++ b/include/linux/ieee80211.h
@@ -2108,6 +2108,14 @@ struct ieee80211_eht_operation_info {
 	u8 optional[];
 } __packed;
 
+struct ieee80211_240mhz_vendor_oper {
+	u8 ccfs1;
+	u8 ccfs0;
+	u16 ru_punct_bitmap;
+	u16 phy_cap_320mhz;
+	u8 mcs_map_320mhz[3];
+}__packed;
+
 /* 802.11ac VHT Capabilities */
 #define IEEE80211_VHT_CAP_MAX_MPDU_LENGTH_3895			0x00000000
 #define IEEE80211_VHT_CAP_MAX_MPDU_LENGTH_7991			0x00000001
@@ -2829,6 +2837,7 @@ ieee80211_he_spr_size(const u8 *he_spr_i
 
 /* EHT PHY capabilities as defined in P802.11be_D2.0 section 9.4.2.313.3 */
 #define IEEE80211_EHT_PHY_CAP0_320MHZ_IN_6GHZ			0x02
+#define IEEE80211_EHT_PHY_CAP0_320MHZ_IN_6GHZ_MASK		0x1
 #define IEEE80211_EHT_PHY_CAP0_242_TONE_RU_GT20MHZ		0x04
 #define IEEE80211_EHT_PHY_CAP0_NDP_4_EHT_LFT_32_GI		0x08
 #define IEEE80211_EHT_PHY_CAP0_PARTIAL_BW_UL_MU_MIMO		0x10
@@ -2891,6 +2900,13 @@ ieee80211_he_spr_size(const u8 *he_spr_i
 #define IEEE80211_EHT_PHY_CAP8_RX_1024QAM_WIDER_BW_DL_OFDMA	0x01
 #define IEEE80211_EHT_PHY_CAP8_RX_4096QAM_WIDER_BW_DL_OFDMA	0x02
 
+#define IEEE80211_EHT_240MHZ_PHY_CAP_BEAMFORMEE_SS_320MHZ_MASK	(BIT(1) | BIT(2) | \
+								BIT(3))
+#define IEEE80211_EHT_240MHZ_PHY_SOUNDING_DIM_320MHZ_MASK	BIT(4)
+#define IEEE80211_EHT_240MHZ_PHY_SOUNDING_DIM_320MHZ_MASK_1	(BIT(5) | BIT(6))
+#define IEEE80211_EHT_240MHZ_PHY_NON_OFDMA_UL_MU_MIMO_320MHZ_MASK	BIT(7)
+#define IEEE80211_EHT_240MHZ_PHY_MU_BEAMFORMER_320MHZ_MASK	BIT(8)
+
 /*
  * EHT operation channel width as defined in P802.11be_D2.0 section 9.4.2.311
  */
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -1621,6 +1621,8 @@ struct link_station_parameters {
 	const struct ieee80211_he_6ghz_capa *he_6ghz_capa;
 	const struct ieee80211_eht_cap_elem *eht_capa;
 	u8 eht_capa_len;
+	const struct ieee80211_240mhz_vendor_oper *eht_240mhz_capa;
+	u8 eht_240mhz_len;
 };
 
 /**
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@ -3378,6 +3378,8 @@ enum nl80211_attrs {
 	NL80211_ATTR_MULTI_HW_MACS,
 
 	NL80211_ATTR_RADAR_BITMAP,
+
+	NL80211_ATTR_EHT_240MHZ_CAPABILITY,
 	/* add attributes here, update the policy in nl80211.c */
 
 	__NL80211_ATTR_AFTER_LAST,
@@ -3440,6 +3442,7 @@ enum nl80211_attrs {
 #define NL80211_MAX_NR_AKM_SUITES		2
 #define NL80211_EHT_MIN_CAPABILITY_LEN          12
 #define NL80211_EHT_MAX_CAPABILITY_LEN          51
+#define NL80211_EHT240_MAX_CAPABILITY_LEN	10
 
 #define NL80211_MIN_REMAIN_ON_CHANNEL_TIME	10
 
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -1892,6 +1892,8 @@ static int sta_link_apply_parameters(str
 						    params->he_capa_len,
 						    params->eht_capa,
 						    params->eht_capa_len,
+						    params->eht_240mhz_capa,
+						    params->eht_240mhz_len,
 						    link_sta);
 		/* 802.11s mesh STA may have different eht punctruing pattern,
 		 * update it here so that drivers can use if needed.
--- a/net/mac80211/eht.c
+++ b/net/mac80211/eht.c
@@ -13,6 +13,8 @@ ieee80211_eht_cap_ie_to_sta_eht_cap(stru
 				    const u8 *he_cap_ie, u8 he_cap_len,
 				    const struct ieee80211_eht_cap_elem *eht_cap_ie_elem,
 				    u8 eht_cap_len,
+				    const struct ieee80211_240mhz_vendor_oper *eht_240mhz_cap,
+				    u8 eht_240mhz_len,
 				    struct link_sta_info *link_sta)
 {
 	struct ieee80211_sta_eht_cap *eht_cap = &link_sta->pub->eht_cap;
@@ -73,6 +75,37 @@ ieee80211_eht_cap_ie_to_sta_eht_cap(stru
 		       &eht_cap_ie_elem->optional[mcs_nss_size],
 		       eht_ppe_size);
 
+	if (eht_240mhz_cap &&
+	    sband->band == NL80211_BAND_5GHZ) {
+		/* Override capabilities from QCN IE for 240MHz to EHT phy capab */
+		if (eht_240mhz_cap->phy_cap_320mhz &
+		    IEEE80211_EHT_PHY_CAP0_320MHZ_IN_6GHZ_MASK)
+			eht_cap->eht_cap_elem.phy_cap_info[0] |=
+				IEEE80211_EHT_PHY_CAP0_320MHZ_IN_6GHZ;
+		if (eht_240mhz_cap->phy_cap_320mhz &
+		    IEEE80211_EHT_240MHZ_PHY_CAP_BEAMFORMEE_SS_320MHZ_MASK)
+			eht_cap->eht_cap_elem.phy_cap_info[1] |=
+				IEEE80211_EHT_PHY_CAP1_BEAMFORMEE_SS_320MHZ_MASK;
+		if (eht_240mhz_cap->phy_cap_320mhz &
+		    IEEE80211_EHT_240MHZ_PHY_SOUNDING_DIM_320MHZ_MASK_1)
+			eht_cap->eht_cap_elem.phy_cap_info[2] |=
+				IEEE80211_EHT_PHY_CAP2_SOUNDING_DIM_320MHZ_MASK;
+		if (eht_240mhz_cap->phy_cap_320mhz &
+		    IEEE80211_EHT_240MHZ_PHY_SOUNDING_DIM_320MHZ_MASK_1)
+			eht_cap->eht_cap_elem.phy_cap_info[3] |=
+				IEEE80211_EHT_PHY_CAP3_SOUNDING_DIM_320MHZ_MASK;
+		if (eht_240mhz_cap->phy_cap_320mhz &
+		    IEEE80211_EHT_240MHZ_PHY_NON_OFDMA_UL_MU_MIMO_320MHZ_MASK)
+			eht_cap->eht_cap_elem.phy_cap_info[7] |=
+				IEEE80211_EHT_PHY_CAP7_NON_OFDMA_UL_MU_MIMO_320MHZ;
+		if (eht_240mhz_cap->phy_cap_320mhz &
+		    IEEE80211_EHT_240MHZ_PHY_MU_BEAMFORMER_320MHZ_MASK)
+			eht_cap->eht_cap_elem.phy_cap_info[7] |=
+				IEEE80211_EHT_PHY_CAP7_MU_BEAMFORMER_320MHZ;
+		memcpy(&eht_cap->eht_mcs_nss_supp.bw._320, &eht_240mhz_cap->mcs_map_320mhz,
+		       sizeof(struct ieee80211_eht_mcs_nss_supp_bw));
+	}
+
 	eht_cap->has_eht = true;
 
 	link_sta->cur_max_bandwidth = ieee80211_sta_cap_rx_bw(link_sta);
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -1726,6 +1726,7 @@ struct ieee802_11_elems {
 	const struct ieee80211_aid_response_ie *aid_resp;
 	const struct ieee80211_eht_cap_elem *eht_cap;
 	const struct ieee80211_eht_operation *eht_operation;
+	const struct ieee80211_240mhz_vendor_ope *eht_240mhz_capab;
 	const struct ieee80211_multi_link_elem *multi_link;
 
 	/* length of them, respectively */
@@ -1749,6 +1750,7 @@ struct ieee802_11_elems {
 	u8 tx_pwr_env_len[IEEE80211_TPE_MAX_IE_COUNT];
 	u8 tx_pwr_env_num;
 	u8 eht_cap_len;
+	u8 eht_240mhz_len;
 
 	/* whether a parse error occurred while retrieving these elements */
 	bool parse_error;
@@ -2603,6 +2605,8 @@ ieee80211_eht_cap_ie_to_sta_eht_cap(stru
 				    const u8 *he_cap_ie, u8 he_cap_len,
 				    const struct ieee80211_eht_cap_elem *eht_cap_ie_elem,
 				    u8 eht_cap_len,
+				    const struct ieee80211_240mhz_vendor_oper *eht_240mhz_cap,
+				    u8 eht_240mhz_len,
 				    struct link_sta_info *link_sta);
 void ieee80211_eht_op_ie_to_bss_conf(struct ieee80211_bss_conf *link_conf,
 				     const struct ieee80211_eht_operation *op_ie);
--- a/net/mac80211/mesh_plink.c
+++ b/net/mac80211/mesh_plink.c
@@ -464,6 +464,7 @@ static void mesh_sta_info_init(struct ie
 	ieee80211_eht_cap_ie_to_sta_eht_cap(sdata, sband, elems->he_cap,
 					    elems->he_cap_len,
 					    elems->eht_cap, elems->eht_cap_len,
+					    NULL, NULL,
 					    &sta->deflink);
 
 	if (bw != sta->sta.deflink.bandwidth)
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -4092,6 +4092,7 @@ static bool ieee80211_assoc_config_link(
 							    elems->he_cap_len,
 							    elems->eht_cap,
 							    elems->eht_cap_len,
+							    NULL, NULL,
 							    link_sta);
 
 			bss_conf->eht_support = link_sta->pub->eht_cap.has_eht;
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -860,6 +860,16 @@ static const struct nla_policy nl80211_p
 	[NL80211_ATTR_RU_PUNCT_BITMAP] = { .type = NLA_U16 },
 	[NL80211_ATTR_AP_PS] = NLA_POLICY_MAX(NLA_U8, 1),
 	[NL80211_ATTR_RADAR_BITMAP] = { .type = NLA_U16 },
+#if LINUX_VERSION_IS_GEQ(5,10,0)
+	[NL80211_ATTR_EHT_240MHZ_CAPABILITY] =
+			NLA_POLICY_RANGE(NLA_BINARY,
+					 0,
+					 NL80211_EHT240_MAX_CAPABILITY_LEN),
+#else
+	[NL80211_ATTR_EHT_240MHZ_CAPABILITY] =
+			{ .type = NLA_BINARY,
+			  .len = NL80211_EHT240_MAX_CAPABILITY_LEN },
+#endif
 };
 
 /* policy for the key attributes */
@@ -7502,6 +7512,13 @@ static int nl80211_set_station_tdls(stru
 							params->link_sta_params.eht_capa_len))
 				return -EINVAL;
 		}
+
+		if (info->attrs[NL80211_ATTR_EHT_240MHZ_CAPABILITY]) {
+			params->link_sta_params.eht_240mhz_capa =
+				nla_data(info->attrs[NL80211_ATTR_EHT_240MHZ_CAPABILITY]);
+			params->link_sta_params.eht_240mhz_len =
+				nla_len(info->attrs[NL80211_ATTR_EHT_240MHZ_CAPABILITY]);
+		}
 	}
 
 	err = nl80211_parse_sta_channel_info(info, params);
@@ -16660,6 +16677,13 @@ nl80211_add_mod_link_station(struct sk_b
 							params.eht_capa_len))
 				return -EINVAL;
 		}
+
+		if (info->attrs[NL80211_ATTR_EHT_240MHZ_CAPABILITY]) {
+			params.eht_240mhz_capa =
+				nla_data(info->attrs[NL80211_ATTR_EHT_240MHZ_CAPABILITY]);
+			params.eht_240mhz_len =
+				nla_len(info->attrs[NL80211_ATTR_EHT_240MHZ_CAPABILITY]);
+		}
 	}
 
 	if (info->attrs[NL80211_ATTR_HE_6GHZ_CAPABILITY])
