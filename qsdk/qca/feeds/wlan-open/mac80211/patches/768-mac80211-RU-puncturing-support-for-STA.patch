From 86f50e585592c075c1e29521d1fdcb8461b33456 Mon Sep 17 00:00:00 2001
From: Rajat Soni <quic_rajson@quicinc.com>
Date: Fri, 28 Apr 2023 11:57:48 +0530
Subject: [PATCH] mac80211: RU puncturing support for STA

Currently, when AP detects an radar in dfs channel then channels are punctured
in which radar is detected but STA is downgrading its bandwidth instead of
handling this puncturing.

For example if AP is in EHT80 mode channel 100 and radar is detected, channel
puncturing takes place. Observed that STA reduces its bandwidth to 40 MHz. This
should not happen, STA should remain in 80Mhz bandwidth.

We are not handling puncturing bitmap on STA side. When AP advertises puncturing
bitmap, STA should handle this puncturing.

To resolve this issue, we should parse EHT operational IE and update chandef
with puncturing bitmap for EHT sta.

Signed-off-by: Ramya Gnanasekar <quic_rgnanase@quicinc.com>
Signed-off-by: Rajat Soni <quic_rajson@quicinc.com>
---
 net/mac80211/mlme.c | 38 ++++++++++++++++++++++++++++++--------
 net/mac80211/util.c | 14 ++++++++++++++
 2 files changed, 44 insertions(+), 8 deletions(-)

diff --git a/net/mac80211/mlme.c b/net/mac80211/mlme.c
index b46c80a..906edbc 100644
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -160,6 +160,9 @@ ieee80211_determine_chantype(struct ieee80211_sub_if_data *sdata,
 	struct ieee80211_sta_ht_cap sta_ht_cap;
 	ieee80211_conn_flags_t ret;
 	u32 ht_cfreq;
+	const struct ieee80211_sta_eht_cap *eht_cap;
+	const struct ieee80211_sta_he_cap *he_cap;
+	enum nl80211_iftype iftype = ieee80211_vif_type_p2p(&sdata->vif);
 
 	memset(chandef, 0, sizeof(struct cfg80211_chan_def));
 	chandef->chan = channel;
@@ -291,11 +294,6 @@ ieee80211_determine_chantype(struct ieee80211_sub_if_data *sdata,
 		goto out;
 	}
 
-	if (cfg80211_chandef_identical(chandef, &vht_chandef)) {
-		ret = 0;
-		goto out;
-	}
-
 	if (!cfg80211_chandef_compatible(chandef, &vht_chandef)) {
 		if (!(conn_flags & IEEE80211_CONN_DISABLE_VHT))
 			sdata_info(sdata,
@@ -313,11 +311,35 @@ ieee80211_determine_chantype(struct ieee80211_sub_if_data *sdata,
 	 */
 	if (eht_oper && (eht_oper->params & IEEE80211_EHT_OPER_INFO_PRESENT)) {
 		struct cfg80211_chan_def eht_chandef = *chandef;
+		bool support_160, support_320;
+		u8 he_phy_cap, eht_phy_cap;
+
+		he_cap = ieee80211_get_he_iftype_cap(sband, iftype);
+		if (!he_cap) {
+			sdata_info(sdata, "Missing iftype sband data/HE cap, disabling HE/EHT");
+			ret = IEEE80211_CONN_DISABLE_HE | IEEE80211_CONN_DISABLE_EHT;
+			goto out;
+		}
+
+		eht_cap = ieee80211_get_eht_iftype_cap(sband, iftype);
+		if (!eht_cap) {
+			sdata_info(sdata, "Missing iftype sband data/EHT cap, disabling EHT");
+			ret = IEEE80211_CONN_DISABLE_EHT;
+			goto out;
+		}
+
+		eht_phy_cap = eht_cap->eht_cap_elem.phy_cap_info[0];
+		he_phy_cap = he_cap->he_cap_elem.phy_cap_info[0];
+		support_320 =
+			eht_phy_cap & IEEE80211_EHT_PHY_CAP0_320MHZ_IN_6GHZ;
+		support_160 =
+			he_phy_cap &
+			IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_160MHZ_IN_5G;
 
 		ieee80211_chandef_eht_oper(sdata, eht_oper,
-					   eht_chandef.width ==
-					   NL80211_CHAN_WIDTH_160,
-					   false, &eht_chandef);
+					   support_160,
+					   support_320,
+					   &eht_chandef);
 
 		if (!cfg80211_chandef_valid(&eht_chandef)) {
 			if (!(conn_flags & IEEE80211_CONN_DISABLE_EHT))
diff --git a/net/mac80211/util.c b/net/mac80211/util.c
index 4da3eae..11cce4b 100644
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -3698,6 +3698,20 @@ void ieee80211_chandef_eht_oper(struct ieee80211_sub_if_data *sdata,
 		}
 		break;
 	}
+
+	if (chandef->width >= NL80211_CHAN_WIDTH_80 &&
+	    eht_oper->params &
+	    IEEE80211_EHT_OPER_DISABLED_SUBCHANNEL_BITMAP_PRESENT) {
+		chandef->ru_punct_bitmap = (eht_oper->optional[4] << 8) |
+					    eht_oper->optional[3];
+
+		if (!cfg80211_ru_punct_bitmap_valid(chandef)) {
+			sdata_info(sdata, "Received invalid puncturing bitmap 0x%x",
+				   chandef->ru_punct_bitmap);
+			chandef->ru_punct_bitmap = 0;
+			return;
+		}
+	}
 }
 
 struct ieee80211_channel
-- 
2.17.1

