From ef93fa3c3d8b07cc2eb61a1685410f41b3421e5d Mon Sep 17 00:00:00 2001
From: Ramya Gnanasekar <quic_rgnanase@quicinc.com>
Date: Wed, 4 May 2022 15:21:15 +0530
Subject: [PATCH] mac80211: support 320 Mhz in Wide bandwidth CSA

Add support for 320 Mhz in Wide bandwidth channel switch subelement,
which is included in beacon and action frame during channel switch announcement.

On receiving CSA with 320 Mhz,
channel width and frequency has to be updated to cfg80211_chan_def.

Signed-off-by: Ramya Gnanasekar <quic_rgnanase@quicinc.com>

--- a/include/linux/ieee80211.h
+++ b/include/linux/ieee80211.h
@@ -1826,20 +1826,26 @@ struct ieee80211_vht_cap {
 } __packed;
 
 /**
- * enum ieee80211_vht_chanwidth - VHT channel width
- * @IEEE80211_VHT_CHANWIDTH_USE_HT: use the HT operation IE to
+ * enum ieee80211_chanwidth - channel width
+ * @IEEE80211_CHANWIDTH_USE_HT: use the HT operation IE to
  *	determine the channel width (20 or 40 MHz)
- * @IEEE80211_VHT_CHANWIDTH_80MHZ: 80 MHz bandwidth
- * @IEEE80211_VHT_CHANWIDTH_160MHZ: 160 MHz bandwidth
- * @IEEE80211_VHT_CHANWIDTH_80P80MHZ: 80+80 MHz bandwidth
- */
-enum ieee80211_vht_chanwidth {
-	IEEE80211_VHT_CHANWIDTH_USE_HT		= 0,
-	IEEE80211_VHT_CHANWIDTH_80MHZ		= 1,
-	IEEE80211_VHT_CHANWIDTH_160MHZ		= 2,
-	IEEE80211_VHT_CHANWIDTH_80P80MHZ	= 3,
+ * @IEEE80211_CHANWIDTH_80MHZ: 80 MHz bandwidth
+ * @IEEE80211_CHANWIDTH_160MHZ: 160 MHz bandwidth
+ * @IEEE80211_CHANWIDTH_80P80MHZ: 80+80 MHz bandwidth
+ */
+enum ieee80211_chanwidth {
+	IEEE80211_CHANWIDTH_USE_HT		= 0,
+	IEEE80211_CHANWIDTH_80MHZ		= 1,
+	IEEE80211_CHANWIDTH_160MHZ		= 2,
+	IEEE80211_CHANWIDTH_80P80MHZ	= 3,
+	IEEE80211_CHANWIDTH_320MHZ	=	4,
 };
 
+#define IEEE80211_VHT_CHANWIDTH_USE_HT	IEEE80211_CHANWIDTH_USE_HT
+#define IEEE80211_VHT_CHANWIDTH_80MHZ	IEEE80211_CHANWIDTH_80MHZ
+#define IEEE80211_VHT_CHANWIDTH_160MHZ      IEEE80211_CHANWIDTH_160MHZ
+#define IEEE80211_VHT_CHANWIDTH_80P80MHZ	IEEE80211_CHANWIDTH_80P80MHZ
+
 /**
  * struct ieee80211_vht_operation - VHT operation IE
  *
@@ -2155,7 +2161,7 @@ struct ieee80211_eht_operation_info {
  * Note: This function is exported by cfg80211.
  */
 int ieee80211_get_vht_max_nss(struct ieee80211_vht_cap *cap,
-			      enum ieee80211_vht_chanwidth bw,
+			      enum ieee80211_chanwidth bw,
 			      int mcs, bool ext_nss_bw_capable,
 			      unsigned int max_vht_nss);
 
--- a/net/mac80211/spectmgmt.c
+++ b/net/mac80211/spectmgmt.c
@@ -30,13 +30,17 @@ int ieee80211_parse_ch_switch_ie(struct
 	int new_freq;
 	u8 new_chan_no;
 	struct ieee80211_channel *new_chan;
-	struct cfg80211_chan_def new_vht_chandef = {};
+	struct cfg80211_chan_def new_chandef = {};
 	const struct ieee80211_sec_chan_offs_ie *sec_chan_offs;
 	const struct ieee80211_wide_bw_chansw_ie *wide_bw_chansw_ie;
 	struct ieee80211_vht_operation vht_oper;
 	struct ieee80211_ht_operation ht_oper;
+	struct ieee80211_he_operation he_oper;
+	struct ieee80211_he_6ghz_oper he_6ghz_oper;
+	struct ieee80211_eht_operation eht_oper;
+	struct ieee80211_eht_operation_info eht_oper_info;
 	int secondary_channel_offset = -1;
-	u8 new_seg1;
+	u8 new_seg1, new_chan_width;
 
 	memset(csa_ie, 0, sizeof(*csa_ie));
 
@@ -136,48 +140,78 @@ int ieee80211_parse_ch_switch_ie(struct
 	}
 
 	if (wide_bw_chansw_ie) {
-		csa_ie->chandef.width = NL80211_CHAN_WIDTH_40;
-		csa_ie->chandef.center_freq1 =
-			ieee80211_channel_to_frequency(wide_bw_chansw_ie->new_center_freq_seg0,
-						       new_chan->band);
 		new_seg1 = wide_bw_chansw_ie->new_center_freq_seg1;
-		vht_oper.chan_width = wide_bw_chansw_ie->new_channel_width;
-		vht_oper.center_freq_seg0_idx = wide_bw_chansw_ie->new_center_freq_seg0;
-		vht_oper.center_freq_seg1_idx = new_seg1;
+		new_chan_width = wide_bw_chansw_ie->new_channel_width;
+		if (current_band == NL80211_BAND_6GHZ &&
+		    new_chan_width == IEEE80211_EHT_OPER_CHAN_WIDTH_320MHZ) {
+			he_6ghz_oper.primary = new_chan_no;
+			he_6ghz_oper.control = new_chan_width;
+			he_6ghz_oper.ccfs0 = wide_bw_chansw_ie->new_center_freq_seg0;
+			he_6ghz_oper.ccfs1 = new_seg1;
+
+			he_oper.he_oper_params = u32_encode_bits(1,
+					IEEE80211_HE_OPERATION_6GHZ_OP_INFO);
+			he_oper.optional[0] = he_6ghz_oper.primary;
+			he_oper.optional[1] = he_6ghz_oper.control;
+			he_oper.optional[2] = he_6ghz_oper.ccfs0;
+			he_oper.optional[3] = he_6ghz_oper.ccfs1;
+
+			eht_oper_info.control = (eht_oper.params &
+						 IEEE80211_EHT_OPER_CHAN_WIDTH) |
+						 new_chan_width;
+			eht_oper_info.ccfs0 = wide_bw_chansw_ie->new_center_freq_seg0;
+			eht_oper_info.ccfs1 = wide_bw_chansw_ie->new_center_freq_seg1;
+			eht_oper.optional[0] = eht_oper_info.control;
+			eht_oper.optional[1] = eht_oper_info.ccfs0;
+			eht_oper.optional[2] = eht_oper_info.ccfs1;
+
+			new_chandef = csa_ie->chandef;
+
+			if (!ieee80211_chandef_he_6ghz_oper(sdata, &he_oper,
+							    &eht_oper, &new_chandef))
+					new_chandef.chan = NULL;
+		} else {
+			vht_oper.chan_width = wide_bw_chansw_ie->new_channel_width;
+			vht_oper.center_freq_seg0_idx = wide_bw_chansw_ie->new_center_freq_seg0;
+			vht_oper.center_freq_seg1_idx = new_seg1;
 			/* .basic_mcs_set doesn't matter */
-		ht_oper.operation_mode = cpu_to_le16(new_seg1 <<
-						     IEEE80211_HT_OP_MODE_CCFS2_SHIFT);
+			ht_oper.operation_mode = cpu_to_le16(new_seg1 <<
+						     	     IEEE80211_HT_OP_MODE_CCFS2_SHIFT);
 
-		/* default, for the case of IEEE80211_VHT_CHANWIDTH_USE_HT,
-		 * to the previously parsed chandef
-		 */
-		new_vht_chandef = csa_ie->chandef;
-
-		/* ignore if parsing fails */
-		if (!ieee80211_chandef_vht_oper(&sdata->local->hw,
-						vht_cap_info,
-						&vht_oper, &ht_oper,
-						&new_vht_chandef))
-			new_vht_chandef.chan = NULL;
+			/* default, for the case of IEEE80211_VHT_CHANWIDTH_USE_HT,
+		 	* to the previously parsed chandef
+		 	*/
+			new_chandef = csa_ie->chandef;
+
+			/* ignore if parsing fails */
+			if (!ieee80211_chandef_vht_oper(&sdata->local->hw,
+							vht_cap_info,
+							&vht_oper, &ht_oper,
+							&new_chandef))
+				new_chandef.chan = NULL;
+		}
 
 		if (conn_flags & IEEE80211_CONN_DISABLE_80P80MHZ &&
-		    new_vht_chandef.width == NL80211_CHAN_WIDTH_80P80)
-			ieee80211_chandef_downgrade(&new_vht_chandef);
+		    new_chandef.width == NL80211_CHAN_WIDTH_80P80)
+			ieee80211_chandef_downgrade(&new_chandef);
 		if (conn_flags & IEEE80211_CONN_DISABLE_160MHZ &&
-		    new_vht_chandef.width == NL80211_CHAN_WIDTH_160)
-			ieee80211_chandef_downgrade(&new_vht_chandef);
+		    new_chandef.width == NL80211_CHAN_WIDTH_160)
+			ieee80211_chandef_downgrade(&new_chandef);
+		if (conn_flags & IEEE80211_CONN_DISABLE_320MHZ &&
+		    new_chandef.width == NL80211_CHAN_WIDTH_320)
+			ieee80211_chandef_downgrade(&new_chandef);
 	}
 
 	/* if VHT data is there validate & use it */
-	if (new_vht_chandef.chan) {
-		if (!cfg80211_chandef_compatible(&new_vht_chandef,
+	if (new_chandef.chan) {
+		if (!cfg80211_chandef_compatible(&new_chandef,
 						 &csa_ie->chandef)) {
 			sdata_info(sdata,
 				   "BSS %pM: CSA has inconsistent channel data, disconnecting\n",
 				   bssid);
 			return -EINVAL;
 		}
-		csa_ie->chandef = new_vht_chandef;
+		csa_ie->chandef = new_chandef;
 	}
 
 	if (elems->max_channel_switch_time)
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -3185,18 +3185,17 @@ void ieee80211_ie_build_wide_bw_cs(u8 *p
 	/* New channel width */
 	switch (chandef->width) {
 	case NL80211_CHAN_WIDTH_80:
-		*pos++ = IEEE80211_VHT_CHANWIDTH_80MHZ;
+		*pos++ = IEEE80211_CHANWIDTH_80MHZ;
 		break;
 	case NL80211_CHAN_WIDTH_160:
-		*pos++ = IEEE80211_VHT_CHANWIDTH_160MHZ;
+		*pos++ = IEEE80211_CHANWIDTH_160MHZ;
 		break;
 	case NL80211_CHAN_WIDTH_80P80:
-		*pos++ = IEEE80211_VHT_CHANWIDTH_80P80MHZ;
+		*pos++ = IEEE80211_CHANWIDTH_80P80MHZ;
 		break;
 	case NL80211_CHAN_WIDTH_320:
-		/* The behavior is not defined for 320 MHz channels */
-		WARN_ON(1);
-		fallthrough;
+		*pos++ = IEEE80211_CHANWIDTH_320MHZ;
+		break;
 	default:
 		*pos++ = IEEE80211_VHT_CHANWIDTH_USE_HT;
 	}
@@ -4196,6 +4195,7 @@ ieee80211_conn_flags_t ieee80211_chandef
 	case NL80211_CHAN_WIDTH_40:
 		c->width = NL80211_CHAN_WIDTH_20;
 		c->center_freq1 = c->chan->center_freq;
+		c->center_freq2 = 0;
 		ret = IEEE80211_CONN_DISABLE_40MHZ |
 		      IEEE80211_CONN_DISABLE_VHT;
 		break;
@@ -4205,6 +4205,7 @@ ieee80211_conn_flags_t ieee80211_chandef
 		tmp /= 2;
 		/* freq_P40 */
 		c->center_freq1 = c->center_freq1 - 20 + 40 * tmp;
+		c->center_freq2 = 0;
 		c->width = NL80211_CHAN_WIDTH_40;
 		ret = IEEE80211_CONN_DISABLE_VHT;
 		break;
@@ -4220,6 +4221,7 @@ ieee80211_conn_flags_t ieee80211_chandef
 		/* n_P80 */
 		tmp /= 4;
 		c->center_freq1 = c->center_freq1 - 40 + 80 * tmp;
+		c->center_freq2 = 0;
 		c->width = NL80211_CHAN_WIDTH_80;
 		ret = IEEE80211_CONN_DISABLE_80P80MHZ |
 		      IEEE80211_CONN_DISABLE_160MHZ;
@@ -4363,7 +4365,8 @@ int ieee80211_send_action_csa(struct iee
 
 	if (csa_settings->chandef.width == NL80211_CHAN_WIDTH_80 ||
 	    csa_settings->chandef.width == NL80211_CHAN_WIDTH_80P80 ||
-	    csa_settings->chandef.width == NL80211_CHAN_WIDTH_160) {
+	    csa_settings->chandef.width == NL80211_CHAN_WIDTH_160 ||
+	    csa_settings->chandef.width == NL80211_CHAN_WIDTH_320) {
 		skb_put(skb, 5);
 		ieee80211_ie_build_wide_bw_cs(pos, &csa_settings->chandef);
 	}
--- a/net/wireless/util.c
+++ b/net/wireless/util.c
@@ -2346,7 +2346,7 @@ void cfg80211_send_layer2_update(struct
 EXPORT_SYMBOL(cfg80211_send_layer2_update);
 
 int ieee80211_get_vht_max_nss(struct ieee80211_vht_cap *cap,
-			      enum ieee80211_vht_chanwidth bw,
+			      enum ieee80211_chanwidth bw,
 			      int mcs, bool ext_nss_bw_capable,
 			      unsigned int max_vht_nss)
 {
@@ -2445,6 +2445,8 @@ int ieee80211_get_vht_max_nss(struct iee
 		    ext_nss_bw == 2)
 			return (3 * max_vht_nss) / 4;
 		break;
+	default:
+		break;
 	}
 
 	/* not covered or invalid combination received */
