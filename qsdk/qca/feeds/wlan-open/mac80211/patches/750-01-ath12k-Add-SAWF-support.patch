From 51176d1d0dcbf244b331a3e104811f66f292dcde Mon Sep 17 00:00:00 2001
From: Nagarajan Maran <quic_nmaran@quicinc.com>
Date: Mon, 7 Nov 2022 16:11:54 +0530
Subject: [PATCH] ath12k: Add SAWF support

SAWF - Service Aware WiFi Framework
Adding SAW support.

Add support to initialize and maintain service classes
sent from userspace. These service classes are stored
in a global context since same service classes should
be maintained across all the WiFi socs.

Module param "sawf" will be used to enable this feature
from driver side. By default SAWF will be disabled.
Add support to enable and disable SAW in firmware during
bootup using target resource configs.

Signed-off-by: Nagarajan Maran <quic_nmaran@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/Makefile |   3 +-
 drivers/net/wireless/ath/ath12k/sawf.c   | 214 +++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/sawf.h   | 140 +++++++++++++++
 3 files changed, 356 insertions(+), 1 deletion(-)
 create mode 100644 drivers/net/wireless/ath/ath12k/sawf.c
 create mode 100644 drivers/net/wireless/ath/ath12k/sawf.h

--- a/drivers/net/wireless/ath/ath12k/Makefile
+++ b/drivers/net/wireless/ath/ath12k/Makefile
@@ -20,7 +20,8 @@ ath12k-y += core.o \
 	    wow.o \
 	    mhi.o \
 	    pci.o \
-	    dp_mon.o
+	    dp_mon.o \
+	    sawf.o
 
 ath12k-$(CPTCFG_ATH12K_DEBUGFS) += debugfs.o debugfs_htt_stats.o debugfs_sta.o
 ath12k-$(CPTCFG_NL80211_TESTMODE) += testmode.o
--- /dev/null
+++ b/drivers/net/wireless/ath/ath12k/sawf.c
@@ -0,0 +1,244 @@
+// SPDX-License-Identifier: BSD-3-Clause-Clear
+/*
+ * Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+ */
+
+#include "core.h"
+#include "debug.h"
+#include "wmi.h"
+#include "sawf.h"
+#include <linux/module.h>
+
+#define SVC_INDEX(svc_id) svc_id - 1
+
+bool ath12k_sawf_enable;
+module_param_named(sawf, ath12k_sawf_enable, bool, 0444);
+MODULE_PARM_DESC(sawf, "Enable SAWF feature (Default: false)");
+
+static struct ath12k_sawf_ctx *sawf_ctx;
+
+void ath12k_sawf_init(struct ath12k_base *ab)
+{
+	if (!ath12k_sawf_enable)
+		return;
+
+	if (!test_bit(WMI_TLV_SERVICE_SAWF_LEVEL0, ab->wmi_ab.svc_map))
+		return;
+
+	if (!sawf_ctx) {
+		sawf_ctx = kzalloc(sizeof(*sawf_ctx), GFP_KERNEL);
+		if (!sawf_ctx) {
+			ath12k_err(NULL, "SAWF context failed to initialize\n");
+			return;
+		}
+		sawf_ctx->max_msduq_per_tid = ab->max_msduq_per_tid;
+		sawf_ctx->default_msduq_per_tid = ab->default_msduq_per_tid;
+		mutex_init(&sawf_ctx->sawf_svc_lock);
+	} else {/* Already initialized */
+		return;
+	}
+
+	ath12k_info(NULL, "SAWF context initialized\n");
+}
+
+void ath12k_sawf_deinit(struct ath12k_base *ab)
+{
+	if (!ath12k_sawf_enable)
+		return;
+
+	/* During firmware crash recovery scenario, the SAWF context
+	 * will be retained.
+	 */
+	if (test_bit(ATH12K_FLAG_CRASH_FLUSH, &ab->dev_flags))
+		return;
+
+	if (!sawf_ctx)
+		return;
+
+	kfree(sawf_ctx);
+	sawf_ctx = NULL;
+	ath12k_info(NULL, "SAWF context freed\n");
+	return;
+}
+
+struct ath12k_sawf_ctx *ath12k_get_sawf_context(void)
+{
+	if (!sawf_ctx) {
+		ath12k_err(NULL, "SAWF context not initialized\n");
+		return NULL;
+	}
+
+	return sawf_ctx;
+}
+
+void ath12k_update_svc_class(struct ath12k_sawf_svc_params *sawf_params)
+{
+	struct ath12k_sawf_svc_params *new_param;
+
+	if (!sawf_ctx) {
+		ath12k_err(NULL, "SAWF context unavailable\n");
+		return;
+	}
+
+	mutex_lock(&sawf_ctx->sawf_svc_lock);
+	new_param = &sawf_ctx->svc_classes[SVC_INDEX(sawf_params->svc_id)];
+	new_param->svc_id = sawf_params->svc_id;
+	memcpy(new_param->app_name, sawf_params->app_name, ATH12K_MAX_APP_NAME);
+	new_param->min_throughput_rate = sawf_params->min_throughput_rate;
+	new_param->max_throughput_rate = sawf_params->max_throughput_rate;
+	new_param->burst_size = sawf_params->burst_size;
+	new_param->service_interval = sawf_params->service_interval;
+	new_param->delay_bound = sawf_params->delay_bound;
+	new_param->msdu_ttl = sawf_params->msdu_ttl;
+	new_param->priority = sawf_params->priority;
+	new_param->tid = sawf_params->tid;
+	new_param->msdu_rate_loss = sawf_params->msdu_rate_loss;
+	new_param->configured = sawf_params->configured;
+	mutex_unlock(&sawf_ctx->sawf_svc_lock);
+}
+
+bool ath12k_validate_sawf_param(struct ath12k_sawf_svc_params *params)
+{
+	u32 value;
+
+	value = params->min_throughput_rate;
+	if (value != SAWF_SVC_PARAM_DEFAULT_MIN_THRUPUT &&
+	    (value < ATH12K_SAWF_MIN_MIN_THROUGHPUT ||
+	    value > ATH12K_SAWF_MAX_MIN_THROUGHPUT)) {
+		ath12k_err(NULL, "Invalid Min throughput: %d\n", value);
+		return false;
+	}
+
+	value = params->max_throughput_rate;
+	if (value != SAWF_SVC_PARAM_DEFAULT_MAX_THRUPUT &&
+	    (value < ATH12K_SAWF_MIN_MAX_THROUGHPUT ||
+	    value > ATH12K_SAWF_MAX_MAX_THROUGHPUT)) {
+		ath12k_err(NULL, "Invalid Max througput: %d", value);
+		return false;
+	}
+
+	value = params->burst_size;
+	if (value != SAWF_SVC_PARAM_DEFAULT_BURST_SIZE &&
+	    (value < ATH12K_SAWF_MIN_BURST_SIZE ||
+	    value > ATH12K_SAWF_MAX_BURST_SIZE)) {
+		ath12k_err(NULL, "Invalid Burst Size: %d", value);
+		return false;
+	}
+
+	value = params->delay_bound;
+	if (value != SAWF_SVC_PARAM_DEFAULT_DELAY_BOUND &&
+	    (value < ATH12K_SAWF_MIN_DELAY_BOUND ||
+	    value > ATH12K_SAWF_MAX_DELAY_BOUND)) {
+		ath12k_err(NULL, "Invalid Delay Bound: %d", value);
+		return false;
+	}
+
+	value = params->service_interval;
+	if (value != SAWF_SVC_PARAM_DEFAULT_SVC_INTERVAL &&
+	    (value < ATH12K_SAWF_MIN_SVC_INTERVAL ||
+	    value > ATH12K_SAWF_MAX_SVC_INTERVAL)) {
+		ath12k_err(NULL, "Invalid Service Interval: %d", value);
+		return false;
+	}
+
+	value = params->msdu_ttl;
+	if (value != SAWF_SVC_PARAM_DEFAULT_TIME_TO_LIVE &&
+	    (value < ATH12K_SAWF_MIN_MSDU_TTL ||
+	    value > ATH12K_SAWF_MAX_MSDU_TTL)) {
+		ath12k_err(NULL, "Invalid MSDU TTL: %d", value);
+		return false;
+	}
+
+	value = params->priority;
+	if (value != SAWF_SVC_PARAM_DEFAULT_PRIORITY &&
+	    (value < ATH12K_SAWF_MIN_PRIORITY ||
+	    value > ATH12K_SAWF_MAX_PRIORITY)) {
+		ath12k_err(NULL, "Invalid Priority: %d", value);
+		return false;
+	}
+
+	value = params->tid;
+	if (value != SAWF_SVC_PARAM_DEFAULT_TID &&
+	    (value < ATH12K_SAWF_MIN_TID ||
+	    value > ATH12K_SAWF_MAX_TID)) {
+		ath12k_err(NULL, "Invalid TID: %d", value);
+		return false;
+	}
+
+	value = params->msdu_rate_loss;
+	if (value != SAWF_SVC_PARAM_DEFAULT_MSDU_LOSS_RATE &&
+	    (value < ATH12K_SAWF_MIN_MSDU_LOSS_RATE ||
+	    value > ATH12K_SAWF_MAX_MSDU_LOSS_RATE)) {
+		ath12k_err(NULL, "Invalid MSDU Loss rate: %d", value);
+		return false;
+	}
+
+	return true;
+}
+
+bool ath12k_svc_id_configured(u8 svc_id)
+{
+	if (!sawf_ctx) {
+		ath12k_err(NULL, "SAWF context unavailable\n");
+		return false;
+	}
+
+	mutex_lock(&sawf_ctx->sawf_svc_lock);
+	if (sawf_ctx->svc_classes[SVC_INDEX(svc_id)].configured) {
+		mutex_unlock(&sawf_ctx->sawf_svc_lock);
+		return true;
+	}
+
+	mutex_unlock(&sawf_ctx->sawf_svc_lock);
+	return false;
+}
+
+int ath12k_get_tid(u8 svc_id)
+{
+	u32 tid;
+
+	if (!sawf_ctx) {
+		ath12k_err(NULL, "SAWF context unavailable\n");
+		return -ENODATA;
+	}
+
+	if (ath12k_svc_id_configured(svc_id)) {
+		mutex_lock(&sawf_ctx->sawf_svc_lock);
+		tid = sawf_ctx->svc_classes[SVC_INDEX(svc_id)].tid;
+		mutex_unlock(&sawf_ctx->sawf_svc_lock);
+		return tid;
+	}
+
+	return -EINVAL;
+}
+
+bool ath12k_svc_id_valid(u8 svc_id)
+{
+	if (svc_id <  ATH12K_SAWF_SVC_CLASS_MIN ||
+	    svc_id > ATH12K_SAWF_SVC_CLASS_MAX)
+		return false;
+	else
+		return true;
+}
+
+bool ath12k_disable_svc_class(u8 svc_id)
+{
+	struct ath12k_sawf_svc_params *sawf_svc_class;
+
+	if (!sawf_ctx) {
+		ath12k_err(NULL, "SAWF context unavailable\n");
+		return false;
+	}
+
+	if (!ath12k_svc_id_configured(svc_id)) {
+		ath12k_warn(NULL, "Serive id not available\n");
+		return false;
+	}
+
+	mutex_lock(&sawf_ctx->sawf_svc_lock);
+	sawf_svc_class = &sawf_ctx->svc_classes[SVC_INDEX(svc_id)];
+	memset(sawf_svc_class, 0, sizeof(*sawf_svc_class));
+	mutex_unlock(&sawf_ctx->sawf_svc_lock);
+
+	return true;
+}
--- /dev/null
+++ b/drivers/net/wireless/ath/ath12k/sawf.h
@@ -0,0 +1,138 @@
+// SPDX-License-Identifier: BSD-3-Clause-Clear
+/*
+ * Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+ */
+
+#ifndef ATH12K_SAWF_H
+#define ATH12K_SAWF_H
+
+#define ATH12K_SAWF_SVC_CLASS_MIN 1
+#define ATH12K_SAWF_SVC_CLASS_MAX 128
+#define ATH12K_MAX_APP_NAME 64
+
+/*
+ * Min throughput limit 0 - 10 Gb/s
+ * Granularity: 1 Kb/s
+ */
+#define ATH12K_SAWF_MIN_MIN_THROUGHPUT 0
+#define ATH12K_SAWF_MAX_MIN_THROUGHPUT (10 * 1024 * 1024)
+
+/*
+ * Max throughput limit 0 - 10 Gb/s.
+ * Granularity: 1 Kb/s
+ */
+#define ATH12K_SAWF_MIN_MAX_THROUGHPUT 0
+#define ATH12K_SAWF_MAX_MAX_THROUGHPUT (10 * 1024 * 1024)
+
+/*
+ * Service interval limit 0 - 10 secs.
+ * Granularity: 100 µs
+ */
+#define ATH12K_SAWF_MIN_SVC_INTERVAL 0
+#define ATH12K_SAWF_MAX_SVC_INTERVAL (10 * 100 * 100)
+
+/*
+ * Burst size 0 - 16 MB.
+ * Granularity: 1 Byte.
+ */
+#define ATH12K_SAWF_MIN_BURST_SIZE 0
+#define ATH12K_SAWF_MAX_BURST_SIZE (16 * 1024 * 1024)
+/*
+ * Delay bound limit 0 - 10 secs
+ * Granularity: 100 µs
+ */
+#define ATH12K_SAWF_MIN_DELAY_BOUND 0
+#define ATH12K_SAWF_MAX_DELAY_BOUND (10 * 100 * 100)
+
+/*
+ * Msdu TTL limit 0 - 10 secs.
+ * Granularity: 100 µs
+ */
+#define ATH12K_SAWF_MIN_MSDU_TTL 0
+#define ATH12K_SAWF_MAX_MSDU_TTL (10 * 100 * 100)
+
+/*
+ * Priority limit 0 - 127.
+ * Higher the numerical value, higher is the priority.
+ */
+#define ATH12K_SAWF_MIN_PRIORITY 0
+#define ATH12K_SAWF_MAX_PRIORITY 127
+
+/*
+ * TID limit 0 - 7
+ */
+#define ATH12K_SAWF_MIN_TID 0
+#define ATH12K_SAWF_MAX_TID 7
+/*
+ * MSDU Loss Rate limit 0 - 100%.
+ * Granularity: 0.01%
+ */
+#define ATH12K_SAWF_MIN_MSDU_LOSS_RATE 0
+#define ATH12K_SAWF_MAX_MSDU_LOSS_RATE 10000
+
+enum SAWF_SVC_PARAM_DEFAULTS {
+	SAWF_SVC_PARAM_DEFAULT_MIN_THRUPUT    = 0,
+	SAWF_SVC_PARAM_DEFAULT_MAX_THRUPUT    = 0xffffffff,
+	SAWF_SVC_PARAM_DEFAULT_BURST_SIZE     = 0,
+	SAWF_SVC_PARAM_DEFAULT_SVC_INTERVAL   = 0xffffffff,
+	SAWF_SVC_PARAM_DEFAULT_DELAY_BOUND    = 0xffffffff,
+	SAWF_SVC_PARAM_DEFAULT_TIME_TO_LIVE   = 0xffffffff,
+	SAWF_SVC_PARAM_DEFAULT_PRIORITY       = 0,
+	SAWF_SVC_PARAM_DEFAULT_TID            = 0xffffffff,
+	SAWF_SVC_PARAM_DEFAULT_MSDU_LOSS_RATE = 0,
+};
+
+/**
+ * struct ath12k_sawf_svc_params - Service Class Parameters
+ * @svc_id: Service ID
+ * @app_name: Service class name
+ * @min_throughput_rate: min throughput in kilobits per second
+ * @max_throughput_rate: max throughput in kilobits per second
+ * @burst_size:  burst size in bytes
+ * @service_interval: service interval
+ * @delay_bound: delay bound in milli seconds
+ * @msdu_ttl: MSDU Time-To-Live
+ * @priority: Priority
+ * @tid: TID
+ * @msdu_rate_loss: MSDU loss rate in parts per million
+ * @configured: indicating if the serivice class is configured.
+ */
+
+struct ath12k_sawf_svc_params {
+	u8 svc_id;
+	char app_name[ATH12K_MAX_APP_NAME];
+	u32 min_throughput_rate;
+	u32 max_throughput_rate;
+	u32 burst_size;
+	u32 service_interval;
+	u32 delay_bound;
+	u32 msdu_ttl;
+	u32 priority;
+	u32 tid;
+	u32 msdu_rate_loss;
+	bool configured;
+};
+
+/**
+ * struct ath12k_sawf_ctx- SAWF context
+ * @svc_classes: List of all service classes
+ */
+struct ath12k_sawf_ctx {
+	struct ath12k_sawf_svc_params svc_classes[ATH12K_SAWF_SVC_CLASS_MAX];
+	u32 max_msduq_per_tid;
+	u32 default_msduq_per_tid;
+	struct mutex sawf_svc_lock;
+};
+
+extern bool ath12k_sawf_enable;
+struct ath12k_sawf_ctx *ath12k_get_sawf_context(void);
+void ath12k_sawf_init(struct ath12k_base *ab);
+void ath12k_sawf_deinit(struct ath12k_base *ab);
+bool ath12k_validate_sawf_param(struct ath12k_sawf_svc_params *params);
+bool ath12k_svc_id_configured(u8 svc_id);
+bool ath12k_svc_id_valid(u8 svc_id);
+void ath12k_update_svc_class(struct ath12k_sawf_svc_params *sawf_params);
+bool ath12k_disable_svc_class(u8 svc_id);
+int ath12k_get_tid(u8 svc_id);
+
+#endif /* ATH11K_SAWF_H */
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -1077,6 +1077,8 @@ static int ath12k_core_pdev_init(struct
 		goto err_spectral_deinit;
 	}
 
+	ath12k_sawf_init(ab);
+
 	return 0;
 
 err_spectral_deinit:
@@ -1090,6 +1092,7 @@ static void ath12k_core_pdev_deinit(stru
 {
 	ath12k_spectral_deinit(ab);
 	ath12k_thermal_unregister(ab);
+	ath12k_sawf_deinit(ab);
 }
 
 static int ath12k_core_pdev_create(struct ath12k_base *ab)
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -26,6 +26,7 @@
 #include "dbring.h"
 #include "spectral.h"
 #include "pktlog.h"
+#include "sawf.h"
 
 #define SM(_v, _f) (((_v) << _f##_LSB) & _f##_MASK)
 
@@ -1305,6 +1306,8 @@ struct ath12k_base {
 	u32 rx_hash_ix3;
 
 	struct vendor_info id;
+	u32 max_msduq_per_tid;
+	u32 default_msduq_per_tid;
 
 	int userpd_id;
 
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -247,6 +247,8 @@ void ath12k_wmi_init_qcn9274(struct ath1
 	config->ema_max_profile_period = TARGET_EMA_MAX_PROFILE_PERIOD;
 	config->beacon_tx_offload_max_vdev += config->ema_max_vap_cnt;
 
+	if (test_bit(WMI_TLV_SERVICE_SAWF_LEVEL0, ab->wmi_ab.svc_map))
+		config->sawf = true;
 	if (test_bit(WMI_TLV_SERVICE_PEER_METADATA_V1A_V1B_SUPPORT, ab->wmi_ab.svc_map))
 		config->dp_peer_meta_data_ver = TARGET_RX_PEER_METADATA_VER_V1B;
 
@@ -314,6 +316,8 @@ void ath12k_wmi_init_ipq5332(struct ath1
 	if (test_bit(WMI_TLV_SERVICE_PEER_METADATA_V1A_V1B_SUPPORT, ab->wmi_ab.svc_map))
 		config->dp_peer_meta_data_ver = TARGET_RX_PEER_METADATA_VER_V1B;
 
+	if (test_bit(WMI_TLV_SERVICE_SAWF_LEVEL0, ab->wmi_ab.svc_map))
+		config->sawf = true;
 }
 
 
@@ -4875,6 +4879,8 @@ ath12k_wmi_copy_resource_config(struct w
 			  WMI_RSRC_CFG_FLAGS2_INTRABSS_MEC_WDS_LEARNING_DISABLE |
 			  u32_encode_bits(tg_cfg->dp_peer_meta_data_ver,
 					  WMI_RSRC_CFG_FLAGS2_RX_PEER_METADATA_VERSION);
+	wmi_cfg->flags2 |= (tg_cfg->sawf & ath12k_sawf_enable) ?
+			   (WMI_RSRC_CFG_FLAGS2_SAWF_CONFIG_ENABLE_SET) : (0);
 	wmi_cfg->host_service_flags &= ~(1 << WMI_RSRC_CFG_HOST_SVC_FLAG_REG_CC_EXT_SUPPORT_BIT);
 	wmi_cfg->host_service_flags |= 1 << WMI_RSRC_CFG_HOST_SVC_FLAG_REG_CC_EXT_SUPPORT_BIT;
 	wmi_cfg->host_service_flags |= 1 << WMI_RSRC_CFG_HOST_SVC_FLAG_REO_QREF_SUPPORT_BIT;
@@ -5856,6 +5862,8 @@ static int ath12k_pull_svc_ready_ext2(st
 	param->max_user_per_ppdu_ofdma = ev->max_user_per_ppdu_ofdma;
 	param->max_user_per_ppdu_mumimo = ev->max_user_per_ppdu_mumimo;
 	param->target_cap_flags = ev->target_cap_flags;
+	param->max_msduq_per_tid = ev->max_num_msduq_supported_per_tid;
+	param->default_msduq_per_tid = ev->default_num_msduq_supported_per_tid;
 	return 0;
 }
 
@@ -5964,6 +5972,8 @@ static int ath12k_wmi_tlv_svc_rdy_ext2_p
 			ath12k_warn(ab, "unable to extract ext params\n");
 			return ret;
 		}
+		ab->max_msduq_per_tid = parse->param.max_msduq_per_tid;
+		ab->default_msduq_per_tid = parse->param.default_msduq_per_tid;
 		break;
 
 	case WMI_TAG_ARRAY_STRUCT:
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -2267,6 +2267,7 @@ enum wmi_tlv_service {
 	WMI_TLV_SERVICE_REG_CC_EXT_EVENT_SUPPORT = 281,
 	WMI_TLV_SERVICE_DCS_AWGN_INT_SUPPORT = 286,
 	WMI_TLV_SERVICE_BE = 289,
+	WMI_TLV_SERVICE_SAWF_LEVEL0 = 311,
 	WMI_TLV_SERVICE_PKTLOG_DECODE_INFO_SUPPORT = 320,
 	WMI_TLV_SERVICE_PEER_METADATA_V1A_V1B_SUPPORT = 365,
 	WMI_MAX_EXT2_SERVICE,
@@ -2518,7 +2519,8 @@ struct ath12k_service_ext2_param {
 	u32 target_cap_flags;
 	u32 eht_cap_mac_info[WMI_MAX_EHTCAP_MAC_SIZE];
 	u32 max_num_linkview_peers;
-	u32 max_num_msduq_supported_per_tid;
+	u32 max_msduq_per_tid;
+	u32 default_msduq_per_tid;
 };
 
 #define WMI_HOST_MAX_PDEV 3
@@ -2593,6 +2595,7 @@ struct wmi_init_cmd {
 #define WMI_RSRC_CFG_FLAGS2_INTRABSS_MEC_WDS_LEARNING_DISABLE	BIT(15)
 #define WMI_RSRC_CFG_FLAG1_THREE_WAY_COEX_CONFIG_OVERRIDE_SUPPORT BIT(25)
 #define WMI_RSRC_CFG_FLAG1_BSS_CHANNEL_INFO_64	BIT(5)
+#define WMI_RSRC_CFG_FLAGS2_SAWF_CONFIG_ENABLE_SET	  BIT(13)
 
 struct wmi_resource_config {
 	__le32 tlv_header;
@@ -7431,6 +7434,7 @@ struct target_resource_config {
 	u32 ema_max_vap_cnt;
 	u32 ema_max_profile_period;
 	u8  dp_peer_meta_data_ver;
+	bool sawf;
 };
 
 enum wmi_tpc_pream_bw {
--- a/drivers/net/wireless/ath/ath12k/debug.h
+++ b/drivers/net/wireless/ath/ath12k/debug.h
@@ -28,6 +28,7 @@ enum ath12k_debug_mask {
 	ATH12K_DBG_DP_RX	= 0x00004000,
 	ATH12K_DBG_OFFSET	= 0x00008000,
 	ATH12K_DBG_RX_REO	= 0x00010000,
+	ATH12K_DBG_SAWF		= 0x80000000,
 	ATH12K_DBG_ANY		= 0xffffffff,
 };
 
