From 04144dc7f370a94d8513c7d9624e49db87f54469 Mon Sep 17 00:00:00 2001
From: saleemuddin shaik <quic_saleemud@quicinc.com>
Date: Sat, 4 Mar 2023 14:09:50 +0530
Subject: ath11k: add statistic support for counting wmm received packets.

ath11k wmm receive packets statistics through fast_rx path is covered.
If the peer is fast_rx peer, the tid of the packets are retrieved and
the statistical information for received packets are update
at the respective categories like, AC_BE, AC_BK, AC_VO and AC_VI.

Signed-off-by: saleemuddin shaik <quic_saleemud@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/core.h    |  2 ++
 drivers/net/wireless/ath/ath11k/debugfs.c | 15 ++++++++++++++-
 drivers/net/wireless/ath/ath11k/dp_rx.c   |  8 ++++++++
 3 files changed, 24 insertions(+), 1 deletion(-)

diff --git a/drivers/net/wireless/ath/ath11k/core.h b/drivers/net/wireless/ath/ath11k/core.h
index 094d163..a68eedf 100644
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -853,7 +853,9 @@ struct ath11k_per_peer_tx_stats {
 
 struct ath11k_wmm_stats {
 	int tx_type;
+	int rx_type;
 	u64 total_wmm_tx_pkts[WME_NUM_AC];
+	u64 total_wmm_rx_pkts[WME_NUM_AC];
 };
 
 #define ATH11K_FLUSH_TIMEOUT (5 * HZ)
diff --git a/drivers/net/wireless/ath/ath11k/debugfs.c b/drivers/net/wireless/ath/ath11k/debugfs.c
index e1fe71d..84e3bd9 100644
--- a/drivers/net/wireless/ath/ath11k/debugfs.c
+++ b/drivers/net/wireless/ath/ath11k/debugfs.c
@@ -874,17 +874,22 @@ static ssize_t ath11k_read_wmm_stats(struct file *file,
 	char *buf;
 	ssize_t retval;
 	u64 total_wmm_sent_pkts = 0;
+	u64 total_wmm_received_pkts = 0;
 
 	buf = kzalloc(size, GFP_KERNEL);
 	if (!buf)
 		return -ENOMEM;
 
 	mutex_lock(&ar->conf_mutex);
-	for (count = 0; count < WME_NUM_AC; count++)
+	for (count = 0; count < WME_NUM_AC; count++) {
 		total_wmm_sent_pkts += ar->wmm_stats.total_wmm_tx_pkts[count];
+		total_wmm_received_pkts += ar->wmm_stats.total_wmm_rx_pkts[count];
+	}
 
 	len += scnprintf(buf + len, size - len, "total number of wmm_sent: %llu\n",
 			 total_wmm_sent_pkts);
+	len += scnprintf(buf + len, size - len, "total number of wmm_received: %llu\n",
+			 total_wmm_received_pkts);
 	len += scnprintf(buf + len, size - len, "num of be wmm_sent: %llu\n",
 			 ar->wmm_stats.total_wmm_tx_pkts[WME_AC_BE]);
 	len += scnprintf(buf + len, size - len, "num of bk wmm_sent: %llu\n",
@@ -893,6 +898,14 @@ static ssize_t ath11k_read_wmm_stats(struct file *file,
 			 ar->wmm_stats.total_wmm_tx_pkts[WME_AC_VI]);
 	len += scnprintf(buf + len, size - len, "num of vo wmm_sent: %llu\n",
 			 ar->wmm_stats.total_wmm_tx_pkts[WME_AC_VO]);
+	len += scnprintf(buf + len, size - len, "num of be wmm_received: %llu\n",
+			 ar->wmm_stats.total_wmm_rx_pkts[WME_AC_BE]);
+	len += scnprintf(buf + len, size - len, "num of bk wmm_received: %llu\n",
+			 ar->wmm_stats.total_wmm_rx_pkts[WME_AC_BK]);
+	len += scnprintf(buf + len, size - len, "num of vi wmm_received: %llu\n",
+			 ar->wmm_stats.total_wmm_rx_pkts[WME_AC_VI]);
+	len += scnprintf(buf + len, size - len, "num of vo wmm_received: %llu\n",
+			 ar->wmm_stats.total_wmm_rx_pkts[WME_AC_VO]);
 
 	mutex_unlock(&ar->conf_mutex);
 
diff --git a/drivers/net/wireless/ath/ath11k/dp_rx.c b/drivers/net/wireless/ath/ath11k/dp_rx.c
index d47378f..2160dbb 100644
--- a/drivers/net/wireless/ath/ath11k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath11k/dp_rx.c
@@ -2740,6 +2740,7 @@ static void ath11k_dp_rx_h_undecap(struct ath11k *ar, struct sk_buff *msdu,
 					    enctype, status);
 		break;
 	}
+	ar->wmm_stats.total_wmm_rx_pkts[ar->wmm_stats.rx_type]++;
 }
 
 static struct ath11k_peer *
@@ -2830,7 +2831,9 @@ static void ath11k_dp_rx_h_mpdu(struct ath11k *ar,
 	u32 err_bitmap;
 	struct wireless_dev *wdev = NULL;
 	struct ath11k_sta *arsta = NULL;
+	u8 tid;
 
+	tid = ath11k_dp_rx_h_mpdu_start_tid(ar->ab, rx_desc);
 	/* PN for multicast packets will be checked in mac80211 */
 	rxcb = ATH11K_SKB_RXCB(msdu);
 	if (!ar->ab->nss.enabled)
@@ -2851,6 +2854,9 @@ static void ath11k_dp_rx_h_mpdu(struct ath11k *ar,
 		 * path, so its safe to skip checking errors here */
 		if (*fast_rx &&
 		    ath11k_dp_rx_check_fast_rx(ar, msdu, rx_desc, peer)) {
+			ar->wmm_stats.rx_type =
+				ath11k_tid_to_ac(rxcb->tid > ATH11K_DSCP_PRIORITY ? 0: rxcb->tid);
+			ar->wmm_stats.total_wmm_rx_pkts[ar->wmm_stats.rx_type]++;
 			wdev = ieee80211_vif_to_wdev(peer->vif);
 			if (wdev) {
 		        	spin_unlock_bh(&ar->ab->base_lock);
@@ -3416,6 +3422,8 @@ try_again:
 		rxcb->tid = FIELD_GET(HAL_REO_DEST_RING_INFO0_RX_QUEUE_NUM,
 				      desc->info0);
 
+		ar->wmm_stats.rx_type = ath11k_tid_to_ac(rxcb->tid > ATH11K_DSCP_PRIORITY ? 0: rxcb->tid);
+
 		if (ath11k_debugfs_is_extd_rx_stats_enabled(ar) && rxcb->peer_id) {
 			rcu_read_lock();
 			spin_lock_bh(&ab->base_lock);
-- 
2.17.1

