From 953c7b5bcaaafa711833d3592c5ec8bd8e72fa68 Mon Sep 17 00:00:00 2001
From: Harshitha Prem <quic_hprem@quicinc.com>
Date: Wed, 12 Oct 2022 16:39:33 +0530
Subject: [PATCH] iw: Add support for background CAC

Changes are made to support following CLIs:
 iw dev <wlanX> cac trigger channel <channel> [6G] [width] [bgcac]
 iw dev <wlanX> cac stop
---
 nl80211.h |  1 +
 phy.c     | 28 +++++++++++++++++++++++-----
 2 files changed, 24 insertions(+), 5 deletions(-)

--- a/nl80211.h
+++ b/nl80211.h
@@ -1493,6 +1493,7 @@ enum nl80211_commands {
 
 	NL80211_CMD_AWGN_DETECT,
 
+	NL80211_CMD_STOP_BGRADAR_DETECT,
 	/* add new commands above here */
 
 	/* used to define NL80211_CMD_MAX below */
--- a/phy.c
+++ b/phy.c
@@ -282,15 +282,37 @@ static int handle_cac_trigger(struct nl8
 			    enum id_input id)
 {
 	struct chandef chandef;
-	int res;
+	int res, count, index = 0;
 
 	if (argc < 2)
 		return 1;
 
-	if (strcmp(argv[0], "channel") == 0) {
-		res = parse_freqchan(&chandef, true, argc - 1, argv + 1, NULL);
-	} else if (strcmp(argv[0], "freq") == 0) {
-		res = parse_freqchan(&chandef, false, argc - 1, argv + 1, NULL);
+	if (!strcmp(argv[0], "-l")) {
+		unsigned int link_id;
+		char *endptr;
+
+		link_id = strtol(argv[1], &endptr, 10);
+
+		if (*endptr)
+			return 1;
+
+		if (link_id <= MAX_MLD_LINK) {
+			NLA_PUT_U8(msg, NL80211_ATTR_MLO_LINK_ID,
+				   link_id);
+			index = 2;
+		}
+	}
+
+	if (strcmp(argv[argc - 1], "bgcac") == 0) {
+		NLA_PUT_FLAG(msg, NL80211_ATTR_RADAR_BACKGROUND);
+		count = argc - index - 2;
+	} else
+		count = argc - index - 1;
+
+	if (strcmp(argv[index], "channel") == 0) {
+		res = parse_freqchan(&chandef, true, count, argv + index + 1, NULL);
+	} else if (strcmp(argv[index], "freq") == 0) {
+		res = parse_freqchan(&chandef, false, count, argv + index + 1, NULL);
 	} else {
 		return 1;
 	}
@@ -299,6 +321,10 @@ static int handle_cac_trigger(struct nl8
 		return res;
 
 	return put_chandef(msg, &chandef);
+
+nla_put_failure:
+        return -ENOBUFS;
+
 }
 
 static int no_seq_check(struct nl_msg *msg, void *arg)
@@ -374,9 +400,9 @@ TOPLEVEL(cac, "channel <channel> [6G] [N
 	      "freq <control freq> [5|10|20|40|80|80+80|160] [<center1_freq> [<center2_freq>]]",
 	 0, 0, CIB_NETDEV, handle_cac, NULL);
 COMMAND(cac, trigger,
-	"channel <channel> [6G] [NOHT|HT20|HT40+|HT40-|5MHz|10MHz|80MHz]\n"
-	"freq <frequency> [NOHT|HT20|HT40+|HT40-|5MHz|10MHz|80MHz]\n"
-	"freq <frequency> [5|10|20|40|80|80+80|160] [<center1_freq> [<center2_freq>]]",
+	"[-l] <link id> channel <channel> [6G] [NOHT|HT20|HT40+|HT40-|5MHz|10MHz|80MHz] [bgcac]\n"
+	"freq <frequency> [NOHT|HT20|HT40+|HT40-|5MHz|10MHz|80MHz] [bgcac]\n"
+	"freq <frequency> [5|10|20|40|80|80+80|160] [<center1_freq> [<center2_freq>]] [bgcac]",
 	NL80211_CMD_RADAR_DETECT, 0, CIB_NETDEV, handle_cac_trigger,
 	"Start or trigger a channel availability check (CAC) looking to look for\n"
 	"radars on the given channel.");
@@ -882,3 +908,39 @@ static int handle_get_txq(struct nl80211
 COMMAND(get, txq, "",
 	NL80211_CMD_GET_WIPHY, 0, CIB_PHY, handle_get_txq,
 	"Get TXQ parameters.");
+
+static int handle_cac_stop(struct nl80211_state *state,
+                      struct nl_msg *msg,
+                      int argc, char **argv,
+                      enum id_input id)
+{
+	if (argc > 0) {
+		if (!strcmp(argv[0], "-l")) {
+			unsigned int link_id;
+			char *endptr;
+
+			if (argc != 2)
+				return 1;
+
+			link_id = strtol(argv[1], &endptr, 10);
+
+			if (*endptr)
+				return 1;
+
+			if (link_id <= MAX_MLD_LINK) {
+				NLA_PUT_U8(msg, NL80211_ATTR_MLO_LINK_ID,
+					   link_id);
+			}
+		}
+	}
+
+	return 0;
+
+nla_put_failure:
+	return -ENOBUFS;
+}
+
+COMMAND(cac, stop, "[-l] <link id>",
+        NL80211_CMD_STOP_BGRADAR_DETECT, 0, CIB_NETDEV, handle_cac_stop,
+        "Stop the ongoing background CAC");
+
