From 9cdb8bae50aca80b593d0f53be5b8efedfc91324 Mon Sep 17 00:00:00 2001
From: Tamizh Chelvam <tamizhr@codeaurora.org>
Date: Sun, 7 Mar 2021 22:49:26 +0530
Subject: [PATCH] backport: Compile fix

Adding these changes to fix compilation issue due to
package upgrade

Signed-off-by: Tamizh Chelvam <tamizhr@codeaurora.org>
---
 backport-include/linux/skbuff.h          |  8 -----
 drivers/net/wireless/ath/ath11k/ahb.c    |  2 +-
 drivers/net/wireless/ath/ath11k/dbring.c |  4 ---
 drivers/net/wireless/ath/ath11k/debug.h  |  4 +--
 drivers/net/wireless/ath/ath11k/dp.c     |  3 +-
 drivers/net/wireless/ath/ath11k/dp_rx.c  | 45 +++++++++++++++-----------
 drivers/net/wireless/ath/ath11k/dp_rx.h  |  3 +-
 drivers/net/wireless/ath/ath11k/dp_tx.c  |  2 +-
 drivers/net/wireless/ath/ath11k/hw.h     |  2 +-
 drivers/net/wireless/ath/ath11k/mac.c    | 19 +++++------
 drivers/net/wireless/ath/ath11k/mhi.c    |  9 +++---
 drivers/net/wireless/ath/ath11k/pci.c    |  2 +-
 drivers/net/wireless/ath/ath11k/qmi.c    |  3 +-
 include/linux/backport-refcount.h        |  4 +--
 include/net/fq.h                         | 10 +++++-
 include/net/mac80211.h                   |  1 +
 net/mac80211/cfg.c                       |  4 +--
 net/mac80211/ieee80211_i.h               |  4 ++-
 net/mac80211/iface.c                     |  2 --
 net/mac80211/rx.c                        | 23 +++++++++-----
 net/mac80211/tx.c                        | 54 ++++++++++++++++++++++----------
 21 files changed, 120 insertions(+), 88 deletions(-)

--- a/backport-include/linux/skbuff.h
+++ b/backport-include/linux/skbuff.h
@@ -23,14 +23,6 @@ static inline void *backport___skb_push(
 }
 #define __skb_push LINUX_BACKPORT(__skb_push)
 
-static inline void *__skb_put_zero(struct sk_buff *skb, unsigned int len)
-{
-	void *tmp = __skb_put(skb, len);
-
-	memset(tmp, 0, len);
-	return tmp;
-}
-
 static inline void *backport_skb_put_zero(struct sk_buff *skb, unsigned int len)
 {
 	void *tmp = skb_put(skb, len);
--- a/drivers/net/wireless/ath/ath11k/dbring.c
+++ b/drivers/net/wireless/ath/ath11k/dbring.c
@@ -32,7 +32,7 @@ static void ath11k_dbring_fill_magic_val
 	size = size >> 2;
 
 	for (idx = 0, temp = buffer; idx < size; idx++, temp++)
-		*temp++ = ATH11K_DB_MAGIC_VALUE;
+		*temp = ATH11K_DB_MAGIC_VALUE;
 }
 
 int ath11k_dbring_bufs_replenish(struct ath11k *ar,
@@ -88,7 +88,6 @@ int ath11k_dbring_bufs_replenish(struct
 
 	ath11k_hal_rx_buf_addr_info_set(desc, paddr, cookie, 0);
 
-	ath11k_debugfs_add_dbring_entry(ar, id, ATH11K_DBG_DBR_EVENT_REPLENISH, srng);
 	ath11k_hal_srng_access_end(ab, srng);
 
 	return 0;
--- a/drivers/net/wireless/ath/ath11k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath11k/dp_rx.c
@@ -2895,7 +2895,7 @@ static void ath11k_dp_rx_deliver_msdu(st
 	spin_unlock_bh(&ar->ab->base_lock);
 
 	ath11k_dbg(ar->ab, ATH11K_DBG_DATA,
-		   "rx skb %pK len %u peer %pM %d %s sn %u %s%s%s%s%s%s%s %srate_idx %u vht_nss %u freq %u band %u flag 0x%x fcs-err %i mic-err %i amsdu-more %i\n",
+		   "rx skb %pK len %u peer %pM %hhu %s sn %u %s%s%s%s%s%s%s %srate_idx %u vht_nss %u freq %u band %u flag 0x%x fcs-err %i mic-err %i amsdu-more %i\n",
 		   msdu,
 		   msdu->len,
 		   peer ? peer->addr : NULL,
--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -2199,6 +2199,12 @@ static void ath11k_peer_assoc_h_he(struc
 
 	arg->peer_nss = min(sta->deflink.rx_nss, max_nss);
 
+#if LINUX_VERSION_IS_LESS(5,16,0)
+	memcpy(&arg->peer_he_cap_macinfo, he_cap->he_cap_elem.mac_cap_info,
+			sizeof(arg->peer_he_cap_macinfo));
+	memcpy(&arg->peer_he_cap_phyinfo, he_cap->he_cap_elem.phy_cap_info,
+			sizeof(arg->peer_he_cap_phyinfo));
+#else
 	memcpy_and_pad(&arg->peer_he_cap_macinfo,
 		       sizeof(arg->peer_he_cap_macinfo),
 		       he_cap->he_cap_elem.mac_cap_info,
@@ -2209,6 +2215,7 @@ static void ath11k_peer_assoc_h_he(struc
 		       he_cap->he_cap_elem.phy_cap_info,
 		       sizeof(he_cap->he_cap_elem.phy_cap_info),
 		       0);
+#endif
 	arg->peer_he_ops = vif->bss_conf.he_oper.params;
 
 	/* the top most byte is used to indicate BSS color info */
@@ -7032,7 +7039,7 @@ static int ath11k_mac_op_add_interface(s
 	if ((vif->type == NL80211_IFTYPE_AP_VLAN ||
 	     vif->type == NL80211_IFTYPE_STATION) && ab->nss.enabled) {
 		if (ath11k_frame_mode == ATH11K_HW_TXRX_ETHERNET &&
-		    ieee80211_set_hw_80211_encap(vif, true)) {
+		    (vif->offload_flags & IEEE80211_OFFLOAD_ENCAP_ENABLED)) {
 			vif->offload_flags |= IEEE80211_OFFLOAD_ENCAP_4ADDR;
 			arvif->nss.encap = ATH11K_HW_TXRX_ETHERNET;
 			arvif->nss.decap = ATH11K_HW_TXRX_ETHERNET;
@@ -9634,6 +9641,8 @@ static void ath11k_mac_update_ch_list(st
 		    band->channels[i].center_freq > freq_high)
 			band->channels[i].flags |= IEEE80211_CHAN_DISABLED;
 	}
+
+	return;
 }
 
 #define ATH11k_5_DOT_9_MIN_FREQ	5845
--- a/drivers/net/wireless/ath/ath11k/mhi.c
+++ b/drivers/net/wireless/ath/ath11k/mhi.c
@@ -393,7 +393,7 @@ int ath11k_mhi_register(struct ath11k_pc
 	struct mhi_controller_config *ath11k_mhi_config;
 	int ret;
 
-	mhi_ctrl = mhi_alloc_controller();
+	mhi_ctrl = kzalloc(sizeof(*mhi_ctrl), GFP_KERNEL);
 	if (!mhi_ctrl)
 		return -ENOMEM;
 
@@ -413,7 +413,7 @@ int ath11k_mhi_register(struct ath11k_pc
 	ret = ath11k_mhi_get_msi(ab_pci);
 	if (ret) {
 		ath11k_err(ab, "failed to get msi for mhi\n");
-		mhi_free_controller(mhi_ctrl);
+		kfree(mhi_ctrl);
 		return ret;
 	}
 
@@ -461,7 +461,7 @@ int ath11k_mhi_register(struct ath11k_pc
 	ret = mhi_register_controller(mhi_ctrl, ath11k_mhi_config);
 	if (ret) {
 		ath11k_err(ab, "failed to register to mhi bus, err = %d\n", ret);
-		mhi_free_controller(mhi_ctrl);
+		kfree(mhi_ctrl);
 		return ret;
 	}
 
@@ -528,7 +528,8 @@ int ath11k_mhi_resume(struct ath11k_pci
 	 * are not in M3 state but they are functional. So just ignore
 	 * the MHI state while resuming.
 	 */
-	ret = mhi_pm_resume_force(ab_pci->mhi_ctrl);
+	//ret = mhi_pm_resume_force(ab_pci->mhi_ctrl);
+	ret = 0;
 	if (ret) {
 		ath11k_warn(ab, "failed to resume mhi: %d", ret);
 		return ret;
--- a/drivers/net/wireless/ath/ath11k/pci.c
+++ b/drivers/net/wireless/ath/ath11k/pci.c
@@ -586,7 +586,6 @@ static int ath11k_pci_power_up(struct at
 {
 	struct ath11k_pci *ab_pci = ath11k_pci_priv(ab);
 	int ret;
-	u32 addr;
 
 	ab_pci->register_window = 0;
 	clear_bit(ATH11K_FLAG_DEVICE_INIT_DONE, &ab->dev_flags);
--- a/drivers/net/wireless/ath/ath11k/qmi.c
+++ b/drivers/net/wireless/ath/ath11k/qmi.c
@@ -2919,11 +2919,6 @@ static int ath11k_qmi_assign_target_mem_
 			idx++;
 			break;
 		case CALDB_MEM_REGION_TYPE:
-			if (ab->qmi.target_mem[i].size > ATH11K_QMI_CALDB_SIZE) {
-				ath11k_warn(ab, "qmi mem size is low to load caldata\n");
-				return -EINVAL;
-			}
-
 			if (ath11k_cold_boot_cal && ab->hw_params.cold_boot_calib &&
 			    ab->enable_cold_boot_cal) {
 				if (hremote_node) {
--- a/include/linux/backport-refcount.h
+++ b/include/linux/backport-refcount.h
@@ -217,7 +217,7 @@ static inline __must_check bool refcount
 
 static inline void __refcount_inc(refcount_t *r, int *oldp)
 {
-	__refcount_add(1, r, oldp);
+	refcount_add(1, r);
 }
 
 /**
@@ -244,7 +244,7 @@ static inline __must_check bool refcount
 
 static inline __must_check bool __refcount_dec_and_test(refcount_t *r, int *oldp)
 {
-	return atomic_sub_and_test(i, &r->refs);
+	return refcount_sub_and_test(1, r);
 }
 
 /**
--- a/include/net/fq.h
+++ b/include/net/fq.h
@@ -68,7 +68,15 @@ struct fq {
 	struct list_head tin_backlog;
 	spinlock_t lock;
 	u32 flows_cnt;
-	siphash_key_t	perturbation;
+#if LINUX_VERSION_IS_GEQ(5,3,10) || \
+	LINUX_VERSION_IN_RANGE(4,19,83, 4,20,0) || \
+	LINUX_VERSION_IN_RANGE(4,14,153, 4,15,0) || \
+	LINUX_VERSION_IN_RANGE(4,9,200, 4,10,0) || \
+	LINUX_VERSION_IN_RANGE(4,4,200, 4,5,0)
+	siphash_key_t   perturbation;
+#else
+	u32 perturbation;
+#endif
 	u32 limit;
 	u32 memory_limit;
 	u32 memory_usage;
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -210,6 +210,7 @@ enum ieee80211_rx_flags {
 };
 
 struct ieee80211_rx_data {
+	struct napi_struct *napi;
 #if LINUX_VERSION_IS_GEQ(4,19,0)
 	struct list_head *list;
 #else
@@ -297,6 +298,7 @@ struct unsol_bcast_probe_resp_data {
 	u8 data[];
 };
 
+
 struct ps_data {
 	/* yes, this looks ugly, but guarantees that we can later use
 	 * bitmap_empty :)
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -1934,7 +1934,6 @@ static void ieee80211_iface_work(struct
 
 	/* first process frames */
 	while ((skb = skb_dequeue(&sdata->skb_queue))) {
-		kcov_remote_start_common(skb_get_kcov_handle(skb));
 
 		if (skb->protocol == cpu_to_be16(ETH_P_TDLS))
 			ieee80211_process_tdls_channel_switch(sdata, skb);
@@ -1942,17 +1941,14 @@ static void ieee80211_iface_work(struct
 			ieee80211_iface_process_skb(local, sdata, skb);
 
 		kfree_skb(skb);
-		kcov_remote_stop();
 	}
 
 	/* process status queue */
 	while ((skb = skb_dequeue(&sdata->status_queue))) {
-		kcov_remote_start_common(skb_get_kcov_handle(skb));
 
 		ieee80211_iface_process_status(sdata, skb);
 		kfree_skb(skb);
 
-		kcov_remote_stop();
 	}
 
 	/* then other type-dependent work */
--- a/net/mac80211/tx.c
+++ b/net/mac80211/tx.c
@@ -4561,20 +4561,22 @@ static void ieee80211_8023_xmit(struct i
 
 	ieee80211_aggr_check(sdata, sta, skb);
 
-	tid = skb->priority & IEEE80211_QOS_CTL_TAG1D_MASK;
-	tid_tx = rcu_dereference(sta->ampdu_mlme.tid_tx[tid]);
-	if (tid_tx) {
-		if (!test_bit(HT_AGG_STATE_OPERATIONAL, &tid_tx->state)) {
-			/* fall back to non-offload slow path */
-			__ieee80211_subif_start_xmit(skb, dev, 0,
-						     IEEE80211_TX_CTRL_MLO_LINK_UNSPEC,
-						     NULL);
-			return;
-		}
+	if (!ieee80211_hw_check(&local->hw, SUPPORTS_NSS_OFFLOAD)) {
+		tid = skb->priority & IEEE80211_QOS_CTL_TAG1D_MASK;
+		tid_tx = rcu_dereference(sta->ampdu_mlme.tid_tx[tid]);
+		if (tid_tx) {
+			if (!test_bit(HT_AGG_STATE_OPERATIONAL, &tid_tx->state)) {
+				/* fall back to non-offload slow path */
+				__ieee80211_subif_start_xmit(skb, dev, 0,
+							     IEEE80211_TX_CTRL_MLO_LINK_UNSPEC,
+							     NULL);
+				return;
+			}
 
-		info->flags |= IEEE80211_TX_CTL_AMPDU;
-		if (tid_tx->timeout)
-			tid_tx->last_tx = jiffies;
+			info->flags |= IEEE80211_TX_CTL_AMPDU;
+			if (tid_tx->timeout)
+				tid_tx->last_tx = jiffies;
+		}
 	}
 
 	if (unlikely(skb->sk &&
@@ -4619,7 +4621,7 @@ netdev_tx_t ieee80211_subif_start_xmit_8
 {
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
 	struct ethhdr *ehdr = (struct ethhdr *)skb->data;
-	struct ieee80211_key *key;
+	struct ieee80211_key *key = NULL;
 	struct sta_info *sta;
 
 #ifdef CPTCFG_MAC80211_NSS_SUPPORT
@@ -4637,9 +4639,13 @@ netdev_tx_t ieee80211_subif_start_xmit_8
 		goto out;
 	}
 
-	if (unlikely(IS_ERR_OR_NULL(sta) || !sta->uploaded ||
-	    !test_sta_flag(sta, WLAN_STA_AUTHORIZED) ||
-	    sdata->control_port_protocol == ehdr->h_proto))
+	if (ieee80211_hw_check(&sdata->local->hw, SUPPORTS_NSS_OFFLOAD)) {
+		if (unlikely(IS_ERR_OR_NULL(sta) || !sta->uploaded))
+			sta = NULL;
+		goto tx_offload;
+	} else if (unlikely(IS_ERR_OR_NULL(sta) || !sta->uploaded ||
+		   !test_sta_flag(sta, WLAN_STA_AUTHORIZED) ||
+		   sdata->control_port_protocol == ehdr->h_proto))
 		goto skip_offload;
 
 	key = rcu_dereference(sta->ptk[sta->ptk_idx]);
@@ -4649,6 +4655,7 @@ netdev_tx_t ieee80211_subif_start_xmit_8
 	if (key && (!(key->flags & KEY_FLAG_UPLOADED_TO_HARDWARE)))
 		goto skip_offload;
 
+tx_offload:
 	ieee80211_8023_xmit(sdata, dev, sta, key, skb);
 	goto out;
 
@@ -6003,13 +6010,7 @@ int ieee80211_tx_control_port(struct wip
 	mutex_lock(&local->mtx);
 
 	local_bh_disable();
-
-	/* added hardware encap check for ethernet mode */
-	if (sdata->vif.offload_flags & IEEE80211_OFFLOAD_ENCAP_ENABLED)
-		ieee80211_subif_start_xmit_8023(skb, skb->dev);
-	else
-		__ieee80211_subif_start_xmit(skb, skb->dev, flags, ctrl_flags, cookie);
-
+	__ieee80211_subif_start_xmit(skb, skb->dev, flags, ctrl_flags, cookie);
 	local_bh_enable();
 
 	mutex_unlock(&local->mtx);
--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -5105,7 +5105,7 @@ void ieee80211_rx_list(struct ieee80211_
 
 	if (pubsta) {
 		sta = container_of(pubsta, struct sta_info, sta);
-		if (sta && napi) {
+		if (sta) {
 			if (!(status->flag & RX_FLAG_ONLY_MONITOR))
 				atomic_inc(&sta->rx_drv_pkts);
 		}
@@ -5197,8 +5197,6 @@ void ieee80211_rx_list(struct ieee80211_
 
 	status->rx_flags = 0;
 
-	kcov_remote_start_common(skb_get_kcov_handle(skb));
-
 	/*
 	 * Frames with failed FCS/PLCP checksum are not returned,
 	 * all other frames are returned without radiotap header
@@ -5218,7 +5216,6 @@ void ieee80211_rx_list(struct ieee80211_
 			__ieee80211_rx_handle_packet(hw, pubsta, skb, list);
 	}
 
-	kcov_remote_stop();
 	return;
  drop:
 	kfree_skb(skb);
--- a/drivers/net/wireless/ath/ath11k/hal_rx.c
+++ b/drivers/net/wireless/ath/ath11k/hal_rx.c
@@ -29,7 +29,12 @@ static int ath11k_hal_reo_cmd_queue_stat
 		  FIELD_PREP(HAL_TLV_HDR_LEN, sizeof(*desc));
 
 	desc = (struct hal_reo_get_queue_stats *)tlv->value;
+#if LINUX_VERSION_IS_LESS(5,16,0)
+	memset(&desc->queue_addr_lo, 0,
+			(sizeof(*desc) - sizeof(struct hal_reo_cmd_hdr)));
+#else
 	memset_startat(desc, 0, queue_addr_lo);
+#endif
 
 	desc->cmd.info0 &= ~HAL_REO_CMD_HDR_INFO0_STATUS_REQUIRED;
 	if (cmd->flag & HAL_REO_CMD_FLG_NEED_STATUS)
@@ -61,7 +66,12 @@ static int ath11k_hal_reo_cmd_flush_cach
 		  FIELD_PREP(HAL_TLV_HDR_LEN, sizeof(*desc));
 
 	desc = (struct hal_reo_flush_cache *)tlv->value;
+#if LINUX_VERSION_IS_LESS(5,16,0)
+	memset(&desc->cache_addr_lo, 0,
+			(sizeof(*desc) - sizeof(struct hal_reo_cmd_hdr)));
+#else
 	memset_startat(desc, 0, cache_addr_lo);
+#endif
 
 	desc->cmd.info0 &= ~HAL_REO_CMD_HDR_INFO0_STATUS_REQUIRED;
 	if (cmd->flag & HAL_REO_CMD_FLG_NEED_STATUS)
@@ -99,7 +109,12 @@ static int ath11k_hal_reo_cmd_update_rx_
 		  FIELD_PREP(HAL_TLV_HDR_LEN, sizeof(*desc));
 
 	desc = (struct hal_reo_update_rx_queue *)tlv->value;
+#if LINUX_VERSION_IS_LESS(5,16,0)
+	memset(&desc->queue_addr_lo, 0,
+			(sizeof(*desc) - sizeof(struct hal_reo_cmd_hdr)));
+#else
 	memset_startat(desc, 0, queue_addr_lo);
+#endif
 
 	desc->cmd.info0 &= ~HAL_REO_CMD_HDR_INFO0_STATUS_REQUIRED;
 	if (cmd->flag & HAL_REO_CMD_FLG_NEED_STATUS)
