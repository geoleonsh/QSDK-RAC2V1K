From ab991ead97f71238557341f00c495ccc4acce90d Mon Sep 17 00:00:00 2001
From: Manish Dharanenthiran <quic_mdharane@quicinc.com>
Date: Sun, 9 Jul 2023 11:38:59 +0530
Subject: [PATCH 2/4] wifi: ath12k: Add support to set mode1 to firmware

In current design, Firmware by default when asserted
will update MODE0 as the mechanism to host in shmem.
Host can modify this by sending FW_HANG command with
MODE1 value set when set_fw_recovery is called, so
that firmware when asserted, will update MODE1 as
value in shmem.

This change adds support to enable MODE1 recovery
in firmware. If host is mlo_capable, will send
FW_HANG command to all the firmware in the same
group.

Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debugfs.c | 38 ++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/wmi.h     |  6 ++++
 2 files changed, 43 insertions(+), 1 deletion(-)

diff --git a/drivers/net/wireless/ath/ath12k/debugfs.c b/drivers/net/wireless/ath/ath12k/debugfs.c
index 309e5ec..bac1834 100644
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -1901,9 +1901,11 @@ static ssize_t ath12k_debug_write_fw_recovery(struct file *file,
 					      size_t count, loff_t *ppos)
 {
 	struct ath12k_base *ab = file->private_data;
+	struct ath12k *ar;
+	struct ath12k_pdev *pdev;
 	struct ath12k_hw_group *ag;
 	unsigned int value;
-	int ret;
+	int ret, radio_idx, radioup = 0;
 	int i;
 
 	if (kstrtouint_from_user(user_buf, count, 0, &value))
@@ -1918,12 +1920,46 @@ static ssize_t ath12k_debug_write_fw_recovery(struct file *file,
 	}
 
 	ag = ab->ag;
+
+	if (!value)
+		value = ATH12K_WMI_DISABLE_FW_RECOVERY;
+	else
+		value = (value == ATH12K_FW_RECOVERY_ENABLE_SSR_ONLY) ?
+			ATH12K_WMI_FW_HANG_RECOVERY_MODE1 :
+			ATH12K_WMI_FW_HANG_RECOVERY_MODE0;
+
 	if (ag->mlo_capable) {
 		for (i = 0; i < ag->num_chip; i++) {
 			ab = ag->ab[i];
 			mutex_lock(&ab->core_lock);
 			ab->fw_recovery_support = value ? true : false;
 			mutex_unlock(&ab->core_lock);
+
+			/*
+			 * Set MODE0 or MODE 1, if recovery mode addr is valid.
+			 * TODO: Instead of checking recovery mode addr from
+			 * TLV, need to check WMI caps once the support is
+			 * added from FW.
+			 */
+			if (ab->recovery_mode_address) {
+				for (radio_idx = 0; radio_idx < ab->num_radios; radio_idx++) {
+
+					pdev = &ab->pdevs[radio_idx];
+					ar = pdev->ar;
+					if (ar && ar->state == ATH12K_STATE_ON) {
+						radioup = 1;
+						break;
+					}
+				}
+
+				if (radioup) {
+					ret = ath12k_wmi_force_fw_hang_cmd(ar,
+									   value,
+									   ATH12K_WMI_FW_HANG_DELAY, false);
+					ath12k_info(ab, "setting FW assert mode [%d] ret [%d]\n", value, ret);
+				} else
+					continue;
+			}
 		}
 	} else
 		ab->fw_recovery_support = value ? true : false;
diff --git a/drivers/net/wireless/ath/ath12k/wmi.h b/drivers/net/wireless/ath/ath12k/wmi.h
index d385b90..f8b9627 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -4105,6 +4105,12 @@ enum wmi_sta_ps_mode {
 #define ATH12K_WMI_FW_HANG_ASSERT_TYPE 1
 #define ATH12K_WMI_FW_HANG_DELAY 0
 
+enum wmi_fw_hang_recovery_mode_type {
+	ATH12K_WMI_DISABLE_FW_RECOVERY = 200,
+	ATH12K_WMI_FW_HANG_RECOVERY_MODE0,
+	ATH12K_WMI_FW_HANG_RECOVERY_MODE1,
+};
+
 /* type, 0:unused 1: ASSERT 2: not respond detect command
  * delay_time_ms, the simulate will delay time
  */
-- 
2.17.1

