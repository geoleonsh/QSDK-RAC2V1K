From 3bf3dd9b2835ecec877ed43e794cc66f27f6e6fe Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Sat, 30 Jul 2022 20:57:20 +0530
Subject: [PATCH 3/5] ath12k: Setup MLO link

Add MLO setup/teardown procedure in the core group start/stop
procedure. Added MAC procedure to handle the hw related request.
WMI MLO setup comprise the WMI (setup & ready) procedures.

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |  10 ++-
 drivers/net/wireless/ath/ath12k/mac.c  | 102 ++++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/wmi.c  |  35 ++++++++-
 drivers/net/wireless/ath/ath12k/wmi.h  |  22 ++++++
 4 files changed, 164 insertions(+), 5 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -803,6 +803,9 @@ struct ath12k {
 	struct wmi_tpc_stats_event *tpc_stats;
 	struct completion tpc_complete;
 	bool tpc_request;
+
+	struct completion mlo_setup_done;
+	u32 mlo_setup_status;
 };
 
 struct ath12k_band_cap {
@@ -954,7 +957,9 @@ struct ath12k_mlo_memory {
 	u32 size;
 };
 
-/* Holds info on the group of SOCs that are registered as a single wiphy */
+/* Holds info on the group of SOCs that are registered as a single wiphy
+ * or single SOC where each radio registered as separate wiphy in non-MLO
+ */
 struct ath12k_hw_group {
 	/* Keep this always as first member */
 	struct list_head list;
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -6966,6 +6966,149 @@ static int ath12k_mac_config_mon_status_
 	return ret;
 }
 
+static int __ath12k_mac_mlo_ready(struct ath12k *ar)
+{
+	int ret;
+
+	ret = ath12k_wmi_mlo_ready(ar);
+	if (ret) {
+		ath12k_err(ar->ab, "MLO ready failed for pdev_idx %d: %d\n",
+			   ar->pdev_idx, ret);
+
+		return ret;
+	}
+
+	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "MLO ready done for pdev_idx %d\n",
+		   ar->pdev_idx);
+
+	return 0;
+}
+
+int ath12k_mac_mlo_ready(struct ath12k_hw *ah)
+{
+	struct ath12k *ar;
+	int ret;
+	int i;
+
+	ar = ah->radio;
+	for (i = 0; i < ah->num_radio; i++) {
+		ret = __ath12k_mac_mlo_ready(ar);
+		if (ret)
+			goto out;
+
+		ar++;
+	}
+
+out:
+	return ret;
+
+}
+
+static int __ath12k_mac_mlo_setup(struct ath12k *ar)
+{
+	struct ath12k_base *partner_ab, *ab = ar->ab;
+	struct ath12k_hw_group *ag = ab->ag;
+	struct ath12k_pdev *pdev;
+	struct wmi_mlo_setup_params mlo_params = { 0 };
+	u8 num_link = 0, partner_link_id[ATH12K_GROUP_MAX_RADIO] = { 0 };
+	int chip_idx, pdev_idx, ret;
+	unsigned long time_left;
+
+	lockdep_assert_held(&ag->mutex_lock);
+
+	reinit_completion(&ar->mlo_setup_done);
+	for (chip_idx = 0; chip_idx < ag->num_chip; chip_idx++) {
+		partner_ab = ag->ab[chip_idx];
+
+		for (pdev_idx = 0; pdev_idx < partner_ab->num_radios; pdev_idx++) {
+			pdev = &partner_ab->pdevs[pdev_idx];
+
+			/* Avoid the self link */
+			if (ar == pdev->ar)
+				continue;
+
+			partner_link_id[num_link] = pdev->hw_link_id;
+			num_link++;
+
+			ath12k_dbg(ab, ATH12K_DBG_MAC,
+				   "chip_id %d pdev_idx %d link id %d num_link %d\n",
+				   chip_idx, pdev_idx, pdev->hw_link_id, num_link);
+		}
+	}
+
+	mlo_params.group_id = ag->id;
+	mlo_params.partner_link_id = partner_link_id;
+	mlo_params.num_partner_links = num_link;
+	ar->mlo_setup_status = 0;
+
+	ath12k_dbg(ab, ATH12K_DBG_MAC, "grp id %d num_link %d\n", ag->id, num_link);
+
+	ret = ath12k_wmi_mlo_setup(ar, &mlo_params);
+	if (ret) {
+		ath12k_err(ab, "failed to setup MLO for pdev_idx %d: %d\n",
+			   ar->pdev_idx, ret);
+		return ret;
+	}
+
+	time_left = wait_for_completion_timeout(&ar->mlo_setup_done,
+						WMI_MLO_CMD_TIMEOUT_HZ);
+	if (!time_left || ar->mlo_setup_status)
+		return ar->mlo_setup_status ? : -ETIMEDOUT;
+
+	ath12k_dbg(ab, ATH12K_DBG_MAC, "MLO setup done for pdev_idx %d\n",
+		   ar->pdev_idx);
+	return 0;
+}
+
+static int __ath12k_mac_mlo_teardown(struct ath12k *ar)
+{
+	struct ath12k_base *ab = ar->ab;
+	int ret;
+
+	ret = ath12k_wmi_mlo_teardown(ar);
+	if (ret) {
+		ath12k_err(ab, "failed to teardown MLO for pdev_idx %d: %d\n",
+			   ar->pdev_idx, ret);
+		return ret;
+	}
+
+	ath12k_dbg(ab, ATH12K_DBG_MAC, "MLO teardown for pdev_idx %d\n",
+		   ar->pdev_idx);
+	return 0;
+}
+
+int ath12k_mac_mlo_setup(struct ath12k_hw *ah)
+{
+	struct ath12k *ar;
+	int ret, fbret;
+	int i;
+
+	ar = ah->radio;
+	for (i = 0; i < ah->num_radio; i++) {
+		ret = __ath12k_mac_mlo_setup(ar);
+		if (ret) {
+			ath12k_err(ar->ab, "failed to setup mlo %d\n", ret);
+			goto err_setup;
+		}
+
+		ar++;
+	}
+
+	return 0;
+
+err_setup:
+	ar = ah->radio;
+	for (i = i - 1; i >= 0; i--) {
+		fbret = __ath12k_mac_mlo_teardown(ar);
+		if (fbret)
+			ath12k_err(ar->ab, "MLO teardown failed %d in setup cleanup\n",
+				   fbret);
+
+		ar++;
+	}
+	return ret;
+}
+
 static int ath12k_mac_radio_start(struct ath12k *ar)
 {
 	struct ath12k_base *ab = ar->ab;
@@ -7091,8 +7234,28 @@ err:
 	return ret;
 }
 
+int ath12k_mac_mlo_teardown(struct ath12k_hw *ah)
+{
+	struct ath12k *ar;
+	int ret;
+	int i;
+
+	ar = ah->radio;
+	for (i = 0; i < ah->num_radio; i++) {
+		ret = __ath12k_mac_mlo_teardown(ar);
+		if (ret)
+			goto out;
+
+		ar++;
+	}
+
+out:
+	return ret;
+}
+
 static void ath12k_mac_radio_stop(struct ath12k *ar)
 {
+	struct ath12k_base *ab = ar->ab;
 	struct htt_ppdu_stats_info *ppdu_stats, *tmp;
 	int ret;
 
@@ -7101,7 +7264,7 @@ static void ath12k_mac_radio_stop(struct
 	mutex_lock(&ar->conf_mutex);
 	ret = ath12k_mac_config_mon_status_default(ar, false);
 	if (ret && (ret != -ENOTSUPP))
-		ath12k_err(ar->ab, "failed to clear rx_filter for monitor status ring: (%d)\n",
+		ath12k_err(ab, "failed to clear rx_filter for monitor status ring: (%d)\n",
 			   ret);
 
 	clear_bit(ATH12K_CAC_RUNNING, &ar->dev_flags);
@@ -7118,7 +7281,7 @@ static void ath12k_mac_radio_stop(struct
 	}
 	spin_unlock_bh(&ar->data_lock);
 
-	rcu_assign_pointer(ar->ab->pdevs_active[ar->pdev_idx], NULL);
+	rcu_assign_pointer(ab->pdevs_active[ar->pdev_idx], NULL);
 
 	synchronize_rcu();
 
@@ -7156,6 +7319,7 @@ static int ath12k_mac_op_start(struct ie
 
 	mutex_unlock(&ah->conf_mutex);
 	return 0;
+
 err:
 	ar = ah->radio;
 	for (i = i - 1; i >= 0; i--) {
@@ -7177,9 +7341,9 @@ static void ath12k_mac_op_stop(struct ie
 
 	/* TODO Maintain state for ah? */
 
-	for (i = 0; i < ah->num_radio; i++) {
+	for (i = ah->num_radio - 1, ar = ar + (ah->num_radio - 1); i >= 0; i--) {
 		ath12k_mac_radio_stop(ar);
-		ar++;
+		ar--;
 	}
 
 	mutex_unlock(&ah->conf_mutex);
@@ -9811,6 +9975,7 @@ ath12k_mac_set_fixed_rate_GI_LTF(struct
 			    ltf, ret);
 		return ret;
 	}
+
 	return 0;
 }
 
@@ -11054,7 +11219,7 @@ void ath12k_mac_unregister(struct ath12k
 	struct ath12k_hw *ah = ag->ah;
 	int i;
 
-	for (i = 0; i < ag->num_hw; i++) {
+	for (i = ag->num_hw - 1; i >= 0; i--) {
 		ah = ag->ah[i];
 		if (!ah)
 			continue;
@@ -11415,6 +11580,7 @@ static int ath12k_mac_setup(struct ath12
 	init_completion(&ar->scan.started);
 	init_completion(&ar->scan.completed);
 	init_completion(&ar->thermal.wmi_sync);
+	init_completion(&ar->mlo_setup_done);
 
 	INIT_DELAYED_WORK(&ar->scan.timeout, ath12k_scan_timeout_work);
 	INIT_WORK(&ar->regd_update_work, ath12k_regd_update_work);
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -9033,7 +9033,9 @@ static void ath12k_wmi_event_mlo_setup_c
 {
 	const void **tb;
 	const struct wmi_mlo_setup_complete_event_fixed_param *ev;
-	int ret;
+	struct ath12k *ar = NULL;
+	struct ath12k_pdev *pdev;
+	int ret, i;
 
 	tb = ath12k_wmi_tlv_parse_alloc(ab, skb->data, skb->len, GFP_ATOMIC);
 	if (IS_ERR(tb)) {
@@ -9052,9 +9054,31 @@ static void ath12k_wmi_event_mlo_setup_c
 	}
 
 	if (ev->status)
-		ath12k_warn(ab, "mlo setup, pdev id %u, err %u\n",
+		ath12k_warn(ab, "mlo setup, pdev id %u, status %u\n",
+			    ev->pdev_id, ev->status);
+
+	if (ev->pdev_id > ab->num_radios)
+		goto skip_lookup;
+
+	for (i = 0; i < ab->num_radios; i++) {
+		pdev = &ab->pdevs[i];
+		if (pdev && pdev->pdev_id == ev->pdev_id) {
+			ar = pdev->ar;
+			break;
+		}
+	}
+
+skip_lookup:
+	if (!ar) {
+		ath12k_warn(ab, "invalid pdev_id %d status %u in setup complete event\n",
 			    ev->pdev_id, ev->status);
+		goto out;
+	}
+
+	ar->mlo_setup_status = ev->status;
+	complete(&ar->mlo_setup_done);
 
+out:
 	kfree(tb);
 }
 
@@ -9082,7 +9106,7 @@ static void ath12k_wmi_event_teardown_co
 	}
 
 	if (ev->status)
-		ath12k_warn(ab, "mlo teardown, pdev id %u, err %u\n",
+		ath12k_warn(ab, "mlo teardown, pdev id %u, status %u\n",
 			    ev->pdev_id, ev->status);
 
 	kfree(tb);
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -913,6 +913,74 @@ err_wmi_detach:
 	return ret;
 }
 
+static int ath12k_core_mlo_teardown(struct ath12k_hw_group *ag)
+{
+	struct ath12k_hw *ah;
+	int ret;
+	int i;
+
+	if (ag->id == ATH12K_INVALID_GRP_ID)
+		return 0;
+
+	for (i = ag->num_hw - 1; i >= 0; i--) {
+		ah = ag->ah[i];
+		if (!ah)
+			continue;
+
+		ret = ath12k_mac_mlo_teardown(ah);
+		if (ret)
+			goto out;
+	}
+
+out:
+	return ret;
+}
+
+static int ath12k_core_mlo_setup(struct ath12k_hw_group *ag)
+{
+	struct ath12k_hw *ah;
+	int ret;
+	int i;
+
+	if (ag->id == ATH12K_INVALID_GRP_ID)
+		return 0;
+
+	for (i = 0; i < ag->num_hw; i++) {
+		ah = ag->ah[i];
+		if (!ah)
+			continue;
+
+		ret = ath12k_mac_mlo_setup(ah);
+		if (ret)
+			goto err_setup;
+	}
+
+	for (i = 0; i < ag->num_hw; i++) {
+		ah = ag->ah[i];
+		if (!ah)
+			continue;
+
+		ret = ath12k_mac_mlo_ready(ah);
+		if (ret)
+			goto err_ready;
+	}
+
+	return 0;
+
+err_ready:
+	i = ag->num_hw;
+err_setup:
+	for (i = i - 1; i >= 0; i--) {
+		ah = ag->ah[i];
+		if (!ah)
+			continue;
+
+		ath12k_mac_mlo_teardown(ah);
+	}
+
+	return ret;
+}
+
 static int ath12k_core_hw_group_start(struct ath12k_hw_group *ag)
 {
 	struct ath12k_base *ab = ag->ab[0];
@@ -949,11 +1017,17 @@ static int ath12k_core_hw_group_start(st
 		mutex_unlock(&ab->core_lock);
 	}
 
+	ret = ath12k_core_mlo_setup(ag);
+	if (ret) {
+		ath12k_err(NULL, "failed to setup MLO: %d\n", ret);
+		goto err_pdev_destroy;
+	}
+
 	if (!is_registered) {
 		ret = ath12k_mac_register(ag);
 		if (ret) {
 			ath12k_err(ab, "failed register the radio with mac80211: %d\n", ret);
-			goto err_pdev_destroy;
+			goto err_mlo_teardown;
 		}
 	}
 
@@ -1005,6 +1079,8 @@ pdev_cleanup:
 	}
 
 	ath12k_mac_unregister(ag);
+err_mlo_teardown:
+	ath12k_core_mlo_teardown(ag);
 	i = ag->num_chip;
 err_pdev_destroy:
 	for (i = i - 1; i >= 0; i--) {
@@ -1488,7 +1564,7 @@ static void ath12k_core_hw_group_stop(st
 
 	clear_bit(ATH12K_FLAG_REGISTERED, &ag->dev_flags);
 
-	for (i = 0; i < ag->num_chip; i++) {
+	for (i = ag->num_chip - 1; i >= 0; i--) {
 		ab = ag->ab[i];
 
 		mutex_lock(&ab->core_lock);
@@ -1500,7 +1576,9 @@ static void ath12k_core_hw_group_stop(st
 
 	ath12k_mac_unregister(ag);
 
-	for (i = 0; i < ag->num_chip; i++) {
+	ath12k_core_mlo_teardown(ag);
+
+	for (i = ag->num_chip - 1; i >= 0; i--) {
 		ab = ag->ab[i];
 
 		mutex_lock(&ab->core_lock);
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -1854,10 +1854,8 @@ static void ath12k_htt_mlo_offset_event_
 			       HTT_T2H_MLO_OFFSET_INFO_PDEV_ID);
 	ar = ath12k_mac_get_ar_by_pdev_id(ab, pdev_id);
 
-	if (!ar) {
-		ath12k_warn(ab, "invalid pdev id %d on htt mlo offset\n", pdev_id);
+	if (!ar)
 		return;
-	}
 
 	spin_lock_bh(&ar->data_lock);
 	pdev = ar->pdev;
--- a/drivers/net/wireless/ath/ath12k/mac.h
+++ b/drivers/net/wireless/ath/ath12k/mac.h
@@ -12,6 +12,7 @@
 
 struct ath12k;
 struct ath12k_base;
+struct ath12k_hw;
 struct ath12k_hw_group;
 
 struct ath12k_generic_iter {
@@ -167,4 +168,7 @@ void ath12k_mac_get_any_chandef_iter(str
                                      void *data);
 void ath12k_mac_bcn_tx_event(struct ath12k_vif *arvif);
 struct ath12k *ath12k_get_ar_by_vif(struct ieee80211_hw *hw, struct ieee80211_vif *vif);
+int ath12k_mac_mlo_setup(struct ath12k_hw *ah);
+int ath12k_mac_mlo_ready(struct ath12k_hw *ah);
+int ath12k_mac_mlo_teardown(struct ath12k_hw *ah);
 #endif
