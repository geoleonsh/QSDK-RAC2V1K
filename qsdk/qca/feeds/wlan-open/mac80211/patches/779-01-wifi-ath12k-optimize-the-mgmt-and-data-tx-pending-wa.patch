From 88daecb31cf8efffe7b945725bc9ad83ac6850a6 Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Thu, 18 May 2023 11:27:36 +0530
Subject: [PATCH 1/2] wifi: ath12k: optimize the mgmt and data tx pending
 wait/wake call

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c  |  1 -
 drivers/net/wireless/ath/ath12k/dp.c    |  1 -
 drivers/net/wireless/ath/ath12k/dp.h    |  1 -
 drivers/net/wireless/ath/ath12k/dp_tx.c |  6 +++---
 drivers/net/wireless/ath/ath12k/mac.c   | 18 ++++++------------
 5 files changed, 9 insertions(+), 18 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -1814,11 +1814,10 @@ static void ath12k_core_pre_reconfigure_
 		complete(&ar->bss_survey_done);
 		complete(&ar->thermal.wmi_sync);
 
-		wake_up(&ar->dp.tx_empty_waitq);
 		idr_for_each(&ar->txmgmt_idr,
 			     ath12k_mac_tx_mgmt_pending_free, ar);
 		idr_destroy(&ar->txmgmt_idr);
-		wake_up(&ar->txmgmt_empty_waitq);
+		wake_up(&ar->tx_empty_waitq);
 
 		ar->monitor_vdev_id = -1;
 		clear_bit(MONITOR_VDEV_STARTED, &ar->monitor_flags);
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -1168,7 +1168,6 @@ void ath12k_dp_pdev_pre_alloc(struct ath
 		dp = &ar->dp;
 		dp->mac_id = i;
 		atomic_set(&dp->num_tx_pending, 0);
-		init_waitqueue_head(&dp->tx_empty_waitq);
 
 		/*TODO Add any RXDMA setup required per pdev*/
 	}
--- a/drivers/net/wireless/ath/ath12k/dp.h
+++ b/drivers/net/wireless/ath/ath12k/dp.h
@@ -133,7 +133,6 @@ struct ath12k_mon_data {
 struct ath12k_pdev_dp {
 	u32 mac_id;
 	atomic_t num_tx_pending;
-	wait_queue_head_t tx_empty_waitq;
 	struct dp_srng rxdma_mon_dst_ring[MAX_RXDMA_PER_PDEV];
 	struct dp_srng tx_mon_dst_ring[MAX_RXDMA_PER_PDEV];
 
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -694,7 +694,7 @@ static void ath12k_dp_tx_free_txbuf(stru
 
 	ar = ab->pdevs[mac_id].ar;
 	if (atomic_dec_and_test(&ar->dp.num_tx_pending))
-		wake_up(&ar->dp.tx_empty_waitq);
+		wake_up(&ar->tx_empty_waitq);
 }
 
 static void
@@ -720,7 +720,7 @@ ath12k_dp_tx_htt_tx_complete_buf(struct
 	ab->soc_stats.tx_completed[tx_ring->tcl_data_ring_id]++;
 
 	if (atomic_dec_and_test(&ar->dp.num_tx_pending))
-		wake_up(&ar->dp.tx_empty_waitq);
+		wake_up(&ar->tx_empty_waitq);
 
 	flags = skb_cb->flags;
 	drop_disable = (ab->stats_disable && !(flags & ATH12K_SKB_TX_STATUS));
@@ -1358,7 +1358,7 @@ int ath12k_dp_tx_completion_handler(stru
 		}
 		ar = ab->pdevs[mac_id].ar;
 		if (atomic_dec_and_test(&ar->dp.num_tx_pending))
-			wake_up(&ar->dp.tx_empty_waitq);
+			wake_up(&ar->tx_empty_waitq);
 
 		if (unlikely(WARN_ON_ONCE(buf_rel_source != HAL_WBM_REL_SRC_MODULE_TQM))) {
 			/* Must not happen */
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -8421,7 +8421,7 @@ static void ath12k_mgmt_over_wmi_tx_drop
         	WARN_ON_ONCE(1);
 
 	if (!num_mgmt)
-        	wake_up(&ar->txmgmt_empty_waitq);
+        	wake_up(&ar->tx_empty_waitq);
 }
 
 static void ath12k_mac_tx_mgmt_free(struct ath12k *ar, int buf_id)
@@ -12950,22 +12950,21 @@ static void ath12k_mac_flush(struct ath1
 
 	lockdep_assert_held(&ar->ah->conf_mutex);
 
-	time_left = wait_event_timeout(ar->dp.tx_empty_waitq,
-				       (atomic_read(&ar->dp.num_tx_pending) == 0),
+	time_left = wait_event_timeout(ar->tx_empty_waitq,
+				       ((atomic_read(&ar->dp.num_tx_pending) == 0) &&
+					(atomic_read(&ar->num_pending_mgmt_tx) == 0)),
 				       ATH12K_FLUSH_TIMEOUT);
-	if (time_left == 0)
-		ath12k_warn(ab, "failed to flush transmit queue %ld\n", time_left);
-
-	time_left = wait_event_timeout(ar->txmgmt_empty_waitq,
-				       (atomic_read(&ar->num_pending_mgmt_tx) == 0),
-				       ATH12K_FLUSH_TIMEOUT);
-	if (time_left == 0)
-		ath12k_warn(ab, "failed to flush mgmt transmit queue %ld\n",
-			    time_left);
+	if (time_left == 0) {
+		ath12k_warn(ab, "failed to flush transmit queue pending mgmt %d data %d\n",
+			    atomic_read(&ar->num_pending_mgmt_tx),
+			    atomic_read(&ar->dp.num_tx_pending));
+		return;
+	}
 
 	ath12k_dbg(ab, ATH12K_DBG_MAC,
-		   "mac mgmt tx flush mgmt pending %d\n",
-		   atomic_read(&ar->num_pending_mgmt_tx));
+		   "mac tx flush pending mgmt %d data %d\n",
+		   atomic_read(&ar->num_pending_mgmt_tx),
+		   atomic_read(&ar->dp.num_tx_pending));
 }
 
 static void ath12k_mac_op_flush(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
@@ -15150,7 +15149,7 @@ static int __ath12k_mac_register(struct
 	u32 ht_cap = 0;
 
 	hw = ar->ah->hw;
-	init_waitqueue_head(&ar->txmgmt_empty_waitq);
+	init_waitqueue_head(&ar->tx_empty_waitq);
 	idr_init(&ar->txmgmt_idr);
 	spin_lock_init(&ar->txmgmt_idr_lock);
 
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -934,7 +934,7 @@ struct ath12k {
 	/* protects txmgmt_idr data */
 	spinlock_t txmgmt_idr_lock;
 	atomic_t num_pending_mgmt_tx;
-	wait_queue_head_t txmgmt_empty_waitq;
+	wait_queue_head_t tx_empty_waitq;
 
 	/* cycle count is reported twice for each visited channel during scan.
 	 * access protected by data_lock
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -7129,7 +7129,7 @@ skip_mgmt_stats:
 
 
 	if (!num_mgmt)
-		wake_up(&ar->txmgmt_empty_waitq);	
+		wake_up(&ar->tx_empty_waitq);
 
 	return 0;
 }
