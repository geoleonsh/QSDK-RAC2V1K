From 423847d1c105d0187003fca902abd5a94ced9b1b Mon Sep 17 00:00:00 2001
From: Balamurugan Selvarajan <quic_bselvara@quicinc.com>
Date: Tue, 22 Mar 2022 12:06:55 +0530
Subject: [PATCH] ath12k: Enable SSR on firmware crash

Enable SSR on firmware crash. If firmware recovery
flag is enabled, on firmware crash the fw dump is collected
and radio is restarted to bring it back to the working
state, without impacting the other radio functionality.

Signed-off-by: Balamurugan Selvarajan <quic_bselvara@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c     | 76 +++++-----------------
 drivers/net/wireless/ath/ath12k/coredump.c |  6 +-
 drivers/net/wireless/ath/ath12k/pci.c      |  2 +-
 3 files changed, 19 insertions(+), 65 deletions(-)

Index: backports-20220209-5.4.164-f40abb4788/drivers/net/wireless/ath/ath12k/core.c
===================================================================
--- backports-20220209-5.4.164-f40abb4788.orig/drivers/net/wireless/ath/ath12k/core.c
+++ backports-20220209-5.4.164-f40abb4788/drivers/net/wireless/ath/ath12k/core.c
@@ -806,8 +806,10 @@ void ath12k_core_halt(struct ath12k *ar)
 	idr_init(&ar->txmgmt_idr);
 }
 
-static void ath12k_core_pre_reconfigure_recovery(struct ath12k_base *ab)
+static void ath12k_core_restart(struct work_struct *work)
 {
+	struct ath12k_base *ab = container_of(work, struct ath12k_base, restart_work);
+	int ret;
 	struct ath12k *ar;
 	struct ath12k_pdev *pdev;
 	int i;
@@ -842,13 +844,13 @@ static void ath12k_core_pre_reconfigure_
 
 	wake_up(&ab->wmi_ab.tx_credits_wq);
 	wake_up(&ab->peer_mapping_wq);
-}
 
-static void ath12k_core_post_reconfigure_recovery(struct ath12k_base *ab)
-{
-	struct ath12k *ar;
-	struct ath12k_pdev *pdev;
-	int i;
+
+	ret = ath12k_core_reconfigure_on_crash(ab);
+	if (ret) {
+		ath12k_err(ab, "failed to reconfigure driver on crash recovery\n");
+		return;
+	}
 
 	for (i = 0; i < ab->num_radios; i++) {
 		pdev = &ab->pdevs[i];
@@ -881,53 +883,23 @@ static void ath12k_core_post_reconfigure
 		}
 		mutex_unlock(&ar->conf_mutex);
 	}
-	complete(&ab->driver_recovery);
-}
-
-static void ath12k_core_restart(struct work_struct *work)
-{
-	struct ath12k_base *ab = container_of(work, struct ath12k_base, restart_work);
-	int ret;
 
-	if (!ab->is_reset)
-		ath12k_core_pre_reconfigure_recovery(ab);
-
-	ret = ath12k_core_reconfigure_on_crash(ab);
-	if (ret) {
-		ath12k_err(ab, "failed to reconfigure driver on crash recovery\n");
-		return;
+	if (ab->is_reset) {
+		atomic_dec(&ab->reset_count);
+		complete(&ab->reset_complete);
+		ab->is_reset = false;
 	}
 
-	if (ab->is_reset)
-		complete_all(&ab->reconfigure_complete);
+	complete(&ab->driver_recovery);
 
-	if (!ab->is_reset)
-		ath12k_core_post_reconfigure_recovery(ab);
 }
 
 static void ath12k_core_reset(struct work_struct *work)
 {
 	struct ath12k_base *ab = container_of(work, struct ath12k_base, reset_work);
-	int reset_count, fail_cont_count;
+	int reset_count;
 	long time_left;
 
-	if (!(test_bit(ATH12K_FLAG_REGISTERED, &ab->dev_flags))) {
-		ath12k_warn(ab, "ignore reset dev flags 0x%lx\n", ab->dev_flags);
-		return;
-	}
-
-	/* Sometimes the recovery will fail and then the next all recovery fail,
-	 * this is to avoid infinite recovery since it can not recovery success
-	 */
-	fail_cont_count = atomic_read(&ab->fail_cont_count);
-
-	if (fail_cont_count >= ATH12K_RESET_MAX_FAIL_COUNT_FINAL)
-		return;
-
-	if (fail_cont_count >= ATH12K_RESET_MAX_FAIL_COUNT_FIRST &&
-	    time_before(jiffies, ab->reset_fail_timeout))
-		return;
-
 	reset_count = atomic_inc_return(&ab->reset_count);
 
 	if (reset_count > 1) {
@@ -946,9 +918,6 @@ static void ath12k_core_reset(struct wor
 			return;
 		}
 
-		ab->reset_fail_timeout = jiffies + ATH12K_RESET_FAIL_TIMEOUT_HZ;
-		/* Record the continuous recovery fail count when recovery failed*/
-		fail_cont_count = atomic_inc_return(&ab->fail_cont_count);
 	}
 
 	ath12k_dbg(ab, ATH12K_DBG_BOOT, "reset starting\n");
@@ -957,21 +926,6 @@ static void ath12k_core_reset(struct wor
 	/* prepare coredump */
 	ath12k_coredump_download_rddm(ab);
 
-	atomic_set(&ab->recovery_count, 0);
-
-	ath12k_core_pre_reconfigure_recovery(ab);
-
-	reinit_completion(&ab->reconfigure_complete);
-	ath12k_core_post_reconfigure_recovery(ab);
-
-	reinit_completion(&ab->recovery_start);
-	atomic_set(&ab->recovery_start_count, 0);
-
-	ath12k_dbg(ab, ATH12K_DBG_BOOT, "waiting recovery start...\n");
-
-	time_left = wait_for_completion_timeout(&ab->recovery_start,
-						ATH12K_RECOVER_START_TIMEOUT_HZ);
-
 	ath12k_hif_power_down(ab);
 	ath12k_hif_power_up(ab);
 
@@ -1070,8 +1024,6 @@ struct ath12k_base *ath12k_core_alloc(st
 	mutex_init(&ab->core_lock);
 	spin_lock_init(&ab->base_lock);
 	init_completion(&ab->reset_complete);
-	init_completion(&ab->reconfigure_complete);
-	init_completion(&ab->recovery_start);
 
 	INIT_LIST_HEAD(&ab->peers);
 	init_waitqueue_head(&ab->peer_mapping_wq);
Index: backports-20220209-5.4.164-f40abb4788/drivers/net/wireless/ath/ath12k/coredump.c
===================================================================
--- backports-20220209-5.4.164-f40abb4788.orig/drivers/net/wireless/ath/ath12k/coredump.c
+++ backports-20220209-5.4.164-f40abb4788/drivers/net/wireless/ath/ath12k/coredump.c
@@ -101,7 +101,7 @@ void ath12k_coredump_build_inline(struct
 	struct ath12k_dump_file_data *file_data;
 	size_t header_size;
 	struct ath12k_pci *ar_pci = (struct ath12k_pci *)ab->drv_priv;
-	struct device dev;
+	struct device *dev;
 	u8 *buf;
 
 	header_size = sizeof(*file_data);
@@ -119,7 +119,7 @@ void ath12k_coredump_build_inline(struct
 	file_data->chip_id = cpu_to_le32(ar_pci->dev_id);
 	file_data->qrtr_id = cpu_to_le32(ar_pci->ab->qmi.service_ins_id);
 	file_data->bus_id = pci_domain_nr(ar_pci->pdev->bus);
-	dev = ar_pci->pdev->dev;
+	dev = ab->dev;
 
 	guid_gen(&file_data->guid);
 	ktime_get_real_ts64(&timestamp);
@@ -138,7 +138,7 @@ void ath12k_coredump_build_inline(struct
 	dump_state.segments = segments;
 	init_completion(&dump_state.dump_done);
 
-	dev_coredumpm(&dev, NULL, &dump_state, header_size, GFP_KERNEL,
+	dev_coredumpm(dev, THIS_MODULE, &dump_state, header_size, GFP_KERNEL,
 		      ath12k_coredump_read_q6dump, ath12k_coredump_free_q6dump);
 
 	/* Wait until the dump is read and free is called */
Index: backports-20220209-5.4.164-f40abb4788/drivers/net/wireless/ath/ath12k/pci.c
===================================================================
--- backports-20220209-5.4.164-f40abb4788.orig/drivers/net/wireless/ath/ath12k/pci.c
+++ backports-20220209-5.4.164-f40abb4788/drivers/net/wireless/ath/ath12k/pci.c
@@ -1246,10 +1246,10 @@ void ath12k_pci_power_down(struct ath12k
 	/* restore aspm in case firmware bootup fails */
 	ath12k_pci_aspm_restore(ab_pci);
 
+	clear_bit(ATH12K_PCI_FLAG_INIT_DONE, &ab_pci->flags);
 	ath12k_pci_force_wake(ab_pci->ab);
 	ath12k_pci_msi_disable(ab_pci);
 	ath12k_mhi_stop(ab_pci);
-	clear_bit(ATH12K_PCI_FLAG_INIT_DONE, &ab_pci->flags);
 	ath12k_pci_sw_reset(ab_pci->ab, false);
 }
 
Index: backports-20220209-5.4.164-f40abb4788/drivers/net/wireless/ath/ath12k/core.h
===================================================================
--- backports-20220209-5.4.164-f40abb4788.orig/drivers/net/wireless/ath/ath12k/core.h
+++ backports-20220209-5.4.164-f40abb4788/drivers/net/wireless/ath/ath12k/core.h
@@ -839,14 +839,8 @@ struct ath12k_base {
 	struct workqueue_struct *workqueue_aux;
 	struct work_struct reset_work;
 	atomic_t reset_count;
-	atomic_t recovery_count;
-	atomic_t recovery_start_count;
 	bool is_reset;
 	struct completion reset_complete;
-	struct completion reconfigure_complete;
-	struct completion recovery_start;
-	/* continuous recovery fail count */
-	atomic_t fail_cont_count;
 	unsigned long reset_fail_timeout;
 	struct {
 		/* protected by data_lock */
Index: backports-20220209-5.4.164-f40abb4788/drivers/net/wireless/ath/ath12k/mac.c
===================================================================
--- backports-20220209-5.4.164-f40abb4788.orig/drivers/net/wireless/ath/ath12k/mac.c
+++ backports-20220209-5.4.164-f40abb4788/drivers/net/wireless/ath/ath12k/mac.c
@@ -5618,28 +5618,6 @@ static int ath12k_mac_config_mon_status_
 	/* TODO: Need to support new monitor mode */
 }
 
-static void ath12k_mac_wait_reconfigure(struct ath12k_base *ab)
-{
-	int recovery_start_count;
-
-	if (!ab->is_reset)
-		return;
-
-	recovery_start_count = atomic_inc_return(&ab->recovery_start_count);
-
-	ath12k_dbg(ab, ATH12K_DBG_MAC, "recovery start count %d\n", recovery_start_count);
-
-	if (recovery_start_count == ab->num_radios) {
-		complete(&ab->recovery_start);
-		ath12k_dbg(ab, ATH12K_DBG_MAC, "recovery started success\n");
-	}
-
-	ath12k_dbg(ab, ATH12K_DBG_MAC, "waiting reconfigure...\n");
-
-	wait_for_completion_timeout(&ab->reconfigure_complete,
-				    ATH12K_RECONFIGURE_TIMEOUT_HZ);
-}
-
 static int ath12k_mac_op_start(struct ieee80211_hw *hw)
 {
 	struct ath12k *ar = hw->priv;
@@ -5656,7 +5634,6 @@ static int ath12k_mac_op_start(struct ie
 		break;
 	case ATH12K_STATE_RESTARTING:
 		ar->state = ATH12K_STATE_RESTARTED;
-		ath12k_mac_wait_reconfigure(ab);
 		break;
 	case ATH12K_STATE_RESTARTED:
 	case ATH12K_STATE_WEDGED:
@@ -7696,8 +7673,6 @@ ath12k_mac_op_reconfig_complete(struct i
 				enum ieee80211_reconfig_type reconfig_type)
 {
 	struct ath12k *ar = hw->priv;
-	struct ath12k_base *ab = ar->ab;
-	int recovery_count;
 
 	if (reconfig_type != IEEE80211_RECONFIG_TYPE_RESTART)
 		return;
@@ -7709,22 +7684,6 @@ ath12k_mac_op_reconfig_complete(struct i
 			    ar->pdev->pdev_id);
 		ar->state = ATH12K_STATE_ON;
 		ieee80211_wake_queues(ar->hw);
-
-		if (ab->is_reset) {
-			recovery_count = atomic_inc_return(&ab->recovery_count);
-			ath12k_dbg(ab, ATH12K_DBG_BOOT, "recovery count %d\n",
-				   recovery_count);
-			/* When there are multiple radios in an SOC,
-			 * the recovery has to be done for each radio
-			 */
-			if (recovery_count == ab->num_radios) {
-				atomic_dec(&ab->reset_count);
-				complete(&ab->reset_complete);
-				ab->is_reset = false;
-				atomic_set(&ab->fail_cont_count, 0);
-				ath12k_dbg(ab, ATH12K_DBG_BOOT, "reset success\n");
-			}
-		}
 	}
 
 	mutex_unlock(&ar->conf_mutex);
