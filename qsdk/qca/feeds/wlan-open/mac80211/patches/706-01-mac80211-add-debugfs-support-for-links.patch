From f6d76117b3d8a4220b7f023789e705ecc068a6f0 Mon Sep 17 00:00:00 2001
From: Harshitha Prem <quic_hprem@quicinc.com>
Date: Sat, 7 Jan 2023 10:40:37 +0530
Subject: [PATCH 2/2] mac80211: add debugfs support for links

Add changes to create a link folder under a vif
whenever a link is added or deleted

by default create link0, as it would correspond to
deflink in case of non-mld vaps

Signed-off-by: Harshitha Prem <quic_hprem@quicinc.com>
---
 include/net/mac80211.h        |  1 +
 net/mac80211/debugfs_netdev.c | 65 +++++++++++++++++++++++++++++++++--
 net/mac80211/debugfs_netdev.h | 11 ++++++
 net/mac80211/link.c           |  3 ++
 4 files changed, 78 insertions(+), 2 deletions(-)

--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -1954,6 +1954,7 @@ struct ieee80211_vif {
 
 #ifdef CPTCFG_MAC80211_DEBUGFS
 	struct dentry *debugfs_dir;
+	struct dentry *link_debugfs[IEEE80211_MLD_MAX_NUM_LINKS];
 #endif
 
 	bool probe_req_reg;
--- a/net/mac80211/debugfs_netdev.c
+++ b/net/mac80211/debugfs_netdev.c
@@ -855,26 +855,88 @@ static void add_files(struct ieee80211_s
 	}
 }
 
+void ieee80211_debugfs_add_link(struct ieee80211_sub_if_data *sdata,
+				unsigned long add)
+{
+	char buf[IFNAMSIZ];
+	u8 id;
+
+	if (!sdata->vif.valid_links)
+		return;
+
+	for_each_set_bit(id, &add, IEEE80211_MLD_MAX_NUM_LINKS) {
+		if (sdata->vif.link_debugfs[id])
+			continue;
+
+		snprintf(buf, IFNAMSIZ, "link%d", id);
+		sdata->vif.link_debugfs[id] = debugfs_create_dir(buf,
+								 sdata->vif.debugfs_dir);
+	}
+}
+
+void ieee80211_debugfs_remove_link(struct ieee80211_sub_if_data *sdata, unsigned long rem)
+{
+	u8 link_id;
+
+	if (!sdata->vif.valid_links)
+		return;
+
+	for_each_set_bit(link_id, &rem, IEEE80211_MLD_MAX_NUM_LINKS) {
+		if (!sdata->vif.link_debugfs[link_id])
+			continue;
+
+		debugfs_remove_recursive(sdata->vif.link_debugfs[link_id]);
+		sdata->vif.link_debugfs[link_id] = NULL;
+	}
+}
+
 void ieee80211_debugfs_add_netdev(struct ieee80211_sub_if_data *sdata)
 {
-	char buf[10+IFNAMSIZ];
+	char buf[10 + IFNAMSIZ];
+	int i = 0;
 
-	sprintf(buf, "netdev:%s", sdata->name);
+	snprintf(buf, 10 + IFNAMSIZ, "netdev:%s", sdata->name);
 	sdata->vif.debugfs_dir = debugfs_create_dir(buf,
 		sdata->local->hw.wiphy->debugfsdir);
 	sdata->debugfs.subdir_stations = debugfs_create_dir("stations",
 							sdata->vif.debugfs_dir);
+
+	for (i = 0; i < IEEE80211_MLD_MAX_NUM_LINKS; i++)
+		sdata->vif.link_debugfs[i] = NULL;
+
 	add_files(sdata);
+
+	/* create default link if it does not exist */
+	if (sdata->vif.link_debugfs[0])
+		return;
+
+	memset(buf, 0, 10 + IFNAMSIZ);
+	snprintf(buf, 10 + IFNAMSIZ, "link0");
+	sdata->vif.link_debugfs[0] = debugfs_create_dir(buf,
+							sdata->vif.debugfs_dir);
+
 }
 
 void ieee80211_debugfs_remove_netdev(struct ieee80211_sub_if_data *sdata)
 {
+	int i = 0;
+
 	if (!sdata->vif.debugfs_dir)
 		return;
 
+	if (!sdata->vif.valid_links &&
+	    sdata->vif.link_debugfs[0]) {
+		debugfs_remove_recursive(sdata->vif.link_debugfs[0]);
+		sdata->vif.link_debugfs[0] = NULL;
+	}
+
 	debugfs_remove_recursive(sdata->vif.debugfs_dir);
 	sdata->vif.debugfs_dir = NULL;
 	sdata->debugfs.subdir_stations = NULL;
+
+	for (i = 0; i < IEEE80211_MLD_MAX_NUM_LINKS; i++)
+		sdata->vif.link_debugfs[i] = NULL;
+
 }
 
 void ieee80211_debugfs_rename_netdev(struct ieee80211_sub_if_data *sdata)
--- a/net/mac80211/debugfs_netdev.h
+++ b/net/mac80211/debugfs_netdev.h
@@ -10,6 +10,10 @@
 void ieee80211_debugfs_add_netdev(struct ieee80211_sub_if_data *sdata);
 void ieee80211_debugfs_remove_netdev(struct ieee80211_sub_if_data *sdata);
 void ieee80211_debugfs_rename_netdev(struct ieee80211_sub_if_data *sdata);
+void ieee80211_debugfs_add_link(struct ieee80211_sub_if_data *sdata,
+				unsigned long add);
+void ieee80211_debugfs_remove_link(struct ieee80211_sub_if_data *sdata,
+				   unsigned long rem);
 #else
 static inline void ieee80211_debugfs_add_netdev(
 	struct ieee80211_sub_if_data *sdata)
@@ -20,6 +24,13 @@ static inline void ieee80211_debugfs_rem
 static inline void ieee80211_debugfs_rename_netdev(
 	struct ieee80211_sub_if_data *sdata)
 {}
+static inline void ieee80211_debugfs_add_link(struct ieee80211_sub_if_data *sdata,
+					      unsigned long add);
+{}
+static inline void ieee80211_debugfs_remove_link(struct ieee80211_sub_if_data *sdata,
+						 unsigned long rem);
+{}
+
 #endif
 
 #endif /* __IEEE80211_DEBUGFS_NETDEV_H */
--- a/net/mac80211/link.c
+++ b/net/mac80211/link.c
@@ -9,6 +9,7 @@
 #include <net/mac80211.h>
 #include "ieee80211_i.h"
 #include "driver-ops.h"
+#include "debugfs_netdev.h"
 
 void ieee80211_link_setup(struct ieee80211_link_data *link)
 {
@@ -233,11 +234,13 @@ static int ieee80211_vif_update_links(st
 
 	ret = ieee80211_check_dup_link_addrs(sdata);
 	if (!ret) {
+		ieee80211_debugfs_remove_link(sdata, rem);
 		/* for keys we will not be able to undo this */
 		ieee80211_tear_down_links(sdata, to_free, rem);
 
 		ieee80211_set_vif_links_bitmaps(sdata, new_links);
 
+		ieee80211_debugfs_add_link(sdata, add);
 		/* tell the driver */
 		ret = drv_change_vif_links(sdata->local, sdata,
 					   old_links & old_active,
