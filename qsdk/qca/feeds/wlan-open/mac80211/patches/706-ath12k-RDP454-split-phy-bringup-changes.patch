From cbddf40ff4043e10b96ac2bd90372271e8c1e606 Mon Sep 17 00:00:00 2001
From: Vishal Kumar <quic_visk@quicinc.com>
Date: Thu, 5 Jan 2023 10:57:00 +0530
Subject: [PATCH] ath12k: RDP454 split phy bringup changes

RDP454 having quad-band channel support with two chip
2.4GHz/2x2 + 5GHz Low band/2x2 and 5GHz High band/2x2 + 6GHz/2x2.

For single wiphy, 5GHz Low band and 5GHz High bands channels combined
into wiphy->sband[NL80211_BAND_5GHZ].

Signed-off-by: Vishal Kumar <quic_visk@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |   2 +
 drivers/net/wireless/ath/ath12k/mac.c  | 173 +++++++++++++++++++------
 drivers/net/wireless/ath/ath12k/reg.c  |  13 ++
 3 files changed, 150 insertions(+), 38 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -610,15 +610,21 @@ struct ath12k_sta {
 	u8 num_peer;
  };
 #define ATH12K_HALF_20MHZ_BW 10
+#define ATH12K_2G_MIN_CENTER 2412
+#define ATH12K_2G_MAX_CENTER 2484
 #define ATH12K_5G_MIN_CENTER 4900
 #define ATH12K_5G_MAX_CENTER 5920
 #define ATH12K_6G_MIN_CENTER 5935
 #define ATH12K_6G_MAX_CENTER 7115
+#define ATH12K_MIN_2G_FREQ (ATH12K_2G_MIN_CENTER - ATH12K_HALF_20MHZ_BW - 1)
+#define ATH12K_MAX_2G_FREQ (ATH12K_2G_MAX_CENTER + ATH12K_HALF_20MHZ_BW + 1)
 #define ATH12K_MIN_5G_FREQ (ATH12K_5G_MIN_CENTER - ATH12K_HALF_20MHZ_BW)
 #define ATH12K_MAX_5G_FREQ (ATH12K_5G_MAX_CENTER + ATH12K_HALF_20MHZ_BW)
 #define ATH12K_MIN_6G_FREQ (ATH12K_6G_MIN_CENTER - ATH12K_HALF_20MHZ_BW)
 #define ATH12K_MAX_6G_FREQ (ATH12K_6G_MAX_CENTER + ATH12K_HALF_20MHZ_BW)
 
+#define ATH12K_MAX_5G_LOW_BAND_FREQ  5330
+#define ATH12K_MIN_5G_HIGH_BAND_FREQ 5490
 
 #define ATH12K_NUM_CHANS 102
 #define ATH12K_MIN_5G_CHAN 36
@@ -718,6 +724,7 @@ enum ath12k_fw_recovery_option {
 struct ath12k_chan_info {
 	u32 low_freq;
 	u32 high_freq;
+	u32 num_channels;
 };
 
 #define ATH12K_FLUSH_TIMEOUT (5 * HZ)
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -693,16 +693,39 @@ struct ath12k_link_vif *ath12k_mac_get_a
 	return NULL;
 }
 
-static struct ath12k *ath12k_mac_get_ar_by_band(struct ieee80211_hw *hw,
-						enum nl80211_band band)
+static struct ath12k *ath12k_mac_get_ar_by_agile_chandef(struct ieee80211_hw *hw,
+							 enum nl80211_band band)
 {
 	struct ath12k_hw *ah = hw->priv;
 	struct ath12k *ar;
 	int i;
 
+	if (band != NL80211_BAND_5GHZ)
+		return NULL;
+
 	ar = ah->radio;
 	for (i = 0; i < ah->num_radio; i++) {
-		if (ar->mac.sbands[band].channels)
+		if (!ar->agile_chandef.chan)
+			continue;
+		if (ar->agile_chandef.chan->center_freq > ar->chan_info.low_freq &&
+		    ar->agile_chandef.chan->center_freq < ar->chan_info.high_freq)
+			return ar;
+		ar++;
+	}
+	return NULL;
+}
+
+static struct ath12k *ath12k_mac_get_ar_by_chan(struct ieee80211_hw *hw,
+						struct ieee80211_channel *channel)
+{
+	struct ath12k_hw *ah = hw->priv;
+	struct ath12k *ar;
+	int i;
+
+	ar = ah->radio;
+	for (i = 0; i < ah->num_radio; i++) {
+		if (channel->center_freq >= ar->chan_info.low_freq &&
+		    channel->center_freq <= ar->chan_info.high_freq)
 			return ar;
 		ar++;
 	}
@@ -715,9 +738,7 @@ static struct ath12k *ath12k_get_ar_by_c
 	if (!ctx)
 		return NULL;
 
-	/* TODO 5G low high split radio changes */
-
-	return ath12k_mac_get_ar_by_band(hw, ctx->def.chan->band);
+	return ath12k_mac_get_ar_by_chan(hw, ctx->def.chan);
 }
 
 struct ath12k *ath12k_get_ar_by_vif(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
@@ -4615,9 +4636,14 @@ ath12k_mac_select_scan_device(struct iee
 	ar = ah->radio;
 
 	for (i = 0; i < ah->num_radio; i++) {
-		/* TODO 5G low high split changes */
-		if (ar->mac.sbands[band].channels)
+		if (band == NL80211_BAND_5GHZ) {
+			if (req->req.channels[0]->center_freq > ar->chan_info.low_freq &&
+			    req->req.channels[0]->center_freq < ar->chan_info.high_freq)
+				if (ar->mac.sbands[band].channels)
+					return ar;
+		} else if (ar->mac.sbands[band].channels) {
 			return ar;
+		}
 		ar++;
 	}
 
@@ -12811,9 +12837,6 @@ static int ath12k_mac_op_get_survey(stru
 		sband = NULL;
 	}
 
-	/* TODO: If 5G HB/LB are split across two radios then it requires
-	 * idx check as well
-	 */
 	if (!sband) {
 		sband = hw->wiphy->bands[NL80211_BAND_5GHZ];
 		band = NL80211_BAND_5GHZ;
@@ -12834,10 +12857,17 @@ static int ath12k_mac_op_get_survey(stru
 		goto exit;
 	}
 
-	ar = ath12k_mac_get_ar_by_band(hw, band);
+	ar = ath12k_mac_get_ar_by_chan(hw, &sband->channels[idx]);
 	if (!ar) {
-		ret = -ENOENT;
-		goto exit;
+		if (sband->channels[idx].flags & IEEE80211_CHAN_DISABLED) {
+			ret = 0;
+			/* Flushing out the old survey results if any */
+			memset(survey, 0, sizeof(*survey));
+			goto exit;
+		} else {
+			ret = -ENOENT;
+			goto exit;
+		}
 	}
 
 	ar_survey = &ar->survey[idx];
@@ -13099,7 +13129,13 @@ static int ath12k_mac_op_set_radar_backg
 	int ret;
 	struct cfg80211_chan_def conf_def;
 
-	ar = ath12k_mac_get_ar_by_band(hw, NL80211_BAND_5GHZ);
+	if (def)
+		ar = ath12k_mac_get_ar_by_chan(hw, def->chan);
+	else
+		ar = ath12k_mac_get_ar_by_agile_chandef(hw, NL80211_BAND_5GHZ);
+
+	if (!ar)
+		return -EINVAL;
 
 	mutex_lock(&ar->conf_mutex);
 
@@ -13246,6 +13282,67 @@ static void ath12k_mac_update_ch_list(st
 	}
 }
 
+/* During MLO split mac scenario, both the supporting channel list of same band
+ * should be updated in same wiphy->band[] place. We update the later incoming
+ * pdev supported channel list (new_band) into wiphy->band[] (orig_band)
+ */
+static int ath12k_mac_update_band(struct ath12k *ar,
+				   struct ieee80211_supported_band *orig_band,
+				   struct ieee80211_supported_band *new_band)
+{
+	struct ath12k_base *ab = ar->ab;
+	struct ieee80211_6ghz_channel *chan_6g_old, *chan_6g_new;
+	int i, j;
+
+	if (!orig_band || !new_band)
+		return -EINVAL;
+
+	if (orig_band->band != new_band->band)
+		return -EINVAL;
+
+	if (WARN_ON(!ab->ag->mlo_capable))
+		return -EOPNOTSUPP;
+
+	if (new_band->band == NL80211_BAND_6GHZ) {
+		for (i = 0; i < NL80211_REG_NUM_POWER_MODES; i++) {
+			chan_6g_new = new_band->chan_6g[i];
+			chan_6g_old = orig_band->chan_6g[i];
+			for (j = 0; j < chan_6g_new->n_channels; j++) {
+				if (chan_6g_new->channels[j].flags &
+				    IEEE80211_CHAN_DISABLED)
+					continue;
+
+				/* An enabled channel in chan_6g_new should not be
+				 * already enabled in the chan_6g_old
+				 */
+				if (WARN_ON(!(chan_6g_old->channels[j].flags &
+					      IEEE80211_CHAN_DISABLED)))
+					return -ENOTRECOVERABLE;
+
+				chan_6g_old->channels[j].flags &=
+							~IEEE80211_CHAN_DISABLED;
+			}
+		}
+		return 0;
+	}
+
+	for (i = 0; i < new_band->n_channels; i++) {
+		if (new_band->channels[i].flags & IEEE80211_CHAN_DISABLED)
+			continue;
+
+		/* An enabled channel in new_band should not be already enabled
+		 * in the orig_band
+		 */
+		if (WARN_ON(!(orig_band->channels[i].flags &
+			      IEEE80211_CHAN_DISABLED)))
+			return -ENOTRECOVERABLE;
+
+		orig_band->channels[i].flags &= ~IEEE80211_CHAN_DISABLED;
+	}
+
+	return 0;
+}
+
 #define ATH12K_5_9_MIN_FREQ 5845
 #define ATH12K_5_9_MAX_FREQ 5885
 
@@ -13294,7 +13391,7 @@ static int ath12k_mac_setup_channels_rat
 	void *channels;
 	u32 phy_id, freq_low, freq_high;
 	struct ieee80211_6ghz_channel *chan_6g;
-	int i = 0;
+	int i = 0, ret;
 
 
 	BUILD_BUG_ON((ARRAY_SIZE(ath12k_2ghz_channels) +
@@ -13318,7 +13415,6 @@ static int ath12k_mac_setup_channels_rat
 		band->channels = channels;
 		band->n_bitrates = ath12k_g_rates_size;
 		band->bitrates = ath12k_g_rates;
-		ah->hw->wiphy->bands[NL80211_BAND_2GHZ] = band;
 
 		if (ab->hw_params->single_pdev_only) {
 			phy_id = ath12k_get_phy_id(ar, WMI_HOST_WLAN_2G_CAP);
@@ -13332,9 +13428,26 @@ static int ath12k_mac_setup_channels_rat
 
 		ath12k_mac_update_ch_list(ar, band, freq_low, freq_high);
 
-		ah->supported_band_mask |= BIT(NL80211_BAND_2GHZ);
 		ar->chan_info.low_freq = freq_low;
 		ar->chan_info.high_freq = freq_high;
+		ar->chan_info.num_channels = ath12k_reg_get_num_chans_in_band(ar, band,
+									   freq_low,
+									   freq_high);
+
+		if (!ah->hw->wiphy->bands[NL80211_BAND_2GHZ]) {
+			ah->hw->wiphy->bands[NL80211_BAND_2GHZ] = band;
+			ah->supported_band_mask |= BIT(NL80211_BAND_2GHZ);
+		} else {
+			/* Split mac in same band under same wiphy during MLO */
+			ret = ath12k_mac_update_band(ar,
+						     ah->hw->wiphy->bands[NL80211_BAND_2GHZ],
+						     band);
+			if (ret)
+				return ret;
+
+			ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "mac pdev %u identified as 2 GHz split mac during MLO\n",
+				   ar->pdev->pdev_id);
+		}
 	}
 
 	if (supported_bands & WMI_HOST_WLAN_5G_CAP) {
@@ -13361,7 +13474,6 @@ static int ath12k_mac_setup_channels_rat
                         band->channels = channels;
                         band->n_bitrates = ath12k_a_rates_size;
                         band->bitrates = ath12k_a_rates;
-                        ah->hw->wiphy->bands[NL80211_BAND_5GHZ] = band;
 
                         if (ar->ab->hw_params->single_pdev_only) {
                                 phy_id = ath12k_get_phy_id(ar, WMI_HOST_WLAN_5G_CAP);
@@ -13377,9 +13489,27 @@ static int ath12k_mac_setup_channels_rat
 
 			ath12k_mac_update_5_9_ch_list(ar, band);
 
-			ah->supported_band_mask |= BIT(NL80211_BAND_5GHZ);
 			ar->chan_info.low_freq = freq_low;
 			ar->chan_info.high_freq = freq_high;
+			ar->chan_info.num_channels =
+					ath12k_reg_get_num_chans_in_band(ar, band,
+								      freq_low,
+								      freq_high);
+
+			if (!ah->hw->wiphy->bands[NL80211_BAND_5GHZ]) {
+				ah->hw->wiphy->bands[NL80211_BAND_5GHZ] = band;
+				ah->supported_band_mask |= BIT(NL80211_BAND_5GHZ);
+			} else {
+				/* Split mac in same band under same wiphy during MLO */
+				ret = ath12k_mac_update_band(ar,
+						       	     ah->hw->wiphy->bands[NL80211_BAND_5GHZ],
+						             band);
+				if (ret)
+					return ret;
+
+				ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "mac pdev %u identified as 5 GHz split mac during MLO\n",
+					   ar->pdev->pdev_id);
+			}
 		} else if (reg_cap->low_5ghz_chan >= ATH12K_MIN_6G_FREQ &&
                            reg_cap->high_5ghz_chan <= ATH12K_MAX_6G_FREQ) {
                         band = &ar->mac.sbands[NL80211_BAND_6GHZ];
@@ -13413,7 +13543,6 @@ static int ath12k_mac_setup_channels_rat
                         ar->supports_6ghz = true;
                         band->n_bitrates = ath12k_a_rates_size;
                         band->bitrates = ath12k_a_rates;
-                        ah->hw->wiphy->bands[NL80211_BAND_6GHZ] = band;
 
 			freq_low = max(temp_reg_cap->low_5ghz_chan,
 				       ab->reg_freq_6g.start_freq);
@@ -13431,15 +13560,33 @@ static int ath12k_mac_setup_channels_rat
                        band->n_channels = band->chan_6g[0]->n_channels;
                        band->channels = band->chan_6g[0]->channels;
 
-			ah->supported_band_mask |= BIT(NL80211_BAND_6GHZ);
 			ar->chan_info.low_freq = freq_low;
 			ar->chan_info.high_freq = freq_high;
+			ar->chan_info.num_channels =
+					ath12k_reg_get_num_chans_in_band(ar, band,
+								      freq_low,
+								      freq_high);
+
+			if (!ah->hw->wiphy->bands[NL80211_BAND_6GHZ]) {
+				ah->hw->wiphy->bands[NL80211_BAND_6GHZ] = band;
+				ah->supported_band_mask |= BIT(NL80211_BAND_6GHZ);
+			} else {
+				/* Split mac in same band under same wiphy during MLO */
+				ret = ath12k_mac_update_band(ar,
+							     ah->hw->wiphy->bands[NL80211_BAND_6GHZ],
+							     band);
+				if (ret)
+					return ret;
+
+				ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "mac pdev %u identified as 6 GHz split mac during MLO\n",
+					   ar->pdev->pdev_id);
+			}
 		}
 	}
 
-	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "mac pdev %u freq limits %u->%u MHz\n",
+	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "mac pdev %u freq limits %u->%u MHz no. of channels %u\n",
 		   ar->pdev->pdev_id, ar->chan_info.low_freq,
-		   ar->chan_info.high_freq);
+		   ar->chan_info.high_freq, ar->chan_info.num_channels);
 	return 0;
 }
 
@@ -13709,23 +13856,54 @@ ath12k_setup_per_hw_chan(struct ath12k *
 	struct ieee80211_chans_per_hw *chans;
 	struct ieee80211_supported_band *band;
 	struct ath12k_pdev *pdev = ar->pdev;
-	int chan_sz;
+	int chan_sz, i, idx = 0;
+	u32 n_channels, freq_low, freq_high;
 
+	/* TODO: Handle advertisement for split macs other than 5 GHz
+	 * NOTE: For advertising the supported channels, we dont need to check
+	 *       for current supported frequencies as per hw/regulatory. We just
+	 *       need to advertise all possible channels as per the band and max
+	 *       what can be supported
+	 */
 	if (pdev->cap.supported_bands & WMI_HOST_WLAN_2G_CAP) {
 		band = &ar->mac.sbands[NL80211_BAND_2GHZ];
+		freq_low = ATH12K_MIN_2G_FREQ;
+		freq_high = ATH12K_MAX_2G_FREQ;
 	} else if (pdev->cap.supported_bands & WMI_HOST_WLAN_5G_CAP && !ar->supports_6ghz) {
-		 band = &ar->mac.sbands[NL80211_BAND_5GHZ];
+		band = &ar->mac.sbands[NL80211_BAND_5GHZ];
+		if (ar->chan_info.high_freq <= ATH12K_MIN_5G_HIGH_BAND_FREQ) {
+			/* 5 GHz low */
+			freq_low = ATH12K_MIN_5G_FREQ;
+			freq_high = ATH12K_MAX_5G_LOW_BAND_FREQ;
+		} else if (ar->chan_info.low_freq >= ATH12K_MAX_5G_LOW_BAND_FREQ) {
+			/* 5 GHz High */
+			freq_low = ATH12K_MIN_5G_HIGH_BAND_FREQ;
+			freq_high = ATH12K_MAX_5G_FREQ;
+		} else {
+			/* 5 GHz Full*/
+			freq_low = ATH12K_MIN_5G_FREQ;
+			freq_high = ATH12K_MAX_5G_FREQ;
+		}
 	} else if (pdev->cap.supported_bands & WMI_HOST_WLAN_5G_CAP && ar->supports_6ghz) {
 		band = &ar->mac.sbands[NL80211_BAND_6GHZ];
+		freq_low = ATH12K_MIN_6G_FREQ;
+		freq_high = ATH12K_MAX_6G_FREQ;
 	}
 
-	chan_sz = struct_size(chans, chans, band->n_channels);
+	n_channels = ath12k_reg_get_num_chans_in_band(ar, band, freq_low, freq_high);
+	chan_sz = struct_size(chans, chans, n_channels);
 	chans = kzalloc(chan_sz, GFP_KERNEL);
 	if (!chans)
 		return NULL;
-	memcpy(chans->chans, band->channels, sizeof(struct ieee80211_channel) * band->n_channels);
 
-	chans->n_chans = band->n_channels;
+	chans->n_chans = n_channels;
+
+	for (i = 0; i < band->n_channels; i++) {
+		if (band->channels[i].center_freq >= freq_low &&
+		    band->channels[i].center_freq <= freq_high)
+			memcpy(&chans->chans[idx++], &band->channels[i],
+			       sizeof(struct ieee80211_channel));
+	}
 	return chans;
 
 
--- a/drivers/net/wireless/ath/ath12k/reg.c
+++ b/drivers/net/wireless/ath/ath12k/reg.c
@@ -181,6 +181,12 @@ int ath12k_reg_update_chan_list(struct a
 			    IEEE80211_CHAN_DISABLED)
 				continue;
 
+			if (band == NL80211_BAND_5GHZ)
+				if (bands[band]->channels[i].center_freq <
+				    ar->chan_info.low_freq ||
+				    bands[band]->channels[i].center_freq >
+				    ar->chan_info.high_freq)
+					continue;
 			num_channels++;
 		}
 	}
@@ -210,6 +216,13 @@ int ath12k_reg_update_chan_list(struct a
 			if (channel->flags & IEEE80211_CHAN_DISABLED)
 				continue;
 
+			if (band == NL80211_BAND_5GHZ)
+				if (bands[band]->channels[i].center_freq <
+				    ar->chan_info.low_freq ||
+				    bands[band]->channels[i].center_freq >
+				    ar->chan_info.high_freq)
+					continue;
+
 			/* TODO: Set to true/false based on some condition? */
 			ch->allow_ht = true;
 			ch->allow_vht = true;
@@ -269,6 +282,24 @@ static void ath12k_copy_regd(struct ieee
 		       sizeof(struct ieee80211_reg_rule));
 }
 
+int ath12k_reg_get_num_chans_in_band(struct ath12k *ar,
+				     struct ieee80211_supported_band *band,
+			             u32 freq_low, u32 freq_high)
+{
+	int i, count = 0;
+
+	if (!(freq_low && freq_high) || !band)
+		return 0;
+
+	for (i = 0; i < band->n_channels; i++) {
+		if (band->channels[i].center_freq >= freq_low &&
+		    band->channels[i].center_freq <= freq_high)
+			count++;
+	}
+
+	return count;
+}
+
 int ath12k_regd_update(struct ath12k *ar, bool init)
 {
 	struct ieee80211_regdomain *regd, *regd_copy = NULL;
@@ -315,10 +346,14 @@ int ath12k_regd_update(struct ath12k *ar
 
 	ar->chan_info.low_freq = freq_low;
 	ar->chan_info.high_freq = freq_high;
+	ar->chan_info.num_channels = ath12k_reg_get_num_chans_in_band(ar,
+								      &ar->mac.sbands[band],
+								      freq_low,
+								      freq_high);
 
-	ath12k_dbg(ab, ATH12K_DBG_REG, "pdev %u reg updated freq limits %u->%u MHz\n",
+	ath12k_dbg(ab, ATH12K_DBG_REG, "pdev %u reg updated freq limits %u->%u MHz no of channel %u\n",
 		   ar->pdev->pdev_id, ar->chan_info.low_freq,
-		   ar->chan_info.high_freq);
+		   ar->chan_info.high_freq, ar->chan_info.num_channels);
 
 	if (ah->regd_updated) {
 		mutex_unlock(&ah->conf_mutex);
--- a/drivers/net/wireless/ath/ath12k/reg.h
+++ b/drivers/net/wireless/ath/ath12k/reg.h
@@ -38,4 +38,7 @@ enum wmi_reg_6g_ap_type
 ath12k_ieee80211_ap_pwr_type_convert(enum ieee80211_ap_reg_power power_type);
 int ath12k_regd_update(struct ath12k *ar, bool init);
 int ath12k_reg_update_chan_list(struct ath12k *ar);
+int ath12k_reg_get_num_chans_in_band(struct ath12k *ar,
+				     struct ieee80211_supported_band *band,
+			             u32 freq_low, u32 freq_high);
 #endif
