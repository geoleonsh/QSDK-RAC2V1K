From fc17dd03d183b6adf177103c8add19f14c3a0cff Mon Sep 17 00:00:00 2001
From: saleemuddin shaik <quic_saleemud@quicinc.com>
Date: Sat, 4 Mar 2023 13:56:17 +0530
Subject: ath12k: add statistic support for counting wmm sent packets

Segregated wmm types for rx path and tx path introduced to
handle bidirectional traffic flow. This will avoid misplaced
piling of the wmm buckets.

Signed-off-by: saleemuddin shaik <quic_saleemud@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h    |  8 ++++
 drivers/net/wireless/ath/ath12k/debugfs.c | 52 +++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/dp_rx.c   |  2 +
 drivers/net/wireless/ath/ath12k/mac.c     |  2 +
 4 files changed, 64 insertions(+)

diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index 179f3c3..becfc2a 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -728,6 +728,13 @@ struct ath12k_chan_info {
 	u32 num_channels;
 };
 
+struct ath12k_wmm_stats {
+	int tx_type;
+	u64 total_wmm_tx_pkts[WME_NUM_AC];
+};
+
+#define ATH12K_DSCP_PRIORITY 7
+
 #define ATH12K_FLUSH_TIMEOUT (5 * HZ)
 #define ATH12K_VDEV_DELETE_TIMEOUT_HZ (5 * HZ)
 
@@ -813,6 +820,7 @@ struct ath12k {
 	int last_wmi_vdev_start_status;
 	struct completion vdev_setup_done;
 	struct completion vdev_delete_done;
+	struct ath12k_wmm_stats wmm_stats;
 
 	int num_peers;
 	int max_num_peers;
diff --git a/drivers/net/wireless/ath/ath12k/debugfs.c b/drivers/net/wireless/ath/ath12k/debugfs.c
index 877baee..3918aac 100644
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -1344,6 +1344,53 @@ static const struct file_operations fops_write_nrp_mac = {
 	.open = simple_open,
 };
 
+static ssize_t ath12k_read_wmm_stats(struct file *file,
+				     char __user *ubuf,
+				     size_t count, loff_t *ppos)
+{
+	struct ath12k *ar = file->private_data;
+	int len = 0;
+	int size = 2048;
+	char *buf;
+	ssize_t retval;
+	u64 total_wmm_sent_pkts = 0;
+
+	buf = kzalloc(size, GFP_KERNEL);
+	if (!buf) {
+		ath12k_warn("failed to allocate the buffer%s\n", __func__);
+		return -ENOMEM;
+	}
+
+	mutex_lock(&ar->conf_mutex);
+	for (count = 0; count < WME_NUM_AC; count++)
+		total_wmm_sent_pkts += ar->wmm_stats.total_wmm_tx_pkts[count];
+
+	len += scnprintf(buf + len, size - len, "Total number of wmm_sent: %llu\n",
+			 total_wmm_sent_pkts);
+	len += scnprintf(buf + len, size - len, "Num of BE wmm_sent: %llu\n",
+			 ar->wmm_stats.total_wmm_tx_pkts[WME_AC_BE]);
+	len += scnprintf(buf + len, size - len, "Num of BK wmm_sent: %llu\n",
+			 ar->wmm_stats.total_wmm_tx_pkts[WME_AC_BK]);
+	len += scnprintf(buf + len, size - len, "Num of VI wmm_sent: %llu\n",
+			 ar->wmm_stats.total_wmm_tx_pkts[WME_AC_VI]);
+	len += scnprintf(buf + len, size - len, "Num of VO wmm_sent: %llu\n",
+			 ar->wmm_stats.total_wmm_tx_pkts[WME_AC_VO]);
+
+	mutex_unlock(&ar->conf_mutex);
+
+	if (len > size)
+		len = size;
+	retval = simple_read_from_buffer(ubuf, count, ppos, buf, len);
+	kfree(buf);
+
+	return retval;
+}
+
+static const struct file_operations fops_wmm_stats = {
+	.read = ath12k_read_wmm_stats,
+	.open = simple_open,
+};
+
 static int ath12k_fill_bp_stats(struct ath12k_base *ab,
 				struct ath12k_bp_stats *bp_stats,
 				char *buf, int len, int size)
@@ -3236,6 +3283,11 @@ int ath12k_debugfs_register(struct ath12k *ar)
 
 	init_completion(&ar->tpc_complete);
 
+	memset(&ar->wmm_stats, 0, sizeof(struct ath12k_wmm_stats));
+
+	debugfs_create_file("wmm_stats", 0644,
+			    ar->debug.debugfs_pdev, ar,
+			    &fops_wmm_stats);
 	debugfs_create_file("neighbor_peer", 0644,
 			    ar->debug.debugfs_pdev, ar,
 			    &fops_write_nrp_mac);
diff --git a/drivers/net/wireless/ath/ath12k/dp_rx.c b/drivers/net/wireless/ath/ath12k/dp_rx.c
index 4df469b..a3d1ed8 100644
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -1511,6 +1511,8 @@ ath12k_update_per_peer_tx_stats(struct ath12k *ar,
 					 HTT_PPDU_STATS_ACK_BA_INFO_NUM_MSDU_M);
 		tid = u32_get_bits(usr_stats->ack_ba.info,
 				   HTT_PPDU_STATS_ACK_BA_INFO_TID_NUM);
+		ar->wmm_stats.tx_type = ath12k_tid_to_ac(tid > ATH12K_DSCP_PRIORITY ? 0: tid);
+		ar->wmm_stats.total_wmm_tx_pkts[ar->wmm_stats.tx_type]++;
 	}
 
 	if (common->fes_duration_us)
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 5728982..a46199a 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -10217,6 +10217,8 @@ static int ath12k_mac_vdev_stop(struct ath12k_link_vif *arvif)
 
 	reinit_completion(&ar->vdev_setup_done);
 
+	memset(&ar->wmm_stats, 0, sizeof(struct ath12k_wmm_stats));
+
 	ret = ath12k_wmi_vdev_stop(ar, arvif->vdev_id);
 	if (ret) {
 		ath12k_warn(ar->ab, "failed to stop WMI vdev %i: %d\n",
-- 
2.17.1

