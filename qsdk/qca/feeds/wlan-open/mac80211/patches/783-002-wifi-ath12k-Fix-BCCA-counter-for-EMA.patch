From 2717fe6fd7f54cb2d21074c5e88b12f962762ed2 Mon Sep 17 00:00:00 2001
From: Rameshkumar Sundaram <quic_ramess@quicinc.com>
Date: Thu, 15 Jun 2023 12:30:15 +0530
Subject: [PATCH] wifi: ath12k: Fix BCCA counter for EMA

Currently BCCA counter is updated to FW via csa counter offs and
beacon with new countdown is updated for every beacon tx completion event.
For EMA, all EMA beacons are updated in one shot, and counter update for
every tx event will mess up the actual sequence of countdown sent over the air.

Allow FW to update the countdown till 1 and finalize the color
change.

Signed-off-by: Rameshkumar Sundaram <quic_ramess@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 31 ---------------------------
 drivers/net/wireless/ath/ath12k/mac.h |  1 -
 drivers/net/wireless/ath/ath12k/wmi.c | 14 +++++++-----
 3 files changed, 9 insertions(+), 37 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index f8953e3..2d4b3f1 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -1735,37 +1735,6 @@ static int ath12k_mac_setup_bcn_tmpl(struct ath12k_link_vif *arvif)
 		return ath12k_mac_setup_bcn_tmpl_non_ema(arvif);
 }
 
-
-void ath12k_mac_bcn_tx_event(struct ath12k_link_vif *arvif)
-{
-	struct ieee80211_vif *vif = arvif->ahvif->vif;
-	struct ath12k *ar = arvif->ar;
-	struct ieee80211_bss_conf* link_conf;
-
-	link_conf = ath12k_get_link_bss_conf(arvif);
-
-	if (!link_conf) {
-		ath12k_warn(ar->ab, "unable to access bss link conf in bcn tx event\n");
-		return;
-	}
-
-	if (!link_conf->color_change_active && !arvif->bcca_zero_sent)
-		return;
-
-	if (link_conf->color_change_active &&
-	    ieee80211_beacon_cntdwn_is_complete(vif, arvif->link_id)) {
-		arvif->bcca_zero_sent = true;
-		ieee80211_color_change_finish(vif, arvif->link_id);
-		return;
-	}
-
-	arvif->bcca_zero_sent = false;
-
-	if (link_conf->color_change_active && !link_conf->ema_ap)
-		ieee80211_beacon_update_cntdwn(vif, arvif->link_id);
-	ieee80211_queue_work(ar->ah->hw, &arvif->update_bcn_template_work);
-}
-
 static void ath12k_control_beaconing(struct ath12k_link_vif *arvif,
 				     struct ieee80211_bss_conf *info)
 {
diff --git a/drivers/net/wireless/ath/ath12k/mac.h b/drivers/net/wireless/ath/ath12k/mac.h
index f96d82f..aa11846 100644
--- a/drivers/net/wireless/ath/ath12k/mac.h
+++ b/drivers/net/wireless/ath/ath12k/mac.h
@@ -227,7 +227,6 @@ enum hal_encrypt_type ath12k_dp_tx_get_encrypt_type(u32 cipher);
 void ath12k_mac_get_any_chandef_iter(struct ieee80211_hw *hw,
                                      struct ieee80211_chanctx_conf *conf,
                                      void *data);
-void ath12k_mac_bcn_tx_event(struct ath12k_link_vif *arvif);
 struct ath12k *ath12k_get_ar_by_vif(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 				    u8 link_id);
 int ath12k_mac_mlo_setup(struct ath12k_hw *ah);
diff --git a/drivers/net/wireless/ath/ath12k/wmi.c b/drivers/net/wireless/ath/ath12k/wmi.c
index a4457d5..f6de095 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -8483,7 +8483,6 @@ static void ath12k_bcn_tx_status_event(struct ath12k_base *ab, struct sk_buff *s
 		rcu_read_unlock();
 		return;
 	}
-	ath12k_mac_bcn_tx_event(arvif);
 	rcu_read_unlock();
 }
 
@@ -11639,12 +11638,17 @@ ath12k_wmi_process_csa_switch_count_event(struct ath12k_base *ab,
 			continue;
 
 		/* FIXME some changes are expected for ML vifs */
-		if (arvif->is_up && link_conf->csa_active) {
-			if (!ev->current_switch_count)
-				ieee80211_csa_finish(arvif->ahvif->vif, arvif->link_id);
-			else if (ev->current_switch_count > 1)
+		if (arvif->is_up && (link_conf->csa_active || link_conf->color_change_active)) {
+			if (!ev->current_switch_count) {
+				if (link_conf->csa_active)
+					ieee80211_csa_finish(arvif->ahvif->vif, arvif->link_id);
+			} else if (ev->current_switch_count > 1) {
 				ieee80211_beacon_update_cntdwn(arvif->ahvif->vif,
 							       arvif->link_id);
+			} else {
+				if (link_conf->color_change_active)
+					ieee80211_color_change_finish(arvif->ahvif->vif, arvif->link_id);
+			}
 		}
 	}
 	rcu_read_unlock();
-- 
2.17.1

