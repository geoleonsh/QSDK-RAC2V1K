From 7b489432cd73a11495fcb12be21f943133302ec9 Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Thu, 19 May 2022 01:26:36 +0530
Subject: [PATCH] ath12k: Enable vdev statistics offload

Firmware expects vdev offload statistics command settings before vdev
start. To enable/disable the feature, new debugfs is introduced under
fw_stats called en_vdev_stats_ol.

Same configuration:
1. echo 1 > /sys/kernel/debug/ath12k/qcn92xx\ hw1.0_0004\:01\:00.0/mac0/en_vdev_stats_ol
2. Enable any vdev.
3. cat /sys/kernel/debug/ath12k/qcn92xx\ hw1.0_0004\:01\:00.0/mac0/fw_stats/vdev_stats
	ath12k VDEV stats
	=================
	rx msdu byte cnt 4740
	rx msdu pkt cnt 40
	ack msdu byte cnt 2082
	ack msdu pkt cnt 34
	retry byte cnt 0
	retry pkt cnt 0
	drop byte cnt 0
	drop pkt cnt 0
	age out drop byte cnt 0
	age out drop pkt cnt 60

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h             |  1 +
 drivers/net/wireless/ath/ath12k/debugfs.c          | 57 +++++++++++++++++++---
 .../net/wireless/ath/ath12k/debugfs_htt_stats.h    |  2 +
 drivers/net/wireless/ath/ath12k/dp.h               | 11 ++---
 drivers/net/wireless/ath/ath12k/dp_rx.c            | 28 ++++++-----
 drivers/net/wireless/ath/ath12k/dp_tx.c            |  8 ++-
 drivers/net/wireless/ath/ath12k/mac.c              |  8 +++
 7 files changed, 88 insertions(+), 27 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -523,6 +523,7 @@ struct ath12k_fw_stats {
 	struct list_head pdevs;
 	struct list_head vdevs;
 	struct list_head bcn;
+	bool en_vdev_stats_ol;
 };
 
 struct ath12k_dbg_htt_stats {
--- a/drivers/net/wireless/ath/ath12k/dp.h
+++ b/drivers/net/wireless/ath/ath12k/dp.h
@@ -1259,8 +1259,7 @@ struct htt_resp_msg {
 	(((u64)__le32_to_cpu(msg_u32) << 32) | (__le32_to_cpu(msg_l32)))
 #define HTT_T2H_VDEV_STATS_PERIODIC_MSG_TYPE		GENMASK(7, 0)
 #define HTT_T2H_VDEV_STATS_PERIODIC_PDEV_ID		GENMASK(15, 8)
-#define HTT_T2H_VDEV_STATS_PERIODIC_NUM_VDEV		GENMASK(23, 16)
-#define HTT_T2H_VDEV_STATS_PERIODIC_PAYLOAD_BYTES	GENMASK(15, 0)
+#define HTT_T2H_VDEV_STATS_PERIODIC_PAYLOAD_BYTES	GENMASK(23, 16)
 #define HTT_VDEV_TXRX_STATS_COMMON_TLV		0
 #define HTT_VDEV_TXRX_STATS_HW_STATS_TLV	1
 
@@ -1880,17 +1879,13 @@ struct htt_ext_stats_cfg_params {
 	u32 cfg3;
 };
 
-enum vdev_stats_offload_timer_duration {
-	ATH12K_STATS_TIMER_DUR_500MS = 1,
-	ATH12K_STATS_TIMER_DUR_1SEC = 2,
-	ATH12K_STATS_TIMER_DUR_2SEC = 3,
-};
+#define ATH12K_STATS_TIMER_DUR_1SEC		1000
 
 #define HTT_H2T_VDEV_TXRX_HDR_MSG_TYPE		GENMASK(7, 0)
 #define HTT_H2T_VDEV_TXRX_HDR_PDEV_ID		GENMASK(15, 8)
 #define HTT_H2T_VDEV_TXRX_HDR_ENABLE		BIT(16)
 #define HTT_H2T_VDEV_TXRX_HDR_INTERVAL		GENMASK(24, 17)
-#define HTT_H2T_VDEV_TXRX_HDR_RESET_STATS	BIT(31)
+#define HTT_H2T_VDEV_TXRX_HDR_RESET_STATS	GENMASK(26, 25)
 #define HTT_H2T_VDEV_TXRX_LO_BITMASK		GENMASK(31, 0)
 #define HTT_H2T_VDEV_TXRX_HI_BITMASK		GENMASK_ULL(63, 32)
 
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -1744,28 +1744,29 @@ static void ath12k_htt_vdev_txrx_stats_h
 	struct htt_t2h_vdev_txrx_stats_ind *vdev_tlv;
 	struct htt_t2h_vdev_common_stats_tlv *soc_tlv;
 	struct ath12k_vif *arvif;
+	const struct htt_tlv *tlv;
 	u32 *data = (u32 *)skb->data;
-	u32 num_vdevs, vdev_id;
+	u32 vdev_id;
 	u16 payload_bytes, tlv_tag, tlv_len;
 
-	num_vdevs = u32_get_bits(*data, HTT_T2H_VDEV_STATS_PERIODIC_NUM_VDEV);
-	data++;
-
 	payload_bytes = u32_get_bits(*data, HTT_T2H_VDEV_STATS_PERIODIC_PAYLOAD_BYTES);
-	data += 3;
+	data += 4;
 
 	if (payload_bytes > skb->len)
 		return;
 
-	while (payload_bytes > 0 && num_vdevs > 0) {
-		tlv_tag = u32_get_bits(*data, HAL_TLV_HDR_TAG);
-		tlv_len = u32_get_bits(*data, HAL_TLV_HDR_LEN);
+	while (payload_bytes > 0) {
+		tlv = (struct htt_tlv *)data;
+		tlv_tag = u32_get_bits(*data, HTT_TLV_TAG);
+		tlv_len = u32_get_bits(*data, HTT_TLV_LEN);
 		data++;
 
-		if (tlv_tag == HTT_VDEV_TXRX_STATS_HW_STATS_TLV) {
+		if (tlv_tag == HTT_STATS_VDEV_TXRX_STATS_HW_STATS_TAG) {
 			vdev_tlv = (struct htt_t2h_vdev_txrx_stats_ind *)data;
 			vdev_id = __le32_to_cpu(vdev_tlv->vdev_id);
 			arvif = ath12k_mac_get_arvif_by_vdev_id(ab, vdev_id);
+			if (!arvif)
+				goto next;
 
 			arvif->vdev_stats.rx_msdu_byte_cnt =
 				HTT_VDEV_GET_STATS_U64(vdev_tlv->rx_msdu_byte_cnt_lo,
@@ -1794,15 +1795,18 @@ static void ath12k_htt_vdev_txrx_stats_h
 			arvif->vdev_stats.tx_msdu_ttl_pkt_cnt =
 				HTT_VDEV_GET_STATS_U64(vdev_tlv->msdu_ttl_cnt_lo,
 						       vdev_tlv->msdu_ttl_cnt_hi);
-		}
-
-		if (tlv_tag == HTT_VDEV_TXRX_STATS_COMMON_TLV) {
+		} else if (tlv_tag == HTT_STATS_SOC_TXRX_STATS_COMMON_TAG) {
 			soc_tlv = (struct htt_t2h_vdev_common_stats_tlv *)data;
 			ab->fw_soc_drop_count =
 				HTT_VDEV_GET_STATS_U64(soc_tlv->soc_drop_count_lo,
 						       soc_tlv->soc_drop_count_hi);
+		} else {
+			break;
 		}
+
+next:
 		data += tlv_len >> 2;
+		tlv_len += 4;
 		payload_bytes -= tlv_len;
 	}
 }
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -6611,6 +6611,17 @@ static int ath12k_mac_op_add_interface(s
 		goto err;
 	}
 
+	/* Send vdev stats offload commands to firmware before first vdev
+	 * creation. ie., when num_created_vdevs = 0
+	 */
+	if (ar->debug.fw_stats.en_vdev_stats_ol && !ar->num_created_vdevs) {
+		ret = ath12k_dp_tx_htt_h2t_vdev_stats_ol_req(ar, 0);
+		if (ret) {
+			ath12k_warn(ar->ab, "failed to request vdev stats offload: %d\n", ret);
+			goto err;
+		}
+	}
+
 	memset(arvif, 0, sizeof(*arvif));
 
 	arvif->ar = ar;
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -329,12 +329,6 @@ static int ath12k_open_vdev_stats(struct
 	req_param.vdev_id = 0;
 	req_param.stats_id = WMI_REQUEST_VDEV_STAT;
 
-	ret = ath12k_dp_tx_htt_h2t_vdev_stats_ol_req(ar, 0);
-	if (ret) {
-		ath12k_warn(ar->ab, "failed to request vdev stats offload: %d\n", ret);
-		goto err_free;
-	}
-
 	ret = ath12k_debugfs_fw_stats_request(ar, &req_param);
 	if (ret) {
 		ath12k_warn(ar->ab, "failed to request fw vdev stats: %d\n", ret);
@@ -467,6 +461,55 @@ static const struct file_operations fops
 	.llseek = default_llseek,
 };
 
+static ssize_t ath12k_write_enable_vdev_stats_offload(struct file *file,
+						      const char __user *ubuf,
+						      size_t count, loff_t *ppos)
+{
+	struct ath12k *ar = file->private_data;
+	bool enable;
+	int ret;
+
+	if (kstrtobool_from_user(ubuf, count, &enable))
+		return -EINVAL;
+
+	mutex_lock(&ar->conf_mutex);
+
+	if (enable == ar->debug.fw_stats.en_vdev_stats_ol) {
+		ret = count;
+		goto out;
+	}
+
+	ar->debug.fw_stats.en_vdev_stats_ol = enable;
+	ret = count;
+
+out:
+	mutex_unlock(&ar->conf_mutex);
+	return ret;
+}
+
+static ssize_t ath12k_read_enable_vdev_stats_offload(struct file *file,
+						     char __user *ubuf,
+						     size_t count, loff_t *ppos)
+
+{
+	char buf[32] = {0};
+	struct ath12k *ar = file->private_data;
+	int len = 0;
+
+	mutex_lock(&ar->conf_mutex);
+	len = scnprintf(buf, sizeof(buf) - len, "%u\n",
+			ar->debug.fw_stats.en_vdev_stats_ol);
+	mutex_unlock(&ar->conf_mutex);
+
+	return simple_read_from_buffer(ubuf, count, ppos, buf, len);
+}
+
+static const struct file_operations fops_vdev_stats_offload = {
+	.read = ath12k_read_enable_vdev_stats_offload,
+	.write = ath12k_write_enable_vdev_stats_offload,
+	.open = simple_open
+};
+
 static ssize_t ath12k_read_simulate_fw_crash(struct file *file,
 					     char __user *user_buf,
 					     size_t count, loff_t *ppos)
@@ -943,6 +1035,8 @@ void ath12k_debugfs_fw_stats_init(struct
 			    &fops_vdev_stats);
 	debugfs_create_file("beacon_stats", 0600, fwstats_dir, ar,
 			    &fops_bcn_stats);
+	debugfs_create_file("en_vdev_stats_ol", 0600, fwstats_dir, ar,
+			    &fops_vdev_stats_offload);
 
 	INIT_LIST_HEAD(&ar->debug.fw_stats.pdevs);
 	INIT_LIST_HEAD(&ar->debug.fw_stats.vdevs);
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -1146,13 +1146,19 @@ ath12k_dp_tx_htt_h2t_vdev_stats_ol_req(s
 		return -ENOMEM;
 
 	skb_put(skb, len);
+	cmd = (struct htt_h2t_msg_type_vdev_txrx_stats_req *)skb->data;
+	memset(cmd, 0, sizeof(*cmd));
 	cmd->hdr = FIELD_PREP(HTT_H2T_VDEV_TXRX_HDR_MSG_TYPE,
 			      HTT_H2T_MSG_TYPE_VDEV_TXRX_STATS_CFG);
 	cmd->hdr |= FIELD_PREP(HTT_H2T_VDEV_TXRX_HDR_PDEV_ID,
 			       ar->pdev->pdev_id);
 	cmd->hdr |= FIELD_PREP(HTT_H2T_VDEV_TXRX_HDR_ENABLE, true);
+
+	/* Periodic interval is calculated as 1 units = 8 ms.
+	 * Ex: 125 -> 1000 ms
+	 */
 	cmd->hdr |= FIELD_PREP(HTT_H2T_VDEV_TXRX_HDR_INTERVAL,
-			       ATH12K_STATS_TIMER_DUR_1SEC);
+			       (ATH12K_STATS_TIMER_DUR_1SEC >> 3));
 	cmd->hdr |= FIELD_PREP(HTT_H2T_VDEV_TXRX_HDR_RESET_STATS, true);
 	cmd->vdev_id_lo_bitmask = (reset_bitmask & HTT_H2T_VDEV_TXRX_LO_BITMASK);
 	cmd->vdev_id_hi_bitmask = ((reset_bitmask &
