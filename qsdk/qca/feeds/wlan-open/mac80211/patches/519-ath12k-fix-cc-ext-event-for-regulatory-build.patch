From b637c3b80fb14b5a42d3869cec19aa27794beccb Mon Sep 17 00:00:00 2001
From: Aishwarya R <quic_aisr@quicinc.com>
Date: Tue, 15 Feb 2022 14:29:25 +0530
Subject: [PATCH] [PATCH 11/14] ath12k: fix cc ext event for regulatory build

Fixing bug in max bandwidth advertisement from firmware

Signed-off-by: Aishwarya R <quic_aisr@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mhi.c |   1 +
 drivers/net/wireless/ath/ath12k/pci.c |   2 +-
 drivers/net/wireless/ath/ath12k/reg.c |  18 ++++-
 drivers/net/wireless/ath/ath12k/wmi.c | 102 +++++++++++++++-----------
 drivers/net/wireless/ath/ath12k/wmi.h |   8 +-
 5 files changed, 84 insertions(+), 47 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mhi.c
+++ b/drivers/net/wireless/ath/ath12k/mhi.c
@@ -328,6 +328,7 @@ static void ath12k_mhi_op_status_cb(stru
 	case MHI_CB_EE_RDDM:
 		if (!(test_bit(ATH12K_FLAG_UNREGISTERING, &ab->dev_flags)))
 			queue_work(ab->workqueue_aux, &ab->reset_work);
+		ath12k_hal_dump_srng_stats(ab);
 		break;
 	default:
 		break;
--- a/drivers/net/wireless/ath/ath12k/reg.c
+++ b/drivers/net/wireless/ath/ath12k/reg.c
@@ -621,7 +621,17 @@ ath12k_reg_build_regd(struct ath12k_base
 			reg_rule = reg_info->reg_rules_5g_ptr + j++;
 			max_bw = min_t(u16, reg_rule->max_bw,
 				       reg_info->max_bw_5g);
-
+#if 1
+                        /* since we receive 320MHz bw for all the reg rules adding this war*/
+                        if ((reg_rule->start_freq == 5170) && (reg_rule->end_freq == 5250))
+                                max_bw = 80;
+                        else if ((reg_rule->start_freq == 5250) && (reg_rule->end_freq == 5330))
+                                max_bw = 80;
+			else if ((reg_rule->start_freq == 5735) && (reg_rule->end_freq == 5875))
+				max_bw = 80;
+                        else
+                                max_bw = 160;
+#endif
 			/* FW doesn't pass NL80211_RRF_AUTO_BW flag for
 			 * BW Auto correction, we can enable this by default
 			 * for all 5G rules here. The regulatory core performs
@@ -635,6 +645,12 @@ ath12k_reg_build_regd(struct ath12k_base
 			reg_rule = reg_info->reg_rules_6g_ap_ptr[WMI_REG_INDOOR_AP] + k++;
 			max_bw = min_t(u16, reg_rule->max_bw,
 				       reg_info->max_bw_6g_ap[WMI_REG_INDOOR_AP]);
+#if 1 /*WAR*/
+			if ((reg_rule->start_freq == 6425) && (reg_rule->end_freq == 6525))
+				max_bw = 80;
+			else
+				max_bw = 160;
+#endif
 			flags = NL80211_RRF_AUTO_BW;
 		} else {
 			break;
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -3334,8 +3334,8 @@ ath12k_wmi_copy_resource_config(struct w
 	wmi_cfg->sched_params = tg_cfg->sched_params;
 	wmi_cfg->twt_ap_pdev_count = tg_cfg->twt_ap_pdev_count;
 	wmi_cfg->twt_ap_sta_count = tg_cfg->twt_ap_sta_count;
-	wmi_cfg->host_service_flags |= 1 <<
-				       WMI_RSRC_CFG_HOST_SVC_FLAG_REG_CC_EXT_SUPPORT_BIT;
+	wmi_cfg->host_service_flags &= ~(1 << WMI_RSRC_CFG_HOST_SVC_FLAG_REG_CC_EXT_SUPPORT_BIT);
+	wmi_cfg->host_service_flags |= 1 << WMI_RSRC_CFG_HOST_SVC_FLAG_REG_CC_EXT_SUPPORT_BIT;
 }
 
 static int ath12k_init_cmd_send(struct ath12k_pdev_wmi *wmi,
@@ -3546,6 +3546,9 @@ int ath12k_wmi_cmd_init(struct ath12k_ba
 	memset(&init_param, 0, sizeof(init_param));
 	memset(&config, 0, sizeof(config));
 
+	if (test_bit(WMI_TLV_SERVICE_REG_CC_EXT_EVENT_SUPPORT, ab->wmi_ab.svc_map))
+		config.is_reg_cc_ext_event_supported = 1;
+
 	ab->hw_params->wmi_init(ab, &config);
 
 	memcpy(&wmi_sc->wlan_resource_config, &config, sizeof(config));
@@ -6678,47 +6681,60 @@ static void ath12k_vdev_install_key_comp
 	rcu_read_unlock();
 }
 
-static void ath12k_service_available_event(struct ath12k_base *ab, struct sk_buff *skb)
-{
-	const void **tb;
-	const struct wmi_service_available_event *ev;
-	int ret;
-	int i, j;
-
-	tb = ath12k_wmi_tlv_parse_alloc(ab, skb->data, skb->len, GFP_ATOMIC);
-	if (IS_ERR(tb)) {
-		ret = PTR_ERR(tb);
-		ath12k_warn(ab, "failed to parse tlv: %d\n", ret);
-		return;
-	}
-
-	ev = tb[WMI_TAG_SERVICE_AVAILABLE_EVENT];
-	if (!ev) {
-		ath12k_warn(ab, "failed to fetch svc available ev");
-		kfree(tb);
-		return;
-	}
-
-	/* TODO: Use wmi_service_segment_offset information to get the service
-	 * especially when more services are advertised in multiple sevice
-	 * available events.
-	 */
-	for (i = 0, j = WMI_MAX_SERVICE;
-	     i < WMI_SERVICE_SEGMENT_BM_SIZE32 && j < WMI_MAX_EXT_SERVICE;
-	     i++) {
-		do {
-			if (ev->wmi_service_segment_bitmap[i] &
-			    BIT(j % WMI_AVAIL_SERVICE_BITS_IN_SIZE32))
-				set_bit(j, ab->wmi_ab.svc_map);
-		} while (++j % WMI_AVAIL_SERVICE_BITS_IN_SIZE32);
-	}
-
-	ath12k_dbg(ab, ATH12K_DBG_WMI,
-		   "wmi_ext_service_bitmap 0:0x%x, 1:0x%x, 2:0x%x, 3:0x%x",
-		   ev->wmi_service_segment_bitmap[0], ev->wmi_service_segment_bitmap[1],
-		   ev->wmi_service_segment_bitmap[2], ev->wmi_service_segment_bitmap[3]);
+static int  ath12k_wmi_tlv_services_parser(struct ath12k_base *ab,
+                                           u16 tag, u16 len,
+                                           const void *ptr, void *data)
+{
+        const struct wmi_service_available_event *ev;
+        u32 *wmi_ext2_service_bitmap;
+        int i, j;
+
+        switch (tag) {
+        case WMI_TAG_SERVICE_AVAILABLE_EVENT:
+                ev = (struct wmi_service_available_event *)ptr;
+                for (i = 0, j = WMI_MAX_SERVICE;
+                     i < WMI_SERVICE_SEGMENT_BM_SIZE32 && j < WMI_MAX_EXT_SERVICE;
+                     i++) {
+                        do {
+                                if (ev->wmi_service_segment_bitmap[i] &
+                                    BIT(j % WMI_AVAIL_SERVICE_BITS_IN_SIZE32))
+                                        set_bit(j, ab->wmi_ab.svc_map);
+                        } while (++j % WMI_AVAIL_SERVICE_BITS_IN_SIZE32);
+                }
+
+                ath12k_dbg(ab, ATH12K_DBG_WMI,
+                           "wmi_ext_service_bitmap 0:0x%x, 1:0x%x, 2:0x%x, 3:0x%x",
+                           ev->wmi_service_segment_bitmap[0],
+                           ev->wmi_service_segment_bitmap[1],
+                           ev->wmi_service_segment_bitmap[2],
+                           ev->wmi_service_segment_bitmap[3]);
+
+                break;
+
+        case WMI_TAG_ARRAY_UINT32:
+                wmi_ext2_service_bitmap = (u32 *)ptr;
+                for (i = 0, j = WMI_MAX_EXT_SERVICE;
+                     i < WMI_SERVICE_SEGMENT_BM_SIZE32 && j < WMI_MAX_EXT2_SERVICE;
+                     i++) {
+                        do {
+                                if (wmi_ext2_service_bitmap[i] &
+                                    BIT(j % WMI_AVAIL_SERVICE_BITS_IN_SIZE32))
+                                        set_bit(j, ab->wmi_ab.svc_map);
+                        } while (++j % WMI_AVAIL_SERVICE_BITS_IN_SIZE32);
+                }
+
+                break;
+        }
+        return 0;
+}
 
-	kfree(tb);
+static int ath12k_service_available_event(struct ath12k_base *ab, struct sk_buff *skb)
+{
+	int ret = 0;
+	ret = ath12k_wmi_tlv_iter(ab, skb->data, skb->len,
+				  ath12k_wmi_tlv_services_parser,
+				  NULL);
+	return ret;
 }
 
 static void ath12k_peer_assoc_conf_event(struct ath12k_base *ab, struct sk_buff *skb)
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -2042,7 +2042,10 @@ enum wmi_tlv_service {
 	WMI_TLV_SERVICE_FREQINFO_IN_METADATA = 219,
 	WMI_TLV_SERVICE_EXT2_MSG = 220,
 
-	WMI_MAX_EXT_SERVICE
+	WMI_MAX_EXT_SERVICE = 256,
+
+	WMI_TLV_SERVICE_REG_CC_EXT_EVENT_SUPPORT = 281,
+	WMI_MAX_EXT2_SERVICE,
 };
 
 enum {
@@ -5037,6 +5040,7 @@ struct target_resource_config {
 	u32 sched_params;
 	u32 twt_ap_pdev_count;
 	u32 twt_ap_sta_count;
+	bool is_reg_cc_ext_event_supported;
 };
 
 #define WMI_MAX_MEM_REQS 32
@@ -5054,7 +5058,7 @@ struct ath12k_wmi_base {
 
 	struct completion service_ready;
 	struct completion unified_ready;
-	DECLARE_BITMAP(svc_map, WMI_MAX_EXT_SERVICE);
+	DECLARE_BITMAP(svc_map, WMI_MAX_EXT2_SERVICE);
 	wait_queue_head_t tx_credits_wq;
 	const struct wmi_peer_flags_map *peer_flags;
 	u32 num_mem_chunks;
