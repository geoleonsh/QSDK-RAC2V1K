From e72aeb9ee0e34c57dc90793d0bf82cab9624d64e Mon Sep 17 00:00:00 2001
From: quic_nikhgurr <quic_nikhgurr@quicinc.com>
Date: Thu, 14 Oct 2021 10:59:18 -0700
Subject: Revert: "fq_codel: implement L4S style ce_threshold_ect1 marking"

This reverts commit: https://git.codelinaro.org/clo/qsdk/kvalo/ath/-/commit/e72aeb9ee0e34c57dc90793d0bf82cab9624d64e

Signed-off-by: quic_nikhgurr <quic_nikhgurr@quicinc.com>

---
 include/net/codel.h            |  2 --
 include/net/codel_impl.h       | 18 +++---------------
 include/uapi/linux/pkt_sched.h |  1 -
 net/mac80211/sta_info.c        |  1 -
 net/sched/sch_fq_codel.c       | 15 ++++-----------
 5 files changed, 7 insertions(+), 30 deletions(-)

diff --git b/include/net/codel.h a/include/net/codel.h
index 5e8b181b76b8..a6e428f80135 100644
--- b/include/net/codel.h
+++ a/include/net/codel.h
@@ -102,7 +102,6 @@ static inline u32 codel_time_to_us(codel_time_t val)
  * @interval:	width of moving time window
  * @mtu:	device mtu, or minimal queue backlog in bytes.
  * @ecn:	is Explicit Congestion Notification enabled
- * @ce_threshold_ect1: if ce_threshold only marks ECT(1) packets
  */
 struct codel_params {
 	codel_time_t	target;
@@ -110,7 +109,6 @@ struct codel_params {
 	codel_time_t	interval;
 	u32		mtu;
 	bool		ecn;
-	bool		ce_threshold_ect1;
 };
 
 /**
diff --git b/include/net/codel_impl.h a/include/net/codel_impl.h
index 7af2c3eb3c43..d289b91dcd65 100644
--- b/include/net/codel_impl.h
+++ a/include/net/codel_impl.h
@@ -54,7 +54,6 @@ static void codel_params_init(struct codel_params *params)
 	params->interval = MS2TIME(100);
 	params->target = MS2TIME(5);
 	params->ce_threshold = CODEL_DISABLED_THRESHOLD;
-	params->ce_threshold_ect1 = false;
 	params->ecn = false;
 }
 
@@ -247,20 +246,9 @@ static struct sk_buff *codel_dequeue(void *ctx,
 						    vars->rec_inv_sqrt);
 	}
 end:
-	if (skb && codel_time_after(vars->ldelay, params->ce_threshold)) {
-		bool set_ce = true;
-
-		if (params->ce_threshold_ect1) {
-			/* Note: if skb_get_dsfield() returns -1, following
-			 * gives INET_ECN_MASK, which is != INET_ECN_ECT_1.
-			 */
-			u8 ecn = skb_get_dsfield(skb) & INET_ECN_MASK;
-
-			set_ce = (ecn == INET_ECN_ECT_1);
-		}
-		if (set_ce && INET_ECN_set_ce(skb))
-			stats->ce_mark++;
-	}
+	if (skb && codel_time_after(vars->ldelay, params->ce_threshold) &&
+	    INET_ECN_set_ce(skb))
+		stats->ce_mark++;
 	return skb;
 }
 
diff --git b/net/mac80211/sta_info.c a/net/mac80211/sta_info.c
index a39830418434..2b5acb37587f 100644
--- b/net/mac80211/sta_info.c
+++ a/net/mac80211/sta_info.c
@@ -513,7 +513,6 @@ struct sta_info *sta_info_alloc(struct ieee80211_sub_if_data *sdata,
 	sta->cparams.target = MS2TIME(20);
 	sta->cparams.interval = MS2TIME(100);
 	sta->cparams.ecn = true;
-	sta->cparams.ce_threshold_ect1 = false;
 
 	sta_dbg(sdata, "Allocated STA %pM\n", sta->sta.addr);
 
-- 
2.25.1

