From 6ce6ff53955ce8de93700fff9bc1189a425104ce Mon Sep 17 00:00:00 2001
From: Aishwarya R <quic_aisr@quicinc.com>
Date: Fri, 24 Jun 2022 17:31:56 +0530
Subject: [PATCH] ath12k: Pktlog decode info support

Add pktlog enable WMI command for both pktlog full and lite mode.
Handle pktlog decode info WMI event and parse chip info,
software image, pktlog json version

Update the new magic number in pktlog buf header if the above
additional meta data info is added to dat file only if the fw supports.
if not,old magic number and dont add any new meta data info.

Signed-off-by: Aishwarya R <quic_aisr@quicinc.com>
Signed-off-by: Karthik M <quic_karm@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debugfs.c | 26 ++++------
 drivers/net/wireless/ath/ath12k/debugfs.h | 15 +++++-
 drivers/net/wireless/ath/ath12k/pktlog.c  | 10 ++++
 drivers/net/wireless/ath/ath12k/pktlog.h  | 19 +++++++
 drivers/net/wireless/ath/ath12k/wmi.c     | 60 +++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/wmi.h     | 10 ++++
 6 files changed, 122 insertions(+), 18 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -1164,22 +1164,17 @@ static ssize_t ath12k_write_pktlog_filte
 		goto out;
 	}
 
-	if (filter) {
-		if (hybrid_enable)
-			filter |= ATH12K_PKTLOG_HYBRID;
-		ret = ath12k_wmi_pdev_pktlog_enable(ar, filter);
-		if (ret) {
-			ath12k_warn(ar->ab,
-				    "failed to enable pktlog filter %x: %d\n",
-				    ar->debug.pktlog_filter, ret);
-			goto out;
-		}
-	} else {
-		ret = ath12k_wmi_pdev_pktlog_disable(ar);
-		if (ret) {
-			ath12k_warn(ar->ab, "failed to disable pktlog: %d\n", ret);
-			goto out;
-		}
+	/* TODO : Hybrid mode is not supported yet.
+	 * Bring up will happen once the FW design is finalised.
+	 */
+	if (hybrid_enable)
+		filter |= ATH12K_PKTLOG_HYBRID;
+	ret = ath12k_wmi_pdev_pktlog_enable(ar, filter);
+	if (ret) {
+		ath12k_warn(ar->ab,
+			    "failed to enable pktlog filter %x: %d\n",
+			     ar->debug.pktlog_filter, ret);
+		goto out;
 	}
 
 	/* Clear Tx filter */
--- a/drivers/net/wireless/ath/ath12k/debugfs.h
+++ b/drivers/net/wireless/ath/ath12k/debugfs.h
@@ -82,7 +82,7 @@ struct ath_pktlog_hdr {
 	u32 type_specific_data;
 	struct mlo_timestamp m_timestamp;
 	u8 payload[];
-};
+} __packed;
 
 #define ATH12K_HTT_PEER_STATS_RESET BIT(16)
 
@@ -96,7 +96,7 @@ enum ath12k_pktlog_filter {
 	ATH12K_PKTLOG_RCUPDATE		= 0x000000008,
 	ATH12K_PKTLOG_EVENT_SMART_ANT	= 0x000000020,
 	ATH12K_PKTLOG_EVENT_SW		= 0x000000040,
-	ATH12K_PKTLOG_HYBRID		= 0x000000200,
+	ATH12K_PKTLOG_HYBRID		= 0x000020000,
 	ATH12K_PKTLOG_ANY		= 0x00000006f,
 };
 
@@ -109,14 +109,25 @@ enum ath12k_pktlog_enum {
 	ATH12K_PKTLOG_TYPE_TX_CTRL      = 1,
 	ATH12K_PKTLOG_TYPE_TX_STAT      = 2,
 	ATH12K_PKTLOG_TYPE_TX_MSDU_ID   = 3,
+	ATH12K_PKTLOG_TYPE_TX_FRM_HDR	= 4,
 	ATH12K_PKTLOG_TYPE_RX_STAT      = 5,
 	ATH12K_PKTLOG_TYPE_RC_FIND      = 6,
 	ATH12K_PKTLOG_TYPE_RC_UPDATE    = 7,
 	ATH12K_PKTLOG_TYPE_TX_VIRT_ADDR = 8,
+	ATH12K_PKTLOG_TYPE_DBG_PRINT	= 9,
 	ATH12K_PKTLOG_TYPE_RX_CBF       = 10,
+	ATH12K_PKTLOG_TYPE_ANI          = 11,
+	ATH12K_PKTLOG_TYPE_GRPID	= 12,
+	ATH12K_PKTLOG_TYPE_TX_MU	= 13,
+	ATH12K_PKTLOG_TYPE_SMART_ANTENNA = 14,
+	ATH12K_PKTLOG_TYPE_TX_PFSCHED_CMD = 15,
+	ATH12K_PKTLOG_TYPE_TX_FW_GENERATED1 = 19,
+	ATH12K_PKTLOG_TYPE_TX_FW_GENERATED2 = 20,
+	ATH12K_PKTLOG_TYPE_MAX = 21,
 	ATH12K_PKTLOG_TYPE_RX_STATBUF   = 22,
 	ATH12K_PKTLOG_TYPE_PPDU_STATS   = 23,
 	ATH12K_PKTLOG_TYPE_LITE_RX      = 24,
+	ATH12K_PKTLOG_TYPE_HOST_SW_EVENT = 30,
 };
 
 enum ath12k_dbg_aggr_mode {
--- a/drivers/net/wireless/ath/ath12k/pktlog.c
+++ b/drivers/net/wireless/ath/ath12k/pktlog.c
@@ -116,6 +116,12 @@ static void ath_init_pktlog_buf(struct a
 		pktlog->buf->bufhdr.magic_num = PKTLOG_NEW_MAGIC_NUM;
 		pktlog->buf->bufhdr.version = ar->ab->pktlog_defs_checksum;
 	}
+
+	if (!test_bit(WMI_TLV_SERVICE_PKTLOG_DECODE_INFO_SUPPORT, ar->ab->wmi_ab.svc_map)) {
+                ath12k_warn(ar->ab, "firmware doesn't support pktlog decode info support\n");
+                pktlog->invalid_decode_info = 1;
+        }
+
 	pktlog->buf->rd_offset = -1;
 	pktlog->buf->wr_offset = 0;
 }
@@ -244,6 +250,10 @@ static ssize_t ath_pktlog_read(struct fi
 
 	bufhdr_size = sizeof(log_buf->bufhdr);
 
+	if (!info->fw_version_record || info->invalid_decode_info) {
+		bufhdr_size -= sizeof(struct ath_pktlog_decode_info);
+	}
+
 	/* copy valid log entries from circular buffer into user space */
 	rem_len = count;
 
@@ -377,6 +387,10 @@ static ssize_t write_pktlog_start(struct
 		ar->debug.is_pkt_logging = 1;
 	} else {
 		ar->debug.is_pkt_logging = 0;
+		err = ath12k_wmi_pdev_pktlog_disable(ar);
+		pr_err("failed to enable pktlog hybrid: %d\n", err);
+		if (err)
+			return err;
 	}
 
 	return count;
--- a/drivers/net/wireless/ath/ath12k/pktlog.h
+++ b/drivers/net/wireless/ath/ath12k/pktlog.h
@@ -44,6 +44,7 @@ of its
 #define CUR_PKTLOG_VER          10010  /* Packet log version */
 #define PKTLOG_MAGIC_NUM        7735225
 #define PKTLOG_NEW_MAGIC_NUM	2453506
+#define PKTLOG_MAGIC_NUM_FW_VERSION_SUPPORT 0xDECDF1F0
 
 /* Masks for setting pktlog events filters */
 #define ATH_PKTLOG_RX		0x000000001
@@ -69,9 +70,25 @@ struct ath_pktlog_hdr_arg {
 	u8 *pktlog_hdr;
 };
 
+struct ath_pl_fw_info {
+	u32 pdev_id;
+	u8 software_image[40];
+	u8 chip_info[40];
+	u32 pktlog_defs_json_version;
+} __packed;
+
+struct ath_pktlog_decode_info {
+        u8 software_image[40];
+        u8 chip_info[40];
+        u32 pktlog_defs_json_version;
+};
+
 struct ath_pktlog_bufhdr {
 	u32 magic_num;  /* Used by post processing scripts */
 	u32 version;    /* Set to CUR_PKTLOG_VER */
+	u8 software_image[40];
+	u8 chip_info[40];
+	u32 pktlog_defs_json_version;
 };
 
 struct ath_pktlog_buf {
@@ -88,6 +105,8 @@ struct ath_pktlog {
 	spinlock_t lock;
 	u8 hdr_size;
 	u8 hdr_size_field_offset;
+	u32 fw_version_record;
+	u32 invalid_decode_info;
 };
 
 #endif /* CPTCFG_ATH12K_PKTLOG */
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -8062,6 +8062,65 @@ exit:
 }
 
 static void
+ath12k_wmi_pktlog_decode_info(struct ath12k_base *ab,
+                                  struct sk_buff *skb)
+{
+	struct ath12k *ar;
+        const void **tb;
+	int ret;
+	struct ath_pktlog *pktlog;
+	struct ath_pl_fw_info *pktlog_info;
+
+	if (!test_bit(WMI_TLV_SERVICE_PKTLOG_DECODE_INFO_SUPPORT, ab->wmi_ab.svc_map)) {
+                ath12k_warn(ab, "firmware doesn't support pktlog decode info support\n");
+                return;
+        }
+	tb = ath12k_wmi_tlv_parse_alloc(ab, skb->data, skb->len, GFP_ATOMIC);
+        if (IS_ERR(tb)) {
+                ret = PTR_ERR(tb);
+                ath12k_warn(ab, "failed to parse tlv: %d\n", ret);
+                return;
+        }
+	pktlog_info = tb[WMI_TAG_PDEV_PKTLOG_DECODE_INFO];
+        if (!pktlog_info) {
+                ath12k_warn(ab, "failed to fetch pktlog debug info");
+                kfree(tb);
+                return;
+        }
+
+	pktlog_info->pdev_id = DP_SW2HW_MACID(pktlog_info->pdev_id);
+        ath12k_dbg(ab, ATH12K_DBG_WMI,
+                   "pktlog pktlog_defs_json_version: %d", pktlog_info->pktlog_defs_json_version);
+	ath12k_dbg(ab, ATH12K_DBG_WMI,
+                   "pktlog software_image: %s", pktlog_info->software_image);
+	ath12k_dbg(ab, ATH12K_DBG_WMI,
+                   "pktlog chip_info: %s", pktlog_info->chip_info);
+	 ath12k_dbg(ab, ATH12K_DBG_WMI,
+                   "pktlog pdev_id: %d", pktlog_info->pdev_id);
+
+        ar = ath12k_mac_get_ar_by_pdev_id(ab, pktlog_info->pdev_id);
+        if (!ar) {
+                ath12k_warn(ab, "invalid pdev id in pktlog decode info %d", pktlog_info->pdev_id);
+                kfree(tb);
+                return;
+        }
+	pktlog = &ar->debug.pktlog;
+	pktlog->fw_version_record = 1;
+	if (pktlog->buf == NULL) {
+		ath12k_warn(ab, "failed to initialize, start pktlog\n");
+		kfree(tb);
+		return;
+	}
+	pktlog->buf->bufhdr.magic_num = PKTLOG_MAGIC_NUM_FW_VERSION_SUPPORT;
+	memcpy(pktlog->buf->bufhdr.software_image, pktlog_info->software_image, sizeof(pktlog_info->software_image));
+        memcpy(pktlog->buf->bufhdr.chip_info, pktlog_info->chip_info, sizeof(pktlog_info->chip_info));
+        pktlog->buf->bufhdr.pktlog_defs_json_version = pktlog_info->pktlog_defs_json_version;
+	ath12k_dbg(ab, ATH12K_DBG_WMI,
+                   "pktlog new magic_num: 0x%x\n", pktlog->buf->bufhdr.magic_num);
+	kfree(tb);
+}
+
+static void
 ath12k_wmi_pdev_temperature_event(struct ath12k_base *ab,
 				  struct sk_buff *skb)
 {
@@ -8532,6 +8591,9 @@ static void ath12k_wmi_tlv_op_rx(struct
 	case WMI_DCS_INTERFERENCE_EVENTID:
                 ath12k_wmi_dcs_awgn_interference_event(ab, skb);
                 break;
+	case WMI_PDEV_PKTLOG_DECODE_INFO_EVENTID:
+		ath12k_wmi_pktlog_decode_info(ab, skb);
+		break;
 	case WMI_MUEDCA_PARAMS_CONFIG_EVENTID:
 		ath12k_wmi_pdev_update_muedca_params_status_event(ab, skb);
 		break;
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -674,6 +674,14 @@ enum wmi_tlv_event_id {
 	WMI_PDEV_RAP_INFO_EVENTID,
 	WMI_CHAN_RF_CHARACTERIZATION_INFO_EVENTID,
 	WMI_SERVICE_READY_EXT2_EVENTID,
+	WMI_PDEV_MULTIPLE_VDEV_RESTART_RESP_EVENTID,
+	WMI_PDEV_GET_TPC_STATS_EVENTID,
+	WMI_PDEV_GET_DPD_STATUS_EVENTID,
+	WMI_PDEV_GET_HALPHY_CAL_STATUS_EVENTID,
+	WMI_PDEV_SET_HALPHY_CAL_BMAP_EVENTID,
+	WMI_PDEV_AOA_PHASEDELTA_EVENTID,
+	WMI_PDEV_FIPS_EXTEND_EVENTID,
+	WMI_PDEV_PKTLOG_DECODE_INFO_EVENTID,
 	WMI_VDEV_START_RESP_EVENTID = WMI_TLV_CMD(WMI_GRP_VDEV),
 	WMI_VDEV_STOPPED_EVENTID,
 	WMI_VDEV_INSTALL_KEY_COMPLETE_EVENTID,
@@ -1917,6 +1925,7 @@ enum wmi_tlv_tag {
 	WMI_TAG_VDEV_CH_POWER_INFO,
 	WMI_TAG_EHT_RATE_SET = 0x3C4,
 	WMI_TAG_DCS_AWGN_INT_TYPE = 0x3C5,
+	WMI_TAG_PDEV_PKTLOG_DECODE_INFO = 0x414,
 	WMI_TAG_MAX
 };
 
@@ -2149,6 +2158,7 @@ enum wmi_tlv_service {
 	WMI_TLV_SERVICE_REG_CC_EXT_EVENT_SUPPORT = 281,
 	WMI_TLV_SERVICE_DCS_AWGN_INT_SUPPORT = 286,
 	WMI_TLV_SERVICE_BE = 289,
+	WMI_TLV_SERVICE_PKTLOG_DECODE_INFO_SUPPORT = 320,
 	WMI_MAX_EXT2_SERVICE,
 };
 
