From 9a1e4ae17f618c986e32cb17d9590f6b76200731 Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Wed, 29 Dec 2021 12:34:22 +0530
Subject: [PATCH 06/14] ath12k: fix pci read and write

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/pci.c | 25 +++++++++++++++++++++----
 1 file changed, 21 insertions(+), 4 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/pci.c
+++ b/drivers/net/wireless/ath/ath12k/pci.c
@@ -1027,10 +1027,20 @@ int ath12k_pci_start(struct ath12k_base
 	return 0;
 }
 
+#define PCI_BAR_WINDOW0_BASE	0x1E00000
+#define PCI_BAR_WINDOW0_END	0x1E7FFFC
+#define PCI_SOC_PCI_REG_BASE	0x1E04000
+#define PCI_SOC_PCI_REG_END	0x1E07FFC
+#define PCI_PARF_BASE		0x1E08000
+#define PCI_PARF_END		0x1E0BFFC
+#define PCI_MHIREGLEN_REG	0x1E0E100
+#define PCI_MHI_REGION_END	0x1E0EFFC
+
 u32 ath12k_pci_read32(struct ath12k_base *ab, u32 offset)
 {
 	struct ath12k_pci *ab_pci = ath12k_pci_priv(ab);
 	u32 val, window_start;
+	bool is_window0;
 
 	/* for offset beyond BAR + 4K - 32, may
 	 * need to wakeup MHI to access.
@@ -1050,8 +1060,23 @@ u32 ath12k_pci_read32(struct ath12k_base
 		if (window_start == WINDOW_START) {
 			spin_lock_bh(&ab_pci->window_lock);
 			ath12k_pci_select_window(ab_pci, offset);
-			val = ioread32(ab->mem + window_start +
-				       (offset & WINDOW_RANGE_MASK));
+
+			is_window0 = ((offset >= PCI_BAR_WINDOW0_BASE &&
+				       offset <= PCI_BAR_WINDOW0_END) &&
+				      !(offset >= PCI_SOC_PCI_REG_BASE &&
+					offset <= PCI_PARF_END));
+
+			if (is_window0) {
+				if (offset >= PCI_MHIREGLEN_REG &&
+				    offset <= PCI_MHI_REGION_END)
+					offset = offset - PCI_MHIREGLEN_REG;
+
+				val = ioread32(ab->mem + (offset & WINDOW_RANGE_MASK));
+
+			} else {
+				val = ioread32(ab->mem + window_start +
+					       (offset & WINDOW_RANGE_MASK));
+			}
 			spin_unlock_bh(&ab_pci->window_lock);
 		} else {
 			if ((!window_start) &&
@@ -1075,6 +1100,7 @@ void ath12k_pci_write32(struct ath12k_ba
 {
 	struct ath12k_pci *ab_pci = ath12k_pci_priv(ab);
 	u32 window_start;
+	bool is_window0;
 
 	/* for offset beyond BAR + 4K - 32, may
 	 * need to wakeup MHI to access.
@@ -1094,8 +1120,23 @@ void ath12k_pci_write32(struct ath12k_ba
 		if (window_start == WINDOW_START) {
 			spin_lock_bh(&ab_pci->window_lock);
 			ath12k_pci_select_window(ab_pci, offset);
-			iowrite32(value, ab->mem + window_start +
-				  (offset & WINDOW_RANGE_MASK));
+
+			is_window0 = ((offset >= PCI_BAR_WINDOW0_BASE &&
+				       offset <= PCI_BAR_WINDOW0_END) &&
+				      !(offset >= PCI_SOC_PCI_REG_BASE &&
+					offset <= PCI_PARF_END));
+
+			if (is_window0) {
+				if (offset >= PCI_MHIREGLEN_REG &&
+				    offset <= PCI_MHI_REGION_END)
+					offset = offset - PCI_MHIREGLEN_REG;
+
+				iowrite32(value, ab->mem +
+					  (offset & WINDOW_RANGE_MASK));
+			} else {
+				iowrite32(value, ab->mem + window_start +
+					  (offset & WINDOW_RANGE_MASK));
+			}
 			spin_unlock_bh(&ab_pci->window_lock);
 		} else {
 			if ((!window_start) &&
