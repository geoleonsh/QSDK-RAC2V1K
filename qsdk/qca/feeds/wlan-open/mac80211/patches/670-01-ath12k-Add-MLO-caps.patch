From 0f010961dd09ba1c44ba84c000ad7f084a28778d Mon Sep 17 00:00:00 2001
From: Bhagavathi Perumal S <quic_bperumal@quicinc.com>
Date: Tue, 15 Jun 2021 12:27:39 +0530
Subject: [PATCH 1/4] ath12k: Add MLO caps

Added MLO setup related handsake message in QMI. Also filled MLO
parameter in host capability send message. Added MLO global memory
type request support in host with RDDM download support.

Signed-off-by: Bhagavathi Perumal S <quic_bperumal@quicinc.com>
Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c |  95 ++++++-
 drivers/net/wireless/ath/ath12k/core.h |  16 ++
 drivers/net/wireless/ath/ath12k/qmi.c  | 364 ++++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/qmi.h  |  26 +-
 drivers/net/wireless/ath/ath12k/wmi.c  |  14 +-
 drivers/net/wireless/ath/ath12k/wmi.h  |  25 +-
 6 files changed, 513 insertions(+), 27 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -1350,15 +1350,36 @@ int ath12k_core_pre_init(struct ath12k_b
 	return 0;
 }
 
-static int ath12k_core_hw_group_create(struct ath12k_hw_group *ag)
+static int ath12k_core_get_chip(struct ath12k_hw_group *ag,
+				struct ath12k_base **ab,
+				u8 max_ab, u8 *num_ab)
 {
-	int i, ret;
-	struct ath12k_base *ab;
+	int i;
 
 	lockdep_assert_held(&ag->mutex_lock);
 
-	for(i = 0; i < ag->num_chip; i++) {
-		ab = ag->ab[i];
+	if (ag->num_chip != ag->num_probed)
+		return -EINVAL;
+
+	if (max_ab < ag->num_probed)
+		return -ENOMEM;
+
+	*num_ab = 0;
+	for (i = 0; i < ag->num_probed; i++) {
+		ab[i] = ag->ab[i];
+		*num_ab = *num_ab + 1;
+	}
+
+	return 0;
+}
+
+static int ath12k_core_hw_group_create(struct ath12k_base **ab_group, u8 num_ab)
+{
+	int i, ret = 0;
+	struct ath12k_base *ab;
+
+	for(i = 0; i < num_ab; i++) {
+		ab = ab_group[i];
 
 		mutex_lock(&ab->core_lock);
 		ret = ath12k_core_soc_create(ab);
@@ -1371,7 +1392,6 @@ static int ath12k_core_hw_group_create(s
 		mutex_unlock(&ab->core_lock);
 	}
 
-	return 0;
 out:
 	return ret;
 }
@@ -1379,6 +1399,9 @@ out:
 int ath12k_core_init(struct ath12k_base *ab)
 {
 	struct ath12k_hw_group *ag;
+	struct ath12k_base *ab_group[ATH12K_MAX_SOCS];
+	bool is_ready = false;
+	u8 num_ab;
 	int ret;
 
 	ret = ath12k_debugfs_soc_create(ab);
@@ -1392,7 +1415,7 @@ int ath12k_core_init(struct ath12k_base
 	ag = ath12k_core_get_hw_group(ab);
 	if (!ag) {
 		mutex_unlock(&ath12k_hw_lock);
-		ath12k_warn(ab, "unable to get hw group\n");
+		ath12k_err(ab, "unable to get hw group\n");
 		goto err_debugfs;
 	}
 	mutex_unlock(&ath12k_hw_lock);
@@ -1402,19 +1425,30 @@ int ath12k_core_init(struct ath12k_base
 	ath12k_dbg(ab, ATH12K_DBG_BOOT, "num chips in group %d, num probed %d\n",
 		    ag->num_chip, ag->num_probed);
 
-	if (ath12k_core_hw_group_create_ready(ag)) {
-		ret = ath12k_core_hw_group_create(ag);
+	is_ready = ath12k_core_hw_group_create_ready(ag);
+	if (is_ready) {
+		ret = ath12k_core_get_chip(ag, ab_group, ATH12K_MAX_SOCS, &num_ab);
 		if (ret) {
-			ath12k_warn(ab, "unable to create hw group\n");
-			goto err_hw_group;
+			mutex_unlock(&ag->mutex_lock);
+			ath12k_err(ab, "unable to get chip from hw group %d\n", ret);
+			goto err_debugfs;
 		}
 	}
 
 	mutex_unlock(&ag->mutex_lock);
 
+	if (is_ready) {
+		ret = ath12k_core_hw_group_create(ab_group, num_ab);
+		if (ret) {
+			ath12k_warn(ab, "unable to create hw group\n");
+			goto err_hw_group;
+		}
+	}
+
 	return 0;
 
 err_hw_group:
+	mutex_lock(&ag->mutex_lock);
 	__ath12k_core_put_hw_group(ab);
 	mutex_unlock(&ag->mutex_lock);
 err_debugfs:
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -191,6 +191,8 @@ struct ath12k_he {
 #define ATH12K_GROUP_MAX_RADIO (ATH12K_MAX_SOCS * MAX_RADIOS)
 #define ATH12K_INVALID_GRP_ID  0xFF
 #define ATH12K_INVALID_CHIP_ID 0xFF
+#define ATH12K_MAX_MLO_PEER    0x100
+
 enum {
 	WMI_HOST_TP_SCALE_MAX   = 0,
 	WMI_HOST_TP_SCALE_50    = 1,
@@ -943,6 +945,15 @@ struct ath12k_hw {
 	struct ath12k radio[0] __aligned(sizeof(void *));
 };
 
+struct ath12k_mlo_memory {
+	struct reserved_mem *rsv;
+	union {
+		void __iomem *ioaddr;
+		void *addr;
+	} v;
+	u32 size;
+};
+
 /* Holds info on the group of SOCs that are registered as a single wiphy */
 struct ath12k_hw_group {
 	/* Keep this always as first member */
@@ -955,6 +966,7 @@ struct ath12k_hw_group {
 	unsigned long dev_flags;
 	struct ath12k_hw *ah[ATH12K_GROUP_MAX_RADIO];
 	struct ath12k_base *ab[ATH12K_MAX_SOCS];
+	struct ath12k_mlo_memory mlo_mem;
 	struct mutex mutex_lock;
 };
 
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -12,6 +12,7 @@
 #include "coredump.h"
 #include <linux/of.h>
 #include <linux/of_address.h>
+#include <linux/of_reserved_mem.h>
 #include <linux/ioport.h>
 #include <linux/firmware.h>
 #include <linux/module.h>
@@ -573,7 +574,7 @@ static struct qmi_elem_info qmi_wlanfw_h
 					   mlo_capable_valid),
 	},
 	{
-		.data_type	= QMI_OPT_FLAG,
+		.data_type	= QMI_UNSIGNED_1_BYTE,
 		.elem_len	= 1,
 		.elem_size	= sizeof(u8),
 		.array_type	= NO_ARRAY,
@@ -2755,28 +2756,106 @@ static int ath12k_qmi_send_qdss_config(s
 	return 0;
 }
 
-static void ath12k_host_cap_parse_mlo(struct qmi_wlanfw_host_cap_req_msg_v01 *req)
+static int ath12k_qmi_fill_mlo_host_caps(struct ath12k_base *ab,
+					 struct qmi_wlanfw_host_cap_req_msg_v01 *req)
 {
-	req->mlo_capable_valid = 1;
-	req->mlo_capable = 1;
-	req->mlo_chip_id_valid = 1;
-	req->mlo_chip_id = 0;
-	req->mlo_group_id_valid = 1;
+	struct wlfw_host_mlo_chip_info_s_v01 *info;
+	struct ath12k_hw_group *ag = ab->ag;
+	struct ath12k_base *partner_ab;
+	int ret, i, j, link_id;
+
+	mutex_lock(&ag->mutex_lock);
+
+	if (ag->id == ATH12K_INVALID_GRP_ID) {
+		ath12k_dbg(ab, ATH12K_DBG_QMI, "Skip MLO cap send for chip id %d\n",
+			   ab->chip_id);
+
+		mutex_unlock(&ag->mutex_lock);
+		return 0;
+	}
+
+	if (ab->chip_id == ATH12K_INVALID_CHIP_ID) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	req->mlo_capable = true;
+	req->mlo_capable_valid = true;
+
+	req->mlo_chip_id = ab->chip_id;
+	req->mlo_chip_id_valid = true;
+
+	req->mlo_group_id = ag->id;
+	req->mlo_group_id_valid = true;
+
+	req->max_mlo_peer = ab->hw_params->max_mlo_peer;
+	req->max_mlo_peer_valid = true;
+
+	req->mlo_num_chips = ag->num_chip;
+	req->mlo_num_chips_valid = true;
+
+	link_id = 0;
+	for (i = 0; i < ag->num_chip; i++) {
+		info = &req->mlo_chip_info[i];
+		partner_ab = ag->ab[i];
+
+		if (partner_ab->chip_id == ATH12K_INVALID_CHIP_ID) {
+			ret = -EINVAL;
+			goto chip_cleanup;
+		}
+
+		info->chip_id = partner_ab->chip_id;
+
+		/* TODO: Need to get the phy count */
+		info->num_local_links = partner_ab->hw_params->num_local_link;
+
+		ath12k_dbg(ab, ATH12K_DBG_QMI, "MLO chip id %d num_link %d\n",
+			    partner_ab->chip_id, info->num_local_links);
+
+		for (j = 0; j < info->num_local_links; j++) {
+			info->hw_link_id[j] = link_id;
+			info->valid_mlo_link_id[j] = true;
+
+			ath12k_dbg(ab, ATH12K_DBG_QMI, "MLO link id %d\n",
+				    info->hw_link_id[j]);
+
+			link_id++;
+		}
+	}
+
+	req->mlo_chip_info_valid = true;
+
+	ath12k_dbg(ab, ATH12K_DBG_QMI, "MLO host cap chosen\n");
+
+	mutex_unlock(&ag->mutex_lock);
+	return 0;
+
+chip_cleanup:
+	for (i = i - 1; i >= 0; i--) {
+		info = &req->mlo_chip_info[i];
+
+		memset(info, 0, sizeof(*info));
+	}
+
+	req->mlo_num_chips = 0;
+	req->mlo_num_chips_valid = 0;
+
+	req->max_mlo_peer = 0;
+	req->max_mlo_peer_valid = 0;
+
 	req->mlo_group_id = 0;
-	req->max_mlo_peer_valid = 1;
-	/* Max peer number generally won't change for the same device
-	 * but needs to be synced with host driver.
-	 */
-	req->max_mlo_peer = 32;
-	req->mlo_num_chips_valid = 1;
-	req->mlo_num_chips = 1;
-	req->mlo_chip_info_valid = 1;
-	req->mlo_chip_info[0].chip_id = 0;
-	req->mlo_chip_info[0].num_local_links = 2;
-	req->mlo_chip_info[0].hw_link_id[0] = 0;
-	req->mlo_chip_info[0].hw_link_id[1] = 1;
-	req->mlo_chip_info[0].valid_mlo_link_id[0] = 1;
-	req->mlo_chip_info[0].valid_mlo_link_id[1] = 1;
+	req->mlo_group_id_valid = 0;
+
+	req->mlo_chip_id = 0;
+	req->mlo_chip_id_valid = 0;
+
+	req->mlo_capable = 0;
+	req->mlo_capable_valid = 0;
+
+out:
+	mutex_unlock(&ag->mutex_lock);
+
+	return ret;
 }
 
 static int ath12k_qmi_host_cap_send(struct ath12k_base *ab)
@@ -2820,8 +2899,12 @@ static int ath12k_qmi_host_cap_send(stru
 		 */
 		req.nm_modem |= SLEEP_CLOCK_SELECT_INTERNAL_BIT;
 		req.nm_modem |= PLATFORM_CAP_PCIE_GLOBAL_RESET;
+	}
 
-		ath12k_host_cap_parse_mlo(&req);
+	ret = ath12k_qmi_fill_mlo_host_caps(ab, &req);
+	if (ret < 0) {
+		ath12k_warn(ab, "Failed to get MLO capability,err = %d\n", ret);
+		goto out;
 	}
 
 	ret = qmi_txn_init(&ab->qmi.handle, &txn,
@@ -3007,6 +3090,29 @@ out:
 	return ret;
 }
 
+static void ath12k_qmi_free_mlo_mem_chunk(struct ath12k_base *ab,
+					  struct target_mem_chunk *chunk)
+{
+	struct ath12k_hw_group *ag = ab->ag;
+
+	lockdep_assert_held(&ag->mutex_lock);
+
+	if (!ag->mlo_mem.rsv)
+		return;
+
+	if (ag->num_started)
+		goto skip_unmap;
+
+	iounmap(ag->mlo_mem.v.ioaddr);
+	ag->mlo_mem.v.ioaddr = NULL;
+	ag->mlo_mem.rsv = NULL;
+	ag->mlo_mem.size = 0;
+
+skip_unmap:
+	chunk->v.ioaddr = NULL;
+	chunk->paddr = NULL;
+}
+
 void ath12k_qmi_free_target_mem_chunk(struct ath12k_base *ab)
 {
 	int i;
@@ -3015,8 +3121,13 @@ void ath12k_qmi_free_target_mem_chunk(st
 		if (ab->bus_params.fixed_mem_region) {
 			if (!ab->qmi.target_mem[i].v.ioaddr)
 				continue;
-			iounmap(ab->qmi.target_mem[i].v.ioaddr);
-			ab->qmi.target_mem[i].v.ioaddr = NULL;
+
+			if (ab->qmi.target_mem[i].type == MLO_GLOBAL_MEM_REGION_TYPE) {
+				ath12k_qmi_free_mlo_mem_chunk(ab, &ab->qmi.target_mem[i]);
+			} else {
+				iounmap(ab->qmi.target_mem[i].v.ioaddr);
+				ab->qmi.target_mem[i].v.ioaddr = NULL;
+			}
 		} else {
 			if (!ab->qmi.target_mem[i].v.addr)
 				continue;
@@ -3078,6 +3189,79 @@ static int ath12k_qmi_alloc_target_mem_c
 	return 0;
 }
 
+static int ath12k_qmi_assign_mlo_mem_chunk(struct ath12k_base *ab,
+					   struct target_mem_chunk *chunk)
+{
+	struct ath12k_hw_group *ag = ab->ag;
+	struct device_node *mlo_global_mem_node;
+	struct reserved_mem *mlo_mem;
+	int ret = 0;
+
+	mutex_lock(&ag->mutex_lock);
+
+	if (ag->mlo_mem.rsv) {
+		if (ag->mlo_mem.size != chunk->size) {
+			ath12k_warn(ab, "MLO memory requested size %x is mismatch %x\n",
+				    chunk->size, ag->mlo_mem.size);
+			ret = -EINVAL;
+			goto out;
+		}
+
+		goto skip_remap;
+	}
+
+	mlo_global_mem_node = of_find_node_by_name(NULL, "mlo_global_mem_0");
+	if (!mlo_global_mem_node) {
+		ath12k_warn(ab, "qmi fail to get MLO global memory node\n");
+		ret = -EINVAL;
+		goto out;
+	}
+
+	mlo_mem = of_reserved_mem_lookup(mlo_global_mem_node);
+	if (!mlo_mem) {
+		of_node_put(mlo_global_mem_node);
+		ath12k_warn(ab, "qmi fail to get MLO memory resource node %px\n",
+			    mlo_mem);
+		ret = -EINVAL;
+		goto out;
+	}
+
+	of_node_put(mlo_global_mem_node);
+
+	if (chunk->size > mlo_mem->size) {
+		ath12k_warn(ab, "MLO memory requested size %x is beyond %pa\n",
+			    chunk->size, &mlo_mem->size);
+		ret = -ENOMEM;
+		goto out;
+	}
+
+	ag->mlo_mem.v.ioaddr = ioremap(mlo_mem->base, chunk->size);
+	if (!ag->mlo_mem.v.ioaddr) {
+		ath12k_warn(ab, "failed to allocate MLO memory requested size %x\n",
+			    chunk->size);
+		ret = -ENOMEM;
+		goto out;
+	}
+
+	ag->mlo_mem.rsv = mlo_mem;
+	ag->mlo_mem.size = chunk->size;
+
+	memset_io(ag->mlo_mem.v.ioaddr, 0, ag->mlo_mem.size);
+
+skip_remap:
+	ath12k_dbg(ab, ATH12K_DBG_QMI, "MLO mem node start 0x%llx size %llu ioaddr %p req size %u\n",
+		   (unsigned long long)ag->mlo_mem.rsv->base,
+		   (unsigned long long)ag->mlo_mem.rsv->size,
+		   ag->mlo_mem.v.ioaddr,
+		   chunk->size);
+
+	chunk->paddr = ag->mlo_mem.rsv->base;
+	chunk->v.ioaddr = ag->mlo_mem.v.ioaddr;
+out:
+	mutex_unlock(&ag->mutex_lock);
+	return ret;
+}
+
 static int ath12k_qmi_assign_target_mem_chunk(struct ath12k_base *ab)
 {
 	struct device *dev = ab->dev;
@@ -3102,12 +3286,14 @@ static int ath12k_qmi_assign_target_mem_
 	host_ddr_sz = (res.end - res.start) + 1;
 
 	for (i = 0, idx = 0; i < ab->qmi.mem_seg_count; i++) {
-		ab->qmi.target_mem[idx].paddr = res.start + sz;
+		if (ab->qmi.target_mem[i].type != MLO_GLOBAL_MEM_REGION_TYPE) {
+			ab->qmi.target_mem[idx].paddr = res.start + sz;
 
-		if (ab->qmi.target_mem[i].size > (host_ddr_sz - sz)) {
-			ath12k_warn(ab, "No fixed mem to assign for type %d\n",
-				    ab->qmi.target_mem[i].type);
-			return -EINVAL;
+			if (ab->qmi.target_mem[i].size > (host_ddr_sz - sz)) {
+				ath12k_warn(ab, "No fixed mem to assign for type %d\n",
+					    ab->qmi.target_mem[i].type);
+				return -EINVAL;
+			}
 		}
 
 		switch (ab->qmi.target_mem[i].type) {
@@ -3169,12 +3355,26 @@ static int ath12k_qmi_assign_target_mem_
 			sz += ab->qmi.target_mem[i].size;
 			idx++;
 			break;
+		case MLO_GLOBAL_MEM_REGION_TYPE:
+			ab->qmi.target_mem[idx].size = ab->qmi.target_mem[i].size;
 
+			ret = ath12k_qmi_assign_mlo_mem_chunk(ab, &ab->qmi.target_mem[idx]);
+			if (ret) {
+				ath12k_warn(ab, "qmi failed to assign MLO target memory: %d\n",
+					    ret);
+				return ret;
+			}
+			ab->qmi.target_mem[idx].type = ab->qmi.target_mem[i].type;
+			idx++;
+			break;
 		default:
 			ath12k_warn(ab, "qmi ignore invalid mem req type %d\n",
 				    ab->qmi.target_mem[i].type);
 			break;
 		}
+
+		ath12k_dbg(ab, ATH12K_DBG_QMI, "qmi target mem seg idx %d i %d type %d size %d\n",
+			   idx, i, ab->qmi.target_mem[idx - 1].type, ab->qmi.target_mem[idx - 1].size);
 	}
 	ab->host_ddr_fixed_mem_off = sz;
 	ab->qmi.mem_seg_count = idx;
@@ -4231,6 +4431,7 @@ static void ath12k_qmi_msg_mem_request_c
 	for (i = 0; i < qmi->mem_seg_count ; i++) {
 		ab->qmi.target_mem[i].type = msg->mem_seg[i].type;
 		ab->qmi.target_mem[i].size = msg->mem_seg[i].size;
+
 		ath12k_dbg(ab, ATH12K_DBG_QMI, "qmi mem seg type %d size %d\n",
 			   msg->mem_seg[i].type, msg->mem_seg[i].size);
 	}
@@ -4545,6 +4746,7 @@ static void ath12k_qmi_driver_event_work
 	int ret;
 
 	spin_lock(&qmi->event_lock);
+
 	while (!list_empty(&qmi->event_list)) {
 		event = list_first_entry(&qmi->event_list,
 					 struct ath12k_qmi_driver_event, list);
--- a/drivers/net/wireless/ath/ath12k/qmi.h
+++ b/drivers/net/wireless/ath/ath12k/qmi.h
@@ -222,7 +222,7 @@ struct qmi_wlanfw_qdss_trace_mode_resp_m
 	struct qmi_response_type_v01 resp;
 };
 
-#define QMI_WLANFW_HOST_CAP_REQ_MSG_V01_MAX_LEN		261
+#define QMI_WLANFW_HOST_CAP_REQ_MSG_V01_MAX_LEN		351
 
 struct qmi_wlanfw_m3_dump_upload_done_req_msg_v01 {
 	u32 pdev_id;
@@ -251,6 +251,7 @@ enum ath12k_qmi_target_mem {
 	BDF_MEM_REGION_TYPE = 0x2,
 	M3_DUMP_REGION_TYPE = 0x3,
 	CALDB_MEM_REGION_TYPE = 0x4,
+	MLO_GLOBAL_MEM_REGION_TYPE = 0x8,
 	PAGEABLE_MEM_REGION_TYPE = 0x9,
 };
 
@@ -400,6 +401,11 @@ enum qmi_wlanfw_mem_type_enum_v01 {
 	QMI_WLANFW_MEM_M3_V01 = 3,
 	QMI_WLANFW_MEM_CAL_V01 = 4,
 	QMI_WLANFW_MEM_DPD_V01 = 5,
+	QMI_WLANFW_MEM_QDSS_V01 = 6,
+	QMI_WLANFW_MEM_HANG_DATA_V01 = 7,
+	QMI_WLANFW_MEM_MLO_GLOBAL_V01 = 8,
+	QMI_WLANFW_MEM_PAGEABLE_V01 = 9,
+	QMI_WLANFW_MEM_AFC_V01 = 10,
 	WLANFW_MEM_TYPE_ENUM_MAX_VAL_V01 = INT_MAX,
 };
 
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -2329,6 +2329,23 @@ enum {
 	WMI_HOST_VDEV_FLAGS_SCAN_MODE_VAP       = 0x00000010,
 };
 
+/* HW mode MLO capability flags
+ * WMI_HOST_MLO_CAP_FLAG_NONE: Do not support MLO for the specific HW mode
+ * WMI_HOST_MLO_CAP_FLAG_NON_STR_IN_DBS: Support STR MLO when DBS for the specific HW mode
+ * WMI_HOST_MLO_CAP_FLAG_STR_IN_DBS: Support Non-STR MLO when DBS for the specific HW mode
+ * WMI_HOST_MLO_CAP_FLAG_NON_STR_IN_SBS: Support STR MLO when SBS for the specific HW mode
+ * WMI_HOST_MLO_CAP_FLAG_STR_IN_SBS: Support Non-STR MLO when SBS for the specific HW mode
+ * WMI_HOST_MLO_CAP_FLAG_STR: Support STR for the specific HW mode
+ * WMI_HOST_MLO_CAP_FLAG_EMLSR: Support eMLSR mode
+ */
+#define WMI_HOST_MLO_CAP_FLAG_NONE		0x0
+#define WMI_HOST_MLO_CAP_FLAG_NON_STR_IN_DBS	0x1
+#define WMI_HOST_MLO_CAP_FLAG_STR_IN_DBS	0x2
+#define WMI_HOST_MLO_CAP_FLAG_NON_STR_IN_SBS	0x4
+#define WMI_HOST_MLO_CAP_FLAG_STR_IN_SBS	0x8
+#define WMI_HOST_MLO_CAP_FLAG_STR		0x10
+#define WMI_HOST_MLO_CAP_FLAG_EMLSR		0x20
+
 /*
  * 0 – index indicated EHT-MCS map for 20Mhz only sta (4 bytes valid)
  * 1 – index for <= 80MHz bw  (only 3 bytes are valid and other is reserved)
@@ -2569,11 +2586,14 @@ struct wmi_soc_mac_phy_hw_mode_caps {
 	u32 num_chainmask_tables;
 } __packed;
 
+#define WMI_HW_MODE_INFO0_CONFIG_TYPE          GENMASK(26, 0)
+#define WMI_HW_MODE_INFO0_MLO_CAP_FLAG         GENMASK(31, 27)
+
 struct wmi_hw_mode_capabilities {
 	__le32 tlv_header;
 	u32 hw_mode_id;
 	u32 phy_id_map;
-	u32 hw_mode_config_type;
+	u32 hw_mode_info0;
 } __packed;
 
 #define WMI_MAX_HECAP_PHY_SIZE                 (3)
@@ -2586,7 +2606,8 @@ struct wmi_hw_mode_capabilities {
 
 struct wmi_mac_phy_capabilities {
 	u32 hw_mode_id;
-	u32 pdev_id;
+	u16 pdev_id;
+	u16 hw_link_id;
 	u32 phy_id;
 	u32 supported_flags;
 	u32 supported_bands;
--- a/drivers/net/wireless/ath/ath12k/hw.c
+++ b/drivers/net/wireless/ath/ath12k/hw.c
@@ -1016,6 +1016,8 @@ static const struct ath12k_hw_params ath
 		.credit_flow = false,
 		.wakeup_mhi = false,
 		.alloc_cacheable_memory = true,
+		.max_mlo_peer = ATH12K_MAX_MLO_PEER,
+		.num_local_link = 1,
 	},
 	{
 		.name = "wcn7850 hw2.0",
@@ -1082,6 +1084,8 @@ static const struct ath12k_hw_params ath
 		.credit_flow = false,
 		.wakeup_mhi = false,
 		.alloc_cacheable_memory = false,
+		.max_mlo_peer = 32,
+		.num_local_link = 2,
 	},
 	{
 		.name = "qcn9274 hw2.0",
@@ -1148,6 +1152,8 @@ static const struct ath12k_hw_params ath
 		.credit_flow = false,
 		.wakeup_mhi = false,
 		.alloc_cacheable_memory = true,
+		.max_mlo_peer = ATH12K_MAX_MLO_PEER,
+		.num_local_link = 1,
 	},
 };
 
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -203,6 +203,8 @@ struct ath12k_hw_params {
 	bool credit_flow;
 	bool wakeup_mhi;
 	bool alloc_cacheable_memory;
+	u16 max_mlo_peer;
+	u8 num_local_link;
 };
 
 /* BRINGUP: move to dp.h */
