From be869b2a4674c8e3e4d3bcade7354317c030c0b9 Mon Sep 17 00:00:00 2001
From: Sriram R <srirrama@codeaurora.org>
Date: Sat, 17 Oct 2020 15:44:18 +0530
Subject: [PATCH] sigma_dut: Add support for hostapd global ctrl iface

Add a cli option to support adding hostapd config files using
global ctrl interface. This is added to support colocated AP
in multiple radio. multiple radio configs are added using
hostapd_cli "raw ADD bss_config" command.

Signed-off-by: Sriram R <srirrama@codeaurora.org>
---
 ap.c        | 112 ++++++++++++++++++++++++++++++++++++++++++++++++++++--------
 sigma_dut.c |   7 +++-
 sigma_dut.h |   1 +
 3 files changed, 105 insertions(+), 15 deletions(-)

--- a/ap.c
+++ b/ap.c
@@ -8408,6 +8408,46 @@ static int default_muedca_values(struct
 	return 0;
 }
 
+static int add_hapd_ctrl_iface(struct sigma_dut *dut, const char *ifname, const char *sigma_conf)
+{
+	char buf[500];
+	DIR *dir;
+	struct dirent *entry;
+	char path[100], if_path[100];
+
+	dir = opendir("/sys/kernel/debug/ieee80211");
+	if(!dir) {
+		sigma_dut_print(dut, DUT_MSG_ERROR, "failed to add bss config to hostapd");
+		return -1;
+	}
+
+	while ((entry = readdir(dir))) {
+		if (strcmp(entry->d_name, ".") == 0 ||
+		    strcmp(entry->d_name, "..") == 0)
+			continue;
+
+		snprintf(path, sizeof(path) - 1, "%s/%s",
+			 "/sys/kernel/debug/ieee80211", entry->d_name);
+		snprintf(if_path, sizeof(if_path) -1, "%s/%s%s", path, "netdev:",
+			 ifname);
+
+		if (!fopen(if_path, "r"))
+			continue;
+
+		snprintf(buf, sizeof(buf), "-i sigma_global raw ADD bss_config=%s:%s/%s\n",
+			 entry->d_name, dut->sigma_tmpdir, sigma_conf);
+
+		if (run_hostapd_cli(dut, buf) != 0) {
+			closedir(dir);
+			return -1;
+		}
+		break;
+	}
+
+	closedir(dir);
+	return 0;
+}
+
 enum sigma_cmd_result cmd_ap_config_commit(struct sigma_dut *dut,
 					   struct sigma_conn *conn,
 					   struct sigma_cmd *cmd)
@@ -9744,6 +9784,50 @@ skip_key_mgmt:
 			 dut->hostapd_entropy_log ? dut->hostapd_entropy_log :
 			 "",
 			 dut->sigma_tmpdir);
+	} else if (dut->hapd_global_ctrl) {
+		snprintf(buf, sizeof(buf), "hostapd -B -g %s/sigma_global &", sigma_hapd_ctrl);
+		if (system(buf) != 0) {
+			send_resp(dut, conn, SIGMA_ERROR,
+				  "errorCode,Failed to start hostapd using global ctrl");
+			return 0;
+		}
+
+		/* allow some time for hostapd to start */
+		usleep(500000);
+
+		snprintf(buf, sizeof(buf), "ifconfig %s down", ifname);
+		if (system(buf) != 0) {
+			sigma_dut_print(dut, DUT_MSG_INFO,
+					"Failed to run '%s'", buf);
+		}
+
+		if (dut->ap_is_dual && dut->dual_ap_ifname) {
+			snprintf(buf, sizeof(buf), "ifconfig %s down", dut->dual_ap_ifname);
+			if (system(buf) != 0) {
+				sigma_dut_print(dut, DUT_MSG_INFO,
+						"Failed to run '%s'", buf);
+			}
+
+			if (add_hapd_ctrl_iface(dut, ifname, "sigma_dut-ap_0.conf")) {
+				send_resp(dut, conn, SIGMA_ERROR,
+					  "errorCode,Failed to add hapd iface");
+				return 0;
+			}
+
+			if (add_hapd_ctrl_iface(dut, dut->dual_ap_ifname, "sigma_dut-ap.conf")) {
+				send_resp(dut, conn, SIGMA_ERROR,
+					  "errorCode,Failed to add second hapd iface");
+				return 0;
+			}
+		} else {
+			if (add_hapd_ctrl_iface(dut, ifname, "sigma_dut-ap.conf")) {
+				send_resp(dut, conn, SIGMA_ERROR,
+					  "errorCode,Failed to add hapd iface");
+				return 0;
+			}
+		}
+
+		goto hapd_started;
 	} else {
 		/*
 		 * It looks like a monitor interface can cause some issues for
@@ -9789,6 +9873,8 @@ skip_key_mgmt:
 
 	/* allow some time for hostapd to start before returning success */
 	usleep(500000);
+
+hapd_started:
 	if (run_hostapd_cli(dut, "ping") != 0) {
 		send_resp(dut, conn, SIGMA_ERROR,
 			  "errorCode,Failed to talk to hostapd");
--- a/sigma_dut.c
+++ b/sigma_dut.c
@@ -1050,7 +1050,7 @@ int main(int argc, char *argv[])
 
 	for (;;) {
 		c = getopt(argc, argv,
-			   "aAb:Bc:C:dDE:e:fF:gGhH:j:J:i:Ik:K:l:L:m:M:nN:o:O:p:P:qr:R:s:S:tT:uU:v:VWw:x:y:z:Z:2345:6:7");
+			   "aAb:Bc:C:dDE:e:fF:gGhH:j:J:i:Ik:K:l:L:m:M:nN:o:O:p:P:qQr:R:s:S:tT:uU:v:VWw:x:y:z:Z:2345:6:7");
 		if (c < 0)
 			break;
 		switch (c) {
@@ -1124,6 +1124,11 @@ int main(int argc, char *argv[])
 		case 'q':
 			sigma_dut.debug_level++;
 			break;
+		case 'Q':
+			sigma_dut.hapd_global_ctrl = 1;
+			if (sigma_hapd_ctrl == NULL)
+				sigma_hapd_ctrl = SIGMA_TMPDIR;
+			break;
 		case 'r':
 			if (strcmp(optarg, "HT40") == 0) {
 				sigma_dut.default_11na_ap_chwidth = AP_40;
