From 8ca602964a46846ac942c7f5e7eeb84fceb5c9f3 Mon Sep 17 00:00:00 2001
From: Balamurugan S <quic_bselvara@quicinc.com>
Date: Thu, 25 May 2023 22:54:24 +0530
Subject: [PATCH] wifi: ath12k: Rx data path optimizations

1) Optimized ath12k_dp_rx_h_fetch_info(). Multiple de reference were made
to fetch descriptor fields. This has been optimized to read the desc info
field once and operate on the same to avoid cache miss.

2) Introduced unlikely condition check in ath12k_dp_rx_check_fast_rx() for
branch optimizations.

3) Introduced prefetch logic while processing msdu's in
ath12k_dp_rx_process_received_packets()

With all the above changes UDP uplink max throughput could reach
up to 6800Mbps for ipq5322.

Signed-off-by: Balamurugan S <quic_bselvara@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_rx.c | 168 +++++++++---------------
 drivers/net/wireless/ath/ath12k/dp_rx.h |  12 ++
 drivers/net/wireless/ath/ath12k/hal.c   |  57 ++++++++
 drivers/net/wireless/ath/ath12k/hal.h   |   7 +
 4 files changed, 139 insertions(+), 105 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -96,18 +96,6 @@ static bool ath12k_dp_rx_h_msdu_done(str
 	return ab->hw_params->hal_ops->dp_rx_h_msdu_done(desc);
 }
 
-static bool ath12k_dp_rx_h_l4_cksum_fail(struct ath12k_base *ab,
-					 struct hal_rx_desc *desc)
-{
-	return ab->hw_params->hal_ops->dp_rx_h_l4_cksum_fail(desc);
-}
-
-static bool ath12k_dp_rx_h_ip_cksum_fail(struct ath12k_base *ab,
-					 struct hal_rx_desc *desc)
-{
-	return ab->hw_params->hal_ops->dp_rx_h_ip_cksum_fail(desc);
-}
-
 static bool ath12k_dp_rx_h_is_decrypted(struct ath12k_base *ab,
 					struct hal_rx_desc *desc)
 {
@@ -126,42 +114,6 @@ static u16 ath12k_dp_rx_h_msdu_len(struc
 	return ab->hw_params->hal_ops->rx_desc_get_msdu_len(desc);
 }
 
-static u8 ath12k_dp_rx_h_sgi(struct ath12k_base *ab,
-			     struct hal_rx_desc *desc)
-{
-	return ab->hw_params->hal_ops->rx_desc_get_msdu_sgi(desc);
-}
-
-static u8 ath12k_dp_rx_h_rate_mcs(struct ath12k_base *ab,
-				  struct hal_rx_desc *desc)
-{
-	return ab->hw_params->hal_ops->rx_desc_get_msdu_rate_mcs(desc);
-}
-
-static u8 ath12k_dp_rx_h_rx_bw(struct ath12k_base *ab,
-			       struct hal_rx_desc *desc)
-{
-	return ab->hw_params->hal_ops->rx_desc_get_msdu_rx_bw(desc);
-}
-
-static u32 ath12k_dp_rx_h_freq(struct ath12k_base *ab,
-			       struct hal_rx_desc *desc)
-{
-	return ab->hw_params->hal_ops->rx_desc_get_msdu_freq(desc);
-}
-
-static u8 ath12k_dp_rx_h_pkt_type(struct ath12k_base *ab,
-				  struct hal_rx_desc *desc)
-{
-	return ab->hw_params->hal_ops->rx_desc_get_msdu_pkt_type(desc);
-}
-
-static u8 ath12k_dp_rx_h_nss(struct ath12k_base *ab,
-			     struct hal_rx_desc *desc)
-{
-	return hweight8(ab->hw_params->hal_ops->rx_desc_get_msdu_nss(desc));
-}
-
 static u8 ath12k_dp_rx_h_tid(struct ath12k_base *ab,
 			     struct hal_rx_desc *desc)
 {
@@ -206,12 +158,6 @@ static void ath12k_dp_rxdesc_set_msdu_le
 	ab->hw_params->hal_ops->rx_desc_set_msdu_len(desc, len);
 }
 
-static bool ath12k_dp_rx_h_is_mcbc(struct ath12k_base *ab,
-				   struct hal_rx_desc *desc)
-{
-	return (ath12k_dp_rx_h_first_msdu(ab, desc) &&
-	        ab->hw_params->hal_ops->rx_desc_is_mcbc(desc));
-}
 
 static bool ath12k_dp_rxdesc_mac_addr2_valid(struct ath12k_base *ab,
 					     struct hal_rx_desc *desc)
@@ -2246,7 +2192,8 @@ void ath12k_dp_htt_htc_t2h_msg_handler(s
 static int ath12k_dp_rx_msdu_coalesce(struct ath12k *ar,
 				      struct sk_buff_head *msdu_list,
 				      struct sk_buff *first, struct sk_buff *last,
-				      u8 l3pad_bytes, int msdu_len)
+				      u8 l3pad_bytes, int msdu_len,
+				      struct ath12k_dp_rx_info *rx_info)
 {
 	struct ath12k_base *ab = ar->ab;
 	struct sk_buff *skb;
@@ -2270,8 +2217,9 @@ static int ath12k_dp_rx_msdu_coalesce(st
 	}
 
 	ldesc = (struct hal_rx_desc *)last->data;
-	rxcb->is_first_msdu = ath12k_dp_rx_h_first_msdu(ab, ldesc);
-	rxcb->is_last_msdu = ath12k_dp_rx_h_last_msdu(ab, ldesc);
+	ab->hw_params->hal_ops->rx_desc_get_first_last_msdu(ldesc, rx_info);
+	rxcb->is_first_msdu = rx_info->is_first_msdu;
+	rxcb->is_last_msdu = rx_info->is_last_msdu;
 
 	/* MSDU spans over multiple buffers because the length of the MSDU
 	 * exceeds DP_RX_BUFFER_SIZE - HAL_RX_DESC_SIZE. So assume the data
@@ -2323,6 +2271,13 @@ static int ath12k_dp_rx_msdu_coalesce(st
 		rem_len -= buf_len;
 		if (!rxcb->is_continuation)
 			break;
+
+		skb = msdu_list->next;
+		if (likely(skb)) {
+			prefetch(skb);
+			prefetch(skb->data + 64);
+			prefetch(skb->data + 128);
+		}
 	}
 
 	return 0;
@@ -2346,14 +2301,13 @@ static struct sk_buff *ath12k_dp_rx_get_
 	return NULL;
 }
 
-static void ath12k_dp_rx_h_csum_offload(struct ath12k *ar, struct sk_buff *msdu)
+static void ath12k_dp_rx_h_csum_offload(struct ath12k *ar, struct sk_buff *msdu,
+					struct ath12k_dp_rx_info *rx_info)
 {
-	struct ath12k_skb_rxcb *rxcb = ATH12K_SKB_RXCB(msdu);
-	struct ath12k_base *ab = ar->ab;
 	bool ip_csum_fail, l4_csum_fail;
 
-	ip_csum_fail = ath12k_dp_rx_h_ip_cksum_fail(ab, rxcb->rx_desc);
-	l4_csum_fail = ath12k_dp_rx_h_l4_cksum_fail(ab, rxcb->rx_desc);
+	ip_csum_fail = rx_info->ip_csum_fail;
+	l4_csum_fail = rx_info->l4_csum_fail;
 
 	msdu->ip_summed = (ip_csum_fail || l4_csum_fail) ?
 			  CHECKSUM_NONE : CHECKSUM_UNNECESSARY;
@@ -2733,31 +2687,35 @@ ath12k_dp_rx_h_find_peer(struct ath12k_b
 static bool ath12k_dp_rx_check_fast_rx(struct ath12k *ar,
                                        struct sk_buff *msdu,
                                        struct hal_rx_desc *rx_desc,
-                                       struct ath12k_peer *peer)
+                                       struct ath12k_peer *peer,
+				       struct ath12k_dp_rx_info *rx_info)
 {
 	struct ethhdr *ehdr;
 	struct ath12k_peer *f_peer;
 	struct ath12k_skb_rxcb *rxcb;
 	u8 decap;
+	bool ip_is_valid;
 
 	lockdep_assert_held(&ar->ab->base_lock);
 
-	decap = ath12k_dp_rx_h_decap_type(ar->ab, rx_desc);
+	decap = rx_info->decap_type;
+	ip_is_valid = rx_info->ip_is_valid;
+
 	rxcb = ATH12K_SKB_RXCB(msdu);
 
-	if (!ar->ab->stats_disable ||
+	if (unlikely(!ar->ab->stats_disable ||
 		decap != DP_RX_DECAP_TYPE_ETHERNET2_DIX ||
-		peer->vif->type != NL80211_IFTYPE_AP)
+		peer->vif->type != NL80211_IFTYPE_AP))
 		return false;
 
 	/* mcbc packets go through mac80211 for PN validation */
-	if (rxcb->is_mcbc)
+	if (unlikely(rxcb->is_mcbc))
 		return false;
 
-	if (!peer->is_authorized)
+	if (unlikely(!peer->is_authorized))
 		return false;
 
-	if (!ath12k_dp_rx_h_msdu_end_ip_valid(ar->ab, rx_desc))
+	if (unlikely(!ip_is_valid))
 		return false;
 
 	/* fast rx is supported only on ethernet decap, so
@@ -2797,22 +2755,21 @@ static void ath12k_dp_rx_h_mpdu(struct a
 	struct ieee80211_hdr *hdr;
 	struct ath12k_peer *peer;
 	struct ieee80211_rx_status *rx_status = rx_info->rx_status;
-	struct ath12k_dp_rx_tid *rx_tid;
 	u32 err_bitmap;
+	struct ath12k_dp_rx_tid *rx_tid;
 	u8 tid;
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
 	int vp;
 #endif
 	struct wireless_dev *wdev = NULL;
 
-	tid = ath12k_dp_rx_h_tid(ab, rx_desc);
 	/* PN for multicast packets will be checked in mac80211 */
 	rxcb = ATH12K_SKB_RXCB(msdu);
-	fill_crypto_hdr = ath12k_dp_rx_h_is_mcbc(ar->ab, rx_desc);
+	fill_crypto_hdr = rx_info->is_mcbc;
 	rxcb->is_mcbc = fill_crypto_hdr;
 
 	if (rxcb->is_mcbc)
-		rxcb->peer_id = ath12k_dp_rx_h_peer_id(ar->ab, rx_desc);
+		rxcb->peer_id = rx_info->peer_id;
 
 	spin_lock_bh(&ar->ab->base_lock);
 	peer = ath12k_dp_rx_h_find_peer(ar->ab, msdu, rx_info);
@@ -2822,18 +2779,14 @@ static void ath12k_dp_rx_h_mpdu(struct a
 		 * pkts with crypto error are not expected to arrive in this
 		 * path, so its safe to skip checking errors here */
 		if (*fast_rx &&
-		    ath12k_dp_rx_check_fast_rx(ar, msdu, rx_desc, peer)) {
-			rx_tid = &peer->rx_tid[tid];
-			ar->wmm_stats.rx_type =
-				ath12k_tid_to_ac(rx_tid->tid > ATH12K_DSCP_PRIORITY ? 0: rx_tid->tid);
-			ar->wmm_stats.total_wmm_rx_pkts[ar->wmm_stats.rx_type]++;
+		    ath12k_dp_rx_check_fast_rx(ar, msdu, rx_desc, peer, rx_info)) {
 			wdev = ieee80211_vif_to_wdev(peer->vif);
 		        if (wdev) {
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
 				vp = peer->vif->ppe_vp_num;
 #endif
 				spin_unlock_bh(&ar->ab->base_lock);
-				ath12k_dp_rx_h_csum_offload(ar, msdu);
+				ath12k_dp_rx_h_csum_offload(ar, msdu, rx_info);
 #ifdef CPTCFG_ATH12K_BONDED_DS_SUPPORT
 				if (wdev->bond_netdev)
 					msdu->dev = wdev->bond_netdev;
@@ -2851,6 +2804,13 @@ static void ath12k_dp_rx_h_mpdu(struct a
 				return;
 		        }
 		}
+
+		tid = rx_info->tid;
+		rx_tid = &peer->rx_tid[tid];
+		ar->wmm_stats.rx_type =
+			ath12k_tid_to_ac(rx_tid->tid > ATH12K_DSCP_PRIORITY ? 0: rx_tid->tid);
+		ar->wmm_stats.total_wmm_rx_pkts[ar->wmm_stats.rx_type]++;
+
 		if (rxcb->is_mcbc)
 			enctype = peer->sec_type_grp;
 		else
@@ -2897,7 +2857,7 @@ static void ath12k_dp_rx_h_mpdu(struct a
 					   RX_FLAG_PN_VALIDATED;
 	}
 
-	ath12k_dp_rx_h_csum_offload(ar, msdu);
+	ath12k_dp_rx_h_csum_offload(ar, msdu, rx_info);
 	ath12k_dp_rx_h_undecap(ar, msdu, rx_desc,
 			       enctype, rx_status, is_decrypted);
 
@@ -3005,26 +2965,17 @@ static void ath12k_dp_rx_h_fetch_info(st
 				      struct hal_rx_desc *rx_desc,
 				      struct ath12k_dp_rx_info *rx_info)
 {
-	rx_info->decap_type = ath12k_dp_rx_h_decap_type(ab, rx_desc);
-	rx_info->filled |= BIT_ULL(ATH12K_RX_INFO_DECAP_TYPE);
-
-	rx_info->pkt_type = ath12k_dp_rx_h_pkt_type(ab, rx_desc);
-	rx_info->filled |= BIT_ULL(ATH12K_RX_INFO_PKT_TYPE);
-
-	rx_info->sgi = ath12k_dp_rx_h_sgi(ab, rx_desc);
-	rx_info->filled |= BIT_ULL(ATH12K_RX_INFO_SGI);
+	ab->hw_params->hal_ops->rx_get_desc_info(rx_desc, rx_info);
+	rx_info->filled |= BIT_ULL(ATH12K_RX_INFO_PHY_META_DATA) |
+			   BIT_ULL(ATH12K_RX_INFO_DECAP_TYPE) |
+			   BIT_ULL(ATH12K_RX_INFO_PKT_TYPE) |
+			   BIT_ULL(ATH12K_RX_INFO_SGI) |
+			   BIT_ULL(ATH12K_RX_INFO_RATE_MCS) |
+			   BIT_ULL(ATH12K_RX_INFO_BW) |
+			   BIT_ULL(ATH12K_RX_INFO_NSS);
 
-	rx_info->rate_mcs = ath12k_dp_rx_h_rate_mcs(ab, rx_desc);
-	rx_info->filled |= BIT_ULL(ATH12K_RX_INFO_RATE_MCS);
-
-	rx_info->bw = ath12k_dp_rx_h_rx_bw(ab, rx_desc);
-	rx_info->filled |= BIT_ULL(ATH12K_RX_INFO_BW);
-
-	rx_info->nss = ath12k_dp_rx_h_nss(ab, rx_desc);
-	rx_info->filled |= BIT_ULL(ATH12K_RX_INFO_NSS);
-
-	rx_info->phy_meta_data = ath12k_dp_rx_h_freq(ab, rx_desc);
-	rx_info->filled |= BIT_ULL(ATH12K_RX_INFO_PHY_META_DATA);
+	if (ab->stats_disable)
+		return;
 
 	if (ath12k_dp_rxdesc_mac_addr2_valid(ab, rx_desc)) {
 		ether_addr_copy(rx_info->addr2,
@@ -3247,7 +3198,8 @@ static int ath12k_dp_rx_process_msdu(str
 
 	rx_desc = (struct hal_rx_desc *)msdu->data;
 	lrx_desc = (struct hal_rx_desc *)last_buf->data;
-	if (!ath12k_dp_rx_h_msdu_done(ab, lrx_desc)) {
+	ab->hw_params->hal_ops->rx_get_desc_msdulen_l3pad(lrx_desc, rx_info);
+	if (!rx_info->msdu_done) {
 		ath12k_warn(ab, "msdu_done bit in msdu_end is not set\n");
 		ret = -EIO;
 		goto free_out;
@@ -3255,8 +3207,8 @@ static int ath12k_dp_rx_process_msdu(str
 
 	rxcb = ATH12K_SKB_RXCB(msdu);
 	rxcb->rx_desc = rx_desc;
-	msdu_len = ath12k_dp_rx_h_msdu_len(ab, lrx_desc);
-	l3_pad_bytes = ath12k_dp_rx_h_l3pad(ab, lrx_desc);
+	msdu_len = rx_info->msdu_len;
+	l3_pad_bytes = rx_info->l3_pad_bytes;
 
 	if (rxcb->is_frag) {
 		skb_pull(msdu, hal_rx_desc_sz);
@@ -3273,7 +3225,8 @@ static int ath12k_dp_rx_process_msdu(str
 	} else {
 		ret = ath12k_dp_rx_msdu_coalesce(ar, msdu_list,
 						 msdu, last_buf,
-						 l3_pad_bytes, msdu_len);
+						 l3_pad_bytes, msdu_len,
+						 rx_info);
 		if (ret) {
 			ath12k_warn(ab,
 				    "failed to coalesce msdu rx buffer%d\n", ret);
@@ -3316,6 +3269,7 @@ static void ath12k_dp_rx_process_receive
 	u8 mac_id, hw_link_id;
 	int ret;
 	bool fast_rx;
+	struct sk_buff *skb;
 
 	if (skb_queue_empty(msdu_list))
 		return;
@@ -3326,6 +3280,12 @@ static void ath12k_dp_rx_process_receive
 	rcu_read_lock();
 
 	while ((msdu = __skb_dequeue(msdu_list))) {
+		skb = msdu_list->next;
+		if (likely(skb)) {
+			prefetch(skb);
+			prefetch(skb->data + 64);
+			prefetch(skb->data + 128);
+		}
 		rxcb = ATH12K_SKB_RXCB(msdu);
 		/* Enable fast rx by default, the value will cahnge based on peer cap
                 * and packet type */
@@ -3352,7 +3312,7 @@ static void ath12k_dp_rx_process_receive
 			continue;
 		}
 
-		if (test_bit(ATH12K_CAC_RUNNING, &ar->dev_flags)) {
+		if (unlikely(test_bit(ATH12K_CAC_RUNNING, &ar->dev_flags))) {
 			dev_kfree_skb_any(msdu);
 			continue;
 		}
--- a/drivers/net/wireless/ath/ath12k/dp_rx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.h
@@ -130,6 +130,18 @@ struct ath12k_dp_rx_info {
 	u8 nss;
 	u32 phy_meta_data;
 	u8 addr2[ETH_ALEN];
+	bool ip_csum_fail;
+	bool l4_csum_fail;
+	u8 ip_is_valid;
+	u8 decap;
+	u16 peer_id;
+	bool is_mcbc;
+	u8 l3_pad_bytes;
+	u16 msdu_len;
+	u8 tid;
+	bool msdu_done;
+	bool is_first_msdu;
+	bool is_last_msdu;
 	struct ieee80211_rx_status *rx_status;
 };
 
--- a/drivers/net/wireless/ath/ath12k/hal.c
+++ b/drivers/net/wireless/ath/ath12k/hal.c
@@ -10,6 +10,7 @@
 #include "debug.h"
 #include "hal_desc.h"
 #include "hif.h"
+#include "dp_rx.h"
 
 static const struct hal_srng_config hw_srng_config_template[] = {
 	/* TODO: max_rings can populated by querying HW capabilities */
@@ -677,6 +678,59 @@ static u32 ath12k_hw_qcn9274_dp_rx_h_mpd
 	return errmap;
 }
 
+static void ath12k_hw_qcn9274_get_rx_first_last_msdu(struct hal_rx_desc *desc,
+						     struct ath12k_dp_rx_info *rx_info)
+{
+	rx_info->is_first_msdu = !!le16_get_bits(desc->u.qcn9274.msdu_end.info5,
+						 RX_MSDU_END_INFO5_FIRST_MSDU);
+	rx_info->is_last_msdu = !!le16_get_bits(desc->u.qcn9274.msdu_end.info5,
+						RX_MSDU_END_INFO5_LAST_MSDU);
+}
+
+static void ath12k_hw_qcn9274_get_rx_msdulen_l3pad(struct hal_rx_desc *desc,
+						   struct ath12k_dp_rx_info *rx_info)
+{
+
+	rx_info->msdu_done = !!le32_get_bits(desc->u.qcn9274.msdu_end.info14,
+					     RX_MSDU_END_INFO14_MSDU_DONE);
+	rx_info->msdu_len = le32_get_bits(desc->u.qcn9274.msdu_end.info10,
+					  RX_MSDU_END_INFO10_MSDU_LENGTH);
+	rx_info->l3_pad_bytes = le16_get_bits(desc->u.qcn9274.msdu_end.info5,
+					      RX_MSDU_END_INFO5_L3_HDR_PADDING);
+}
+
+static void ath12k_hw_qcn9274_get_rx_desc_info(struct hal_rx_desc *desc,
+					       struct ath12k_dp_rx_info *rx_info)
+{
+	__le32 info12 = desc->u.qcn9274.msdu_end.info12;
+	__le32 info13 = desc->u.qcn9274.msdu_end.info13;
+	__le32 info11 = desc->u.qcn9274.msdu_end.info11;
+
+	rx_info->pkt_type = le32_get_bits(info12, RX_MSDU_END_INFO12_PKT_TYPE);
+	rx_info->sgi = le32_get_bits(info12, RX_MSDU_END_INFO12_SGI);
+	rx_info->rate_mcs = le32_get_bits(info12, RX_MSDU_END_INFO12_RATE_MCS);
+	rx_info->bw = le32_get_bits(info12, RX_MSDU_END_INFO12_RECV_BW);
+	rx_info->nss = hweight8(le32_get_bits(info12, RX_MSDU_END_INFO12_MIMO_SS_BITMAP));
+	rx_info->phy_meta_data = __le32_to_cpu(desc->u.qcn9274.msdu_end.phy_meta_data);
+
+	rx_info->ip_csum_fail = !!le32_get_bits(info13, RX_MSDU_END_INFO13_IP_CKSUM_FAIL);
+	rx_info->l4_csum_fail = !!le32_get_bits(info13, RX_MSDU_END_INFO13_TCP_UDP_CKSUM_FAIL);
+	rx_info->ip_is_valid = (le32_get_bits(__le32_to_cpu(info11), RX_MSDU_END_INFO11_IPV4) ||
+			       le32_get_bits(__le32_to_cpu(info11),  RX_MSDU_END_INFO11_IPV6));
+
+	rx_info->decap_type = le32_get_bits(info11, RX_MSDU_END_INFO11_DECAP_FORMAT);
+
+	rx_info->is_mcbc = ((!!le16_get_bits(desc->u.qcn9274.msdu_end.info5,
+			    RX_MSDU_END_INFO5_FIRST_MSDU)) &&
+			    (__le32_to_cpu(desc->u.qcn9274.mpdu_start.info6) &
+			    RX_MPDU_START_INFO6_MCAST_BCAST));
+
+	rx_info->peer_id = le16_get_bits(desc->u.qcn9274.mpdu_start.sw_peer_id,
+					 RX_MPDU_START_SW_PEER_ID_PEER);
+	rx_info->tid = le16_get_bits(desc->u.qcn9274.msdu_end.info5,
+				     RX_MSDU_END_INFO5_TID);
+}
+
 const struct hal_ops hal_qcn9274_ops = {
 	.rx_desc_get_first_msdu = ath12k_hw_qcn9274_rx_desc_get_first_msdu,
 	.rx_desc_get_last_msdu = ath12k_hw_qcn9274_rx_desc_get_last_msdu,
@@ -720,6 +774,9 @@ const struct hal_ops hal_qcn9274_ops = {
 	.rxdma_ring_wmask_rx_mpdu_start = ath12k_hal_rx_mpdu_start_wmask_get,
 	.rxdma_ring_wmask_rx_msdu_end = ath12k_hal_rx_msdu_end_wmask_get,
 	.rx_desc_get_msdu_src_link_id = ath12k_hw_qcn9274_rx_desc_get_msdu_src_link,
+	.rx_get_desc_info = ath12k_hw_qcn9274_get_rx_desc_info,
+	.rx_get_desc_msdulen_l3pad = ath12k_hw_qcn9274_get_rx_msdulen_l3pad,
+	.rx_desc_get_first_last_msdu = ath12k_hw_qcn9274_get_rx_first_last_msdu,
 };
 
 static bool ath12k_hw_wcn7850_rx_desc_get_first_msdu(struct hal_rx_desc *desc)
--- a/drivers/net/wireless/ath/ath12k/hal.h
+++ b/drivers/net/wireless/ath/ath12k/hal.h
@@ -12,6 +12,7 @@
 #include "core.h"
 
 struct ath12k_base;
+struct ath12k_dp_rx_info;
 #define HAL_CE_REMAP_REG_BASE	(ab->ce_remap_base_addr)
 
 #define HAL_LINK_DESC_SIZE			(32 << 2)
@@ -1146,6 +1147,12 @@ struct hal_ops {
 	u16 (*rxdma_ring_wmask_rx_mpdu_start)(void);
 	u32 (*rxdma_ring_wmask_rx_msdu_end)(void);
 	u8 (*rx_desc_get_msdu_src_link_id)(struct hal_rx_desc *desc);
+	void (*rx_get_desc_info)(struct hal_rx_desc *desc,
+			         struct ath12k_dp_rx_info *info);
+	void (*rx_get_desc_msdulen_l3pad)(struct hal_rx_desc *desc,
+					  struct ath12k_dp_rx_info *info);
+	void (*rx_desc_get_first_last_msdu)(struct hal_rx_desc *desc,
+					    struct ath12k_dp_rx_info *info);
 };
 
 extern const struct hal_ops hal_qcn9274_ops;
