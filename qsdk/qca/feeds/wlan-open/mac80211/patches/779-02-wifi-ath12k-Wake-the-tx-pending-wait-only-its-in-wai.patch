From 123e25ff6c0cf6cca9d87088bcb9dc959bf57eb4 Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Sat, 20 May 2023 14:28:18 +0530
Subject: [PATCH 2/2] wifi: ath12k: Wake the tx pending wait only its in wait
 state

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h  |  1 +
 drivers/net/wireless/ath/ath12k/dp.c    |  1 +
 drivers/net/wireless/ath/ath12k/dp_tx.c | 27 ++++++++++++++-----------
 drivers/net/wireless/ath/ath12k/mac.c   |  7 ++++++-
 drivers/net/wireless/ath/ath12k/wmi.c   |  6 ++++--
 5 files changed, 27 insertions(+), 15 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -934,6 +934,7 @@ struct ath12k {
 	struct idr txmgmt_idr;
 	/* protects txmgmt_idr data */
 	spinlock_t txmgmt_idr_lock;
+	atomic_t flush_request;
 	atomic_t num_pending_mgmt_tx;
 	wait_queue_head_t tx_empty_waitq;
 
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -1175,6 +1175,7 @@ void ath12k_dp_pdev_pre_alloc(struct ath
 		dp = &ar->dp;
 		dp->mac_id = i;
 		atomic_set(&dp->num_tx_pending, 0);
+		atomic_set(&ar->flush_request, 0);
 
 		/*TODO Add any RXDMA setup required per pdev*/
 	}
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -677,12 +677,21 @@ fail_remove_tx_buf:
 	return ret;
 }
 
+static inline void ath12k_dp_tx_decrement(struct ath12k *ar)
+{
+	if (atomic_read(&ar->flush_request)) {
+		if (atomic_dec_and_test(&ar->dp.num_tx_pending))
+			wake_up(&ar->tx_empty_waitq);
+	} else {
+		atomic_dec(&ar->dp.num_tx_pending);
+	}
+}
+
 static void ath12k_dp_tx_free_txbuf(struct ath12k_base *ab,
 				    struct sk_buff *msdu, u8 mac_id,
 				    struct dp_tx_ring *tx_ring,
 				    struct sk_buff *skb_ext_desc)
 {
-	struct ath12k *ar;
 	struct ath12k_skb_cb *skb_cb;
 
 	skb_cb = ATH12K_SKB_CB(msdu);
@@ -698,9 +707,7 @@ static void ath12k_dp_tx_free_txbuf(stru
 
 	dev_kfree_skb_any(msdu);
 
-	ar = ab->pdevs[mac_id].ar;
-	if (atomic_dec_and_test(&ar->dp.num_tx_pending))
-		wake_up(&ar->tx_empty_waitq);
+	ath12k_dp_tx_decrement(ab->pdevs[mac_id].ar);
 }
 
 static void
@@ -725,8 +732,7 @@ ath12k_dp_tx_htt_tx_complete_buf(struct
 	ar = ab->pdevs[mac_id].ar;
 	ab->soc_stats.tx_completed[tx_ring->tcl_data_ring_id]++;
 
-	if (atomic_dec_and_test(&ar->dp.num_tx_pending))
-		wake_up(&ar->tx_empty_waitq);
+	ath12k_dp_tx_decrement(ar);
 
 	flags = skb_cb->flags;
 	drop_disable = (ab->stats_disable && !(flags & ATH12K_SKB_TX_STATUS));
@@ -1390,8 +1396,8 @@ int ath12k_dp_tx_completion_handler(stru
 			continue;
 		}
 		ar = ab->pdevs[mac_id].ar;
-		if (atomic_dec_and_test(&ar->dp.num_tx_pending))
-			wake_up(&ar->tx_empty_waitq);
+
+		ath12k_dp_tx_decrement(ar);
 
 		if (unlikely(WARN_ON_ONCE(buf_rel_source != HAL_WBM_REL_SRC_MODULE_TQM))) {
 			/* Must not happen */
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -8442,7 +8442,7 @@ static void ath12k_mgmt_over_wmi_tx_drop
 	if (num_mgmt < 0)
         	WARN_ON_ONCE(1);
 
-	if (!num_mgmt)
+	if (atomic_read(&ar->flush_request) && !num_mgmt)
         	wake_up(&ar->tx_empty_waitq);
 }
 
@@ -9644,6 +9644,7 @@ static void ath12k_mac_radio_stop(struct
 	synchronize_rcu();
 
 	atomic_set(&ar->num_pending_mgmt_tx, 0);
+	atomic_set(&ar->flush_request, 0);
 
 	spin_lock_bh(&ar->data_lock);
         ar->awgn_intf_handling_in_prog = false;
@@ -13026,10 +13027,12 @@ static void ath12k_mac_flush(struct ath1
 
 	lockdep_assert_held(&ar->ah->conf_mutex);
 
+	atomic_inc(&ar->flush_request);
 	time_left = wait_event_timeout(ar->tx_empty_waitq,
 				       ((atomic_read(&ar->dp.num_tx_pending) == 0) &&
 					(atomic_read(&ar->num_pending_mgmt_tx) == 0)),
 				       ATH12K_FLUSH_TIMEOUT);
+	atomic_dec(&ar->flush_request);
 	if (time_left == 0) {
 		ath12k_warn(ab, "failed to flush transmit queue pending mgmt %d data %d\n",
 			    atomic_read(&ar->num_pending_mgmt_tx),
@@ -13048,7 +13051,9 @@ static void ath12k_mac_op_flush(struct i
 {
 	struct ath12k_hw *ah = hw->priv;
 	struct ath12k *ar;
+	struct ath12k_vif *ahvif;
 	int i;
+	u8 link_id;
 
 	if (drop)
 		return;
@@ -13065,16 +13070,23 @@ static void ath12k_mac_op_flush(struct i
 			ar++;
 		}
 	} else {
-		/* TODO in case of ML links, flush all link vif */
-		ar = ath12k_get_ar_by_vif(hw, vif, 0);
-		if (!ar) {
-			ath12k_err(NULL,
-				   "unable to determine device for tx flush\n");
-			goto out;
+		ahvif = (void *)vif->drv_priv;
+
+		for_each_set_bit(link_id, &ahvif->links_map, ATH12K_NUM_MAX_LINKS) {
+			if (!ahvif->link[link_id])
+				continue;
+
+			ar = ath12k_get_ar_by_vif(hw, vif, link_id);
+			if (!ar) {
+				ath12k_err(NULL,
+					   "unable to determine device for link_id %d tx flush\n",
+					   link_id);
+				continue;
+			}
+			ath12k_mac_flush(ar);
 		}
-		ath12k_mac_flush(ar);
 	}
-out:
+
 	mutex_unlock(&ah->conf_mutex);
 }
 
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -7209,7 +7209,7 @@ skip_mgmt_stats:
 		WARN_ON_ONCE(1);
 
 
-	if (!num_mgmt)
+	if (atomic_read(&ar->flush_request) && !num_mgmt)
 		wake_up(&ar->tx_empty_waitq);
 
 	return 0;
