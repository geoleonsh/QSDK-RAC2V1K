From 616d8608f25d479bd29a714fa68786d15069342e Mon Sep 17 00:00:00 2001
From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Date: Wed, 2 Mar 2022 22:54:08 -0800
Subject: [PATCH] ath12k: Fix setting msdu_ext_desc in Ethernet and RAW modes

When VAP is configured in Ethernet or RAW mode, the per vdev
bank is configred with VDEV specific encapsulation type.
However, this results in transmit fail for packets received
in other formats than what has been programmed in Bank
registers, for eg, NWIFI/RAW packets in Ethernet mode.
Fix this by overriding bank register config on per packet
basis by setting msdu_ext_desc.

NOTE: This supports Ethernet mode and RAW mode with encryption
offloaded. RAW mode with Software based encryption is not yet
supported.

Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h  |  3 +-
 drivers/net/wireless/ath/ath12k/dp.c    | 40 ++++++++++--------
 drivers/net/wireless/ath/ath12k/dp.h    |  1 +
 drivers/net/wireless/ath/ath12k/dp_tx.c | 56 +++++++++++++------------
 drivers/net/wireless/ath/ath12k/mac.c   |  8 ++--
 5 files changed, 59 insertions(+), 49 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -46,6 +46,8 @@ extern unsigned int ath12k_frame_mode;
 #define ATH12K_RECONFIGURE_TIMEOUT_HZ		(10 * HZ)
 #define ATH12K_RECOVER_START_TIMEOUT_HZ		(20 * HZ)
 
+#define INVALID_CIPHER 0xFFFFFFFF
+
 enum ath12k_supported_bw {
 	ATH12K_BW_20	= 0,
 	ATH12K_BW_40	= 1,
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -320,8 +320,11 @@ void ath12k_dp_tx_get_vdev_bank_config(s
 	 * With SW crypto, mac80211 sets key per packet
 	 */
 	if (arvif->tx_encap_type == HAL_TCL_ENCAP_TYPE_RAW &&
-	    test_bit(ATH12K_FLAG_HW_CRYPTO_DISABLED, &ab->dev_flags))
+	    test_bit(ATH12K_FLAG_HW_CRYPTO_DISABLED, &ab->dev_flags) &&
+	    arvif->key_cipher != INVALID_CIPHER)
 		encrypt_type = ath12k_dp_tx_get_encrypt_type(arvif->key_cipher);
+	else
+		encrypt_type = HAL_ENCRYPT_TYPE_OPEN;
 
 	*bank_config |= u32_encode_bits(arvif->tx_encap_type,
 					HAL_TX_BANK_CONFIG_ENCAP_TYPE) |
@@ -405,6 +408,15 @@ void ath12k_dp_tx_put_bank_profile(struc
 	spin_unlock_bh(&dp->tx_bank_lock);
 }
 
+void ath12k_dp_tx_update_bank_profile(struct ath12k_vif *arvif)
+{
+	struct ath12k_base *ab = arvif->ar->ab;
+	struct ath12k_dp *dp = &ab->dp;
+
+	ath12k_dp_tx_put_bank_profile(dp, arvif->bank_id);
+	arvif->bank_id = ath12k_dp_tx_get_bank_profile(ab, arvif, dp);
+}
+
 static void ath12k_dp_deinit_bank_profiles(struct ath12k_base *ab)
 {
 	struct ath12k_dp *dp = &ab->dp;
--- a/drivers/net/wireless/ath/ath12k/dp.h
+++ b/drivers/net/wireless/ath/ath12k/dp.h
@@ -2021,4 +2021,5 @@ struct ath12k_rx_desc_info *ath12k_dp_ge
 						  u32 cookie);
 struct ath12k_tx_desc_info *ath12k_dp_get_tx_desc(struct ath12k_base *ab,
 						  u32 desc_id);
+void ath12k_dp_tx_update_bank_profile(struct ath12k_vif *arvif);
 #endif
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -114,7 +114,7 @@ static void ath12k_hal_tx_cmd_ext_desc_s
 			       u32_encode_bits(ti->data_len,
 					       HAL_TX_MSDU_EXT_INFO1_BUF_LEN);
 
-	tcl_ext_cmd->info1 =  u32_encode_bits(1, HAL_TX_MSDU_EXT_INFO1_EXTN_OVERRIDE) |
+	tcl_ext_cmd->info1 |=  u32_encode_bits(1, HAL_TX_MSDU_EXT_INFO1_EXTN_OVERRIDE) |
 				u32_encode_bits(ti->encap_type,
 						HAL_TX_MSDU_EXT_INFO1_ENCAP_TYPE) |
 				u32_encode_bits(ti->encrypt_type,
@@ -177,21 +177,6 @@ tcl_ring_sel:
 	ti.bank_id = arvif->bank_id;
 	ti.meta_data_flags = arvif->tcl_metadata;
 
-	if (arvif->tx_encap_type == HAL_TCL_ENCAP_TYPE_RAW &&
-	    test_bit(ATH12K_FLAG_HW_CRYPTO_DISABLED, &ar->ab->dev_flags)) {
-		if (skb_cb->flags & ATH12K_SKB_CIPHER_SET) {
-			ti.encrypt_type =
-				ath12k_dp_tx_get_encrypt_type(skb_cb->cipher);
-
-			if (ieee80211_has_protected(hdr->frame_control))
-				skb_put(skb, IEEE80211_CCMP_MIC_LEN);
-		} else {
-			ti.encrypt_type = HAL_ENCRYPT_TYPE_OPEN;
-		}
-
-		msdu_ext_desc = true;
-	}
-
 	ti.encap_type = ath12k_dp_tx_get_encap_type(arvif, skb);
 	ti.addr_search_flags = arvif->hal_addr_search_flags;
 	ti.search_type = arvif->search_type;
@@ -245,6 +230,34 @@ tcl_ring_sel:
 		goto fail_remove_tx_buf;
 	}
 
+	if ((arvif->tx_encap_type == HAL_TCL_ENCAP_TYPE_ETHERNET &&
+	    !(info->flags & IEEE80211_TX_CTL_HW_80211_ENCAP))) {
+		msdu_ext_desc = true;
+
+		if (skb->protocol == cpu_to_be16(ETH_P_PAE)) {
+			ti.encap_type = HAL_TCL_ENCAP_TYPE_RAW;
+			ti.encrypt_type = HAL_ENCRYPT_TYPE_OPEN;
+		}
+	}
+
+	if (arvif->tx_encap_type == HAL_TCL_ENCAP_TYPE_RAW) {
+		if (skb->protocol == cpu_to_be16(ETH_P_ARP)) {
+			ti.encap_type = HAL_TCL_ENCAP_TYPE_RAW;
+			ti.encrypt_type = HAL_ENCRYPT_TYPE_OPEN;
+			msdu_ext_desc = true;
+		}
+
+		if (skb_cb->flags & ATH12K_SKB_CIPHER_SET) {
+			ti.encrypt_type =
+				ath12k_dp_tx_get_encrypt_type(skb_cb->cipher);
+
+			if (ieee80211_has_protected(hdr->frame_control))
+				skb_put(skb, IEEE80211_CCMP_MIC_LEN);
+		} else {
+			ti.encrypt_type = HAL_ENCRYPT_TYPE_OPEN;
+		}
+	}
+
 	tx_desc->skb = skb;
 	tx_desc->mac_id = ar->pdev_idx;
 	ti.desc_id = tx_desc->desc_id;
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -3261,8 +3261,10 @@ install:
 	if (!wait_for_completion_timeout(&ar->install_key_done, 1 * HZ))
 		return -ETIMEDOUT;
 
-	if (ether_addr_equal(macaddr, arvif->vif->addr))
+	if (ether_addr_equal(macaddr, arvif->vif->addr)) {
 		arvif->key_cipher = key->cipher;
+		ath12k_dp_tx_update_bank_profile(arvif);
+	}
 
 	return ar->install_key_status ? -EINVAL : 0;
 }
@@ -5402,6 +5404,7 @@ static int ath12k_mac_op_add_interface(s
 
 	INIT_LIST_HEAD(&arvif->list);
 
+	arvif->key_cipher = INVALID_CIPHER;
 	/* Should we initialize any worker to handle connection loss indication
 	 * from firmware in sta mode?
 	 */
@@ -5689,6 +5692,7 @@ err_vdev_del:
 
 	ath12k_mac_vif_unref(&ab->dp, vif);
 	ath12k_dp_tx_put_bank_profile(&ab->dp, arvif->bank_id);
+	arvif->key_cipher = INVALID_CIPHER;
 
 	/* Recalc txpower for remaining vdev */
 	ath12k_mac_txpower_recalc(ar);
