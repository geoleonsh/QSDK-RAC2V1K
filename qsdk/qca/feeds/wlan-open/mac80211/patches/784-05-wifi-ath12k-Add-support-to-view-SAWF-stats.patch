From 7885f6a28a283ff166e81b75a07edd17b8a56a13 Mon Sep 17 00:00:00 2001
From: Nagarajan Maran <quic_nmaran@quicinc.com>
Date: Tue, 6 Jun 2023 21:30:04 +0530
Subject: [PATCH] wifi: ath12k: Add support to view SAWF stats

Add support to handle the get stats command via Vendor NL and
send the stats buffer to Userspace via Vendor NL.

Signed-off-by: Nagarajan Maran <quic_nmaran@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/sawf.c   | 224 ++++++++++++++++++
 drivers/net/wireless/ath/ath12k/sawf.h   |   7 +
 drivers/net/wireless/ath/ath12k/vendor.c | 195 +++++++++++++++
 drivers/net/wireless/ath/ath12k/vendor.h | 287 +++++++++++++++++++++++
 4 files changed, 713 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/sawf.c
+++ b/drivers/net/wireless/ath/ath12k/sawf.c
@@ -9,6 +9,7 @@
 #include "sawf.h"
 #include "peer.h"
 #include "debugfs_htt_stats.h"
+#include "vendor.h"
 #include <linux/module.h>
 #include <qca-nss-ecm/ecm_classifier_emesh_public.h>
 
@@ -462,6 +463,7 @@ struct ath12k_base *ath12k_sawf_get_ab_f
 	struct wireless_dev *wdev;
 	struct ieee80211_vif *vif;
 	struct ath12k_base *ab = NULL;
+	struct ath12k *ar = NULL;
 	struct ath12k_peer *peer;
 	struct ath12k_vif *ahvif;
 	struct ath12k_link_vif *arvif;
@@ -492,8 +494,10 @@ struct ath12k_base *ath12k_sawf_get_ab_f
 
 		if (WARN_ON(!arvif))
 			continue;
-
-		ab = arvif->ar->ab;
+		ar = arvif->ar;
+		if (!ar)
+			continue;
+		ab = ar->ab;
 		spin_lock_bh(&ab->base_lock);
 		peer = ath12k_peer_find_by_addr(ab, peer_mac);
 		spin_unlock_bh(&ab->base_lock);
@@ -1509,3 +1513,235 @@ latency_stats_update:
 	}
 	return;
 }
+
+static int ath12k_get_msduq_id(u8 svc_id, struct ath12k_peer *peer, u8 *q_id, u8 *tid)
+{
+	struct ath12k_sawf_ctx *sawf_ctx;
+	struct ath12k_sawf_peer_ctx *peer_ctx = NULL;
+	u8 max_usr_def_q_sawf, def_msduq_max, tid_l, q_id_l;
+
+	sawf_ctx = ath12k_get_sawf_context();
+	if (!sawf_ctx)
+		return -ENODATA;
+
+	max_usr_def_q_sawf = sawf_ctx->max_msduq_per_tid -
+				sawf_ctx->default_msduq_per_tid;
+	def_msduq_max = sawf_ctx->default_msduq_per_tid *
+				ATH12K_SAWF_MAX_TID_SUPPORT;
+
+	peer_ctx = &peer->sawf_ctx_peer;
+	if (!peer_ctx)
+		return -ENODATA;
+
+	/* Find matching tid and q_id with svc_id in the reserved pool*/
+	for (tid_l = 0; tid_l < ATH12K_SAWF_MAX_TID_SUPPORT; tid_l++) {
+		for (q_id_l = 0; q_id_l < max_usr_def_q_sawf; q_id_l++) {
+			if (peer_ctx->msduq_table[tid_l][q_id_l].is_reserved &&
+			    peer_ctx->msduq_table[tid_l][q_id_l].svc_id == svc_id) {
+				ath12k_dbg(NULL, ATH12K_DBG_SAWF,
+					   "tid %u usrdefq %u\n",
+					   tid_l, q_id_l);
+				*tid = tid_l;
+				*q_id = q_id_l;
+				return 0;
+			}
+		}
+	}
+	ath12k_dbg(NULL, ATH12K_DBG_SAWF, "Queue and TID not found for svc_id=%u",
+		   svc_id);
+
+	return -EINVAL;
+}
+
+static void ath12k_copy_tx_stats(struct sawf_tx_stats *src, struct telemetry_sawf_tx_stat *dst)
+{
+	dst->tx_success.num_pkts = src->tx_success.num_pkts;
+	dst->tx_success.bytes = src->tx_success.bytes;
+
+	dst->tx_ingress.num_pkts = src->tx_ingress.num_pkts;
+	dst->tx_ingress.bytes = src->tx_ingress.bytes;
+
+	dst->dropped.fw_rem.num_pkts = src->dropped.fw_rem.num_pkts;
+	dst->dropped.fw_rem.bytes = src->dropped.fw_rem.bytes;
+	dst->dropped.fw_rem_notx = src->dropped.fw_rem_notx;
+	dst->dropped.fw_rem_tx = src->dropped.fw_rem_tx;
+	dst->dropped.age_out = src->dropped.age_out;
+	dst->dropped.fw_reason1 = src->dropped.fw_reason1;
+	dst->dropped.fw_reason2 = src->dropped.fw_reason2;
+	dst->dropped.fw_reason3 = src->dropped.fw_reason3;
+
+	dst->svc_intval_stats.success_cnt = src->svc_intval_stats.success_cnt;
+	dst->svc_intval_stats.failure_cnt = src->svc_intval_stats.failure_cnt;
+
+	dst->burst_size_stats.success_cnt = src->burst_size_stats.success_cnt;
+	dst->burst_size_stats.failure_cnt = src->burst_size_stats.failure_cnt;
+
+	dst->tx_failed = src->tx_failed;
+	dst->queue_depth = src->queue_depth;
+
+	dst->throughput = src->throughput = 0;
+	dst->ingress_rate = src->ingress_rate = 0;
+}
+
+static int ath12k_telemetry_get_txstats(struct telemetry_sawftx_stats *tx_stats,
+					struct ath12k_base *ab,
+					u8 *peer_mac, u8 svc_id)
+{
+	struct ath12k_sawf_stats *sawf_stats;
+	struct sawf_tx_stats *stats;
+	struct telemetry_sawf_tx_stat *tx;
+	struct ath12k_peer *peer = NULL;
+	int ret = 0;
+	u8 sawf_max_user_queues;
+
+	sawf_max_user_queues = sawf_ctx->max_msduq_per_tid - sawf_ctx->default_msduq_per_tid;
+	spin_lock_bh(&ab->base_lock);
+	peer = ath12k_peer_find_by_addr(ab, peer_mac);
+	if (!peer) {
+		ret = -ENOENT;
+		goto end_stats;
+	}
+
+	sawf_stats = &peer->sawf_stats;
+	if(!sawf_stats) {
+		ret = -ENODATA;
+		goto end_stats;
+	}
+
+	if (svc_id == 0) {
+		int tid, q_idx;
+		for (tid = 0; tid < ATH12K_SAWF_MAX_TID_SUPPORT; tid++) {
+			for (q_idx = 0; q_idx < sawf_max_user_queues; q_idx++) {
+				stats = &sawf_stats->tx_stats[tid][q_idx];
+				tx = &tx_stats->tx[tid][q_idx];
+				ath12k_copy_tx_stats(stats, tx);
+			}
+		}
+	} else {
+		u8 q_id = 0, tid = 0;
+		if (ath12k_get_msduq_id(svc_id, peer, &q_id, &tid)) {
+			ret = -EINVAL;
+			goto end_stats;
+		}
+		stats = &sawf_stats->tx_stats[tid][q_id];
+		tx = &tx_stats->tx[0][0];
+		ath12k_copy_tx_stats(stats, tx);
+		tx_stats->tid = tid;
+		tx_stats->msduq = q_id;
+	}
+
+end_stats:
+	spin_unlock_bh(&ab->base_lock);
+	return ret;
+}
+
+static void ath12k_copy_delay_stats(struct sawf_tx_delay_stats *src, struct telemetry_sawf_delay_stat *dst)
+{
+	struct ath12k_delay_hist_stats *dst_hist_stats = &dst->delay_hist;
+	struct ath12k_delay_hist_stats *src_hist_stats = &src->delay_hist;
+	u8 index;
+
+	for (index = 0; index < HIST_BUCKET_MAX; index++)
+		dst_hist_stats->hist.freq[index] = src_hist_stats->hist.freq[index];
+
+	dst_hist_stats->min = src_hist_stats->min;
+	dst_hist_stats->max = src_hist_stats->max;
+	dst_hist_stats->avg = src_hist_stats->avg;
+
+	dst->nwdelay_avg = src->nwdelay_avg = 0;
+	dst->swdelay_avg = src->swdelay_avg = 0;
+	dst->hwdelay_avg = src->hwdelay_avg = 0;
+	dst->delay_bound_success = src->success;
+	dst->delay_bound_failure = src->failure;
+}
+
+static int ath12k_telemetry_get_delaystats(struct telemetry_sawfdelay_stats *delay_stats,
+					   struct ath12k_base *ab,
+					   u8 *peer_mac, u8 svc_id)
+{
+	struct ath12k_sawf_stats *sawf_stats;
+	struct sawf_tx_delay_stats *stats;
+	struct telemetry_sawf_delay_stat *delay;
+	struct ath12k_peer *peer;
+	int ret = 0;
+	u8 sawf_max_user_queues;
+
+	sawf_max_user_queues = sawf_ctx->max_msduq_per_tid - sawf_ctx->default_msduq_per_tid;
+	spin_lock_bh(&ab->base_lock);
+	peer = ath12k_peer_find_by_addr(ab, peer_mac);
+	if (!peer) {
+		ret = -ENOENT;
+		goto end_stats;
+	}
+
+	sawf_stats = &peer->sawf_stats;
+	if(!sawf_stats) {
+		ret = -ENODATA;
+		goto end_stats;
+	}
+
+	if (svc_id == 0) {
+		int tid, q_idx;
+		for (tid = 0; tid < ATH12K_SAWF_MAX_TID_SUPPORT; tid++) {
+			for (q_idx = 0; q_idx < sawf_max_user_queues; q_idx++) {
+				stats = &sawf_stats->tx_delay_stats[tid][q_idx];
+				delay = &delay_stats->delay[tid][q_idx];
+				ath12k_copy_delay_stats(stats, delay);
+			}
+		}
+	} else {
+		u8 q_id, tid;
+
+		if (ath12k_get_msduq_id(svc_id, peer, &q_id, &tid)) {
+			ret = -EINVAL;
+			goto end_stats;
+		}
+
+		stats = &sawf_stats->tx_delay_stats[tid][q_id];
+		delay = &delay_stats->delay[0][0];
+		ath12k_copy_delay_stats(stats, delay);
+		delay_stats->tid = tid;
+		delay_stats->msduq = q_id;
+        }
+
+end_stats:
+        spin_unlock_bh(&ab->base_lock);
+        return ret;
+}
+
+int telemetry_extract_data(struct stats_config *cfg,
+			   struct telemetry_sawftx_stats *tx_stats,
+			   struct telemetry_sawfdelay_stats *delay_stats,
+			   struct ath12k_base *ab)
+{
+	u32 feat = 0;
+	int ret = 0;
+	u8 *mac_addr, svc_id;
+
+	if (!sawf_ctx)
+		return -ENODATA;
+
+	if (cfg->obj != STATS_OBJ_STA)
+		return -EINVAL;
+
+	if (cfg->lvl != STATS_LVL_ADVANCE)
+		return -EINVAL;
+
+	if (cfg->type != STATS_TYPE_DATA)
+		return -EINVAL;
+
+	feat = cfg->feat;
+	svc_id = cfg->serviceid;
+	mac_addr = cfg->mac;
+
+	if (feat & STATS_FEAT_FLG_SAWFDELAY) {
+		ret = ath12k_telemetry_get_delaystats(delay_stats, ab, mac_addr, svc_id);
+		if (ret)
+			return ret;
+	}
+
+	if (feat & STATS_FEAT_FLG_SAWFTX)
+		ret = ath12k_telemetry_get_txstats(tx_stats, ab, mac_addr, svc_id);
+
+	return ret;
+}
--- a/drivers/net/wireless/ath/ath12k/sawf.h
+++ b/drivers/net/wireless/ath/ath12k/sawf.h
@@ -7,6 +7,9 @@
 #define ATH12K_SAWF_H
 
 struct hal_tx_status;
+struct stats_config;
+struct telemetry_sawftx_stats;
+struct telemetry_sawfdelay_stats;
 
 #ifdef CPTCFG_ATH12K_SAWF
 
@@ -547,7 +550,55 @@ struct sawf_tx_stats {
  * @avg: Average frequency
  */
 
+enum stats_if_hist_bucket_index {
+	HIST_BUCKET_0,
+	HIST_BUCKET_1,
+	HIST_BUCKET_2,
+	HIST_BUCKET_3,
+	HIST_BUCKET_4,
+	HIST_BUCKET_5,
+	HIST_BUCKET_6,
+	HIST_BUCKET_7,
+	HIST_BUCKET_8,
+	HIST_BUCKET_9,
+	HIST_BUCKET_10,
+	HIST_BUCKET_11,
+	HIST_BUCKET_12,
+	HIST_BUCKET_MAX,
+};
+
+enum stats_if_delay_bucket_index {
+	DELAY_BUCKET_0,
+	DELAY_BUCKET_1,
+	DELAY_BUCKET_2,
+	DELAY_BUCKET_3,
+	DELAY_BUCKET_4,
+	DELAY_BUCKET_5,
+	DELAY_BUCKET_6,
+	DELAY_BUCKET_7,
+	DELAY_BUCKET_8,
+	DELAY_BUCKET_9,
+	DELAY_BUCKET_10,
+	DELAY_BUCKET_11,
+	DELAY_BUCKET_12,
+	DELAY_BUCKET_MAX,
+};
+
+enum hist_types {
+	HIST_TYPE_SW_ENQEUE_DELAY,
+	HIST_TYPE_HW_COMP_DELAY,
+	HIST_TYPE_REAP_STACK,
+	HIST_TYPE_HW_TX_COMP_DELAY,
+	HIST_TYPE_MAX,
+};
+
+struct hist_bucket {
+	enum hist_types hist_type;
+	u64 freq[HIST_BUCKET_MAX];
+};
+
 struct ath12k_delay_hist_stats {
+	struct hist_bucket hist;
 	int max;
 	int min;
 	int avg;
@@ -794,6 +845,10 @@ int ath12k_htt_sawf_streaming_stats_conf
 					      u32 config_param_3);
 void ath12k_htt_sawf_streaming_stats_ind_handler(struct ath12k_base *ab,
 						 struct sk_buff *skb);
+int telemetry_extract_data(struct stats_config *cfg,
+			   struct telemetry_sawftx_stats *tx_stats,
+			   struct telemetry_sawfdelay_stats *delay_stats,
+			   struct ath12k_base *ab);
 #else /* CPTCFG_ATH12K_SAWF */
 
 static inline void ath12k_sawf_init(struct ath12k_base *ab) {
--- a/drivers/net/wireless/ath/ath12k/vendor.c
+++ b/drivers/net/wireless/ath/ath12k/vendor.c
@@ -83,6 +83,18 @@ ath12k_vendor_sawf_streaming[QCA_WLAN_VE
 	[QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_EXTND_STATS] = {.type = NLA_U8},
 };
 
+static const struct nla_policy
+ath12k_telemetric_req_policy[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MAX + 1] = {
+	[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_LEVEL] = {.type = NLA_U8},
+	[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_OBJECT] = {.type = NLA_U8},
+	[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_TYPE] = {.type = NLA_U8},
+	[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_AGGREGATE] = {.type = NLA_FLAG},
+	[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_FEATURE_FLAG] = {.type = NLA_U64},
+	[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_STA_MAC] = {.type = NLA_BINARY,
+						     .len = ETH_ALEN},
+	[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_SERVICEID] = {.type = NLA_U8},
+};
+
 static void ath12k_set_default_values(struct ath12k_sawf_svc_params *param)
 {
 	param->min_throughput_rate = SAWF_SVC_PARAM_DEFAULT_MIN_THRUPUT;
@@ -696,6 +708,190 @@ static int ath12k_vendor_sawf_streaming_
 	return ret;
 }
 
+static int telemetry_build_nd_send_reply_msg(struct wiphy *wiphy, struct stats_config *cfg,
+					     u8 *mac_addr, struct unified_stats *stats)
+{
+	struct sk_buff *skb = NULL;
+	void *data = NULL;
+	struct nlattr *attr;
+	u32 storage = 0, multiple_reply_len = 0;
+	int rem_len = 0, data_len = 0, nla_size = nla_total_size(0), ret = 0;
+	u8 i, feat = 0;
+	bool data_pending = false, multiple_reply_set = false;
+	char *vap="wifi";
+
+	do {
+		skb = cfg80211_vendor_cmd_alloc_reply_skb(wiphy, NLMSG_DEFAULT_SIZE);
+		if (!skb)
+			return -ENOMEM;
+
+		if (nla_put_u8(skb, QCA_WLAN_VENDOR_ATTR_STATS_LEVEL, cfg->lvl) ||
+		    nla_put_u8(skb, QCA_WLAN_VENDOR_ATTR_STATS_OBJECT, STATS_OBJ_STA) ||
+		    nla_put(skb, QCA_WLAN_VENDOR_ATTR_STATS_OBJ_ID, ETH_ALEN, mac_addr) ||
+		    nla_put_u8(skb, QCA_WLAN_VENDOR_ATTR_STATS_SERVICEID, cfg->serviceid) ||
+		    nla_put_string(skb, QCA_WLAN_VENDOR_ATTR_STATS_PARENT_IF, vap) ||
+		    nla_put_u8(skb, QCA_WLAN_VENDOR_ATTR_STATS_TYPE, cfg->type)) {
+			kfree_skb(skb);
+			return -ENOMEM;
+		}
+
+		if (data_pending) {
+			multiple_reply_set = true;
+			data_pending = false;
+			/* Length to include the flag QCA_WLAN_VENDOR_ATTR_STATS_MULTI_REPLY */
+			multiple_reply_len = nla_size;
+		}
+
+		attr = nla_nest_start(skb, QCA_WLAN_VENDOR_ATTR_STATS_RECURSIVE);
+		for (i = feat; i < STATS_FEAT_MAX; i++) {
+			if (!stats->feat[i] || !stats->size[i])
+				continue;
+
+			rem_len = skb_tailroom(skb);
+			if (rem_len < 0) {
+				ath12k_err(NULL, "SAWF: skb is corrupted\n");
+				kfree_skb(skb);
+				return -ECANCELED;
+			}
+			rem_len -= multiple_reply_len;
+			rem_len -= nla_size;
+			rem_len = (rem_len > 0) ? rem_len : 0;
+
+			if (stats->size[i] >= rem_len) {
+				data_len = rem_len;
+				data = stats->feat[i] + storage;
+				stats->size[i] -= rem_len;
+				storage += data_len;
+				feat = i;
+				data_pending = true;
+			} else {
+				data_len = stats->size[i];
+				data = stats->feat[i] + storage;
+				storage = 0;
+			}
+			if (nla_put(skb, i+1, data_len, data)) {
+				kfree_skb(skb);
+				return -ENOMEM;
+			}
+
+			if (data_pending)
+				break;
+		}
+
+		nla_nest_end(skb, attr);
+
+		if (multiple_reply_set && nla_put_flag(skb, QCA_WLAN_VENDOR_ATTR_STATS_MULTI_REPLY)) {
+			kfree_skb(skb);
+			return -ENOMEM;
+		}
+
+		ret = cfg80211_vendor_cmd_reply(skb);
+		if (ret) {
+			kfree_skb(skb);
+			ath12k_err(NULL, "SAWF: stats msg send failed with err=%d\n", ret);
+			return ret;
+		}
+	} while(data_pending);
+
+	return ret;
+}
+
+static int ath12k_vendor_telemetry_getstats(struct wiphy *wiphy,
+					    struct wireless_dev *wdev,
+					    const void *data,
+					    int data_len)
+{
+	struct nlattr *tb[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MAX + 1];
+	struct stats_config cfg;
+	struct unified_stats *stats;
+	struct telemetry_sawfdelay_stats *delay_stats = NULL;
+	struct telemetry_sawftx_stats *tx_stats = NULL;
+	struct ath12k_base *ab = NULL;
+	int ret = 0, i;
+	u16 peer_id = 0xFFFF;
+	u8 mac_addr[ETH_ALEN] = { 0 };
+
+	if (!ath12k_sawf_enable)
+		return -EOPNOTSUPP;
+
+	ret = nla_parse(tb, QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MAX, data, data_len,
+			ath12k_telemetric_req_policy, NULL);
+
+	if (ret) {
+		ath12k_err(NULL, "Invalid attribute with telemetry getstats command\n");
+		return ret;
+	}
+
+	memset(&cfg, 0, sizeof(struct stats_config));
+
+	if (wiphy)
+		cfg.wiphy = wiphy;
+	if (tb[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_LEVEL])
+		cfg.lvl = nla_get_u8(tb[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_LEVEL]);
+	if (tb[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_OBJECT])
+		cfg.obj = nla_get_u8(tb[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_OBJECT]);
+	if (tb[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_TYPE])
+		cfg.type = nla_get_u8(tb[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_TYPE]);
+	if (tb[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_AGGREGATE])
+		cfg.aggregate = true;
+	if (tb[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_FEATURE_FLAG])
+		cfg.feat = nla_get_u64(tb[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_FEATURE_FLAG]);
+	if (tb[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_STA_MAC] &&
+	    (nla_len(tb[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_STA_MAC]) == ETH_ALEN)) {
+		memcpy(mac_addr, nla_data(tb[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_STA_MAC]), ETH_ALEN);
+		cfg.mac = mac_addr;
+	}
+	if (tb[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_SERVICEID])
+		cfg.serviceid = nla_get_u8(tb[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_SERVICEID]);
+
+	if (!(cfg.feat))
+		return -EINVAL;
+
+	ab = ath12k_sawf_get_ab_from_netdev(wdev->netdev, mac_addr, &peer_id);
+	if (!ab)
+		return -ENODATA;
+
+	stats = kzalloc(sizeof(struct unified_stats), GFP_KERNEL);
+	if (!stats)
+		return -ENOMEM;
+
+	if (cfg.feat & STATS_FEAT_FLG_SAWFTX) {
+		tx_stats = kzalloc(sizeof(struct telemetry_sawftx_stats), GFP_KERNEL);
+		if (!tx_stats) {
+			ret = -ENOMEM;
+			goto end_stats;
+		}
+		stats->feat[STATS_FEAT_SAWFTX] = tx_stats;
+		stats->size[STATS_FEAT_SAWFTX] = sizeof(struct telemetry_sawftx_stats);
+	}
+
+	if (cfg.feat & STATS_FEAT_FLG_SAWFDELAY) {
+		delay_stats = kzalloc(sizeof(struct telemetry_sawfdelay_stats), GFP_KERNEL);
+		if (!delay_stats) {
+			ret = -ENOMEM;
+			goto end_stats;
+		}
+		stats->feat[STATS_FEAT_SAWFDELAY] = delay_stats;
+		stats->size[STATS_FEAT_SAWFDELAY] = sizeof(struct telemetry_sawfdelay_stats);
+	}
+
+	ret = telemetry_extract_data(&cfg, tx_stats, delay_stats, ab);
+	if (ret)
+		goto end_stats;
+
+	ret = telemetry_build_nd_send_reply_msg(wiphy, &cfg, mac_addr, stats);
+
+end_stats:
+	for (i = 0; i < STATS_FEAT_MAX; i++) {
+		if (stats->feat[i])
+			kfree(stats->feat[i]);
+		stats->feat[i] = NULL;
+	}
+	kfree(stats);
+
+	return ret;
+}
+
 #endif /* CPTCFG_ATH12K_SAWF */
 static struct wiphy_vendor_command ath12k_vendor_commands[] = {
 #ifdef CPTCFG_ATH12K_SAWF
@@ -773,6 +969,14 @@ static struct wiphy_vendor_command ath12
 		.maxattr = QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_MAX,
 		.flags = WIPHY_VENDOR_CMD_NEED_NETDEV,
 	},
+	{
+		.info.vendor_id = QCA_NL80211_VENDOR_ID,
+		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_TELEMETRIC_DATA,
+		.doit = ath12k_vendor_telemetry_getstats,
+		.policy = ath12k_telemetric_req_policy,
+		.maxattr = QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MAX,
+		.flags = WIPHY_VENDOR_CMD_NEED_NETDEV,
+	},
 #endif /* CPTCFG_ATH12K_SAWF */
 };
 
--- a/drivers/net/wireless/ath/ath12k/vendor.h
+++ b/drivers/net/wireless/ath/ath12k/vendor.h
@@ -21,6 +21,7 @@ enum qca_nl80211_vendor_subcmds {
 	QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_SLA_SAMPLES_CFG = 211,
 	QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_SLA_BREACH_DETECTION_CFG = 212,
 	QCA_NL80211_VENDOR_SUBCMD_SAWF_STREAMING_STATS = 213,
+	QCA_NL80211_VENDOR_SUBCMD_TELEMETRIC_DATA = 334,
 #endif /* CPTCFG_ATH12K_SAWF */
 };
 
@@ -117,6 +118,339 @@ enum ath12k_vendor_attr_sawf_streaming {
 		QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_AFTER_LAST - 1,
 };
 
+/**
+ * enum qca_wlan_vendor_attr_telemetric: Defines attributes to be used in
+ * request message of QCA_NL80211_VENDOR_SUBCMD_TELEMETRIC_DATA vendor command.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_LEVEL: Defines stats levels like Basic or
+ * Advance or Debug.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_OBJECT: Defines stats objects like STA or
+ * VAP or Radio or SoC.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_TYPE: Defines stats types like Data or
+ * control.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_AGGREGATE: Defines aggregation flag for
+ * driver agrregation.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_FEATURE_FLAG: Defines feature flags for
+ * which stats is requested.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_STA_MAC: Defines STA MAC Address if the
+ * request is for particular STA object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_SERVICEID: Defines serviceid for sawf stats.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MAX: Defines maximum attribute counts to be
+ * used in QCA_NL80211_VENDOR_SUBCMD_TELEMETRIC_DATA vendor command request.
+ */
+enum qca_wlan_vendor_attr_telemetric {
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_LEVEL = 1,
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_OBJECT,
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_TYPE,
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_AGGREGATE,
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_FEATURE_FLAG,
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_STA_MAC,
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_SERVICEID,
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MLD_LINK,
+
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_AFTER_LAST,
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MAX =
+		QCA_WLAN_VENDOR_ATTR_TELEMETRIC_AFTER_LAST -1,
+};
+
+/**
+ * enum qca_wlan_vendor_attr_stats: Defines attributes to be used in response of
+ * QCA_NL80211_VENDOR_SUBCMD_TELEMETRIC_DATA vendor command.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_STATS_LEVEL: Used for stats levels like Basic or
+ * Advance or Debug.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_STATS_OBJECT: Required (u8)
+ * Used with the command, carrying stats, to specify for which stats_object enum.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_STATS_OBJ_ID: Used for Object ID like for STA MAC
+ * address or for VAP or Radio or SoC respective interface name.
+ *
+ * QCA_WLAN_VENDOR_ATTR_STATS_SERVICEID: Used for sawf levels stats like per
+ * peer or per peer per serviceclass.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_STATS_PARENT_IF: Used for Parent Object interface name
+ * like for STA VAP name, for VAP Radio interface name and for Radio SoC
+ * interface name.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_STATS_TYPE: Used for stats types like Data or
+ * control.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_STATS_RECURSIVE: Required (NESTED Flag)
+ * Used with the command to specify the nested stats.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_STATS_MULTI_REPLY: Set this flag if current reply
+ * messageis holding data from previous reply.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_STATS_MAX: Defines maximum attriutes can be used in
+ * QCA_NL80211_VENDOR_SUBCMD_TELEMETRIC_DATA vendor command response.
+ */
+
+enum qca_wlan_vendor_attr_stats {
+	QCA_WLAN_VENDOR_ATTR_STATS_LEVEL = 1,
+	QCA_WLAN_VENDOR_ATTR_STATS_OBJECT,
+	QCA_WLAN_VENDOR_ATTR_STATS_OBJ_ID,
+	QCA_WLAN_VENDOR_ATTR_STATS_SERVICEID,
+	QCA_WLAN_VENDOR_ATTR_STATS_PARENT_IF,
+	QCA_WLAN_VENDOR_ATTR_STATS_TYPE,
+	QCA_WLAN_VENDOR_ATTR_STATS_RECURSIVE,
+	QCA_WLAN_VENDOR_ATTR_STATS_MULTI_REPLY,
+	QCA_WLAN_VENDOR_ATTR_STATS_MAX,
+};
+
+struct telemetry_sawf_tx_stat {
+	struct dp_pkt_info tx_success;
+	struct dp_pkt_info tx_ingress;
+	struct {
+		struct dp_pkt_info fw_rem;
+		u32 fw_rem_notx;
+		u32 fw_rem_tx;
+		u32 age_out;
+		u32 fw_reason1;
+		u32 fw_reason2;
+		u32 fw_reason3;
+	} dropped;
+	struct sawf_fw_mpdu_stats svc_intval_stats;
+	struct sawf_fw_mpdu_stats burst_size_stats;
+	u32 tx_failed;
+	u32 queue_depth;
+	u32 throughput;
+	u32 ingress_rate;
+};
+
+struct telemetry_sawftx_stats {
+	struct telemetry_sawf_tx_stat tx[ATH12K_SAWF_MAX_TID_SUPPORT][MAX_Q_PER_TID];
+	u8 tid;
+	u8 msduq;
+};
+
+struct telemetry_sawf_delay_stat {
+	struct ath12k_delay_hist_stats delay_hist;
+	u8 cur_win;
+	u32 nwdelay_avg;
+	u32 swdelay_avg;
+	u32 hwdelay_avg;
+	u64 delay_bound_success;
+	u64 delay_bound_failure;
+};
+
+struct telemetry_sawfdelay_stats {
+	struct telemetry_sawf_delay_stat delay[ATH12K_SAWF_MAX_TID_SUPPORT][MAX_Q_PER_TID];
+	u8 tid;
+	u8 msduq;
+};
+
+/**
+ * enum qca_wlan_vendor_attr_feat: Defines nested attributes to be used in
+ * response of QCA_NL80211_VENDOR_SUBCMD_TELEMETRIC_DATA vendor command.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_ME: Used for Multicast Enhancement stats for a
+ * particular stats object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_RX: Used for Rx stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_TX: Used for Tx stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_AST: Used for AST stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_CFR: Used for CFR stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_FWD: Used for BSS stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_RAW: Used for RAW mode stats for a particular
+ * object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_TSO: Used for TSO stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_TWT: Used for TWT stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_VOW: Used for VOW  stats for a particular object.
+*
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_WDI: Used for WDI stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_WMI: Used for WMI stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_IGMP: Used for IGMP stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_LINK: Used for Link related stats for a particular
+ * object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_MESH: Used for Mesh related stats for a particular
+ * object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_RATE: Used for Rate stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_NAWDS: Used for NAWDS related stats for a
+ * particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_DELAY: Used for DELAY related stats for a
+ * particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_JITTER: Used for JITTER related stats for a
+ * particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_TXCAP: Used for TXCAP realted stats for a
+ * particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_MONITOR: Used for MONITOR realted stats for a
+ * particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_SAWFDELAY: Used for SAWFDELAY related stats for a
+ * particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_SAWFTX: Used for SAWFTX related stats for a
+ * particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_DETER: Used for DETERMINISTIC related stats for a
+ * particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_MAX: Defines Maximum count of feature attributes.
+ */
+enum qca_wlan_vendor_attr_feat {
+	QCA_WLAN_VENDOR_ATTR_FEAT_ME = 1,
+	QCA_WLAN_VENDOR_ATTR_FEAT_RX,
+	QCA_WLAN_VENDOR_ATTR_FEAT_TX,
+	QCA_WLAN_VENDOR_ATTR_FEAT_AST,
+	QCA_WLAN_VENDOR_ATTR_FEAT_CFR,
+	QCA_WLAN_VENDOR_ATTR_FEAT_FWD,
+	QCA_WLAN_VENDOR_ATTR_FEAT_RAW,
+	QCA_WLAN_VENDOR_ATTR_FEAT_TSO,
+	QCA_WLAN_VENDOR_ATTR_FEAT_TWT,
+	QCA_WLAN_VENDOR_ATTR_FEAT_VOW,
+	QCA_WLAN_VENDOR_ATTR_FEAT_WDI,
+	QCA_WLAN_VENDOR_ATTR_FEAT_WMI,
+	QCA_WLAN_VENDOR_ATTR_FEAT_IGMP,
+	QCA_WLAN_VENDOR_ATTR_FEAT_LINK,
+	QCA_WLAN_VENDOR_ATTR_FEAT_MESH,
+	QCA_WLAN_VENDOR_ATTR_FEAT_RATE,
+	QCA_WLAN_VENDOR_ATTR_FEAT_NAWDS,
+	QCA_WLAN_VENDOR_ATTR_FEAT_DELAY,
+	QCA_WLAN_VENDOR_ATTR_FEAT_JITTER,
+	QCA_WLAN_VENDOR_ATTR_FEAT_TXCAP,
+	QCA_WLAN_VENDOR_ATTR_FEAT_MONITOR,
+	QCA_WLAN_VENDOR_ATTR_FEAT_SAWFDELAY,
+	QCA_WLAN_VENDOR_ATTR_FEAT_SAWFTX,
+	QCA_WLAN_VENDOR_ATTR_FEAT_DETER,
+	/**
+	 * New attribute must be add before this.
+	 * Also define the corresponding feature
+	 * index in enum stats_feat.
+	 */
+	QCA_WLAN_VENDOR_ATTR_FEAT_MAX,
+};
+
+enum stats_feat {
+	STATS_FEAT_ME,
+	STATS_FEAT_RX,
+	STATS_FEAT_TX,
+	STATS_FEAT_AST,
+	STATS_FEAT_CFR,
+	STATS_FEAT_FWD,
+	STATS_FEAT_RAW,
+	STATS_FEAT_TSO,
+	STATS_FEAT_TWT,
+	STATS_FEAT_VOW,
+	STATS_FEAT_WDI,
+	STATS_FEAT_WMI,
+	STATS_FEAT_IGMP,
+	STATS_FEAT_LINK,
+	STATS_FEAT_MESH,
+	STATS_FEAT_RATE,
+	STATS_FEAT_NAWDS,
+	STATS_FEAT_DELAY,
+	STATS_FEAT_JITTER,
+	STATS_FEAT_TXCAP,
+	STATS_FEAT_MONITOR,
+	STATS_FEAT_SAWFDELAY,
+	STATS_FEAT_SAWFTX,
+	STATS_FEAT_DETER,
+	STATS_FEAT_MAX,
+};
+
+/**
+ * enum stats_level: Defines detailing levels
+ * @STATS_LVL_BASIC:    Very minimal stats data
+ * @STATS_LVL_ADVANCE:  Mostly feature specific stats data
+ * @STATS_LVL_DEBUG:    Stats data for debug purpose
+ * @STATS_LVL_MAX:      Max supported Stats levels
+ */
+enum stats_level {
+	STATS_LVL_BASIC,
+	STATS_LVL_ADVANCE,
+	STATS_LVL_DEBUG,
+	STATS_LVL_MAX = STATS_LVL_DEBUG,
+};
+
+/**
+ * enum stats_object: Defines the Stats specific to object
+ * @STATS_OBJ_STA:   Stats for station/peer associated to AP
+ * @STATS_OBJ_VAP:   Stats for VAP
+ * @STATS_OBJ_MLD:   Stats for MLD group
+ * @STATS_OBJ_RADIO: Stats for particular Radio
+ * @STATS_OBJ_AP:    Stats for SoC
+ * @STATS_OBJ_MAX:   Max supported objects
+ */
+enum stats_object {
+	STATS_OBJ_STA,
+	STATS_OBJ_VAP,
+	STATS_OBJ_MLD,
+	STATS_OBJ_RADIO,
+	STATS_OBJ_AP,
+	STATS_OBJ_MAX = STATS_OBJ_AP,
+};
+
+/**
+ * enum stats_type: Defines the Stats for specific category
+ * @STATS_TYPE_DATA: Stats for Data frames
+ * @STATS_TYPE_CTRL: Stats for Control/Management frames
+ * @STATS_TYPE_MAX:  Max supported types
+ */
+enum stats_type {
+	STATS_TYPE_DATA,
+	STATS_TYPE_CTRL,
+	STATS_TYPE_MAX = STATS_TYPE_CTRL,
+};
+
+/**
+ * struct stats_config: Structure to hold user configurations
+ * @wiphy:  Pointer to wiphy structure which came as part of User request
+ * @feat:  Feat flag set to dedicated bit of this field
+ * @lvl:  Requested level of Stats (i.e. Basic, Advance or Debug)
+ * @obj:  Requested stats for object (i.e. AP, Radio, Vap or STA)
+ * @type:  Requested stats category
+ * @aggregate: Aggregate in driver
+ * @serviceid: service id for checking the level of sawf stats
+ */
+struct stats_config {
+	struct wiphy *wiphy;
+	u64 feat;
+	enum stats_level lvl;
+	enum stats_object obj;
+	enum stats_type type;
+	bool aggregate;
+	u8 serviceid;
+	u8 *mac;
+};
+
+#define STATS_FEAT_FLG_SAWFDELAY 0x00400000
+#define STATS_FEAT_FLG_SAWFTX 0x00800000
+/**
+ * struct unified_stats: Structure to carry all feature specific stats in driver
+ *                       level for stats response setup
+ * All features are void pointers and its corresponding sizes.
+ * This can hold Basic or Advance or Debug structures independently.
+ */
+struct unified_stats {
+	void *feat[STATS_FEAT_MAX];
+	u_int32_t size[STATS_FEAT_MAX];
+};
 #endif /* CPTCFG_ATH12K_SAWF */
 
 int ath12k_vendor_register(struct ath12k_hw *ah);
