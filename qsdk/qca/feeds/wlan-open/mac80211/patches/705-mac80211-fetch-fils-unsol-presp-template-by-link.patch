From a756e6152a4cc4414f0317c2ff6916da7ea0d688 Mon Sep 17 00:00:00 2001
From: Sriram R <quic_srirrama@quicinc.com>
Date: Wed, 28 Dec 2022 15:26:37 +0530
Subject: [PATCH] mac80211: fetch fils/unsol probe resp template by link

Currently the FILS and unsolicited probe response template
is fetched from default link for a vif. But with ML support,
we need to fetch this based on the link id from the corresponding
link data.

Signed-off-by: Sriram R <quic_srirrama@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/mac.c |  4 +--
 drivers/net/wireless/ath/ath12k/mac.c |  6 ++--
 include/net/mac80211.h                | 10 +++++--
 net/mac80211/tx.c                     | 40 +++++++++++++++++++--------
 4 files changed, 42 insertions(+), 18 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -3504,7 +3504,7 @@ static int ath11k_mac_fils_discovery(str
 	if (info->fils_discovery.max_interval) {
 		interval = info->fils_discovery.max_interval;
 
-		tmpl = ieee80211_get_fils_discovery_tmpl(ar->hw, arvif->vif);
+		tmpl = ieee80211_get_fils_discovery_tmpl(ar->hw, arvif->vif, 0);
 		if (tmpl)
 			ret = ath11k_wmi_fils_discovery_tmpl(ar, arvif->vdev_id,
 							     tmpl);
@@ -3513,7 +3513,7 @@ static int ath11k_mac_fils_discovery(str
 		interval = info->unsol_bcast_probe_resp_interval;
 
 		tmpl = ieee80211_get_unsol_bcast_probe_resp_tmpl(ar->hw,
-								 arvif->vif);
+								 arvif->vif, 0);
 		if (tmpl)
 			ret = ath11k_wmi_probe_resp_tmpl(ar, arvif->vdev_id,
 							 tmpl);
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -3822,7 +3822,8 @@ static int ath12k_mac_fils_discovery(str
 	if (info->fils_discovery.max_interval) {
 		interval = info->fils_discovery.max_interval;
 
-		tmpl = ieee80211_get_fils_discovery_tmpl(ah->hw, ahvif->vif);
+		tmpl = ieee80211_get_fils_discovery_tmpl(ah->hw, ahvif->vif,
+							 info->link_id);
 		if (tmpl)
 			ret = ath12k_wmi_fils_discovery_tmpl(ar, arvif->vdev_id,
 							     tmpl);
@@ -3831,7 +3832,8 @@ static int ath12k_mac_fils_discovery(str
 		interval = info->unsol_bcast_probe_resp_interval;
 
 		tmpl = ieee80211_get_unsol_bcast_probe_resp_tmpl(ah->hw,
-								 ahvif->vif);
+								 ahvif->vif,
+								 info->link_id);
 		if (tmpl)
 			ret = ath12k_wmi_probe_resp_tmpl(ar, arvif->vdev_id,
 							 tmpl);
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -7363,19 +7363,24 @@ bool ieee80211_set_hw_80211_encap(struct
  * ieee80211_get_fils_discovery_tmpl - Get FILS discovery template.
  * @hw: pointer obtained from ieee80211_alloc_hw().
  * @vif: &struct ieee80211_vif pointer from the add_interface callback.
+ * @link_id: Link for which the template is requested. link id 0
+ * 	can be used for non ML vif or corresponding link id for ML vif
  *
  * The driver is responsible for freeing the returned skb.
  *
  * Return: FILS discovery template. %NULL on error.
  */
 struct sk_buff *ieee80211_get_fils_discovery_tmpl(struct ieee80211_hw *hw,
-						  struct ieee80211_vif *vif);
+						  struct ieee80211_vif *vif,
+						  unsigned int link_id);
 
 /**
  * ieee80211_get_unsol_bcast_probe_resp_tmpl - Get unsolicited broadcast
  *	probe response template.
  * @hw: pointer obtained from ieee80211_alloc_hw().
  * @vif: &struct ieee80211_vif pointer from the add_interface callback.
+ * @link_id: Link for which the template is requested. link id 0
+ * 	can be used for non ML vif or corresponding link id for ML vif
  *
  * The driver is responsible for freeing the returned skb.
  *
@@ -7383,7 +7388,8 @@ struct sk_buff *ieee80211_get_fils_disco
  */
 struct sk_buff *
 ieee80211_get_unsol_bcast_probe_resp_tmpl(struct ieee80211_hw *hw,
-					  struct ieee80211_vif *vif);
+					  struct ieee80211_vif *vif,
+					  unsigned int link_id);
 
 /**
  * ieeee80211_obss_color_collision_notify - notify userland about a BSS color
--- a/net/mac80211/tx.c
+++ b/net/mac80211/tx.c
@@ -5834,21 +5834,28 @@ out:
 EXPORT_SYMBOL(ieee80211_proberesp_get);
 
 struct sk_buff *ieee80211_get_fils_discovery_tmpl(struct ieee80211_hw *hw,
-						  struct ieee80211_vif *vif)
+						  struct ieee80211_vif *vif,
+						  unsigned int link_id)
 {
 	struct sk_buff *skb = NULL;
 	struct fils_discovery_data *tmpl = NULL;
 	struct ieee80211_sub_if_data *sdata = vif_to_sdata(vif);
+	struct ieee80211_link_data *link;
 
 	if (sdata->vif.type != NL80211_IFTYPE_AP)
 		return NULL;
 
-	rcu_read_lock();
-	tmpl = rcu_dereference(sdata->deflink.u.ap.fils_discovery);
-	if (!tmpl) {
-		rcu_read_unlock();
+	if (link_id >= IEEE80211_MLD_MAX_NUM_LINKS)
 		return NULL;
-	}
+
+	rcu_read_lock();
+	link = rcu_dereference(sdata->link[link_id]);
+	if (!link)
+		goto out;
+
+	tmpl = rcu_dereference(link->u.ap.fils_discovery);
+	if (!tmpl)
+		goto out;
 
 	skb = dev_alloc_skb(sdata->local->hw.extra_tx_headroom + tmpl->len);
 	if (skb) {
@@ -5856,6 +5863,7 @@ struct sk_buff *ieee80211_get_fils_disco
 		skb_put_data(skb, tmpl->data, tmpl->len);
 	}
 
+out:
 	rcu_read_unlock();
 	return skb;
 }
@@ -5863,21 +5871,28 @@ EXPORT_SYMBOL(ieee80211_get_fils_discove
 
 struct sk_buff *
 ieee80211_get_unsol_bcast_probe_resp_tmpl(struct ieee80211_hw *hw,
-					  struct ieee80211_vif *vif)
+					  struct ieee80211_vif *vif,
+					  unsigned int link_id)
 {
 	struct sk_buff *skb = NULL;
 	struct unsol_bcast_probe_resp_data *tmpl = NULL;
 	struct ieee80211_sub_if_data *sdata = vif_to_sdata(vif);
+	struct ieee80211_link_data *link;
 
 	if (sdata->vif.type != NL80211_IFTYPE_AP)
 		return NULL;
 
-	rcu_read_lock();
-	tmpl = rcu_dereference(sdata->deflink.u.ap.unsol_bcast_probe_resp);
-	if (!tmpl) {
-		rcu_read_unlock();
+	if (link_id >= IEEE80211_MLD_MAX_NUM_LINKS)
 		return NULL;
-	}
+
+	rcu_read_lock();
+	link = rcu_dereference(sdata->link[link_id]);
+	if (!link)
+		goto out;
+
+	tmpl = rcu_dereference(link->u.ap.unsol_bcast_probe_resp);
+	if (!tmpl)
+		goto out;
 
 	skb = dev_alloc_skb(sdata->local->hw.extra_tx_headroom + tmpl->len);
 	if (skb) {
@@ -5885,6 +5900,7 @@ ieee80211_get_unsol_bcast_probe_resp_tmp
 		skb_put_data(skb, tmpl->data, tmpl->len);
 	}
 
+out:
 	rcu_read_unlock();
 	return skb;
 }
