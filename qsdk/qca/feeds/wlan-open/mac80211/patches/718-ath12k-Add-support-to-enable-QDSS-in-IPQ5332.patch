From df886e4a6cf98d71288c92b40f90e38393311135 Mon Sep 17 00:00:00 2001
From: Dinesh Karthikeyan <quic_dinek@quicinc.com>
Date: Tue, 21 Feb 2023 12:32:03 +0530
Subject: [PATCH] ath12k: Add support to enable QDSS in IPQ5332

Handle QDSS memory allocation separately for ahb chipset separately
and fill the chip info in coredump based on the bus type.

Signed-off-by: Dinesh Karthikeyan <quic_dinek@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/coredump.c | 13 +++++++++----
 drivers/net/wireless/ath/ath12k/hw.c       |  4 ----
 drivers/net/wireless/ath/ath12k/hw.h       |  1 -
 drivers/net/wireless/ath/ath12k/qmi.c      | 14 +++++++++-----
 drivers/net/wireless/ath/ath12k/qmi.h      |  2 +-
 5 files changed, 19 insertions(+), 15 deletions(-)

Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/coredump.c
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/coredump.c	2023-03-03 10:20:29.501148015 +0530
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/coredump.c	2023-03-03 10:20:29.493148079 +0530
@@ -118,11 +118,16 @@ void ath12k_coredump_build_inline(struct
 		sizeof(file_data->df_magic));
 	file_data->len = cpu_to_le32(header_size);
 	file_data->version = cpu_to_le32(ATH12K_FW_CRASH_DUMP_V2);
-	file_data->chip_id = cpu_to_le32(ar_pci->dev_id);
-	file_data->qrtr_id = cpu_to_le32(ar_pci->ab->qmi.service_ins_id);
-	file_data->bus_id = pci_domain_nr(ar_pci->pdev->bus);
+	if (ab->hif.bus == ATH12K_BUS_AHB) {
+		file_data->chip_id = ab->qmi.target.chip_id;
+		file_data->qrtr_id = ab->qmi.service_ins_id;
+		file_data->bus_id = ab->userpd_id;
+	} else {
+		file_data->chip_id = cpu_to_le32(ar_pci->dev_id);
+		file_data->qrtr_id = cpu_to_le32(ar_pci->ab->qmi.service_ins_id);
+		file_data->bus_id = pci_domain_nr(ar_pci->pdev->bus);
+	}
 	dev = ab->dev;
-
 	guid_gen(&file_data->guid);
 	ktime_get_real_ts64(&timestamp);
 	file_data->tv_sec = cpu_to_le64(timestamp.tv_sec);
Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/hw.c
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/hw.c	2023-03-03 10:20:29.501148015 +0530
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/hw.c	2023-03-03 10:20:29.497148047 +0530
@@ -1472,7 +1472,6 @@ static const struct ath12k_hw_params ath
 		.m3_fw_support = true,
 		.compact_rx_tlv = true,
 		.send_platform_model = false,
-		.en_qdss = true,
 		.en_fwlog = true,
 	},
 	{
@@ -1542,7 +1541,6 @@ static const struct ath12k_hw_params ath
 		.m3_fw_support = true,
 		.compact_rx_tlv = false,
 		.send_platform_model = false,
-		.en_qdss = true,
 		.en_fwlog = true,
 	},
 	{
@@ -1620,7 +1618,6 @@ static const struct ath12k_hw_params ath
 		.m3_fw_support = true,
 		.compact_rx_tlv = true,
 		.send_platform_model = false,
-		.en_qdss = true,
 		.en_fwlog = true,
 	},
 	{
@@ -1692,7 +1689,6 @@ static const struct ath12k_hw_params ath
 		.ce_remap = &ath12k_ce_remap_ipq5332,
 		.cmem = &ath12k_cmem_ipq5332,
 		.send_platform_model = true,
-		.en_qdss = false,
 		.en_fwlog = false,
 	},
 };
Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/hw.h
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/hw.h	2023-03-03 10:20:29.501148015 +0530
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/hw.h	2023-03-03 10:20:29.497148047 +0530
@@ -219,7 +219,6 @@ struct ath12k_hw_params {
 	bool fixed_fw_mem;
 	bool m3_fw_support;
 	bool send_platform_model;
-	bool en_qdss;
 	bool en_fwlog;
 	const struct ce_remap *ce_remap;
 	const struct cmem *cmem;
Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/qmi.c
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/qmi.c	2023-03-03 10:20:29.501148015 +0530
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/qmi.c	2023-03-03 10:22:40.328113795 +0530
@@ -4177,9 +4177,6 @@ int ath12k_config_qdss(struct ath12k_bas
 
 	/* Disabling qdss trace for FTM as it causes hig evt latency in FW
 */
-	if (!ab->hw_params->en_qdss)
-		return 0;
-
 	if (ab->fw_mode == ATH12K_FIRMWARE_MODE_FTM)
 		return 0;
 
@@ -4599,16 +4596,18 @@ int ath12k_qmi_qdss_mem_alloc(struct ath
 	struct device_node *dev_node = NULL;
 	struct resource q6_etr;
 
-	if (ab->bus_params.fixed_bdf_addr) {
+	switch (ab->hif.bus) {
+	case ATH12K_BUS_AHB:
 		dev_node = of_find_node_by_name(NULL, "q6_etr_dump");
 		if (!dev_node) {
 			ath12k_err(ab, "No q6_etr_dump available in dts\n");
-			return -ENOMEM;
+			return -ENODEV;
 		}
 		ret = of_address_to_resource(dev_node, 0, &q6_etr);
+		of_node_put(dev_node);
 		if (ret) {
 			ath12k_err(ab, "Failed to get resource for q6_etr_dump\n");
-			return -EINVAL;
+			return ret;
 		}
 		for (i = 0; i < ab->qmi.qdss_mem_seg_len; i++) {
 			ab->qmi.qdss_mem[i].paddr = q6_etr.start;
@@ -4627,8 +4626,14 @@ int ath12k_qmi_qdss_mem_alloc(struct ath
 				   ab->qmi.qdss_mem[i].v.ioaddr,
 				   (unsigned int)ab->qmi.qdss_mem[i].size);
 		}
-	} else {
+		break;
+	case ATH12K_BUS_PCI:
 		ret = ath12k_qmi_pci_alloc_qdss_mem(qmi);
+		break;
+	default:
+		ath12k_warn(ab, "invalid bus type: %d", ab->hif.bus);
+		ret = -EINVAL;
+		break;
 	}
 	return ret;
 }
Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/qmi.h
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/qmi.h	2023-03-03 10:20:29.501148015 +0530
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/qmi.h	2023-03-03 10:20:29.497148047 +0530
@@ -54,6 +54,13 @@
 
 #define ATH12K_QMI_INVALID_RADIO	0xFF
 
+/* userpd_id in multi pd arch */
+enum userpd_id {
+	USERPD_0 = 0,
+	USERPD_1,
+	USERPD_2,
+};
+
 struct ath12k_base;
 
 enum ath12k_qmi_file_type {
@@ -210,7 +217,7 @@ struct qmi_wlanfw_qdss_trace_config_down
 #define QMI_WLANFW_QDSS_TRACE_MODE_REQ_MSG_V01_MAX_LEN 18
 #define QMI_WLANFW_QDSS_TRACE_MODE_RESP_MSG_V01_MAX_LEN 7
 #define QMI_WLANFW_QDSS_TRACE_MODE_RESP_V01 0x0045
-#define QMI_WLANFW_QDSS_STOP_ALL_TRACE 0x3f
+#define QMI_WLANFW_QDSS_STOP_ALL_TRACE 0x01
 
 enum qmi_wlanfw_qdss_trace_mode_enum_v01 {
 	WLFW_QDSS_TRACE_MODE_ENUM_MIN_VAL_V01 = INT_MIN,
Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/core.h
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/core.h	2023-03-03 10:20:29.501148015 +0530
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/core.h	2023-03-03 10:20:29.497148047 +0530
@@ -1238,6 +1238,8 @@ struct ath12k_base {
 
 	struct vendor_info id;
 
+	int userpd_id;
+
 	/* must be last */
 	u8 drv_priv[0] __aligned(sizeof(void *));
 };
Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/ahb.c
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/ahb.c	2023-03-03 10:20:29.501148015 +0530
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/ahb.c	2023-03-03 10:20:29.497148047 +0530
@@ -867,13 +867,39 @@ static int ath12k_ahb_fw_resource_deinit
 	return 0;
 }
 
+static int ath12k_get_userpd_id(struct device *dev)
+{
+	int ret;
+	int userpd_id = 0;
+	const char *subsys_name;
+
+	ret = of_property_read_string(dev->of_node,
+				      "qcom,userpd-subsys-name",
+				      &subsys_name);
+	if (ret) {
+		dev_err(dev, "Not multipd architecture");
+		return 0;
+	}
+
+	if (strcmp(subsys_name, "q6v5_wcss_userpd1") == 0) {
+		userpd_id = USERPD_0;
+	} else if (strcmp(subsys_name, "q6v5_wcss_userpd2") == 0) {
+		userpd_id = USERPD_1;
+	} else if (strcmp(subsys_name, "q6v5_wcss_userpd3") == 0) {
+		userpd_id = USERPD_2;
+	}
+
+	return userpd_id;
+}
+
 static int ath12k_ahb_probe(struct platform_device *pdev)
 {
 	struct ath12k_base *ab;
 	const struct of_device_id *of_id;
 	const struct ath12k_hif_ops *hif_ops;
+	struct device *dev = &pdev->dev;
 	enum ath12k_hw_rev hw_rev;
-	int ret;
+	int ret, userpd_id;
 
 	of_id = of_match_device(ath12k_ahb_of_match, &pdev->dev);
 	if (!of_id) {
@@ -881,6 +907,8 @@ static int ath12k_ahb_probe(struct platf
 		return -EINVAL;
 	}
 
+	userpd_id = ath12k_get_userpd_id(dev);
+
 	hw_rev = (enum ath12k_hw_rev)of_id->data;
 
 	switch (hw_rev) {
@@ -909,7 +937,7 @@ static int ath12k_ahb_probe(struct platf
 	ab->pdev = pdev;
 	ab->hw_rev = hw_rev;
 	platform_set_drvdata(pdev, ab);
-
+	ab->userpd_id = userpd_id;
 
 	ret = ath12k_core_pre_init(ab);
 	if (ret)
