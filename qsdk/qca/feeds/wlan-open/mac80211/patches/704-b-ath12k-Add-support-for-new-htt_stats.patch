From 9267403c8e7384802d3e0d16a5d31182f87fdb41 Mon Sep 17 00:00:00 2001
From: Rajat Soni <quic_rajson@quicinc.com>
Date: Tue, 27 Dec 2022 12:15:34 +0530
Subject: [PATCH] ath12k: Add support for new htt_stats

ATH12K_DBG_HTT_DBG_PDEV_PUNCTURE_STATS
ATH12K_DBG_HTT_DBG_EXT_STATS_ML_PEERS_INFO
ATH12K_DBG_HTT_DBG_ODD_MANDATORY_STATS
ATH12K_DBG_HTT_DBG_PDEV_SCHED_ALGO_STATS
ATH12K_DBG_HTT_DBG_ODD_MANDATORY_MUMIMO_STATS
ATH12K_DBG_HTT_DBG_ODD_MANDATORY_MUOFDMA_STATS
ATH12K_DBG_HTT_DBG_EXT_PHY_PROF_CAL_STATS

Signed-off-by: Rajat Soni <quic_rajson@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debugfs.h     |   7 +
 .../wireless/ath/ath12k/debugfs_htt_stats.c   | 320 ++++++++++++
 .../wireless/ath/ath12k/debugfs_htt_stats.h   | 483 +++++++++++++++++-
 3 files changed, 809 insertions(+), 1 deletion(-)

--- a/drivers/net/wireless/ath/ath12k/debugfs.h
+++ b/drivers/net/wireless/ath/ath12k/debugfs.h
@@ -62,6 +62,14 @@ enum ath12k_dbg_htt_ext_stats_type {
 	ATH12K_DBG_HTT_STRM_GEN_MPDUS_STATS		    =  43,
 	ATH12K_DBG_HTT_STRM_GEN_MPDUS_DETAILS_STATS	    =  44,
 	ATH12K_DBG_HTT_DBG_SOC_ERROR_STATS		    =  45,
+	ATH12K_DBG_HTT_DBG_PDEV_PUNCTURE_STATS		    =  46,
+	ATH12K_DBG_HTT_DBG_EXT_STATS_ML_PEERS_INFO	    =  47,
+	ATH12K_DBG_HTT_DBG_ODD_MANDATORY_STATS		    =  48,
+	ATH12K_DBG_HTT_DBG_PDEV_SCHED_ALGO_STATS	    =  49,
+	ATH12K_DBG_HTT_DBG_ODD_MANDATORY_MUMIMO_STATS	    =  50,
+	ATH12K_DBG_HTT_DBG_ODD_MANDATORY_MUOFDMA_STATS	    =  51,
+	ATH12K_DBG_HTT_DBG_EXT_PHY_PROF_CAL_STATS	    =  52,
+	ATH12K_DGB_HTT_DBG_EXT_STATS_PDEV_BW_MGR	    =  53,
 
 	/* keep this last */
 	ATH12K_DBG_HTT_NUM_EXT_STATS,
--- a/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.c
@@ -6191,6 +6191,298 @@ htt_print_phy_tpc_stats_tlv(const void *
 	stats_req->buf_len = len;
 }
 
+static const char *htt_stats_direction_abbrev(enum htt_stats_direction direction,
+					      struct debug_htt_stats_req *stats_req)
+{
+	const char *direction_str = "unknown";
+	u8 *buf = stats_req->buf;
+	u32 len = stats_req->buf_len;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+
+	switch (direction) {
+	case HTT_STATS_DIRECTION_TX:
+		direction_str = "tx";
+		break;
+	case HTT_STATS_DIRECTION_RX:
+		direction_str = "rx";
+		break;
+	default:
+		len += scnprintf(buf + len, buf_len - len,
+			"warning: encountered unexpected HTT_STATS_DIRECTION: %d",
+			direction);
+		direction_str = "unknown";
+	}
+
+	stats_req->buf_len = len;
+	return direction_str;
+}
+
+static const char *htt_stats_ppdu_type_abbrev(enum htt_stats_ppdu_type ppdu_type,
+					      struct debug_htt_stats_req *stats_req)
+{
+	const char *ppdu_type_str = "unknown";
+	u8 *buf = stats_req->buf;
+	u32 len = stats_req->buf_len;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+
+	switch (ppdu_type) {
+	case HTT_STATS_PPDU_TYPE_MODE_SU:
+		ppdu_type_str = "su";
+		break;
+	case HTT_STATS_PPDU_TYPE_DL_MU_MIMO:
+		ppdu_type_str = "dl_mu_mimo";
+		break;
+	case HTT_STATS_PPDU_TYPE_UL_MU_MIMO:
+		ppdu_type_str = "ul_mu_mimo";
+		break;
+	case HTT_STATS_PPDU_TYPE_DL_MU_OFDMA:
+		ppdu_type_str = "dl_mu_ofdma";
+		break;
+	case HTT_STATS_PPDU_TYPE_UL_MU_OFDMA:
+		ppdu_type_str = "ul_mu_ofdma";
+		break;
+	default:
+		len += scnprintf(buf + len, buf_len - len,
+			"warning: encountered unexpected HTT_STATS_PPDU_TYPE: %d",
+			ppdu_type);
+	}
+
+	stats_req->buf_len = len;
+	return ppdu_type_str;
+}
+
+static const char *htt_stats_pream_type_abbrev(enum htt_stats_param_type pream_type,
+					       struct debug_htt_stats_req *stats_req)
+{
+	const char *pream_type_str = "unknown";
+	u8 *buf = stats_req->buf;
+	u32 len = stats_req->buf_len;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+
+	switch (pream_type) {
+	case HTT_STATS_PREAM_OFDM:
+		pream_type_str = "ofdm";
+		break;
+	case HTT_STATS_PREAM_CCK:
+		pream_type_str = "cck";
+		break;
+	case HTT_STATS_PREAM_HT:
+		pream_type_str = "ht";
+		break;
+	case HTT_STATS_PREAM_VHT:
+		pream_type_str = "ac";
+		break;
+	case HTT_STATS_PREAM_HE:
+		pream_type_str = "ax";
+		break;
+	case HTT_STATS_PREAM_EHT:
+		pream_type_str = "be";
+		break;
+	default:
+		len += scnprintf(buf + len, buf_len - len,
+			"warning: encountered unexpected HTT_STATS_PREAM_TYPE: %d",
+			pream_type);
+	}
+
+	stats_req->buf_len = len;
+	return pream_type_str;
+}
+
+static inline void
+htt_print_puncture_stats_tlv(const void *tag_buf,
+			     struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_pdev_puncture_stats_tlv *htt_stats_buf = tag_buf;
+	u8 *buf = stats_req->buf;
+	u32 len = stats_req->buf_len;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	int i;
+	const char *direction_str = NULL;
+	const char *preamble_str = NULL;
+	const char *ppdu_type_str = NULL;
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "HTT_PDEV_PUNCTURE_STATS_TLV:\n");
+
+	direction_str = htt_stats_direction_abbrev(htt_stats_buf->direction, stats_req);
+	ppdu_type_str = htt_stats_ppdu_type_abbrev(htt_stats_buf->ppdu_type, stats_req);
+	preamble_str = htt_stats_pream_type_abbrev(htt_stats_buf->preamble, stats_req);
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "mac_id = %u\n",
+			 HTT_PDEV_PUNCTURE_STATS_MAC_ID_GET(htt_stats_buf->mac_id__word));
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "%s_%s_%s_last_used_pattern_mask: 0x%08x\n",
+			 direction_str, preamble_str, ppdu_type_str,
+			 htt_stats_buf->last_used_pattern_mask);
+
+	for (i = 0; (i < HTT_PUNCTURE_STATS_MAX_SUBBAND_COUNT) &&
+			(i < htt_stats_buf->subband_count); ++i) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "%s_%s_%s_num_subbands_used_cnt_%02d: %u\n",
+				 direction_str, preamble_str, ppdu_type_str,
+				 i + 1, htt_stats_buf->num_subbands_used_cnt[i]);
+	}
+	stats_req->buf_len = len;
+}
+
+static inline void
+htt_print_ml_peer_details_stats_tlv(const void *tag_buf,
+				    struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_ml_peer_details_tlv *htt_stats_buf = tag_buf;
+	u8 *buf = stats_req->buf;
+	u32 len = stats_req->buf_len;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "HTT_ML_PEER_DETAILS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len,
+			 "========================\n");
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "remote_mld_mac_addr = %02x:%02x:%02x:%02x:%02x:%02x\n",
+			 (htt_stats_buf->remote_mld_mac_addr.mac_addr_l32 & 0xFF),
+			 (htt_stats_buf->remote_mld_mac_addr.mac_addr_l32 & 0xFF00) >> 8,
+			 (htt_stats_buf->remote_mld_mac_addr.mac_addr_l32 & 0xFF0000) >> 16,
+			 (htt_stats_buf->remote_mld_mac_addr.mac_addr_l32 & 0xFF000000) >> 24,
+			 (htt_stats_buf->remote_mld_mac_addr.mac_addr_h16 & 0xFF),
+			 (htt_stats_buf->remote_mld_mac_addr.mac_addr_h16 & 0xFF00) >> 8);
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "ml_peer_flags = 0x%x\n",
+			 htt_stats_buf->ml_peer_flags);
+
+	len += scnprintf(buf + len, buf_len - len,
+		"num_links = %u\n",
+		HTT_ML_PEER_DETAILS_NUM_LINKS_GET(htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+		"ml_peer_id = %u\n",
+		HTT_ML_PEER_DETAILS_ML_PEER_ID_GET(htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+		"primary_link_idx = %u\n",
+		HTT_ML_PEER_DETAILS_PRIMARY_LINK_IDX_GET(htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+		"primary_chip_id = %u\n",
+		HTT_ML_PEER_DETAILS_PRIMARY_CHIP_ID_GET(htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+		"link_init_count = %u\n",
+		HTT_ML_PEER_DETAILS_LINK_INIT_COUNT_GET(htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+		"non_str = %u\n",
+		HTT_ML_PEER_DETAILS_NON_STR_GET(htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+		"emlsr = %u\n",
+		HTT_ML_PEER_DETAILS_EMLSR_GET(htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+		"is_stako = %u\n",
+		HTT_ML_PEER_DETAILS_IS_STA_KO_GET(htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+		"num_local_links = %u\n",
+		HTT_ML_PEER_DETAILS_NUM_LOCAL_LINKS_GET(htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+		"allocated = %u\n",
+		HTT_ML_PEER_DETAILS_ALLOCATED_GET(htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+		"participating_chips_bitmap = 0x%x\n",
+		HTT_ML_PEER_DETAILS_PARTICIPATING_CHIPS_BITMAP_GET(
+			htt_stats_buf->msg_dword_2));
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "=========================================== \n");
+	stats_req->buf_len = len;
+}
+
+static inline void
+htt_print_ml_peer_ext_stats_tlv(const void *tag_buf,
+				struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_ml_peer_ext_details_tlv *htt_stats_buf = tag_buf;
+	u8 *buf = stats_req->buf;
+	u32 len = stats_req->buf_len;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+
+	len += scnprintf(buf + len, buf_len - len, "HTT_ML_PEER_EXT_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "====================\n");
+	len += scnprintf(buf + len, buf_len - len,
+			 "peer_assoc_ipc_recvd    = %u\n",
+			 HTT_ML_PEER_EXT_DETAILS_PEER_ASSOC_IPC_RECVD_GET(
+				 htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+			 "sched_peer_delete_recvd = %u\n",
+			 HTT_ML_PEER_EXT_DETAILS_SCHED_PEER_DELETE_RECVD_GET(
+				 htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+			 "mld_ast_index           = %u\n",
+			 HTT_ML_PEER_EXT_DETAILS_MLD_AST_INDEX_GET(htt_stats_buf->msg_dword_1));
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "=========================================== \n");
+
+	stats_req->buf_len = len;
+}
+
+static inline void
+htt_print_ml_link_info_stats_tlv(const void *tag_buf,
+				 struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_ml_link_info_tlv *htt_stats_buf = tag_buf;
+	u8 *buf = stats_req->buf;
+	u32 len = stats_req->buf_len;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+
+	len += scnprintf(buf + len, buf_len - len, "HTT_ML_LINK_INFO_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "=====================\n");
+	len += scnprintf(buf + len, buf_len - len,
+			 "valid             = %u\n",
+			 HTT_ML_LINK_INFO_VALID_GET(htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+			 "active            = %u\n",
+			 HTT_ML_LINK_INFO_ACTIVE_GET(htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+			 "primary           = %u\n",
+			 HTT_ML_LINK_INFO_PRIMARY_GET(htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+			 "assoc_link        = %u\n",
+			 HTT_ML_LINK_INFO_ASSOC_LINK_GET(htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+			 "chip_id           = %u\n",
+			 HTT_ML_LINK_INFO_CHIP_ID_GET(htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+			 "ieee_link_id      = %u\n",
+			 HTT_ML_LINK_INFO_IEEE_LINK_ID_GET(htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+			 "hw_link_id        = %u\n",
+			 HTT_ML_LINK_INFO_HW_LINK_ID_GET(htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+			 "logical_link_id   = %u\n",
+			 HTT_ML_LINK_INFO_LOGICAL_LINK_ID_GET(htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+			 "master_link       = %u\n",
+			 HTT_ML_LINK_INFO_MASTER_LINK_GET(htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+			 "anchor_link       = %u\n",
+			 HTT_ML_LINK_INFO_ANCHOR_LINK_GET(htt_stats_buf->msg_dword_1));
+	len += scnprintf(buf + len, buf_len - len,
+			 "initialized       = %u\n",
+			 HTT_ML_LINK_INFO_INITIALIZED_GET(htt_stats_buf->msg_dword_1));
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "sw_peer_id        = %u\n",
+			 HTT_ML_LINK_INFO_SW_PEER_ID_GET(htt_stats_buf->msg_dword_2));
+	len += scnprintf(buf + len, buf_len - len,
+			 "vdev_id           = %u\n",
+			 HTT_ML_LINK_INFO_VDEV_ID_GET(htt_stats_buf->msg_dword_2));
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "primary_tid_mask  = 0x%x\n",
+			 htt_stats_buf->primary_tid_mask);
+	len += scnprintf(buf + len, buf_len - len,
+			 "=========================================== \n");
+	stats_req->buf_len = len;
+}
+
 static inline void htt_print_phy_counters_tlv(const void *tag_buf,
 					      struct debug_htt_stats_req *stats_req)
 {
@@ -7459,6 +7751,18 @@ static int ath12k_dbg_htt_ext_stats_pars
 	case HTT_STATS_PHY_TPC_STATS_TAG:
 		htt_print_phy_tpc_stats_tlv(tag_buf, stats_req);
 		break;
+	case HTT_STATS_PDEV_PUNCTURE_STATS_TAG:
+		htt_print_puncture_stats_tlv(tag_buf, stats_req);
+		break;
+	case HTT_STATS_ML_PEER_DETAILS_TAG:
+		htt_print_ml_peer_details_stats_tlv(tag_buf, stats_req);
+		break;
+	case HTT_STATS_ML_PEER_EXT_DETAILS_TAG:
+		htt_print_ml_peer_ext_stats_tlv(tag_buf, stats_req);
+		break;
+	case HTT_STATS_ML_LINK_INFO_DETAILS_TAG:
+		htt_print_ml_link_info_stats_tlv(tag_buf, stats_req);
+		break;
 	default:
 		break;
 	}
--- a/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.h
+++ b/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.h
@@ -169,6 +169,24 @@ enum htt_tlv_tag_t {
 	HTT_STATS_DMAC_RESET_STATS_TAG			    = 155,
 	HTT_STATS_RX_PDEV_BE_UL_OFDMA_USER_STATS_TAG	    = 156,
 	HTT_STATS_PHY_TPC_STATS_TAG			    = 157,
+	HTT_STATS_PDEV_PUNCTURE_STATS_TAG		    = 158,
+	HTT_STATS_ML_PEER_DETAILS_TAG			    = 159,
+	HTT_STATS_ML_PEER_EXT_DETAILS_TAG		    = 160,
+	HTT_STATS_ML_LINK_INFO_DETAILS_TAG		    = 161,
+	HTT_STATS_TX_PDEV_PPDU_DUR_TAG			    = 162,
+	HTT_STATS_RX_PDEV_PPDU_DUR_TAG			    = 163,
+	HTT_STATS_ODD_PDEV_MANDATORY_TAG		    = 164,
+	HTT_STATS_PDEV_SCHED_ALGO_OFDMA_STATS_TAG	    = 165,
+	HTT_DBG_ODD_MANDATORY_MUMIMO_TAG		    = 166,
+	HTT_DBG_ODD_MANDATORY_MUOFDMA_TAG		    = 167,
+	HTT_STATS_LATENCY_PROF_CAL_STATS_TAG		    = 168,
+	HTT_STATS_TX_PDEV_MUEDCA_PARAMS_STATS_TAG	    = 169,
+	HTT_STATS_PDEV_BW_MGR_STATS_TAG			    = 170,
+	HTT_STATS_TX_PDEV_AP_EDCA_PARAMS_STATS_TAG	    = 171,
+	HTT_STATS_TXBF_OFDMA_AX_STEER_MPDU_STATS_TAG	    = 172,
+	HTT_STATS_TXBF_OFDMA_BE_STEER_MPDU_STATS_TAG	    = 173,
+	HTT_STATS_PEER_AX_OFDMA_STATS_TAG		    = 174,
+	HTT_STATS_TX_PDEV_MU_EDCA_PARAMS_STATS_TAG	    = 175,
 	HTT_STATS_MAX_TAG,
 };
 
@@ -573,12 +591,25 @@ enum htt_stats_param_type {
 	HTT_STATS_PREAM_HT,
 	HTT_STATS_PREAM_VHT,
 	HTT_STATS_PREAM_HE,
-	HTT_STATS_PREAM_RSVD,
+	HTT_STATS_PREAM_EHT,
 	HTT_STATS_PREAM_RSVD1,
 
 	HTT_STATS_PREAM_COUNT,
 };
 
+enum htt_stats_direction {
+	HTT_STATS_DIRECTION_TX,
+	HTT_STATS_DIRECTION_RX,
+};
+
+enum htt_stats_ppdu_type {
+	HTT_STATS_PPDU_TYPE_MODE_SU,
+	HTT_STATS_PPDU_TYPE_DL_MU_MIMO,
+	HTT_STATS_PPDU_TYPE_UL_MU_MIMO,
+	HTT_STATS_PPDU_TYPE_DL_MU_OFDMA,
+	HTT_STATS_PPDU_TYPE_UL_MU_OFDMA,
+};
+
 #define HTT_TX_PEER_STATS_NUM_MCS_COUNTERS        12
 #define HTT_TX_PEER_STATS_NUM_EXTRA_MCS_COUNTERS   2
 #define HTT_TX_PEER_STATS_NUM_GI_COUNTERS          4
@@ -2828,6 +2859,19 @@ struct htt_rx_pdev_be_ul_ofdma_user_stat
 #define HTT_MAX_RX_OTA_ERR_CNT 14
 #define HTT_STATS_MAX_CHAINS 8
 #define HTT_MAX_CH_PWR_INFO_SIZE 16
+#define HTT_PUNCTURE_STATS_MAX_SUBBAND_COUNT 32
+
+#define HTT_PDEV_PUNCTURE_STATS_MAC_ID_M 0x000000ff
+#define HTT_PDEV_PUNCTURE_STATS_MAC_ID_S 0
+
+#define HTT_PDEV_PUNCTURE_STATS_MAC_ID_GET(_var) \
+	(((_var) & HTT_PDEV_PUNCTURE_STATS_MAC_ID_M) >> \
+	 HTT_PDEV_PUNCTURE_STATS_MAC_ID_S)
+#define HTT_PDEV_PUNCTURE_STATS_MAC_ID_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_PDEV_PUNCTURE_STATS_MAC_ID, _val); \
+		((_var) |= ((_val) << HTT_PDEV_PUNCTURE_STATS_MAC_ID_S)); \
+	} while (0)
 
 struct htt_phy_tpc_stats_tlv {
 	u32 pdev_id;
@@ -2847,6 +2891,449 @@ struct htt_phy_tpc_stats_tlv {
 	u32 sub_band_txpower[HTT_MAX_CH_PWR_INFO_SIZE];
 };
 
+struct htt_pdev_puncture_stats_tlv {
+	union {
+		struct {
+			u32 mac_id:8,
+			    reserved:24;
+		};
+		u32 mac_id__word;
+	};
+	u32 direction;
+	u32 preamble;
+	u32 ppdu_type;
+	u32 subband_count;
+	u32 last_used_pattern_mask;
+	u32 num_subbands_used_cnt[HTT_PUNCTURE_STATS_MAX_SUBBAND_COUNT];
+};
+
+#define HTT_ML_PEER_DETAILS_NUM_LINKS_M			0x00000003
+#define HTT_ML_PEER_DETAILS_NUM_LINKS_S			0
+#define HTT_ML_PEER_DETAILS_ML_PEER_ID_M		0x00003FFC
+#define HTT_ML_PEER_DETAILS_ML_PEER_ID_S		2
+#define HTT_ML_PEER_DETAILS_PRIMARY_LINK_IDX_M		0x0001C000
+#define HTT_ML_PEER_DETAILS_PRIMARY_LINK_IDX_S		14
+#define HTT_ML_PEER_DETAILS_PRIMARY_CHIP_ID_M		0x00060000
+#define HTT_ML_PEER_DETAILS_PRIMARY_CHIP_ID_S		17
+#define HTT_ML_PEER_DETAILS_LINK_INIT_COUNT_M		0x00380000
+#define HTT_ML_PEER_DETAILS_LINK_INIT_COUNT_S		19
+#define HTT_ML_PEER_DETAILS_NON_STR_M			0x00400000
+#define HTT_ML_PEER_DETAILS_NON_STR_S			22
+#define HTT_ML_PEER_DETAILS_EMLSR_M			0x00800000
+#define HTT_ML_PEER_DETAILS_EMLSR_S			23
+#define HTT_ML_PEER_DETAILS_IS_STA_KO_M			0x01000000
+#define HTT_ML_PEER_DETAILS_IS_STA_KO_S			24
+#define HTT_ML_PEER_DETAILS_NUM_LOCAL_LINKS_M		0x06000000
+#define HTT_ML_PEER_DETAILS_NUM_LOCAL_LINKS_S		25
+#define HTT_ML_PEER_DETAILS_ALLOCATED_M			0x08000000
+#define HTT_ML_PEER_DETAILS_ALLOCATED_S			27
+
+#define HTT_ML_PEER_DETAILS_PARTICIPATING_CHIPS_BITMAP_M	0x000000ff
+#define HTT_ML_PEER_DETAILS_PARTICIPATING_CHIPS_BITMAP_S	0
+
+#define HTT_ML_PEER_DETAILS_NUM_LINKS_GET(_var) \
+	(((_var) & HTT_ML_PEER_DETAILS_NUM_LINKS_M) >> \
+	 HTT_ML_PEER_DETAILS_NUM_LINKS_S)
+
+#define HTT_ML_PEER_DETAILS_NUM_LINKS_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_PEER_DETAILS_NUM_LINKS, _val); \
+		((_var) &= ~(HTT_ML_PEER_DETAILS_NUM_LINKS_M)); \
+		((_var) |= ((_val) << HTT_ML_PEER_DETAILS_NUM_LINKS_S)); \
+	} while (0)
+
+#define HTT_ML_PEER_DETAILS_ML_PEER_ID_GET(_var) \
+	(((_var) & HTT_ML_PEER_DETAILS_ML_PEER_ID_M) >> \
+	 HTT_ML_PEER_DETAILS_ML_PEER_ID_S)
+
+#define HTT_ML_PEER_DETAILS_ML_PEER_ID_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_PEER_DETAILS_ML_PEER_ID, _val); \
+		((_var) &= ~(HTT_ML_PEER_DETAILS_ML_PEER_ID_M)); \
+		((_var) |= ((_val) << HTT_ML_PEER_DETAILS_ML_PEER_ID_S)); \
+	} while (0)
+
+#define HTT_ML_PEER_DETAILS_PRIMARY_LINK_IDX_GET(_var) \
+	(((_var) & HTT_ML_PEER_DETAILS_PRIMARY_LINK_IDX_M) >> \
+	 HTT_ML_PEER_DETAILS_PRIMARY_LINK_IDX_S)
+
+#define HTT_ML_PEER_DETAILS_PRIMARY_LINK_IDX_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_PEER_DETAILS_PRIMARY_LINK_IDX, _val); \
+		((_var) &= ~(HTT_ML_PEER_DETAILS_PRIMARY_LINK_IDX_M)); \
+		((_var) |= ((_val) << HTT_ML_PEER_DETAILS_PRIMARY_LINK_IDX_S)); \
+	} while (0)
+#define HTT_ML_PEER_DETAILS_PRIMARY_CHIP_ID_GET(_var) \
+	(((_var) & HTT_ML_PEER_DETAILS_PRIMARY_CHIP_ID_M) >> \
+	 HTT_ML_PEER_DETAILS_PRIMARY_CHIP_ID_S)
+
+#define HTT_ML_PEER_DETAILS_PRIMARY_CHIP_ID_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_PEER_DETAILS_PRIMARY_CHIP_ID, _val); \
+		((_var) &= ~(HTT_ML_PEER_DETAILS_PRIMARY_CHIP_ID_M)); \
+		((_var) |= ((_val) << HTT_ML_PEER_DETAILS_PRIMARY_CHIP_ID_S)); \
+	} while (0)
+
+#define HTT_ML_PEER_DETAILS_LINK_INIT_COUNT_GET(_var) \
+	(((_var) & HTT_ML_PEER_DETAILS_LINK_INIT_COUNT_M) >> \
+	 HTT_ML_PEER_DETAILS_LINK_INIT_COUNT_S)
+
+#define HTT_ML_PEER_DETAILS_LINK_INIT_COUNT_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_PEER_DETAILS_LINK_INIT_COUNT, _val); \
+		((_var) &= ~(HTT_ML_PEER_DETAILS_LINK_INIT_COUNT_M)); \
+		((_var) |= ((_val) << HTT_ML_PEER_DETAILS_LINK_INIT_COUNT_S)); \
+	} while (0)
+
+#define HTT_ML_PEER_DETAILS_NON_STR_GET(_var) \
+	(((_var) & HTT_ML_PEER_DETAILS_NON_STR_M) >> \
+	 HTT_ML_PEER_DETAILS_NON_STR_S)
+
+#define HTT_ML_PEER_DETAILS_NON_STR_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_PEER_DETAILS_NON_STR, _val); \
+		((_var) &= ~(HTT_ML_PEER_DETAILS_NON_STR_M)); \
+		((_var) |= ((_val) << HTT_ML_PEER_DETAILS_NON_STR_S)); \
+	} while (0)
+
+#define HTT_ML_PEER_DETAILS_EMLSR_GET(_var) \
+	(((_var) & HTT_ML_PEER_DETAILS_EMLSR_M) >> \
+	 HTT_ML_PEER_DETAILS_EMLSR_S)
+
+#define HTT_ML_PEER_DETAILS_EMLSR_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_PEER_DETAILS_EMLSR, _val); \
+		((_var) &= ~(HTT_ML_PEER_DETAILS_EMLSR_M)); \
+		((_var) |= ((_val) << HTT_ML_PEER_DETAILS_EMLSR_S)); \
+	} while (0)
+
+#define HTT_ML_PEER_DETAILS_IS_STA_KO_GET(_var) \
+	(((_var) & HTT_ML_PEER_DETAILS_IS_STA_KO_M) >> \
+	 HTT_ML_PEER_DETAILS_IS_STA_KO_S)
+
+#define HTT_ML_PEER_DETAILS_IS_STA_KO_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_PEER_DETAILS_IS_STA_KO, _val); \
+		((_var) &= ~(HTT_ML_PEER_DETAILS_IS_STA_KO_M)); \
+		((_var) |= ((_val) << HTT_ML_PEER_DETAILS_IS_STA_KO_S)); \
+	} while (0)
+
+#define HTT_ML_PEER_DETAILS_NUM_LOCAL_LINKS_GET(_var) \
+	(((_var) & HTT_ML_PEER_DETAILS_NUM_LOCAL_LINKS_M) >> \
+	 HTT_ML_PEER_DETAILS_NUM_LOCAL_LINKS_S)
+#define HTT_ML_PEER_DETAILS_NUM_LOCAL_LINKS_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_PEER_DETAILS_NUM_LOCAL_LINKS, _val); \
+		((_var) &= ~(HTT_ML_PEER_DETAILS_NUM_LOCAL_LINKS_M)); \
+		((_var) |= ((_val) << HTT_ML_PEER_DETAILS_NUM_LOCAL_LINKS_S)); \
+	} while (0)
+
+#define HTT_ML_PEER_DETAILS_ALLOCATED_GET(_var) \
+	(((_var) & HTT_ML_PEER_DETAILS_ALLOCATED_M) >> \
+	 HTT_ML_PEER_DETAILS_ALLOCATED_S)
+
+#define HTT_ML_PEER_DETAILS_ALLOCATED_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_PEER_DETAILS_ALLOCATED, _val); \
+		((_var) &= ~(HTT_ML_PEER_DETAILS_ALLOCATED_M)); \
+		((_var) |= ((_val) << HTT_ML_PEER_DETAILS_ALLOCATED_S)); \
+	} while (0)
+
+#define HTT_ML_PEER_DETAILS_PARTICIPATING_CHIPS_BITMAP_GET(_var) \
+	(((_var) & HTT_ML_PEER_DETAILS_PARTICIPATING_CHIPS_BITMAP_M) >> \
+	 HTT_ML_PEER_DETAILS_PARTICIPATING_CHIPS_BITMAP_S)
+
+#define HTT_ML_PEER_DETAILS_PARTICIPATING_CHIPS_BITMAP_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_PEER_DETAILS_PARTICIPATING_CHIPS_BITMAP, _val); \
+		((_var) &= ~(HTT_ML_PEER_DETAILS_PARTICIPATING_CHIPS_BITMAP_M)); \
+		((_var) |= ((_val) << HTT_ML_PEER_DETAILS_PARTICIPATING_CHIPS_BITMAP_S)); \
+	} while (0)
+
+struct htt_ml_peer_details_tlv {
+	struct htt_mac_addr remote_mld_mac_addr;
+	union {
+		struct {
+			u32 num_links:2,
+			    ml_peer_id:12,
+			    primary_link_idx:3,
+			    primary_chip_id:2,
+			    link_init_count:3,
+			    non_str:1,
+			    emlsr:1,
+			    is_sta_ko:1,
+			    num_local_links:2,
+			    allocated:1,
+			    reserved:4;
+		};
+		u32 msg_dword_1;
+	};
+
+	union {
+		struct {
+			u32 participating_chips_bitmap:8,
+			    reserved1:24;
+		};
+		u32 msg_dword_2;
+	};
+
+	u32 ml_peer_flags;
+};
+
+#define HTT_ML_PEER_EXT_DETAILS_PEER_ASSOC_IPC_RECVD_M		0x0000003F
+#define HTT_ML_PEER_EXT_DETAILS_PEER_ASSOC_IPC_RECVD_S		0
+#define HTT_ML_PEER_EXT_DETAILS_SCHED_PEER_DELETE_RECVD_M	0x00000FC0
+#define HTT_ML_PEER_EXT_DETAILS_SCHED_PEER_DELETE_RECVD_S	6
+#define HTT_ML_PEER_EXT_DETAILS_MLD_AST_INDEX_M			0x0FFFF000
+#define HTT_ML_PEER_EXT_DETAILS_MLD_AST_INDEX_S			12
+
+#define HTT_ML_PEER_EXT_DETAILS_PEER_ASSOC_IPC_RECVD_GET(_var) \
+	(((_var) & HTT_ML_PEER_EXT_DETAILS_PEER_ASSOC_IPC_RECVD_M) >> \
+	 HTT_ML_PEER_EXT_DETAILS_PEER_ASSOC_IPC_RECVD_S)
+
+#define HTT_ML_PEER_EXT_DETAILS_PEER_ASSOC_IPC_RECVD_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_PEER_EXT_DETAILS_PEER_ASSOC_IPC_RECVD, _val); \
+		((_var) &= ~(HTT_ML_PEER_EXT_DETAILS_PEER_ASSOC_IPC_RECVD_M)); \
+		((_var) |= ((_val) << HTT_ML_PEER_EXT_DETAILS_PEER_ASSOC_IPC_RECVD_S)); \
+	} while (0)
+
+#define HTT_ML_PEER_EXT_DETAILS_SCHED_PEER_DELETE_RECVD_GET(_var) \
+	(((_var) & HTT_ML_PEER_EXT_DETAILS_SCHED_PEER_DELETE_RECVD_M) >> \
+	 HTT_ML_PEER_EXT_DETAILS_SCHED_PEER_DELETE_RECVD_S)
+
+#define HTT_ML_PEER_EXT_DETAILS_SCHED_PEER_DELETE_RECVD_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_PEER_EXT_DETAILS_SCHED_PEER_DELETE_RECVD, _val); \
+		((_var) &= ~(HTT_ML_PEER_EXT_DETAILS_SCHED_PEER_DELETE_RECVD_M)); \
+		((_var) |= ((_val) << HTT_ML_PEER_EXT_DETAILS_SCHED_PEER_DELETE_RECVD_S)); \
+	} while (0)
+
+#define HTT_ML_PEER_EXT_DETAILS_MLD_AST_INDEX_GET(_var) \
+	(((_var) & HTT_ML_PEER_EXT_DETAILS_MLD_AST_INDEX_M) >> \
+	 HTT_ML_PEER_EXT_DETAILS_MLD_AST_INDEX_S)
+
+#define HTT_ML_PEER_EXT_DETAILS_MLD_AST_INDEX_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_PEER_EXT_DETAILS_MLD_AST_INDEX, _val); \
+		((_var) &= ~(HTT_ML_PEER_EXT_DETAILS_MLD_AST_INDEX_M)); \
+		((_var) |= ((_val) << HTT_ML_PEER_EXT_DETAILS_MLD_AST_INDEX_S)); \
+	} while (0)
+
+struct htt_ml_peer_ext_details_tlv {
+	union {
+		struct {
+			u32 peer_assoc_ipc_recvd:6,
+			    sched_peer_delete_recvd:6,
+			    mld_ast_index:16,
+			    reserved:4;
+		};
+		u32 msg_dword_1;
+	};
+};
+
+#define HTT_ML_LINK_INFO_VALID_M		0x00000001
+#define HTT_ML_LINK_INFO_VALID_S		0
+#define HTT_ML_LINK_INFO_ACTIVE_M		0x00000002
+#define HTT_ML_LINK_INFO_ACTIVE_S		1
+#define HTT_ML_LINK_INFO_PRIMARY_M		0x00000004
+#define HTT_ML_LINK_INFO_PRIMARY_S		2
+#define HTT_ML_LINK_INFO_ASSOC_LINK_M		0x00000008
+#define HTT_ML_LINK_INFO_ASSOC_LINK_S		3
+#define HTT_ML_LINK_INFO_CHIP_ID_M		0x00000070
+#define HTT_ML_LINK_INFO_CHIP_ID_S		4
+#define HTT_ML_LINK_INFO_IEEE_LINK_ID_M		0x00007F80
+#define HTT_ML_LINK_INFO_IEEE_LINK_ID_S		7
+#define HTT_ML_LINK_INFO_HW_LINK_ID_M		0x00038000
+#define HTT_ML_LINK_INFO_HW_LINK_ID_S		15
+#define HTT_ML_LINK_INFO_LOGICAL_LINK_ID_M	0x000C0000
+#define HTT_ML_LINK_INFO_LOGICAL_LINK_ID_S	18
+#define HTT_ML_LINK_INFO_MASTER_LINK_M		0x00100000
+#define HTT_ML_LINK_INFO_MASTER_LINK_S		20
+#define HTT_ML_LINK_INFO_ANCHOR_LINK_M		0x00200000
+#define HTT_ML_LINK_INFO_ANCHOR_LINK_S		21
+#define HTT_ML_LINK_INFO_INITIALIZED_M		0x00400000
+#define HTT_ML_LINK_INFO_INITIALIZED_S		22
+
+#define HTT_ML_LINK_INFO_SW_PEER_ID_M		0x0000ffff
+#define HTT_ML_LINK_INFO_SW_PEER_ID_S		0
+#define HTT_ML_LINK_INFO_VDEV_ID_M		0x00ff0000
+#define HTT_ML_LINK_INFO_VDEV_ID_S		16
+
+#define HTT_ML_LINK_INFO_VALID_GET(_var) \
+	(((_var) & HTT_ML_LINK_INFO_VALID_M) >> \
+	 HTT_ML_LINK_INFO_VALID_S)
+
+#define HTT_ML_LINK_INFO_VALID_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_LINK_INFO_VALID, _val); \
+		((_var) &= ~(HTT_ML_LINK_INFO_VALID_M)); \
+		((_var) |= ((_val) << HTT_ML_LINK_INFO_VALID_S)); \
+	} while (0)
+
+#define HTT_ML_LINK_INFO_ACTIVE_GET(_var) \
+	(((_var) & HTT_ML_LINK_INFO_ACTIVE_M) >> \
+	 HTT_ML_LINK_INFO_ACTIVE_S)
+
+#define HTT_ML_LINK_INFO_ACTIVE_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_LINK_INFO_ACTIVE, _val); \
+		((_var) &= ~(HTT_ML_LINK_INFO_ACTIVE_M)); \
+		((_var) |= ((_val) << HTT_ML_LINK_INFO_ACTIVE_S)); \
+	} while (0)
+
+#define HTT_ML_LINK_INFO_PRIMARY_GET(_var) \
+	(((_var) & HTT_ML_LINK_INFO_PRIMARY_M) >> \
+	 HTT_ML_LINK_INFO_PRIMARY_S)
+
+#define HTT_ML_LINK_INFO_PRIMARY_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_LINK_INFO_PRIMARY, _val); \
+		((_var) &= ~(HTT_ML_LINK_INFO_PRIMARY_M)); \
+		((_var) |= ((_val) << HTT_ML_LINK_INFO_PRIMARY_S)); \
+	} while (0)
+
+#define HTT_ML_LINK_INFO_ASSOC_LINK_GET(_var) \
+	(((_var) & HTT_ML_LINK_INFO_ASSOC_LINK_M) >> \
+	 HTT_ML_LINK_INFO_ASSOC_LINK_S)
+
+#define HTT_ML_LINK_INFO_ASSOC_LINK_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_LINK_INFO_ASSOC_LINK, _val); \
+		((_var) &= ~(HTT_ML_LINK_INFO_ASSOC_LINK_M)); \
+		((_var) |= ((_val) << HTT_ML_LINK_INFO_ASSOC_LINK_S)); \
+	} while (0)
+
+#define HTT_ML_LINK_INFO_CHIP_ID_GET(_var) \
+	(((_var) & HTT_ML_LINK_INFO_CHIP_ID_M) >> \
+	 HTT_ML_LINK_INFO_CHIP_ID_S)
+
+#define HTT_ML_LINK_INFO_CHIP_ID_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_LINK_INFO_CHIP_ID, _val); \
+		((_var) &= ~(HTT_ML_LINK_INFO_CHIP_ID_M)); \
+		((_var) |= ((_val) << HTT_ML_LINK_INFO_CHIP_ID_S)); \
+	} while (0)
+
+#define HTT_ML_LINK_INFO_IEEE_LINK_ID_GET(_var) \
+	(((_var) & HTT_ML_LINK_INFO_IEEE_LINK_ID_M) >> \
+	 HTT_ML_LINK_INFO_IEEE_LINK_ID_S)
+
+#define HTT_ML_LINK_INFO_IEEE_LINK_ID_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_LINK_INFO_IEEE_LINK_ID, _val); \
+		((_var) &= ~(HTT_ML_LINK_INFO_IEEE_LINK_ID_M)); \
+		((_var) |= ((_val) << HTT_ML_LINK_INFO_IEEE_LINK_ID_S)); \
+	} while (0)
+
+#define HTT_ML_LINK_INFO_HW_LINK_ID_GET(_var) \
+	(((_var) & HTT_ML_LINK_INFO_HW_LINK_ID_M) >> \
+	 HTT_ML_LINK_INFO_HW_LINK_ID_S)
+
+#define HTT_ML_LINK_INFO_HW_LINK_ID_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_LINK_INFO_HW_LINK_ID, _val); \
+		((_var) &= ~(HTT_ML_LINK_INFO_HW_LINK_ID_M)); \
+		((_var) |= ((_val) << HTT_ML_LINK_INFO_HW_LINK_ID_S)); \
+	} while (0)
+
+#define HTT_ML_LINK_INFO_LOGICAL_LINK_ID_GET(_var) \
+	(((_var) & HTT_ML_LINK_INFO_LOGICAL_LINK_ID_M) >> \
+	 HTT_ML_LINK_INFO_LOGICAL_LINK_ID_S)
+
+#define HTT_ML_LINK_INFO_LOGICAL_LINK_ID_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_LINK_INFO_LOGICAL_LINK_ID, _val); \
+		((_var) &= ~(HTT_ML_LINK_INFO_LOGICAL_LINK_ID_M)); \
+		((_var) |= ((_val) << HTT_ML_LINK_INFO_LOGICAL_LINK_ID_S)); \
+	} while (0)
+
+#define HTT_ML_LINK_INFO_MASTER_LINK_GET(_var) \
+	(((_var) & HTT_ML_LINK_INFO_MASTER_LINK_M) >> \
+	 HTT_ML_LINK_INFO_MASTER_LINK_S)
+
+#define HTT_ML_LINK_INFO_MASTER_LINK_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_LINK_INFO_MASTER_LINK, _val); \
+		((_var) &= ~(HTT_ML_LINK_INFO_MASTER_LINK_M)); \
+		((_var) |= ((_val) << HTT_ML_LINK_INFO_MASTER_LINK_S)); \
+	} while (0)
+
+#define HTT_ML_LINK_INFO_ANCHOR_LINK_GET(_var) \
+	(((_var) & HTT_ML_LINK_INFO_ANCHOR_LINK_M) >> \
+	 HTT_ML_LINK_INFO_ANCHOR_LINK_S)
+
+#define HTT_ML_LINK_INFO_ANCHOR_LINK_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_LINK_INFO_ANCHOR_LINK, _val); \
+		((_var) &= ~(HTT_ML_LINK_INFO_ANCHOR_LINK_M)); \
+		((_var) |= ((_val) << HTT_ML_LINK_INFO_ANCHOR_LINK_S)); \
+	} while (0)
+
+#define HTT_ML_LINK_INFO_INITIALIZED_GET(_var) \
+	(((_var) & HTT_ML_LINK_INFO_INITIALIZED_M) >> \
+	 HTT_ML_LINK_INFO_INITIALIZED_S)
+
+#define HTT_ML_LINK_INFO_INITIALIZED_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_LINK_INFO_INITIALIZED, _val); \
+		((_var) &= ~(HTT_ML_LINK_INFO_INITIALIZED_M)); \
+		((_var) |= ((_val) << HTT_ML_LINK_INFO_INITIALIZED_S)); \
+	} while (0)
+
+#define HTT_ML_LINK_INFO_SW_PEER_ID_GET(_var) \
+	(((_var) & HTT_ML_LINK_INFO_SW_PEER_ID_M) >> \
+	 HTT_ML_LINK_INFO_SW_PEER_ID_S)
+
+#define HTT_ML_LINK_INFO_SW_PEER_ID_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_LINK_INFO_SW_PEER_ID, _val); \
+		((_var) &= ~(HTT_ML_LINK_INFO_SW_PEER_ID_M)); \
+		((_var) |= ((_val) << HTT_ML_LINK_INFO_SW_PEER_ID_S)); \
+	} while (0)
+
+#define HTT_ML_LINK_INFO_VDEV_ID_GET(_var) \
+	(((_var) & HTT_ML_LINK_INFO_VDEV_ID_M) >> \
+	 HTT_ML_LINK_INFO_VDEV_ID_S)
+
+#define HTT_ML_LINK_INFO_VDEV_ID_SET(_var, _val) \
+	do { \
+		HTT_CHECK_SET_VAL(HTT_ML_LINK_INFO_VDEV_ID, _val); \
+		((_var) &= ~(HTT_ML_LINK_INFO_VDEV_ID_M)); \
+		((_var) |= ((_val) << HTT_ML_LINK_INFO_VDEV_ID_S)); \
+	} while (0)
+
+struct htt_ml_link_info_tlv {
+	union {
+		struct {
+			u32 valid:1,
+			    active:1,
+			    primary:1,
+			    assoc_link:1,
+			    chip_id:3,
+			    ieee_link_id:8,
+			    hw_link_id:3,
+			    logical_link_id:2,
+			    master_link:1,
+			    anchor_link:1,
+			    initialized:1,
+			    reserved:9;
+		};
+		u32 msg_dword_1;
+	};
+
+	union {
+		struct {
+			u32 sw_peer_id:16,
+			    vdev_id:8,
+			    reserved1:8;
+		};
+		u32 msg_dword_2;
+	};
+
+	u32 primary_tid_mask;
+};
+
 struct htt_phy_counters_tlv {
 	u32 rx_ofdma_timing_err_cnt;
 	u32 rx_cck_fail_cnt;
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -1156,7 +1156,7 @@ int ath12k_dp_tx_htt_h2t_ppdu_stats_req(
 		cmd->msg = u32_encode_bits(HTT_H2T_MSG_TYPE_PPDU_STATS_CFG,
 					   HTT_PPDU_STATS_CFG_MSG_TYPE);
 
-		pdev_mask = 1 << (i + 1);
+		pdev_mask = DP_SW2HW_MACID(ar->pdev_idx) + i;
 		cmd->msg |= u32_encode_bits(pdev_mask, HTT_PPDU_STATS_CFG_PDEV_ID);
 		cmd->msg |= u32_encode_bits(mask, HTT_PPDU_STATS_CFG_TLV_TYPE_BITMASK);
 
