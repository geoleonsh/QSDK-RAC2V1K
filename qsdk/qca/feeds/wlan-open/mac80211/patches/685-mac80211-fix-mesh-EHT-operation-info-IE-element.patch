From 01f966aefe9e41c2267be22362832babd0c605f3 Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Tue, 15 Nov 2022 09:11:40 +0530
Subject: [PATCH] mac80211: fix mesh EHT operation info IE element

Currently, EHT Operation Info IE length was incorrectly calculated due to which
mesh beacon was not getting parsed properly on receiver's end. Also, when ru
puncturing was enabled, there was a further mis-calculation of length.

Alongwith incorrect length, the IE values were also not populated correctly due
to incorrect offset of EHT Operation IE structure members.

Add fix to properly calculate length and then accordingly populate the IE.

Fixes: 86a6ba117e ("mac80211: Package Upgrade 08/18/2022")

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 include/linux/ieee80211.h |  3 +++
 net/mac80211/mesh.c       | 17 +++++++++++++----
 net/mac80211/util.c       | 27 ++++++++++++---------------
 3 files changed, 28 insertions(+), 19 deletions(-)

--- a/include/linux/ieee80211.h
+++ b/include/linux/ieee80211.h
@@ -2071,6 +2071,9 @@ struct ieee80211_eht_cap_elem {
 #define IEEE80211_EHT_OPER_GROUP_ADDRESSED_BU_IND_LIMIT         0x08
 #define IEEE80211_EHT_OPER_GROUP_ADDRESSED_BU_IND_EXP_MASK      0x30
 
+#define IEEE80211_EHT_OPERATION_FIXED_LEN			0x5
+#define IEEE80211_EHT_OPERATION_INFO_FIXED_LEN			0x3
+#define DISABLED_SUBCHANNEL_BITMAP_BYTES_SIZE			0x2
 /**
  * struct ieee80211_eht_operation - eht operation element
  *
--- a/net/mac80211/mesh.c
+++ b/net/mac80211/mesh.c
@@ -698,8 +698,11 @@ int mesh_add_eht_oper_ie(struct ieee8021
 	    sdata->vif.bss_conf.chandef.width == NL80211_CHAN_WIDTH_10)
 		return 0;
 
-	len = 2 + 1 + sizeof(struct ieee80211_eht_operation) +
-		      sizeof(struct ieee80211_eht_operation_info);
+	len = 2 + 1 + IEEE80211_EHT_OPERATION_FIXED_LEN +
+		      IEEE80211_EHT_OPERATION_INFO_FIXED_LEN;
+
+	if (sdata->vif.bss_conf.chandef.ru_punct_bitmap)
+		len += DISABLED_SUBCHANNEL_BITMAP_BYTES_SIZE;
 
 	if (skb_tailroom(skb) < len)
 		return -ENOMEM;
@@ -905,6 +908,7 @@ ieee80211_mesh_build_beacon(struct ieee8
 	u8 *pos;
 	struct ieee80211_sub_if_data *sdata;
 	int hdr_len = offsetofend(struct ieee80211_mgmt, u.beacon);
+	int eht_optional_sz = 0;
 
 	sdata = container_of(ifmsh, struct ieee80211_sub_if_data, u.mesh);
 	rcu_read_lock();
@@ -916,6 +920,10 @@ ieee80211_mesh_build_beacon(struct ieee8
 						NL80211_IFTYPE_MESH_POINT);
 	ie_len_eht_cap = ieee80211_ie_len_eht_cap(sdata,
 						  NL80211_IFTYPE_MESH_POINT);
+
+	if (sdata->vif.bss_conf.chandef.ru_punct_bitmap)
+		eht_optional_sz = DISABLED_SUBCHANNEL_BITMAP_BYTES_SIZE;
+
 	head_len = hdr_len +
 		   2 + /* NULL SSID */
 		   /* Channel Switch Announcement */
@@ -940,8 +948,9 @@ ieee80211_mesh_build_beacon(struct ieee8
 			   sizeof(struct ieee80211_he_6ghz_oper) +
 		   2 + 1 + sizeof(struct ieee80211_he_6ghz_capa) +
 		   ie_len_eht_cap +
-		   2 + 1 + sizeof(struct ieee80211_eht_operation) +
-		   	 + sizeof(struct ieee80211_eht_operation_info) +
+		   2 + 1 + IEEE80211_EHT_OPERATION_FIXED_LEN +
+			   IEEE80211_EHT_OPERATION_INFO_FIXED_LEN +
+			   eht_optional_sz +
 		   ifmsh->ie_len;
 
 	bcn = kzalloc(sizeof(*bcn) + head_len + tail_len, GFP_KERNEL);
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -3376,23 +3376,28 @@ u8 *ieee80211_ie_build_eht_oper(u8 *pos,
 {
 	struct ieee80211_eht_operation *eht_oper;
 	struct ieee80211_eht_operation_info *eht_oper_info;
-	u8 ie_len = 1 + sizeof(struct ieee80211_eht_operation) +
-			sizeof(struct ieee80211_eht_operation_info);
+	u8 ie_len = 1 + IEEE80211_EHT_OPERATION_FIXED_LEN +
+			IEEE80211_EHT_OPERATION_INFO_FIXED_LEN;
 	u8 chwidth = 0;
 
 	if (chandef->ru_punct_bitmap)
-		ie_len += 2;
+		ie_len += DISABLED_SUBCHANNEL_BITMAP_BYTES_SIZE;
 
 	*pos++ = WLAN_EID_EXTENSION;
 	*pos++ = ie_len;
 	*pos++ = WLAN_EID_EXT_EHT_OPERATION;
 
 	eht_oper = (struct ieee80211_eht_operation *)pos;
-	pos += sizeof(struct ieee80211_eht_operation);
+
+	eht_oper->params |= IEEE80211_EHT_OPER_INFO_PRESENT;
+
+	memcpy(&eht_oper->basic_mcs_nss,
+	       &eht_cap->eht_mcs_nss_supp.only_20mhz,
+	       sizeof(struct ieee80211_eht_mcs_nss_supp_20mhz_only));
+
+	pos += IEEE80211_EHT_OPERATION_FIXED_LEN;
 
 	eht_oper_info = (struct ieee80211_eht_operation_info *)pos;
-	pos += sizeof(struct ieee80211_eht_operation_info) +
-	       chandef->ru_punct_bitmap ? 2 : 0;
 
 	eht_oper_info->ccfs0 =
 		ieee80211_frequency_to_channel(chandef->center_freq1);
@@ -3433,27 +3438,19 @@ u8 *ieee80211_ie_build_eht_oper(u8 *pos,
 		break;
 	}
 
-	memcpy(&eht_oper->basic_mcs_nss,
-	       &eht_cap->eht_mcs_nss_supp.only_20mhz,
-	       sizeof(struct ieee80211_eht_mcs_nss_supp_20mhz_only));
-
-	eht_oper->params |= IEEE80211_EHT_OPER_INFO_PRESENT;
-
 	eht_oper_info->control = chwidth;
 
-	eht_oper->optional[0] = eht_oper_info->control;
-	eht_oper->optional[1] = eht_oper_info->ccfs0;
-	eht_oper->optional[2] = eht_oper_info->ccfs1;
+	pos += IEEE80211_EHT_OPERATION_INFO_FIXED_LEN;
 
 	if (chandef->ru_punct_bitmap) {
+		pos += DISABLED_SUBCHANNEL_BITMAP_BYTES_SIZE;
 		eht_oper->params |=
 			  IEEE80211_EHT_OPER_DISABLED_SUBCHANNEL_BITMAP_PRESENT;
 
-		eht_oper_info->optional[0] = chandef->ru_punct_bitmap && 0x00FF;
+		eht_oper_info->optional[0] = chandef->ru_punct_bitmap & 0x00FF;
 		eht_oper_info->optional[1] = chandef->ru_punct_bitmap >> 8;
-
-		eht_oper->optional[3] = eht_oper_info->optional[0];
-		eht_oper->optional[4] = eht_oper_info->optional[1];
+	} else {
+		eht_oper->params &= ~IEEE80211_EHT_OPER_DISABLED_SUBCHANNEL_BITMAP_PRESENT;
 	}
 
 	return pos;
