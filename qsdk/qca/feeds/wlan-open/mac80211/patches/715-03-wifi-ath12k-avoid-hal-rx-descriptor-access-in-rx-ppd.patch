From dfb71b79b8bcc958d3d3f3244d68cda0fc3e3c65 Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Sun, 12 Feb 2023 19:28:50 +0530
Subject: [PATCH 3/4] wifi: ath12k: avoid hal rx descriptor access in rx ppdu
 and rx rate handler

Introduce the helper function for fetch the rx info and avoid the
hal rx descriptor in pddu and rate handler. Since no need of hal_rx_desc,
removed this argument from the ppdu and rate handler.

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_rx.c | 130 +++++++++++++-----------
 drivers/net/wireless/ath/ath12k/dp_rx.h |  15 ++-
 2 files changed, 86 insertions(+), 59 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -2761,22 +2761,30 @@ static void ath12k_dp_rx_h_mpdu(struct a
 	}
 }
 
-static void ath12k_dp_rx_h_rate(struct ath12k *ar, struct hal_rx_desc *rx_desc,
-				struct ieee80211_rx_status *rx_status)
+static void ath12k_dp_rx_h_rate(struct ath12k *ar, struct ath12k_dp_rx_info *rx_info)
 {
-	struct ath12k_base *ab = ar->ab;
+	struct ieee80211_rx_status *rx_status = rx_info->rx_status;
 	struct ieee80211_supported_band *sband;
-	enum rx_msdu_start_pkt_type pkt_type;
-	u8 bw;
-	u8 rate_mcs, nss;
-	u8 sgi;
+	enum rx_msdu_start_pkt_type pkt_type = RX_MSDU_START_PKT_TYPE_11A;
+	u8 bw = 0;
+	u8 rate_mcs = 0, nss = 0;
+	u8 sgi = 0;
 	bool is_cck;
 
-	pkt_type = ath12k_dp_rx_h_pkt_type(ab, rx_desc);
-	bw = ath12k_dp_rx_h_rx_bw(ab, rx_desc);
-	rate_mcs = ath12k_dp_rx_h_rate_mcs(ab, rx_desc);
-	nss = ath12k_dp_rx_h_nss(ab, rx_desc);
-	sgi = ath12k_dp_rx_h_sgi(ab, rx_desc);
+	if (rx_info->filled & BIT_ULL(ATH12K_RX_INFO_PKT_TYPE))
+		pkt_type = rx_info->pkt_type;
+
+	if (rx_info->filled & BIT_ULL(ATH12K_RX_INFO_BW))
+		bw = rx_info->bw;
+
+	if (rx_info->filled & BIT_ULL(ATH12K_RX_INFO_RATE_MCS))
+		rate_mcs = rx_info->rate_mcs;
+
+	if (rx_info->filled & BIT_ULL(ATH12K_RX_INFO_NSS))
+		nss = rx_info->nss;
+
+	if (rx_info->filled & BIT_ULL(ATH12K_RX_INFO_SGI))
+		sgi = rx_info->sgi;
 
 	switch (pkt_type) {
 	case RX_MSDU_START_PKT_TYPE_11A:
@@ -2851,6 +2859,24 @@ static void ath12k_dp_rx_h_fetch_info(st
 	rx_info->decap_type = ath12k_dp_rx_h_decap_type(ab, rx_desc);
 	rx_info->filled |= BIT_ULL(ATH12K_RX_INFO_DECAP_TYPE);
 
+	rx_info->pkt_type = ath12k_dp_rx_h_pkt_type(ab, rx_desc);
+	rx_info->filled |= BIT_ULL(ATH12K_RX_INFO_PKT_TYPE);
+
+	rx_info->sgi = ath12k_dp_rx_h_sgi(ab, rx_desc);
+	rx_info->filled |= BIT_ULL(ATH12K_RX_INFO_SGI);
+
+	rx_info->rate_mcs = ath12k_dp_rx_h_rate_mcs(ab, rx_desc);
+	rx_info->filled |= BIT_ULL(ATH12K_RX_INFO_RATE_MCS);
+
+	rx_info->bw = ath12k_dp_rx_h_rx_bw(ab, rx_desc);
+	rx_info->filled |= BIT_ULL(ATH12K_RX_INFO_BW);
+
+	rx_info->nss = ath12k_dp_rx_h_nss(ab, rx_desc);
+	rx_info->filled |= BIT_ULL(ATH12K_RX_INFO_NSS);
+
+	rx_info->phy_meta_data = ath12k_dp_rx_h_freq(ab, rx_desc);
+	rx_info->filled |= BIT_ULL(ATH12K_RX_INFO_PHY_META_DATA);
+
 	if (ath12k_dp_rxdesc_mac_addr2_valid(ab, rx_desc)) {
 		ether_addr_copy(rx_info->addr2,
 				ath12k_dp_rxdesc_get_mpdu_start_addr2(ab, rx_desc));
@@ -2858,13 +2884,11 @@ static void ath12k_dp_rx_h_fetch_info(st
 	}
 }
 
-void ath12k_dp_rx_h_ppdu(struct ath12k *ar, struct hal_rx_desc *rx_desc,
-			 struct ath12k_dp_rx_info *rx_info)
+void ath12k_dp_rx_h_ppdu(struct ath12k *ar, struct ath12k_dp_rx_info *rx_info)
 {
-	struct ath12k_base *ab = ar->ab;
 	struct ieee80211_rx_status *rx_status = rx_info->rx_status;
 	u8 channel_num;
-	u32 center_freq, meta_data;
+	u32 center_freq, meta_data = 0;
 	struct ieee80211_channel *channel;
 
 	rx_status->freq = 0;
@@ -2875,7 +2899,9 @@ void ath12k_dp_rx_h_ppdu(struct ath12k *
 
 	rx_status->flag |= RX_FLAG_NO_SIGNAL_VAL;
 
-	meta_data = ath12k_dp_rx_h_freq(ab, rx_desc);
+	if (rx_info->filled & BIT_ULL(ATH12K_RX_INFO_PHY_META_DATA))
+		meta_data = rx_info->phy_meta_data;
+
 	channel_num = meta_data;
 	center_freq = meta_data >> 16;
 
@@ -2897,9 +2923,6 @@ void ath12k_dp_rx_h_ppdu(struct ath12k *
 		ath12k_err(ar->ab, "sband is NULL for status band %d channel_num %d center_freq %d pdev_id %d\n",
 			   rx_status->band, channel_num, center_freq, ar->pdev_idx);
 
-		ath12k_dbg_dump(ar->ab, ATH12K_DBG_DATA, NULL, "rx_desc: ",
-				rx_desc, sizeof(struct hal_rx_desc));
-
 		spin_lock_bh(&ar->data_lock);
 		channel = ar->rx_channel;
 		if (channel) {
@@ -2916,7 +2939,7 @@ void ath12k_dp_rx_h_ppdu(struct ath12k *
 		rx_status->freq = ieee80211_channel_to_frequency(channel_num,
 								 rx_status->band);
 
-	ath12k_dp_rx_h_rate(ar, rx_desc, rx_status);
+	ath12k_dp_rx_h_rate(ar, rx_info);
 }
 
 static void ath12k_dp_rx_deliver_msdu(struct ath12k *ar, struct napi_struct *napi,
@@ -3121,7 +3144,7 @@ static int ath12k_dp_rx_process_msdu(str
 	if (*fast_rx)
 		return 0;
 
-	ath12k_dp_rx_h_ppdu(ar, rx_desc, rx_info);
+	ath12k_dp_rx_h_ppdu(ar, rx_info);
 
 	rx_info->rx_status->flag |= RX_FLAG_SKIP_MONITOR | RX_FLAG_DUP_VALIDATED;
 
@@ -3539,7 +3562,7 @@ mic_fail:
 		    RX_FLAG_IV_STRIPPED | RX_FLAG_DECRYPTED;
 	skb_pull(msdu, hal_rx_desc_sz);
 
-	ath12k_dp_rx_h_ppdu(ar, rx_desc, &rx_info);
+	ath12k_dp_rx_h_ppdu(ar, &rx_info);
 	ath12k_dp_rx_h_undecap(ar, msdu, rx_desc,
 			       HAL_ENCRYPT_TYPE_TKIP_MIC, rxs, true);
 	ieee80211_rx(ar->ah->hw, msdu);
@@ -4262,7 +4285,7 @@ static int ath12k_dp_rx_h_null_q_desc(st
 	    ath12k_dp_rx_check_max_nwifi_hdr_len(ab, desc, msdu))
 		return -EINVAL;
 
-	ath12k_dp_rx_h_ppdu(ar, desc, rx_info);
+	ath12k_dp_rx_h_ppdu(ar, rx_info);
 	fast_rx = false;
 	ath12k_dp_rx_h_mpdu(ar, msdu, desc, rx_info, &fast_rx);
 
@@ -4347,7 +4370,7 @@ static bool ath12k_dp_rx_h_tkip_mic_err(
 	skb_put(msdu, hal_rx_desc_sz + l3pad_bytes + msdu_len);
 	skb_pull(msdu, hal_rx_desc_sz + l3pad_bytes);
 
-	ath12k_dp_rx_h_ppdu(ar, desc, rx_info);
+	ath12k_dp_rx_h_ppdu(ar, rx_info);
 
 	rx_info->rx_status->flag |= (RX_FLAG_MMIC_STRIPPED | RX_FLAG_MMIC_ERROR |
 				     RX_FLAG_DECRYPTED);
@@ -4393,7 +4416,7 @@ static bool ath12k_dp_rx_h_4addr_null_fr
 	    ath12k_dp_rx_check_max_nwifi_hdr_len(ab, rx_desc, msdu))
 		return true;
 
-	ath12k_dp_rx_h_ppdu(ar, rx_desc, rx_info);
+	ath12k_dp_rx_h_ppdu(ar, rx_info);
 
 	ath12k_dp_rx_h_mpdu(ar, msdu, rx_desc, rx_info, &fast_rx);
 
--- a/drivers/net/wireless/ath/ath12k/dp_rx.h
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.h
@@ -68,6 +68,12 @@ struct ath12k_dp_rx_rfc1042_hdr {
 
 enum ath12k_dp_rx_info_type {
 	ATH12K_RX_INFO_DECAP_TYPE,
+	ATH12K_RX_INFO_PKT_TYPE,
+	ATH12K_RX_INFO_SGI,
+	ATH12K_RX_INFO_RATE_MCS,
+	ATH12K_RX_INFO_BW,
+	ATH12K_RX_INFO_NSS,
+	ATH12K_RX_INFO_PHY_META_DATA,
 	ATH12K_RX_INFO_ADDR2,
 
 	/* keep last */
@@ -77,6 +83,12 @@ enum ath12k_dp_rx_info_type {
 struct ath12k_dp_rx_info {
 	u64 filled;
 	u8 decap_type;
+	u8 pkt_type;
+	u8 sgi;
+	u8 rate_mcs;
+	u8 bw;
+	u8 nss;
+	u32 phy_meta_data;
 	u8 addr2[ETH_ALEN];
 	struct ieee80211_rx_status *rx_status;
 };
@@ -158,6 +170,5 @@ u8 ath12k_dp_rx_h_decap_type(struct ath1
 			     struct hal_rx_desc *desc);
 u32 ath12k_dp_rx_h_mpdu_err(struct ath12k_base *ab,
 			    struct hal_rx_desc *desc);
-void ath12k_dp_rx_h_ppdu(struct ath12k *ar, struct hal_rx_desc *rx_desc,
-			 struct ath12k_dp_rx_info *rx_info);
+void ath12k_dp_rx_h_ppdu(struct ath12k *ar, struct ath12k_dp_rx_info *rx_info);
 #endif /* ATH12K_DP_RX_H */
