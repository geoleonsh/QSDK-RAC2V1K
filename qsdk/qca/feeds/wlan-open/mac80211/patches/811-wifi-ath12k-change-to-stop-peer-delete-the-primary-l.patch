From c5821c8f554a2d6c516484e96c53eda091eeabfb Mon Sep 17 00:00:00 2001
From: Wen Gong <quic_wgong@quicinc.com>
Date: Wed, 14 Sep 2022 23:55:46 -0400
Subject: [PATCH 105/112] wifi: ath12k: change to stop/peer delete the primary
 link as last one

Signed-off-by: Wen Gong <quic_wgong@quicinc.com>
Signed-off-by: Amutha Ravikumar <quic_aravikum@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |  1 +
 drivers/net/wireless/ath/ath12k/mac.c  | 95 ++++++++++++++++++++++++++
 2 files changed, 96 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -412,6 +412,7 @@ struct ath12k_link_vif {
 	struct ieee80211_vif *vif;
 	struct device *dev;
 	struct ath12k *ar;
+	bool assoc_link;
 	u8 pdev_idx;
 	u32 vdev_id;
 	u32 beacon_interval;
@@ -433,6 +434,7 @@ struct ath12k_link_vif {
 	bool is_started;
 	bool is_up;
 	bool pending_up;
+	bool pending_stop;
 	bool spectral_enabled;
 	u8 bssid[ETH_ALEN];
 	struct cfg80211_bitrate_mask bitrate_mask;
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -13014,6 +13014,54 @@ out:
 	return ret;
 }
 
+struct ath12k_link_vif *
+ath12k_mac_get_primary_arvif(struct ath12k *ar,
+			     struct ath12k_vif *ahvif)
+{
+	struct ath12k_link_vif *arvif;
+
+	list_for_each_entry(arvif, &ar->arvifs, list) {
+		if (arvif->ahvif != ahvif)
+			continue;
+
+		if (arvif->assoc_link)
+			return arvif;
+	}
+
+	return NULL;
+}
+
+static void
+ath12k_mac_get_ahvif_status(struct ath12k *ar,
+			    struct ath12k_vif *ahvif,
+			    int *out_started_count,
+			    int *out_up_count,
+			    int *out_pending_stop_count)
+{
+	struct ath12k_link_vif *arvif;
+	int started_count = 0;
+	int up_count = 0;
+	int pending_stop_count = 0;
+
+	list_for_each_entry(arvif, &ar->arvifs, list) {
+		if (arvif->ahvif != ahvif)
+			continue;
+
+		if (arvif->is_started)
+			started_count++;
+
+		if (arvif->is_up)
+			up_count++;
+
+		if (arvif->pending_stop)
+			pending_stop_count++;
+	}
+
+	*out_started_count = started_count;
+	*out_up_count = up_count;
+	*out_pending_stop_count = pending_stop_count;
+}
+
 static void
 ath12k_mac_op_unassign_vif_chanctx(struct ieee80211_hw *hw,
 				   struct ieee80211_vif *vif,
@@ -13027,6 +13075,8 @@ ath12k_mac_op_unassign_vif_chanctx(struc
 	struct ath12k_peer *peer;
 	struct ath12k *ar;
 	int ret;
+	bool is_pending_stop = false;
+	bool to_stop_primary = false;
 	u8 link_id = link_conf->link_id;
 
 	mutex_lock(&ah->conf_mutex);
@@ -13079,6 +13129,43 @@ ath12k_mac_op_unassign_vif_chanctx(struc
 		goto unassign_exit;
 	}
 
+	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
+		   "mac unassign vif links map 0x%x vdev id %d addr %pM assoc_link %d\n",
+		   ahvif->links_map, arvif->vdev_id, arvif->addr, arvif->assoc_link);
+
+	/* The primary link should be stop vdev and delete peer as last one. */
+	if (hweight16(ahvif->links_map) > 1 &&
+	    ab->hw_params->vdev_start_delay &&
+	    ahvif->vdev_type == WMI_VDEV_TYPE_STA) {
+		int started_count = 0;
+		int up_count = 0;
+		int pending_stop_count = 0;
+
+		ath12k_mac_get_ahvif_status(ar, ahvif, &started_count,
+					    &up_count,
+					    &pending_stop_count);
+
+		ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
+			   "mac unassign vif status started %d up %d pending stop %d\n",
+			   started_count, up_count, pending_stop_count);
+
+		if (arvif->assoc_link && started_count != 1)
+			is_pending_stop = true;
+
+		if (pending_stop_count && started_count - pending_stop_count == 1)
+			to_stop_primary = true;
+	}
+
+	if (is_pending_stop) {
+		ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
+			   "mac skip pending stop vdev id %d addr %pM assoc_link %d\n",
+			   arvif->vdev_id, arvif->addr, arvif->assoc_link);
+		arvif->pending_stop = true;
+		mutex_unlock(&ar->conf_mutex);
+		return;
+	}
+
+stop_primary:
 	ret = ath12k_mac_vdev_stop(arvif);
 	if (ret)
 		ath12k_warn(ab, "failed to stop vdev %i: %d\n",
@@ -13138,6 +13225,14 @@ ath12k_mac_op_unassign_vif_chanctx(struc
 		ar->state_11d = ATH12K_11D_PREPARING;
 	}
 
+	if (to_stop_primary) {
+		to_stop_primary = false;
+		arvif = ath12k_mac_get_primary_arvif(ar, ahvif);
+		WARN_ON(!arvif);
+		link_id = arvif->link_id;
+		goto stop_primary;
+	}
+
 	mutex_unlock(&ar->conf_mutex);
 	ath12k_mac_remove_link_interface(hw, arvif);
 	ath12k_mac_unassign_link_vif(arvif);
--- a/drivers/net/wireless/ath/ath12k/bondif.c
+++ b/drivers/net/wireless/ath/ath12k/bondif.c
@@ -145,11 +145,12 @@ int ath12k_mac_op_change_vif_links(struc
 	struct net_device *cp_netdev = wdev->netdev;
 	struct ath12k_link_vif_pvt *link_ndev_pvt = NULL;
 	struct net_device *link_ndev;
+	struct ath12k_vif *ahvif = ath12k_vif_to_ahvif(vif);
 	struct ath12k_mld_dev *mldev = NULL;
 	u16 link_num;
 	struct net_device *bond_dev = NULL;
 	char name[20] = {0};
-	int ret = 0, chip_id = 0, pdev_id = 0;
+	int ret = 0, chip_id = 0, pdev_id = 0, bit = 0;
 
 	if (!g_bonded_interface_model)
 		return 0;
@@ -163,6 +164,11 @@ int ath12k_mac_op_change_vif_links(struc
 	link_num =  ffs(new_link_id) - 1;
 	/* TODO: Do this assignment only for the Add link case */
 
+	if (old_links == 0 && hweight16(new_links) == 1) {
+		bit = ffs(new_links) - 1;
+		ahvif->link[bit]->assoc_link = true;
+	}
+
 	if (new_links > old_links)  {
 		/* Add Link operation */
 		snprintf(name, sizeof(name), "%s_l%d", cp_netdev->name, link_num);
@@ -218,6 +224,8 @@ int ath12k_mac_op_change_vif_links(struc
 			}
 			mutex_unlock(&vif->bond_mutex);
 		}
+	if (new_links == 0)
+		ahvif->link[0]->assoc_link = false;
 	ath12k_info(NULL, "%s:%d link changed for MLD %pM old 0x%x new 0x%x\n", __func__, __LINE__, vif->addr, old_links, new_links);
 	return 0;
 }
