From 95d63e67c4ad889ff22cae3f85075ae103f41b14 Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Mon, 20 Dec 2021 22:37:26 +0530
Subject: [PATCH] ath12k: Use reserved host DDR addresses from DT for PCI
 devices

Host DDR memory is reserved through DT entries for firmware usage.
Send the base address from DT entries.

If DT entry is available, PCI device will work with fixed_mem_region
else host allocates multiple segments.

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mhi.c | 32 ++++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/pci.c |  8 +++---
 drivers/net/wireless/ath/ath12k/qmi.c | 47 ++++++++++++++++++++++++++---------
 3 files changed, 72 insertions(+), 15 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mhi.c
+++ b/drivers/net/wireless/ath/ath12k/mhi.c
@@ -6,6 +6,9 @@
 
 #include <linux/msi.h>
 #include <linux/pci.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/ioport.h>
 
 #include "core.h"
 #include "debug.h"
@@ -347,6 +350,26 @@ static void ath12k_mhi_op_write_reg(stru
 	writel(val, addr);
 }
 
+static int ath12k_mhi_read_addr_from_dt(struct mhi_controller *mhi_ctrl)
+{
+	struct device_node *np;
+	struct resource res;
+	int ret;
+
+	np = of_find_node_by_type(NULL, "memory");
+	if (!np)
+		return -ENOENT;
+
+	ret = of_address_to_resource(np, 0, &res);
+	if (ret)
+		return ret;
+
+	mhi_ctrl->iova_start = res.start + 0x1000000;
+	mhi_ctrl->iova_stop = res.end;
+
+	return 0;
+}
+
 int ath12k_mhi_register(struct ath12k_pci *ab_pci)
 {
 	struct ath12k_base *ab = ab_pci->ab;
@@ -376,6 +399,15 @@ int ath12k_mhi_register(struct ath12k_pc
 		return ret;
 	}
 
+	if (ab->bus_params.fixed_mem_region) {
+		ret = ath12k_mhi_read_addr_from_dt(mhi_ctrl);
+		if (ret < 0)
+			return ret;
+	} else {
+		mhi_ctrl->iova_start = 0;
+		mhi_ctrl->iova_stop = 0xFFFFFFFF;
+	}
+
 	mhi_ctrl->iova_start = 0;
 	mhi_ctrl->iova_stop = 0xffffffff;
 	mhi_ctrl->sbl_size = SZ_512K;
--- a/drivers/net/wireless/ath/ath12k/pci.c
+++ b/drivers/net/wireless/ath/ath12k/pci.c
@@ -1170,10 +1170,11 @@ static int ath12k_pci_probe(struct pci_d
 	pci_set_drvdata(pdev, ab);
 	spin_lock_init(&ab_pci->window_lock);
 
-	/* Set fixed_mem_region to true for
-	 * the platforms supports reserved memory.
-	 */
-	if (of_property_read_u32(ab->dev->of_node, "qcom,base-addr", &addr))
+	/* Set fixed_mem_region to true for platforms support reserved memory
+	 * from DT. If memory is reserved from DT for FW, ath11k driver need not
+	 * allocate memory.
+ 	 */
+	if (of_property_read_u32(ab->dev->of_node, "memory-region", &addr))
 		ab->bus_params.fixed_mem_region = true;
 
 	ret = ath12k_pci_claim(ab_pci, pdev);
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -10,6 +10,8 @@
 #include "core.h"
 #include "debug.h"
 #include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/ioport.h>
 #include <linux/firmware.h>
 
 #define SLEEP_CLOCK_SELECT_INTERNAL_BIT	0x02
@@ -2428,21 +2430,37 @@ static int ath12k_qmi_alloc_target_mem_c
 static int ath12k_qmi_assign_target_mem_chunk(struct ath12k_base *ab)
 {
 	struct device *dev = ab->dev;
-	int i, idx;
-	u32 addr = 0;
+	struct device_node *hremote_node = NULL;
+	struct resource res;
+	u32 host_ddr_sz;
+	int i, idx, ret;
 
 	for (i = 0, idx = 0; i < ab->qmi.mem_seg_count; i++) {
 		switch (ab->qmi.target_mem[i].type) {
 		case HOST_DDR_REGION_TYPE:
-			if (of_property_read_u32(dev->of_node, "qcom,base-addr", &addr)) {
-				ath12k_warn(ab, "qmi fail to get base-addr from dt\n");
-				return -ENOENT;
+			hremote_node = of_parse_phandle(dev->of_node, "memory-region", 0);
+			if (!hremote_node) {
+				ath12k_warn(ab, "qmi fail to get hremote_node\n");
+				return ret;
 			}
-			ab->qmi.target_mem[idx].paddr = addr;
+
+			ret = of_address_to_resource(hremote_node, 0, &res);
+			if (ret) {
+				ath12k_warn(ab, "qmi fail to get reg from hremote\n");
+				return ret;
+			}
+
+			if (res.end - res.start + 1 < ab->qmi.target_mem[i].size) {
+				ath12k_warn(ab, "qmi fail to assign memory of sz\n");
+				return -EINVAL;
+			}
+
+			ab->qmi.target_mem[idx].paddr = res.start;
 			ab->qmi.target_mem[idx].v.ioaddr =
-				ioremap(ab->qmi.target_mem[idx].paddr,
-					ab->qmi.target_mem[i].size);
+					ioremap(ab->qmi.target_mem[idx].paddr,
+						ab->qmi.target_mem[i].size);
 			ab->qmi.target_mem[idx].size = ab->qmi.target_mem[i].size;
+			host_ddr_sz = ab->qmi.target_mem[i].size;
 			ab->qmi.target_mem[idx].type = ab->qmi.target_mem[i].type;
 			idx++;
 			break;
@@ -2452,12 +2470,17 @@ static int ath12k_qmi_assign_target_mem_
 				return -EINVAL;
 			}
 
-			if (!of_property_read_u32(dev->of_node,
-						  "qcom,caldb-addr", &addr)) {
-				ab->qmi.target_mem[idx].paddr = addr;
-				ab->qmi.target_mem[idx].v.ioaddr =
+			if (ath12k_cold_boot_cal && ab->hw_params->cold_boot_calib) {
+				if (hremote_node) {
+					ab->qmi.target_mem[idx].paddr =
+							res.start + host_ddr_sz;
+					ab->qmi.target_mem[idx].v.ioaddr =
 						ioremap(ab->qmi.target_mem[idx].paddr,
 							ab->qmi.target_mem[i].size);
+				} else {
+					ab->qmi.target_mem[idx].paddr =
+						ATH12K_QMI_CALDB_ADDRESS;
+				}
 			} else {
 				ab->qmi.target_mem[idx].paddr = 0;
 				ab->qmi.target_mem[idx].v.ioaddr = NULL;
