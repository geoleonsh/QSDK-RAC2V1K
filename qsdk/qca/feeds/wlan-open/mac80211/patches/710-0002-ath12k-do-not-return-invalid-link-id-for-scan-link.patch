From a0677f9323b9886ab26599e07eff9b52ad341d02 Mon Sep 17 00:00:00 2001
From: Sriram R <quic_srirrama@quicinc.com>
Date: Tue, 24 Jan 2023 16:49:05 +0530
Subject: [PATCH] ath12k: do not return invalid link id for scan link

When a scan request is received, driver selects a link id
for which the arvif can be mapped. Same link is also
used for getting the link conf address. Currently, we return
0 as link id for a non ML vif, which is correct since that is
the default link id.
Also when any of the link vif is active and the scan request
is for a channel in the active link we return its link id.
But, when we dont hit both of the above cases(i.e not a ML
vif or no active link vif for the channel is present) we
currently return 0 as the link id.
This might not work out always, ex, when only one
link(ex. linkid = 1) is added to vif, then we wont find any
link conf for link id 0 in the vif resulting in scan failure.

During AP bringup, such scan failure can cause bringup issues.
Hence avoid sending link id 0 as default. Rather use a default
link for scan and default link address for the same. This scan
vdev will either be deleted if another scan is requested on same
vif or when AP is broughtup on same link or during interface cleanup

Signed-off-by: Sriram R <quic_srirrama@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h    |  4 +-
 drivers/net/wireless/ath/ath12k/debugfs.c |  3 +
 drivers/net/wireless/ath/ath12k/mac.c     | 96 ++++++++++++++++-------
 drivers/net/wireless/ath/ath12k/mac.h     |  6 ++
 4 files changed, 78 insertions(+), 31 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -391,7 +391,7 @@ struct ath12k_vif {
 	} u;
 
 	struct ath12k_link_vif deflink;
-	struct ath12k_link_vif *link[IEEE80211_MLD_MAX_NUM_LINKS];
+	struct ath12k_link_vif *link[ATH12K_NUM_MAX_LINKS];
 	/* indicates bitmap of link vdev created in FW */
 	u16 links_map;
 	u32 aid;
@@ -399,6 +399,7 @@ struct ath12k_vif {
 	u8 num_vdev_created;
 	u8 num_vdev_started;
 	struct ath12k_vif_cache cache[IEEE80211_MLD_MAX_NUM_LINKS];
+	u8 last_scan_link;
 };
 
 struct ath12k_vif_iter {
@@ -1026,7 +1027,6 @@ struct ath12k_hw {
 	bool regd_updated;
 	u8 supported_band_mask;
 	u8 num_radio;
-	struct ath12k_link_vif *scan_arvif;
 	DECLARE_BITMAP(free_ml_peer_id_map, ATH12K_MAX_MLO_PEERS);
 	struct ath12k radio[0] __aligned(sizeof(void *));
 };
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -2755,6 +2755,9 @@ int ath12k_debugfs_add_interface(struct
 	u8 link_id = arvif->link_id;
 	int ret = 0;
 
+	if (link_id >= IEEE80211_MLD_MAX_NUM_LINKS)
+		goto exit;
+
 	if (ahvif->vif->type != NL80211_IFTYPE_AP)
 		goto exit;
 
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -44,6 +44,8 @@
 	.max_power              = 30, \
 }
 
+static void ath12k_mac_remove_link_interface(struct ieee80211_hw *hw,
+					     struct ath12k_link_vif *arvif);
 static const struct ieee80211_channel ath12k_2ghz_channels[] = {
 	CHAN2G(1, 2412, 0),
 	CHAN2G(2, 2417, 0),
@@ -650,7 +652,7 @@ static void ath12k_get_arvif_iter(void *
 	 */
 	links_map = ahvif->links_map;
 
-	for_each_set_bit(link_id, &links_map, IEEE80211_MLD_MAX_NUM_LINKS) {
+	for_each_set_bit(link_id, &links_map, ATH12K_NUM_MAX_LINKS) {
 		arvif = ahvif->link[link_id];
 
 		if (WARN_ON(arvif == NULL))
@@ -4561,11 +4563,24 @@ ath12k_mac_find_link_id_by_freq(struct i
 			return link_id;
 	}
 
-	/*
-	 * Valid ML case when channel is not assigned to any of the links
-	 * so link id 0 can be used
+	/* Use a default link for scan purpose in driver if the request
+	 * cannot be mapped to any of the active links(channel assigned)
 	 */
-	return 0;
+	return ATH12K_DEFAULT_SCAN_LINK;
+}
+
+void ath12k_mac_unassign_link_vif(struct ath12k_link_vif *arvif)
+{
+	struct ath12k_vif *ahvif = arvif->ahvif;
+	struct ath12k_hw *ah = ahvif->ah;
+
+	lockdep_assert_held(&ah->conf_mutex);
+
+	ahvif->link[arvif->link_id] = NULL;
+	ahvif->links_map &= ~BIT(arvif->link_id);
+
+	if (arvif != &ahvif->deflink)
+		kfree(arvif);
 }
 
 static struct ath12k_link_vif *
@@ -4824,6 +4839,7 @@ static void ath12k_scan_vdev_del_work(st
 
 	mutex_lock(&ah->conf_mutex);
 	ath12k_mac_remove_link_interface(ah->hw, arvif);
+	ath12k_mac_unassign_link_vif(arvif);
 	mutex_unlock(&ah->conf_mutex);
 
 	mutex_lock(&ar->conf_mutex);
@@ -4873,6 +4889,7 @@ static int ath12k_mac_op_hw_scan(struct
 				 struct ieee80211_vif *vif,
 				 struct ieee80211_scan_request *hw_req)
 {
+	struct ath12k_vif *ahvif = ath12k_vif_to_ahvif(vif);
 	struct ath12k_hw *ah = hw->priv;
 	struct ath12k_link_vif *arvif;
 	struct cfg80211_scan_request *req = &hw_req->req;
@@ -4920,15 +4937,15 @@ static int ath12k_mac_op_hw_scan(struct
 				arvif->ar->scan.vdev_id = -1;
 			mutex_unlock(&arvif->ar->conf_mutex);
 
-			ret = ath12k_mac_vdev_delete(arvif->ar, arvif);
-			if (ret)
-				ath12k_warn(arvif->ar->ab, "unable to delete scan vdev %d\n", ret);
+			ath12k_mac_remove_link_interface(hw, arvif);
+			ath12k_mac_unassign_link_vif(arvif);
 		} else {
 			create = false;
 		}
 	}
 
 	if (create) {
+		arvif = ath12k_mac_assign_link_vif(ah, vif, link_id);
 		mutex_lock(&ar->conf_mutex);
 		ret = ath12k_mac_vdev_create(ar, arvif);
 		if (ret) {
@@ -5001,6 +5018,13 @@ static int ath12k_mac_op_hw_scan(struct
 		spin_unlock_bh(&ar->data_lock);
 	}
 
+	/* As per cfg80211/mac80211 scan design, it allows only
+	 * scan at a time. Hence last_scan link id is used for
+	 * tracking the link id on which the scan is been done
+	 * on this vif
+	 */
+	ahvif->last_scan_link = arvif->link_id;
+
 	/* Add a 200ms margin to account for event/command processing */
 	ieee80211_queue_delayed_work(ar->ah->hw, &ar->scan.timeout,
 				     msecs_to_jiffies(arg.max_scan_time +
@@ -5021,11 +5045,7 @@ static void ath12k_mac_op_cancel_hw_scan
 	struct ath12k_link_vif *arvif;
 	struct ath12k_hw *ah = hw->priv;
 	struct ath12k *ar;
-	/* TODO we currently use temp link id as 0, for runtime
-	 * force AP scan handle accordingly by identifying the
-	 * active scan link
-	 */
-	u8 link_id = 0;
+	u8 link_id = ahvif->last_scan_link;
 
 	mutex_lock(&ah->conf_mutex);
 
@@ -8950,12 +8970,22 @@ static int ath12k_mac_vdev_create(struct
 	int ret, vdev_id;
 	u8 link_addr[ETH_ALEN];
 	int txpower;
+	u8 link_id;
 
 	lockdep_assert_held(&ar->conf_mutex);
 
+	/* If no link is active and scan vdev is requested
+	 * use a default link conf for scan address purpose
+	 */
+	if (arvif->link_id == ATH12K_DEFAULT_SCAN_LINK &&
+	    vif->valid_links)
+		link_id = ffs(vif->valid_links) - 1;
+	else
+		link_id = arvif->link_id;
+
 	rcu_read_lock();
 
-	link_conf = rcu_dereference(vif->link_conf[arvif->link_id]);
+	link_conf = rcu_dereference(vif->link_conf[link_id]);
 
 	if (!link_conf) {
 		rcu_read_unlock();
@@ -9240,6 +9270,7 @@ static struct ath12k *ath12k_mac_assign_
 	struct ath12k *ar;
 	struct ath12k_base *ab;
 	struct ieee80211_vif *vif = arvif->ahvif->vif;
+	struct ath12k_link_vif *scan_arvif;
 	u8 bit;
 	int ret;
 
@@ -9256,6 +9287,21 @@ static struct ath12k *ath12k_mac_assign_
 		goto out;
 	}
 
+	/* cleanup the scan vdev if we are done scan on that ar
+	 * and now we want to create for actual usage
+	 */
+	if (vif->valid_links) {
+		scan_arvif = arvif->ahvif->link[ATH12K_DEFAULT_SCAN_LINK];
+
+		if (scan_arvif && scan_arvif->ar == ar) {
+			mutex_lock(&ar->conf_mutex);
+			ar->scan.vdev_id = -1;
+			mutex_unlock(&ar->conf_mutex);
+			ath12k_mac_remove_link_interface(hw, scan_arvif);
+			ath12k_mac_unassign_link_vif(scan_arvif);
+		}
+	}
+
 	ab = ar->ab;
 
 	mutex_lock(&ar->conf_mutex);
@@ -9438,7 +9484,8 @@ err_vdev_del:
 
 	ath12k_debugfs_remove_interface(arvif);
 
-	if (!list_empty(&ahvif->cache[arvif->link_id].key_conf.list)) {
+	if (arvif->link_id < IEEE80211_MLD_MAX_NUM_LINKS &&
+	    !list_empty(&ahvif->cache[arvif->link_id].key_conf.list)) {
 		list_for_each_entry_safe(key_conf, tmp,
 				    &ahvif->cache[arvif->link_id].key_conf.list,
 				    list) {
@@ -9449,9 +9496,6 @@ err_vdev_del:
 
 	/* TODO: recal traffic pause state based on the available vdevs */
 
-	ahvif->link[arvif->link_id] = NULL;
-	ahvif->links_map &= ~BIT(arvif->link_id);
-
 	mutex_unlock(&ar->conf_mutex);
 }
 
@@ -9468,7 +9512,7 @@ static void ath12k_mac_op_remove_interfa
 
 	links_map = ahvif->links_map;
 	
-	for_each_set_bit(link_id, &links_map, IEEE80211_MLD_MAX_NUM_LINKS) {
+	for_each_set_bit(link_id, &links_map, ATH12K_NUM_MAX_LINKS) {
 		arvif = ahvif->link[link_id];
 
 		if (arvif == NULL)
@@ -9478,9 +9522,7 @@ static void ath12k_mac_op_remove_interfa
 			continue;
 
 		ath12k_mac_remove_link_interface(hw, arvif);
-
-		if (arvif != &ahvif->deflink)
-			kfree(arvif);
+		ath12k_mac_unassign_link_vif(arvif);
 	}
 
 	mutex_unlock(&ah->conf_mutex);
@@ -9728,7 +9770,7 @@ static int ath12k_mac_set_6g_nonht_dup_c
 
 	rcu_read_lock();
 
-	link_conf = rcu_dereference(ahvif->vif->link_conf[arvif->link_id]);
+	link_conf = ath12k_get_link_bss_conf(arvif);
 
 	if (!link_conf) {
 		rcu_read_unlock();
@@ -10278,7 +10320,7 @@ ath12k_mac_change_chanctx_cnt_iter(void
 		if (WARN_ON(arvif == NULL))
 			continue;
 
-		link_conf = rcu_dereference(vif->link_conf[arvif->link_id]);
+		link_conf = ath12k_get_link_bss_conf(arvif);
 
 		if (WARN_ON(link_conf == NULL))
 			continue;
@@ -10314,7 +10356,7 @@ ath12k_mac_change_chanctx_fill_iter(void
 		if (WARN_ON(arvif == NULL))
 			continue;
 
-		link_conf = rcu_dereference(vif->link_conf[arvif->link_id]);
+		link_conf = ath12k_get_link_bss_conf(arvif);
 
 		if (WARN_ON(link_conf == NULL))
 			continue;
@@ -11643,6 +11685,7 @@ ath12k_mac_op_unassign_vif_chanctx(struc
 
 	mutex_unlock(&ar->conf_mutex);
 	ath12k_mac_remove_link_interface(hw, arvif);
+	ath12k_mac_unassign_link_vif(arvif);
 	goto unassign_exit;
 out:
 	mutex_unlock(&ar->conf_mutex);
@@ -12004,7 +12047,6 @@ ath12k_mac_get_single_legacy_rate(struct
 static int
 ath12k_mac_set_fixed_rate_GI_LTF(struct ath12k_link_vif *arvif, u8 gi, u8 ltf)
 {
-	struct ieee80211_vif *vif = arvif->ahvif->vif;
 	struct ieee80211_bss_conf *link_conf;
 	struct ath12k *ar = arvif->ar;
 	int param, ret;
@@ -12016,7 +12058,7 @@ ath12k_mac_set_fixed_rate_GI_LTF(struct
 
 	rcu_read_lock();
 
-	link_conf = rcu_dereference(vif->link_conf[arvif->link_id]);
+	link_conf = ath12k_get_link_bss_conf(arvif);
 
 	if (!link_conf) {
 		rcu_read_unlock();
@@ -12118,7 +12160,6 @@ static int ath12k_mac_set_rate_params(st
 				      bool eht_fixed_rate,
 				      int he_ul_rate, u8 he_ul_nss)
 {
-	struct ieee80211_vif *vif = arvif->ahvif->vif;
 	struct ieee80211_bss_conf *link_conf;
 	struct ath12k *ar = arvif->ar;
 	u32 vdev_param, rate_code;
@@ -12129,7 +12170,7 @@ static int ath12k_mac_set_rate_params(st
 
 	rcu_read_lock();
 
-	link_conf = rcu_dereference(vif->link_conf[arvif->link_id]);
+	link_conf = ath12k_get_link_bss_conf(arvif);
 
 	if (!link_conf) {
 		rcu_read_unlock();
@@ -12470,7 +12511,7 @@ ath12k_mac_check_fixed_rate_settings_for
 
 	rcu_read_lock();
 
-	link_conf = rcu_dereference(arvif->ahvif->vif->link_conf[arvif->link_id]);
+	link_conf = ath12k_get_link_bss_conf(arvif);
 
 	if (!link_conf) {
 		rcu_read_unlock();
--- a/drivers/net/wireless/ath/ath12k/mac.h
+++ b/drivers/net/wireless/ath/ath12k/mac.h
@@ -30,6 +30,12 @@ struct ath12k_mac_num_chanctxs_arg {
 	int num;
 };
 
+/* Default link after the IEEE802.11 defined Max link id limit
+ * for driver usage purpose
+ */
+#define ATH12K_DEFAULT_SCAN_LINK	IEEE80211_MLD_MAX_NUM_LINKS
+#define ATH12K_NUM_MAX_LINKS		(IEEE80211_MLD_MAX_NUM_LINKS + 1)
+
 /* number of failed packets (20 packets with 16 sw reties each) */
 #define ATH12K_KICKOUT_THRESHOLD		(20 * 16)
 
