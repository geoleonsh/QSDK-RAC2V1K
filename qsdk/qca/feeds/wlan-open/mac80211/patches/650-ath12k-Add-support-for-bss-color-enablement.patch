From 749b2990b53f6f4ceaf70034be473966f41f2934 Mon Sep 17 00:00:00 2001
From: Dinesh Karthikeyan <quic_dinek@quicinc.com>
Date: Thu, 9 Jun 2022 10:40:19 +0530
Subject: [PATCH 2/2] ath12k: Add support for bss color enablement

Add driver support to enable or disable bss color collision detection
option. Add mac beacon tx event to handle bss color change event.

Signed-off-by: Dinesh Karthikeyan <quic_dinek@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |  2 +
 drivers/net/wireless/ath/ath12k/mac.c  | 44 ++++++++++++++++---
 drivers/net/wireless/ath/ath12k/mac.h  |  1 +
 drivers/net/wireless/ath/ath12k/wmi.c  | 60 ++++++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/wmi.h  | 15 +++++++
 5 files changed, 117 insertions(+), 5 deletions(-)

Index: backports-20220822-5.4.164-ef7197996efe/drivers/net/wireless/ath/ath12k/core.h
===================================================================
--- backports-20220822-5.4.164-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/core.h
+++ backports-20220822-5.4.164-ef7197996efe/drivers/net/wireless/ath/ath12k/core.h
@@ -319,6 +319,8 @@ struct ath12k_vif {
 	u8 vdev_stats_id;
 	struct ath12k_fw_vdev_ol_stats vdev_stats;
 	u8 nontransmitting_vif_count;
+	bool bcca_zero_sent;
+	bool do_not_send_tmpl;
 #ifdef CPTCFG_ATH12K_DEBUGFS
 	struct dentry *debugfs_twt;
 #endif /* CPTCFG_ATH12K_DEBUGFS */
Index: backports-20220822-5.4.164-ef7197996efe/drivers/net/wireless/ath/ath12k/mac.c
===================================================================
--- backports-20220822-5.4.164-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/mac.c
+++ backports-20220822-5.4.164-ef7197996efe/drivers/net/wireless/ath/ath12k/mac.c
@@ -1410,6 +1410,26 @@ static int ath12k_mac_setup_bcn_tmpl(str
 }
 
 
+void ath12k_mac_bcn_tx_event(struct ath12k_vif *arvif)
+{
+	struct ieee80211_vif *vif = arvif->vif;
+
+	if (!vif->bss_conf.color_change_active && !arvif->bcca_zero_sent)
+		return;
+
+	if (vif->bss_conf.color_change_active && ieee80211_beacon_cntdwn_is_complete(vif)) {
+		arvif->bcca_zero_sent = true;
+		ieee80211_color_change_finish(vif);
+		return;
+	}
+
+	arvif->bcca_zero_sent = false;
+
+	if (vif->bss_conf.color_change_active)
+		ieee80211_beacon_update_cntdwn(vif);
+	ath12k_mac_setup_bcn_tmpl(arvif);
+}
+
 static void ath12k_control_beaconing(struct ath12k_vif *arvif,
 				     struct ieee80211_bss_conf *info)
 {
@@ -3542,6 +3562,7 @@ static void ath12k_mac_op_bss_info_chang
 	int ret = 0;
 	u8 rateidx;
 	u32 rate;
+	bool color_collision_detect;
 
 	mutex_lock(&ar->conf_mutex);
 
@@ -3574,10 +3595,17 @@ static void ath12k_mac_op_bss_info_chang
 				   "Set staggered beacon mode for VDEV: %d\n",
 				   arvif->vdev_id);
 
-		ret = ath12k_mac_setup_bcn_tmpl(arvif);
-		if (ret)
-			ath12k_warn(ar->ab, "failed to update bcn template: %d\n",
-				    ret);
+		if (!arvif->do_not_send_tmpl || !arvif->bcca_zero_sent) {
+			ret = ath12k_mac_setup_bcn_tmpl(arvif);
+			if (ret)
+				ath12k_warn(ar->ab, "failed to update bcn template: %d\n",
+					    ret);
+		}
+
+		if (arvif->bcca_zero_sent)
+			arvif->do_not_send_tmpl = true;
+		else
+			arvif->do_not_send_tmpl = false;
 
 		if (arvif->is_up && vif->bss_conf.he_support) {
 			param_id = WMI_VDEV_PARAM_BA_MODE;
@@ -3814,16 +3842,36 @@ static void ath12k_mac_op_bss_info_chang
 		ath12k_mac_config_obss_pd(ar, &info->he_obss_pd);
 
 	if (changed & BSS_CHANGED_HE_BSS_COLOR) {
+		color_collision_detect = (info->he_bss_color.enabled &&
+					  info->he_bss_color.collision_detection_enabled);
 		if (vif->type == NL80211_IFTYPE_AP) {
 			ret = ath12k_wmi_obss_color_cfg_cmd(ar,
 							    arvif->vdev_id,
 							    info->he_bss_color.color,
 							    ATH12K_BSS_COLOR_AP_PERIODS,
 							    arvif->vif->bss_conf.nontransmitted ?
-							    0 : info->he_bss_color.enabled);
+							    0 : color_collision_detect);
 			if (ret)
 				ath12k_warn(ar->ab, "failed to set bss color collision on vdev %i: %d\n",
 					    arvif->vdev_id,  ret);
+
+			param_id = WMI_VDEV_PARAM_BSS_COLOR;
+			param_value = info->he_bss_color.color << IEEE80211_HE_OPERATION_BSS_COLOR_OFFSET;
+
+			if (!info->he_bss_color.enabled)
+				param_value |= IEEE80211_HE_OPERATION_BSS_COLOR_DISABLED;
+			ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id,
+							    param_id,
+							    param_value);
+			if (ret)
+				ath12k_warn(ar->ab,
+					    "failed to set bss color param on vdev %i: %d\n",
+					    arvif->vdev_id,  ret);
+
+			ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
+				   "bss color param 0x%x set on vdev %i\n",
+				   param_value, arvif->vdev_id);
+
 		} else if (vif->type == NL80211_IFTYPE_STATION) {
 			ret = ath12k_wmi_send_bss_color_change_enable_cmd(ar,
 									  arvif->vdev_id,
@@ -9901,6 +9949,10 @@ static int __ath12k_mac_register(struct
 	wiphy_ext_feature_set(ar->hw->wiphy, NL80211_EXT_FEATURE_CQM_RSSI_LIST);
 	wiphy_ext_feature_set(ar->hw->wiphy, NL80211_EXT_FEATURE_STA_TX_PWR);
 
+	if (test_bit(WMI_TLV_SERVICE_BSS_COLOR_OFFLOAD, ar->ab->wmi_ab.svc_map))
+                wiphy_ext_feature_set(ar->hw->wiphy,
+                                      NL80211_EXT_FEATURE_BSS_COLOR);
+
 	ar->hw->wiphy->cipher_suites = cipher_suites;
 	ar->hw->wiphy->n_cipher_suites = ARRAY_SIZE(cipher_suites);
 
Index: backports-20220822-5.4.164-ef7197996efe/drivers/net/wireless/ath/ath12k/mac.h
===================================================================
--- backports-20220822-5.4.164-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/mac.h
+++ backports-20220822-5.4.164-ef7197996efe/drivers/net/wireless/ath/ath12k/mac.h
@@ -164,4 +164,5 @@ enum hal_encrypt_type ath12k_dp_tx_get_e
 void ath12k_mac_get_any_chandef_iter(struct ieee80211_hw *hw,
                                      struct ieee80211_chanctx_conf *conf,
                                      void *data);
+void ath12k_mac_bcn_tx_event(struct ath12k_vif *arvif);
 #endif
Index: backports-20220822-5.4.164-ef7197996efe/drivers/net/wireless/ath/ath12k/wmi.c
===================================================================
--- backports-20220822-5.4.164-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/wmi.c
+++ backports-20220822-5.4.164-ef7197996efe/drivers/net/wireless/ath/ath12k/wmi.c
@@ -135,6 +135,8 @@ static const struct wmi_tlv_policy wmi_t
 		.min_len = sizeof(struct wmi_pdev_update_muedca_event) },
 	[WMI_TAG_TWT_ADD_DIALOG_COMPLETE_EVENT] = {
 		.min_len = sizeof(struct wmi_twt_add_dialog_event) },
+	[WMI_TAG_OBSS_COLOR_COLLISION_EVT]
+		= { .min_len = sizeof(struct wmi_obss_color_collision_event) },
 };
 
 static __le32 ath12k_wmi_tlv_hdr(u32 cmd, u32 len)
@@ -7066,6 +7068,7 @@ static void ath12k_vdev_start_resp_event
 
 static void ath12k_bcn_tx_status_event(struct ath12k_base *ab, struct sk_buff *skb)
 {
+	struct ath12k_vif *arvif;
 	u32 vdev_id, tx_status;
 
 	if (ath12k_pull_bcn_tx_status_ev(ab, skb->data, skb->len,
@@ -7073,6 +7076,17 @@ static void ath12k_bcn_tx_status_event(s
 		ath12k_warn(ab, "failed to extract bcn tx status");
 		return;
 	}
+
+	rcu_read_lock();
+	arvif = ath12k_mac_get_arvif_by_vdev_id(ab, vdev_id);
+	if (!arvif) {
+		ath12k_warn(ab, "invalid vdev id %d in bcn_tx_status",
+			    vdev_id);
+		rcu_read_unlock();
+		return;
+	}
+	ath12k_mac_bcn_tx_event(arvif);
+	rcu_read_unlock();
 }
 
 static void ath12k_vdev_stopped_event(struct ath12k_base *ab, struct sk_buff *skb)
@@ -8382,6 +8396,58 @@ exit:
 	kfree(tb);
 }
 
+static void
+ath12k_wmi_obss_color_collision_event(struct ath12k_base *ab, struct sk_buff *skb)
+{
+	const void **tb;
+	const struct wmi_obss_color_collision_event *ev;
+	struct ath12k_vif *arvif;
+	int ret;
+
+	tb = ath12k_wmi_tlv_parse_alloc(ab, skb->data, skb->len, GFP_ATOMIC);
+	if (IS_ERR(tb)) {
+		ret = PTR_ERR(tb);
+		ath12k_warn(ab, "failed to parse tlv: %d\n", ret);
+		return;
+	}
+
+	rcu_read_lock();
+	ev = tb[WMI_TAG_OBSS_COLOR_COLLISION_EVT];
+	if (!ev) {
+		ath12k_warn(ab, "failed to fetch obss color collision ev");
+		goto exit;
+	}
+
+	arvif = ath12k_mac_get_arvif_by_vdev_id(ab, ev->vdev_id);
+	if (!arvif)
+	{
+		ath12k_warn(ab, "failed to find arvif with vedv id %d in obss_color_collision_event\n",
+				ev->vdev_id);
+		goto exit;
+	}
+	switch (ev->evt_type) {
+	case WMI_BSS_COLOR_COLLISION_DETECTION:
+		ieeee80211_obss_color_collision_notify(arvif->vif, ev->obss_color_bitmap,
+						       GFP_KERNEL);
+
+		ath12k_dbg(ab, ATH12K_DBG_WMI,
+				"OBSS color collision detected vdev:%d, event:%d, bitmap:%08llx\n",
+				ev->vdev_id, ev->evt_type, ev->obss_color_bitmap);
+		break;
+	case WMI_BSS_COLOR_COLLISION_DISABLE:
+	case WMI_BSS_COLOR_FREE_SLOT_TIMER_EXPIRY:
+	case WMI_BSS_COLOR_FREE_SLOT_AVAILABLE:
+		goto exit;
+	default:
+		ath12k_warn(ab, "received unknown obss color collision detetction event\n");
+		goto exit;
+	}
+
+exit:
+	kfree(tb);
+	rcu_read_unock();
+}
+
 static void ath12k_wmi_tlv_op_rx(struct ath12k_base *ab, struct sk_buff *skb)
 {
 	struct wmi_cmd_hdr *cmd_hdr;
@@ -8507,6 +8573,9 @@ static void ath12k_wmi_tlv_op_rx(struct
 	case WMI_MUEDCA_PARAMS_CONFIG_EVENTID:
 		ath12k_wmi_pdev_update_muedca_params_status_event(ab, skb);
 		break;
+	case WMI_OBSS_COLOR_COLLISION_DETECTION_EVENTID:
+		ath12k_wmi_obss_color_collision_event(ab, skb);
+		break;
 	/* TODO: Add remaining events */
 	default:
 		ath12k_dbg(ab, ATH12K_DBG_WMI, "Unknown eventid: 0x%x\n", id);
Index: backports-20220822-5.4.164-ef7197996efe/drivers/net/wireless/ath/ath12k/wmi.h
===================================================================
--- backports-20220822-5.4.164-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/wmi.h
+++ backports-20220822-5.4.164-ef7197996efe/drivers/net/wireless/ath/ath12k/wmi.h
@@ -801,6 +801,8 @@ enum wmi_tlv_event_id {
 	WMI_MDNS_STATS_EVENTID = WMI_TLV_CMD(WMI_GRP_MDNS_OFL),
 	WMI_SAP_OFL_ADD_STA_EVENTID = WMI_TLV_CMD(WMI_GRP_SAP_OFL),
 	WMI_SAP_OFL_DEL_STA_EVENTID,
+	WMI_OBSS_COLOR_COLLISION_DETECTION_EVENTID =
+					WMI_EVT_GRP_START_ID(WMI_GRP_OBSS_OFL),
 	WMI_OCB_SET_CONFIG_RESP_EVENTID = WMI_TLV_CMD(WMI_GRP_OCB),
 	WMI_OCB_GET_TSF_TIMER_RESP_EVENTID,
 	WMI_DCC_GET_STATS_RESP_EVENTID,
@@ -5423,6 +5425,13 @@ struct wmi_pdev_obss_pd_bitmap_cmd {
 #define ATH12K_BSS_COLOR_STA_PERIODS				10000
 #define ATH12K_BSS_COLOR_AP_PERIODS				5000
 
+enum wmi_bss_color_collision {
+	WMI_BSS_COLOR_COLLISION_DISABLE = 0,
+	WMI_BSS_COLOR_COLLISION_DETECTION,
+	WMI_BSS_COLOR_FREE_SLOT_TIMER_EXPIRY,
+	WMI_BSS_COLOR_FREE_SLOT_AVAILABLE,
+};
+
 struct wmi_obss_color_collision_cfg_params_cmd {
 	__le32 tlv_header;
 	__le32 vdev_id;
@@ -5440,6 +5449,12 @@ struct wmi_bss_color_change_enable_param
 	__le32 enable;
 } __packed;
 
+struct wmi_obss_color_collision_event {
+	u32 vdev_id;
+	u32 evt_type;
+	u64 obss_color_bitmap;
+} __packed;
+
 #define ATH12K_IPV4_TH_SEED_SIZE 5
 #define ATH12K_IPV6_TH_SEED_SIZE 11
 
Index: backports-20220822-5.4.164-ef7197996efe/net/mac80211/cfg.c
===================================================================
--- backports-20220822-5.4.164-ef7197996efe.orig/net/mac80211/cfg.c
+++ backports-20220822-5.4.164-ef7197996efe/net/mac80211/cfg.c
@@ -4782,7 +4782,7 @@ ieee80211_color_change(struct wiphy *wip
 	cfg80211_color_change_started_notify(sdata->dev, params->count);
 
 	if (changed)
-		ieee80211_color_change_bss_config_notify(sdata, 0, 0, changed);
+		ieee80211_color_change_bss_config_notify(sdata, sdata->vif.bss_conf.he_bss_color.color, 0, changed);
 	else
 		/* if the beacon didn't change, we can finalize immediately */
 		ieee80211_color_change_finalize(sdata);
