From 3aca73b1f849abd2e6b1d86396b0446bca8046dd Mon Sep 17 00:00:00 2001
From: Sriram R <quic_srirrama@quicinc.com>
Date: Tue, 11 Oct 2022 13:11:24 +0530
Subject: [PATCH] ath12k: MLO vdev bringup changes

Add support for bringup of MLO vdevs. This involves
bringup of all the link vdevs across different radios
and all sending partner link info in vdev start command.

With single wiphy support, since multiple radios are tied
to same wiphy and vif/ahvif in case of MLO, the actual link
vif corresponding to the link can be obtained only during
channel assignment.

Since the partner link info is required in vdev start command
all the link vdevs needs to be created before giving the vdev
start to firmware. Note that this logic will not work seamlessly
with MBSSID and DFS support which requires some more additional
changes. FW support to add partner vdev info dynamically might be
required to achieve the same.

Signed-off-by: Sriram R <quic_srirrama@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |   4 +
 drivers/net/wireless/ath/ath12k/mac.c  | 198 +++++++++++++++++++++++--
 drivers/net/wireless/ath/ath12k/wmi.c  |  79 +++++++++-
 drivers/net/wireless/ath/ath12k/wmi.h  |  48 ++++++
 4 files changed, 309 insertions(+), 20 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -334,6 +334,7 @@ struct ath12k_link_vif {
 	bool is_created;
 	bool is_started;
 	bool is_up;
+	bool pending_up;
 	bool spectral_enabled;
 	u8 bssid[ETH_ALEN];
 	struct cfg80211_bitrate_mask bitrate_mask;
@@ -391,6 +392,8 @@ struct ath12k_vif {
 	u16 links_map;
 	u32 aid;
 	struct ath12k_mgmt_frame_stats mgmt_stats;
+	u8 num_vdev_created;
+	u8 num_vdev_started;
 };
 
 struct ath12k_vif_iter {
@@ -989,6 +992,7 @@ struct ath12k_hw {
 	bool regd_updated;
 	u8 supported_band_mask;
 	u8 num_radio;
+	struct ath12k_link_vif *scan_arvif;
 	struct ath12k radio[0] __aligned(sizeof(void *));
 };
 
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -750,6 +750,19 @@ struct ath12k *ath12k_mac_get_ar_by_pdev
 	return NULL;
 }
 
+bool ath12k_mac_is_ml_arvif(struct ath12k_link_vif *arvif)
+{
+	struct ath12k *ar = arvif->ar;
+	struct ath12k_vif *ahvif = arvif->ahvif;
+
+	lockdep_assert_held(&ar->conf_mutex);
+
+	if (ahvif->vif->valid_links & BIT(arvif->link_id))
+		return true;
+
+	return false;
+}
+
 static void ath12k_pdev_caps_update(struct ath12k *ar)
 {
 	struct ath12k_base *ab = ar->ab;
@@ -1495,7 +1508,7 @@ static int ath12k_mac_setup_bcn_tmpl_non
 	}
 
 	bcn = ieee80211_beacon_get_template(tx_arvif->ar->ah->hw, ahvif->vif,
-					    &offs, 0);
+					    &offs, arvif->link_id);
 	if (!bcn) {
 		ath12k_warn(arvif->ar->ab,
 			    "failed to get beacon template from mac80211\n");
@@ -1608,7 +1621,7 @@ static void ath12k_control_beaconing(str
 
 	ahvif->aid = 0;
 
-	ether_addr_copy(arvif->bssid, info->bssid);
+	ether_addr_copy(arvif->bssid, info->addr);
 
 	params.vdev_id = arvif->vdev_id;
 	params.aid = ahvif->aid;
@@ -3837,7 +3850,8 @@ static void ath12k_mac_bss_info_changed(
 				   "Set staggered beacon mode for VDEV: %d\n",
 				   arvif->vdev_id);
 
-		if (!arvif->do_not_send_tmpl || !arvif->bcca_zero_sent) {
+		if ((!arvif->do_not_send_tmpl || !arvif->bcca_zero_sent) &&
+		     arvif->is_started) {
 			ret = ath12k_mac_setup_bcn_tmpl(arvif);
 			if (ret)
 				ath12k_warn(ar->ab, "failed to update bcn template: %d\n",
@@ -3891,10 +3905,13 @@ static void ath12k_mac_bss_info_changed(
 		ahvif->u.ap.hidden_ssid = info->hidden_ssid;
 	}
 
-	if (changed & BSS_CHANGED_BSSID && !is_zero_ether_addr(info->bssid))
+	if (changed & BSS_CHANGED_BSSID && info->bssid && !is_zero_ether_addr(info->bssid))
 		ether_addr_copy(arvif->bssid, info->bssid);
 
-	if (changed & BSS_CHANGED_BEACON_ENABLED) {
+	if (changed & BSS_CHANGED_BEACON_ENABLED && !arvif->is_started)
+		arvif->pending_up = true;
+
+	if (changed & BSS_CHANGED_BEACON_ENABLED && arvif->is_started) {
 		if (info->enable_beacon) {
 			ath12k_mac_set_he_txbf_conf(arvif);
 			ath12k_mac_set_eht_txbf_conf(arvif);
@@ -4235,6 +4252,7 @@ static int ath12k_mac_vdev_delete(struct
 	ar->allocated_vdev_map &= ~(1LL << arvif->vdev_id);
 	ar->ab->free_vdev_stats_id_map &= ~(1LL << arvif->vdev_stats_id);
 	ar->num_created_vdevs--;
+	arvif->ahvif->num_vdev_created--;
 	arvif->is_created = false;
 	arvif->ar = NULL;
 
@@ -4246,7 +4264,7 @@ static int ath12k_mac_vdev_delete(struct
 }
 
 static struct ath12k_link_vif *
-ath12k_mac_get_link_vif( struct ath12k_hw *ah, struct ieee80211_vif *vif, u8 link_id)
+ath12k_mac_assign_link_vif( struct ath12k_hw *ah, struct ieee80211_vif *vif, u8 link_id)
 {
 	struct ath12k_vif *ahvif = (void *)vif->drv_priv;
 	struct ath12k_link_vif *arvif;
@@ -4263,16 +4281,22 @@ ath12k_mac_get_link_vif( struct ath12k_h
 		arvif =  &ahvif->deflink;
 	} else {
 		/* first link vif is fetched from deflink*/
-		if (!ahvif->links_map)
+		if (!ahvif->links_map) {
 			arvif = &ahvif->deflink;
-		else
+		} else {
 			arvif = (struct ath12k_link_vif *)
 					kzalloc(sizeof(struct ath12k_link_vif),
 						GFP_KERNEL);
 
-		if (arvif == NULL)
-			return NULL;
+			if (arvif == NULL)
+				return NULL;
 
+			INIT_LIST_HEAD(&arvif->list);
+			INIT_WORK(&arvif->update_obss_color_notify_work,
+				  ath12k_update_obss_color_notify_work);
+			INIT_WORK(&arvif->update_bcn_template_work,
+				  ath12k_update_bcn_template_work);
+		}
 	}
 
 	ahvif->link[link_id] = arvif;
@@ -4293,10 +4317,6 @@ ath12k_mac_get_link_vif( struct ath12k_h
 		       sizeof(arvif->bitrate_mask.control[i].eht_mcs));
 	}
 	
-	INIT_LIST_HEAD(&arvif->list);
-	INIT_WORK(&arvif->update_obss_color_notify_work, ath12k_update_obss_color_notify_work);
-	INIT_WORK(&arvif->update_bcn_template_work, ath12k_update_bcn_template_work);
-
 	return arvif;
 }
 
@@ -4524,7 +4544,7 @@ static int ath12k_mac_op_hw_scan(struct
 	}
 
 	/* TODO ML vif handling */
-	arvif = ath12k_mac_get_link_vif(ah, vif, 0);  
+	arvif = ath12k_mac_assign_link_vif(ah, vif, 0);  
 	/* If the vif is already assigned to a specific vdev of an ar,
 	 * check whether its already started, vdev which is started
 	 * are not allowed to switch to a new radio.
@@ -4534,6 +4554,9 @@ static int ath12k_mac_op_hw_scan(struct
 	 * delete-create vdev's for the same ar, in case the request is
 	 * always on the same band for the vif
 	 */
+	if (!arvif)
+		return -ENOMEM;
+
 	if (arvif->is_created) {
 		if (ar != arvif->ar && arvif->is_started) {
 			mutex_unlock(&ah->conf_mutex);
@@ -4558,6 +4581,10 @@ static int ath12k_mac_op_hw_scan(struct
 		}
 		mutex_unlock(&ar->conf_mutex);
 	}
+
+	if (vif->valid_links)
+		ah->scan_arvif = arvif;
+
 	mutex_unlock(&ah->conf_mutex);
 
 	mutex_lock(&ar->conf_mutex);
@@ -7888,6 +7915,15 @@ static int ath12k_mac_setup_vdev_create_
 	}
 
 	params->if_stats_id = ath12k_mac_get_vdev_stats_id(arvif);
+
+	if (ath12k_mac_is_ml_arvif(arvif)) {
+		if (hweight16(ahvif->vif->valid_links) > ATH12K_WMI_MLO_MAX_LINKS) {
+			WARN_ON(1);
+			return -EINVAL;
+		}
+		ether_addr_copy(params->mld_addr, ahvif->vif->addr);
+	}
+
 	return 0;
 }
 
@@ -8013,7 +8049,7 @@ static int ath12k_mac_vdev_create(struct
 	struct ath12k_vif *ahvif = arvif->ahvif;
 	struct ieee80211_hw *hw = ar->ah->hw;
 	struct vdev_create_params vdev_param = {0};
-	struct peer_create_params peer_param;
+	struct peer_create_params peer_param = {0};
 	struct ieee80211_bss_conf *link_conf;
 	u32 param_id, param_value;
 	u16 nss;
@@ -8099,6 +8135,7 @@ static int ath12k_mac_vdev_create(struct
 	}
 
 	ar->num_created_vdevs++;
+	ahvif->num_vdev_created++;
 	arvif->is_created = true;
 	ath12k_dbg(ab, ATH12K_DBG_MAC, "vdev %pM created, vdev_id %d\n",
 		   link_addr, arvif->vdev_id);
@@ -8369,6 +8406,11 @@ static int ath12k_mac_op_add_interface(s
 
 	ahvif->deflink.ahvif = ahvif;
 	ahvif->deflink.link_id = 0;
+	INIT_LIST_HEAD(&ahvif->deflink.list);
+	INIT_WORK(&ahvif->deflink.update_obss_color_notify_work,
+		  ath12k_update_obss_color_notify_work);
+	INIT_WORK(&ahvif->deflink.update_bcn_template_work,
+		  ath12k_update_bcn_template_work);
 
 	ahvif->key_cipher = INVALID_CIPHER;
 
@@ -8484,6 +8526,9 @@ err_vdev_del:
 
 	/* TODO: recal traffic pause state based on the available vdevs */
 
+	ahvif->link[arvif->link_id] = NULL;
+	ahvif->links_map &= ~BIT(arvif->link_id);
+
 	mutex_unlock(&ar->conf_mutex);
 }
 
@@ -8506,12 +8551,13 @@ static void ath12k_mac_op_remove_interfa
 		if (arvif == NULL)
 			continue;
 
+		if (WARN_ON(arvif->link_id != link_id))
+			continue;
+
 		ath12k_mac_remove_link_interface(hw, arvif);
 
 		if (arvif != &ahvif->deflink)
 			kfree(arvif);
-
-		ahvif->link[link_id] = NULL;
 	}
 
 	mutex_unlock(&ah->conf_mutex);
@@ -8649,6 +8695,16 @@ static int ath12k_mac_op_ampdu_action(st
 	return ret;
 }
 
+static int ath12k_mac_op_change_vif_links(struct ieee80211_hw *hw,
+					  struct ieee80211_vif *vif,
+					  u16 old_links, u16 new_links,
+					  struct ieee80211_bss_conf *old[IEEE80211_MLD_MAX_NUM_LINKS])
+{
+	ath12k_info(NULL,
+		    "link changed for MLD %pM old %d new %d\n", vif->addr, old_links, new_links);
+	return 0;
+}
+
 static int ath12k_mac_op_add_chanctx(struct ieee80211_hw *hw,
 				     struct ieee80211_chanctx_conf *ctx)
 {
@@ -8750,6 +8806,55 @@ static int ath12k_mac_set_6g_nonht_dup_c
 	return ret;
 }
 
+static void
+ath12k_mac_mlo_get_vdev_args(struct ath12k_link_vif *arvif,
+			     struct wmi_ml_arg *ml_arg)
+{
+	struct ath12k_vif *ahvif = arvif->ahvif;
+	struct ath12k_link_vif *arvif_p;
+	u16 links_map;
+	u8 link_id;
+	struct wmi_ml_partner_info *partner_info;
+	struct ieee80211_bss_conf *link_conf;
+
+	if (!ath12k_mac_is_ml_arvif(arvif))
+		return;
+
+	if (hweight16(ahvif->vif->valid_links) > ATH12K_WMI_MLO_MAX_LINKS)
+		return;
+
+	rcu_read_lock();
+
+	ml_arg->enabled = true;
+	/* TODO check assoc and mcast vdev for AP mode */
+
+	links_map = ahvif->links_map;
+
+	partner_info = ml_arg->partner_info;
+
+	for_each_set_bit(link_id, &links_map, IEEE80211_MLD_MAX_NUM_LINKS) {
+		arvif_p = ahvif->link[link_id];
+
+		if (WARN_ON(arvif_p == NULL))
+			continue;
+
+		if (arvif == arvif_p)
+			continue;
+
+		link_conf = rcu_dereference(ahvif->vif->link_conf[arvif_p->link_id]);
+
+		if (!link_conf)
+			continue;
+
+		partner_info->vdev_id = arvif_p->vdev_id;
+		partner_info->hw_link_id = arvif_p->ar->pdev->hw_link_id;
+		ether_addr_copy(partner_info->addr, link_conf->addr);
+		ml_arg->num_partner_links++;
+		partner_info++;
+	}
+	rcu_read_unlock();
+}
+
 static int
 ath12k_mac_vdev_start_restart(struct ath12k_link_vif *arvif,
 			      const struct cfg80211_chan_def *chandef,
@@ -8817,6 +8922,9 @@ ath12k_mac_vdev_start_restart(struct ath
 
 	arg.channel.passive |= !!(chandef->chan->flags & IEEE80211_CHAN_NO_IR);
 
+	if (!restart)
+		ath12k_mac_mlo_get_vdev_args(arvif, &arg.ml);
+
 	ath12k_dbg(ab, ATH12K_DBG_MAC,
 		   "mac vdev %d start center_freq %d punct bitmap 0x%x phymode %s\n",
 		   arg.vdev_id, arg.channel.freq, arg.ru_punct_bitmap,
@@ -9023,6 +9131,72 @@ static int ath12k_vdev_restart_sequence(
 	return ret;
 }
 
+static int ath12k_mac_mlo_vdev_start(struct ath12k_link_vif *arvif)
+{
+	struct ath12k_vif *ahvif = arvif->ahvif;
+	struct ath12k *ar = arvif->ar;
+	struct ath12k_hw *ah = ar->ah;
+	struct ath12k_link_vif *arvif_p;
+	u8 link_id;
+	int ret = 0;
+	u16 links_map;
+	bool radar_enabled = arvif->chanctx.radar_enabled;
+
+	lockdep_assert_held(&ah->conf_mutex);
+	/* TODO some changes are expected in this func wrt DFS statemachine */
+	/* FIXME Note that this logic is temp and wont work for MBSSID cases
+	 * There are two options, 1, the set link should have some pre channel info
+	 * or FW should support dynamic partner add/remove support
+	 */
+
+	/* we need to wait for all the link vdev in the vif to be created
+	 * before we start
+	 */
+	if (ahvif->num_vdev_created != hweight16(ahvif->vif->valid_links))
+		goto out;
+
+	links_map = ahvif->links_map;
+	for_each_set_bit(link_id, &links_map, IEEE80211_MLD_MAX_NUM_LINKS) {
+		arvif_p = ahvif->link[link_id];
+		ar = arvif_p->ar;
+
+		/* TODO cant hold rcu lock due to call of ath12k_mac_bss_info_changed
+		 * option is to take a backup if link info, anyways this function would
+		 * change after FW support for dynamic add
+		 */
+		if (WARN_ON(!ahvif->vif->link_conf[link_id]))
+			continue;
+
+		mutex_lock(&ar->conf_mutex);
+		ret = ath12k_mac_vdev_start(arvif_p, &arvif_p->chanctx.def,
+					    radar_enabled);
+		if (ret) {
+			ath12k_warn(ar->ab, "failed to start vdev %i on freq %d: %d\n",
+				    arvif_p->vdev_id, arvif_p->chanctx.def.chan->center_freq, ret);
+
+			mutex_unlock(&ar->conf_mutex);
+			/* The already started vdevs will be cleaned up during unassign */
+			goto out;
+		}
+
+		/* ToDO MLO AP + Monitor */
+		arvif_p->is_started = true;
+
+		/* Enable beaconing now.
+		 * this will be done by usual code flow from mac80211 for the last link
+		 */
+		if (arvif_p != arvif && arvif_p->pending_up) {
+			ath12k_mac_bss_info_changed(ar, arvif_p, ahvif->vif->link_conf[link_id],
+						    BSS_CHANGED_BEACON_ENABLED | BSS_CHANGED_BEACON);
+			arvif_p->pending_up = false;
+		}
+		mutex_unlock(&ar->conf_mutex);
+		ahvif->num_vdev_started++;
+	}
+out:
+	return ret;
+}
+
 struct ath12k_mac_change_chanctx_arg {
 	struct ieee80211_chanctx_conf *ctx;
 	struct ieee80211_vif_chanctx_switch *vifs;
@@ -9223,8 +9397,10 @@ ath12k_mac_update_vif_chan(struct ath12k
 			   vifs[i].old_ctx->def.width,
 			   vifs[i].new_ctx->def.width);
 
-		if (WARN_ON(!arvif->is_started))
+		if (WARN_ON(!arvif->is_started)) {
+			memcpy(&arvif->chanctx, vifs[i].new_ctx, sizeof(*vifs[i].new_ctx));
 			continue;
+		}
 
 		if (!arvif->is_up)
 			continue;
@@ -9958,7 +10134,13 @@ ath12k_mac_op_assign_vif_chanctx(struct
 
 	mutex_lock(&ah->conf_mutex);
 
-	arvif = ath12k_mac_get_link_vif(ah, vif, link_id);
+	/* clear any scan arvifs since its always attached to link 0 by default */
+	if (ah->scan_arvif && vif->valid_links) {
+		ath12k_mac_remove_link_interface(hw, ah->scan_arvif);
+		ah->scan_arvif = NULL;
+	}
+
+	arvif = ath12k_mac_assign_link_vif(ah, vif, link_id);
 	if (!arvif) {
 		ath12k_err(NULL, "unable to allocate link vif\n");
 		return -ENOMEM;
@@ -9970,9 +10152,8 @@ ath12k_mac_op_assign_vif_chanctx(struct
 			mutex_unlock(&ah->conf_mutex);
 			return -EINVAL;
 		}
-	} else if(vif->valid_links){
-		ar = arvif->ar;
-		/* Note below case not expected for MLO/not handled now */
+	} else if (vif->valid_links){
+		/* not expected to be here */
 	} else {
 		ar = ath12k_get_ar_by_ctx(hw, ctx);
 		if (!ar) {
@@ -10075,6 +10256,15 @@ ath12k_mac_op_assign_vif_chanctx(struct
 		goto out;
 	}
 
+	if (ath12k_mac_is_ml_arvif(arvif) &&
+	    ahvif->vdev_type == WMI_VDEV_TYPE_AP) {
+		mutex_unlock(&ar->conf_mutex);
+		memcpy(&arvif->chanctx, ctx, sizeof(*ctx));
+		ret = ath12k_mac_mlo_vdev_start(arvif);
+		mutex_unlock(&ah->conf_mutex);
+		return ret;
+	}
+
 	ret = ath12k_mac_vdev_start(arvif, &ctx->def, ctx->radar_enabled);
 	if (ret) {
 		ath12k_warn(ab, "failed to start vdev %i addr %pM on freq %d: %d\n",
@@ -10112,17 +10302,10 @@ ath12k_mac_op_unassign_vif_chanctx(struc
 	struct ath12k_base *ab;
 	struct ath12k *ar;
 	int ret;
-	/* TODO tmp, link_id passed through func */
-	u8 link_id = 0;
+	u8 link_id = link_conf->link_id;
 
 	mutex_lock(&ah->conf_mutex);
-	/* The vif is expected to be attached to an ar's VDEV.
-	 * We leave the vif/vdev in this function as is
-	 * and not delete the vdev symmetric to assign_vif_chanctx()
-	 * the VDEV will be deleted and unassigned either during
-	 * remove_interface() or when there is a change in channel
-	 * that moves the vif to a new ar
-	 */
+
 	arvif = ahvif->link[link_id];
 
 	if (!arvif) {
@@ -10149,7 +10332,8 @@ ath12k_mac_op_unassign_vif_chanctx(struc
 		   "mac chanctx unassign ptr %pK vdev_id %i\n",
 		   ctx, arvif->vdev_id);
 
-	WARN_ON(!arvif->is_started);
+	if (!arvif->is_started)
+		goto out;
 
 	if (ab->hw_params->vdev_start_delay &&
 	    ahvif->vdev_type == WMI_VDEV_TYPE_MONITOR &&
@@ -10162,7 +10346,9 @@ ath12k_mac_op_unassign_vif_chanctx(struc
 			goto out;
 
 		arvif->is_started = false;
-		goto out;
+		mutex_unlock(&ar->conf_mutex);
+		ath12k_mac_remove_link_interface(hw, arvif);
+		goto unassign_exit;
 	}
 
 	ret = ath12k_mac_vdev_stop(arvif);
@@ -10172,6 +10358,12 @@ ath12k_mac_op_unassign_vif_chanctx(struc
 
 	arvif->is_started = false;
 
+	if (ath12k_mac_is_ml_arvif(arvif) &&
+	    ahvif->vdev_type == WMI_VDEV_TYPE_AP) {
+		WARN_ON(ahvif->num_vdev_started == 0);
+		ahvif->num_vdev_started--;
+	}
+
 	if (ab->hw_params->vdev_start_delay &&
 	    ahvif->vdev_type == WMI_VDEV_TYPE_MONITOR)
 		ath12k_wmi_vdev_down(ar, arvif->vdev_id);
@@ -10181,8 +10373,12 @@ ath12k_mac_op_unassign_vif_chanctx(struc
 	    test_bit(MONITOR_VDEV_CREATED, &ar->monitor_flags))
 		ath12k_mac_monitor_stop(ar);
 
+	mutex_unlock(&ar->conf_mutex);
+	ath12k_mac_remove_link_interface(hw, arvif);
+	goto unassign_exit;
 out:
 	mutex_unlock(&ar->conf_mutex);
+unassign_exit:
 	mutex_unlock(&ah->conf_mutex);
 }
 
@@ -11495,6 +11691,7 @@ static const struct ieee80211_ops ath12k
 	.config                         = ath12k_mac_op_config,
 	.link_info_changed              = ath12k_mac_op_bss_info_changed,
 	.vif_cfg_changed		= ath12k_mac_op_vif_cfg_changed,
+	.change_vif_links		= ath12k_mac_op_change_vif_links,
 	.configure_filter		= ath12k_mac_op_configure_filter,
 	.hw_scan                        = ath12k_mac_op_hw_scan,
 	.cancel_hw_scan                 = ath12k_mac_op_cancel_hw_scan,
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -773,18 +773,23 @@ int ath12k_wmi_vdev_create(struct ath12k
 {
 	struct ath12k_pdev_wmi *wmi = ar->wmi;
 	struct wmi_vdev_create_cmd *cmd;
+	struct wmi_vdev_create_mlo_params *ml_params;
 	struct sk_buff *skb;
 	struct wmi_vdev_txrx_streams *txrx_streams;
 	struct wmi_tlv *tlv;
 	int ret, len;
 	void *ptr;
+	bool is_ml_vdev;
+
+	is_ml_vdev = is_valid_ether_addr(param->mld_addr);
 
 	/* It can be optimized my sending tx/rx chain configuration
 	 * only for supported bands instead of always sending it for
 	 * both the bands.
 	 */
 	len = sizeof(*cmd) + TLV_HDR_SIZE +
-		(WMI_NUM_SUPPORTED_BAND_MAX * sizeof(*txrx_streams));
+		(WMI_NUM_SUPPORTED_BAND_MAX * sizeof(*txrx_streams)) +
+		(is_ml_vdev ? TLV_HDR_SIZE + sizeof(*ml_params) : 0);
 
 	skb = ath12k_wmi_alloc_skb(wmi->wmi_ab, len);
 	if (!skb)
@@ -831,6 +836,23 @@ int ath12k_wmi_vdev_create(struct ath12k
 	txrx_streams->supported_rx_streams =
 				 param->chains[NL80211_BAND_5GHZ].rx;
 
+	if (is_ml_vdev) {
+		ptr = skb->data + sizeof(*cmd) + TLV_HDR_SIZE +
+			(WMI_NUM_SUPPORTED_BAND_MAX * sizeof(*txrx_streams));
+		tlv = ptr;
+		tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_STRUCT) |
+			      FIELD_PREP(WMI_TLV_LEN, sizeof(*ml_params));
+
+		ptr += TLV_HDR_SIZE;
+		ml_params = ptr;
+
+		ml_params->tlv_header =
+			FIELD_PREP(WMI_TLV_TAG, WMI_TAG_MLO_VDEV_CREATE_PARAMS) |
+			FIELD_PREP(WMI_TLV_LEN, sizeof(ml_params->mld_macaddr.addr));
+
+		ether_addr_copy(ml_params->mld_macaddr.addr, param->mld_addr);
+	}
+
 	ret = ath12k_wmi_cmd_send(wmi, skb, WMI_VDEV_CREATE_CMDID);
 	if (ret) {
 		ath12k_warn(ar->ab,
@@ -988,16 +1010,23 @@ int ath12k_wmi_vdev_start(struct ath12k
 {
 	struct ath12k_pdev_wmi *wmi = ar->wmi;
 	struct wmi_vdev_start_request_cmd *cmd;
+	struct wmi_vdev_start_mlo_params *ml_params;
+	struct wmi_partner_link_info *partner_info;
 	struct sk_buff *skb;
 	struct wmi_channel *chan;
 	struct wmi_tlv *tlv;
 	void *ptr;
-	int ret, len;
+	int ret, len, ml_arg_size = 0;
+	u8 i;
 
 	if (WARN_ON(arg->ssid_len > sizeof(cmd->ssid.ssid)))
 		return -EINVAL;
 
-	len = sizeof(*cmd) + sizeof(*chan) + TLV_HDR_SIZE;
+	if (!restart && arg->ml.enabled)
+		ml_arg_size = TLV_HDR_SIZE + sizeof(*ml_params) +
+			      TLV_HDR_SIZE + (arg->ml.num_partner_links * sizeof(*partner_info));;
+
+	len = sizeof(*cmd) + sizeof(*chan) + TLV_HDR_SIZE + ml_arg_size;
 
 	skb = ath12k_wmi_alloc_skb(wmi->wmi_ab, len);
 	if (!skb)
@@ -1051,6 +1080,48 @@ int ath12k_wmi_vdev_start(struct ath12k
 
 	ptr += sizeof(*tlv);
 
+	if (!ml_arg_size)
+		goto send;
+
+	tlv = ptr;
+	tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_STRUCT) |
+		      FIELD_PREP(WMI_TLV_LEN, sizeof(*ml_params));
+	ptr += TLV_HDR_SIZE;
+
+	ml_params = ptr;
+
+	ml_params->tlv_header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_MLO_VDEV_START_PARAMS) |
+				 FIELD_PREP(WMI_TLV_LEN, sizeof(*ml_params) - TLV_HDR_SIZE);
+
+	ml_params->flags = FIELD_PREP(ATH12K_WMI_FLAG_MLO_ENABLED,
+				      arg->ml.enabled) |
+			   FIELD_PREP(ATH12K_WMI_FLAG_MLO_ASSOC_LINK,
+				      arg->ml.assoc_link) |
+			   FIELD_PREP(ATH12K_WMI_FLAG_MLO_MCAST_VDEV,
+				      arg->ml.mcast_link);
+
+	ptr += sizeof(*ml_params);
+
+	tlv = ptr;
+	tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_STRUCT) |
+		      FIELD_PREP(WMI_TLV_LEN, arg->ml.num_partner_links *
+					sizeof(*partner_info));
+	ptr += TLV_HDR_SIZE;
+
+	partner_info = ptr;
+
+	for (i = 0; i < arg->ml.num_partner_links; i++) {
+		partner_info->tlv_header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_MLO_PARTNER_LINK_PARAMS) |
+					   FIELD_PREP(WMI_TLV_LEN, sizeof(*partner_info) - TLV_HDR_SIZE);
+
+		partner_info->vdev_id = arg->ml.partner_info[i].vdev_id;
+		partner_info->hw_link_id = arg->ml.partner_info[i].hw_link_id;
+		ether_addr_copy(partner_info->vdev_addr.addr, arg->ml.partner_info[i].addr);
+
+		partner_info++;
+	}
+
+send:
 	if (restart)
 		ret = ath12k_wmi_cmd_send(wmi, skb,
 					  WMI_VDEV_RESTART_REQUEST_CMDID);
@@ -7856,7 +7927,7 @@ ath12k_wmi_process_csa_switch_count_even
 				    vdev_ids[i]);
 			continue;
 		}
-		link_conf = arvif->ahvif->vif->link_conf[arvif->link_id];
+		link_conf = rcu_dereference(arvif->ahvif->vif->link_conf[arvif->link_id]);
  
 		if (!link_conf)
 			continue;
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -1940,6 +1940,10 @@ enum wmi_tlv_tag {
 	WMI_TAG_MLO_READY_CMD,
 	WMI_TAG_MLO_TEARDOWN_CMD,
 	WMI_TAG_MLO_TEARDOWN_COMPLETE,
+	WMI_TAG_MLO_PEER_ASSOC_PARAMS = 0x3D0,
+	WMI_TAG_MLO_PEER_CREATE_PARAMS = 0x3D5,
+	WMI_TAG_MLO_VDEV_START_PARAMS = 0x3D6,
+	WMI_TAG_MLO_VDEV_CREATE_PARAMS = 0x3D7,
 	WMI_TAG_PDEV_PKTLOG_DECODE_INFO = 0x414,
 	WMI_TAG_TPC_STATS_GET_CMD = 0x38B,
 	WMI_TAG_TPC_STATS_EVENT_FIXED_PARAM,
@@ -2823,6 +2827,7 @@ struct vdev_create_params {
 	u32 mbssid_flags;
 	u32 mbssid_tx_vdev_id;
 	u8 if_stats_id;
+	u8 mld_addr[ETH_ALEN];
 };
 
 #define ATH12K_MAX_VDEV_STATS_ID	0x30
@@ -2849,6 +2854,32 @@ struct wmi_vdev_txrx_streams {
 	u32 supported_rx_streams;
 } __packed;
 
+struct wmi_vdev_create_mlo_params {
+	u32 tlv_header;
+	struct wmi_mac_addr mld_macaddr;
+} __packed;
+
+#define ATH12K_WMI_FLAG_MLO_ENABLED			BIT(0)
+#define ATH12K_WMI_FLAG_MLO_ASSOC_LINK			BIT(1)
+#define ATH12K_WMI_FLAG_MLO_PRIMARY_UMAC		BIT(2)
+#define ATH12K_WMI_FLAG_MLO_LOGICAL_LINK_IDX_VALID	BIT(3)
+#define ATH12K_WMI_FLAG_MLO_PEER_ID_VALID		BIT(4)
+#define ATH12K_WMI_FLAG_MLO_MCAST_VDEV			BIT(5)
+#define ATH12K_WMI_FLAG_MLO_EMLSR_SUPPORT		BIT(6)
+#define ATH12K_WMI_FLAG_MLO_FORCED_INACTIVE		BIT(7)
+
+struct wmi_vdev_start_mlo_params {
+	u32 tlv_header;
+	u32 flags;
+} __packed;
+
+struct wmi_partner_link_info {
+	u32 tlv_header;
+	u32 vdev_id;
+	u32 hw_link_id;
+	struct wmi_mac_addr vdev_addr;
+} __packed;
+
 struct wmi_vdev_delete_cmd {
 	__le32 tlv_header;
 	__le32 vdev_id;
@@ -3094,6 +3125,22 @@ struct wmi_channel_arg {
 	enum wmi_phy_mode mode;
 };
 
+#define ATH12K_WMI_MLO_MAX_LINKS 3
+
+struct wmi_ml_partner_info {
+	u32 vdev_id;
+	u32 hw_link_id;
+	u8 addr[ETH_ALEN];
+};
+
+struct wmi_ml_arg {
+	bool enabled;
+	bool assoc_link;
+	bool mcast_link;
+	u8 num_partner_links;
+	struct wmi_ml_partner_info partner_info[ATH12K_WMI_MLO_MAX_LINKS];
+};
+
 struct wmi_vdev_start_req_arg {
 	u32 vdev_id;
 	struct wmi_channel_arg channel;
@@ -3116,6 +3163,7 @@ struct wmi_vdev_start_req_arg {
 	u32 mbssid_flags;
 	u32 mbssid_tx_vdev_id;
 	u32 ru_punct_bitmap;
+	struct wmi_ml_arg ml;
 };
 
 struct peer_create_params {
--- a/drivers/net/wireless/ath/ath12k/mac.h
+++ b/drivers/net/wireless/ath/ath12k/mac.h
@@ -172,4 +172,5 @@ struct ath12k *ath12k_get_ar_by_vif(stru
 int ath12k_mac_mlo_setup(struct ath12k_hw *ah);
 int ath12k_mac_mlo_ready(struct ath12k_hw *ah);
 int ath12k_mac_mlo_teardown(struct ath12k_hw *ah);
+bool ath12k_mac_is_ml_arvif(struct ath12k_link_vif *arvif);
 #endif
