From a1c69c0388e013096659ac4ca51498721b6c9bd1 Mon Sep 17 00:00:00 2001
From: Aloka Dixit <quic_alokad@quicinc.com>
Date: Tue, 31 Aug 2021 13:45:27 -0700
Subject: [PATCH 10/27] ath12k: prepare EHT peer assoc parameters

Add new parameters and prepare the association data for an EHT peer.
MCS data passed by the userspace uses the format described in
IEEE P802.11be/D1.1 July 2021 (section 9.4.2.295c.4 Supported
EHT-MCS And NSS Set field), convert it into the format expected by
the target.

Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debug.h |   4 +-
 drivers/net/wireless/ath/ath12k/mac.c   | 161 ++++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/wmi.c   |   7 ++
 drivers/net/wireless/ath/ath12k/wmi.h   |  28 +++++
 4 files changed, 198 insertions(+), 2 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/debug.h b/drivers/net/wireless/ath/ath12k/debug.h
index 689c473fe395..eba31f7c608c 100644
--- a/drivers/net/wireless/ath/ath12k/debug.h
+++ b/drivers/net/wireless/ath/ath12k/debug.h
@@ -24,8 +24,8 @@ enum ath12k_debug_mask {
 	ATH12K_DBG_TESTMODE	= 0x00000400,
 	ATH11k_DBG_HAL		= 0x00000800,
 	ATH12K_DBG_PCI		= 0x00001000,
-	ATH12K_DBG_DP_TX	= 0x00001000,
-	ATH12K_DBG_DP_RX	= 0x00002000,
+	ATH12K_DBG_DP_TX	= 0x00002000,
+	ATH12K_DBG_DP_RX	= 0x00004000,
 	ATH12K_DBG_ANY		= 0xffffffff,
 };
 
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 16c72d043afa..7377787a7fc7 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -1950,6 +1950,166 @@ static void ath12k_peer_assoc_h_he_6ghz(struct ath12k *ar,
 				     ampdu_factor)) - 1;
 }
 
+static void
+ath12k_mac_set_eht_mcs_nss_bitmap_20mhz_only(
+		const struct ieee80211_eht_mcs_nss_supp_20mhz_only *mcsnss,
+		u32 *rx_mcs, u32 *tx_mcs)
+{
+	*rx_mcs = FIELD_PREP(WMI_MCS_NSS_MAP_0_7,
+			     u8_get_bits(mcsnss->rx_tx_mcs7_max_nss,
+					 IEEE80211_EHT_MCS_NSS_RX)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_8_9,
+			     u8_get_bits(mcsnss->rx_tx_mcs9_max_nss,
+					 IEEE80211_EHT_MCS_NSS_RX)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_10_11,
+			     u8_get_bits(mcsnss->rx_tx_mcs11_max_nss,
+					 IEEE80211_EHT_MCS_NSS_RX)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_12_13,
+			     u8_get_bits(mcsnss->rx_tx_mcs13_max_nss,
+					 IEEE80211_EHT_MCS_NSS_RX));
+	*tx_mcs = FIELD_PREP(WMI_MCS_NSS_MAP_0_7,
+			     u8_get_bits(mcsnss->rx_tx_mcs7_max_nss,
+					 IEEE80211_EHT_MCS_NSS_TX)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_8_9,
+			     u8_get_bits(mcsnss->rx_tx_mcs9_max_nss,
+					 IEEE80211_EHT_MCS_NSS_TX)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_10_11,
+			     u8_get_bits(mcsnss->rx_tx_mcs11_max_nss,
+					 IEEE80211_EHT_MCS_NSS_TX)) |
+		   FIELD_PREP(WMI_MCS_NSS_MAP_12_13,
+			     u8_get_bits(mcsnss->rx_tx_mcs13_max_nss,
+					 IEEE80211_EHT_MCS_NSS_TX));
+}
+
+static void
+ath12k_mac_set_eht_mcs_nss_bitmap(const struct ieee80211_eht_mcs_nss_supp_bw *mcsnss,
+				  u32 *rx_mcs, u32 *tx_mcs)
+{
+	*rx_mcs = FIELD_PREP(WMI_MCS_NSS_MAP_0_7,
+			     u8_get_bits(mcsnss->rx_tx_mcs9_max_nss,
+					 IEEE80211_EHT_MCS_NSS_RX)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_8_9,
+			     u8_get_bits(mcsnss->rx_tx_mcs9_max_nss,
+					 IEEE80211_EHT_MCS_NSS_RX)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_10_11,
+			     u8_get_bits(mcsnss->rx_tx_mcs11_max_nss,
+					 IEEE80211_EHT_MCS_NSS_RX)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_12_13,
+			     u8_get_bits(mcsnss->rx_tx_mcs13_max_nss,
+					 IEEE80211_EHT_MCS_NSS_RX));
+	*tx_mcs = FIELD_PREP(WMI_MCS_NSS_MAP_0_7,
+			     u8_get_bits(mcsnss->rx_tx_mcs9_max_nss,
+					 IEEE80211_EHT_MCS_NSS_TX)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_8_9,
+			     u8_get_bits(mcsnss->rx_tx_mcs9_max_nss,
+					 IEEE80211_EHT_MCS_NSS_TX)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_10_11,
+			     u8_get_bits(mcsnss->rx_tx_mcs11_max_nss,
+					 IEEE80211_EHT_MCS_NSS_TX)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_12_13,
+			     u8_get_bits(mcsnss->rx_tx_mcs13_max_nss,
+					 IEEE80211_EHT_MCS_NSS_TX));
+}
+
+static void ath12k_mac_set_eht_ppe_threshold(const u8 *ppe_thres,
+					     struct ath12k_ppe_threshold *ppet)
+{
+	u32 bit_pos = IEEE80211_EHT_PPE_THRES_INFO_HEADER_SIZE;
+	u8 nss;
+
+	ppet->numss_m1 = ppe_thres[0] & IEEE80211_EHT_PPE_THRES_NSS_MASK;
+	ppet->ru_bit_mask = FIELD_GET(IEEE80211_EHT_PPE_THRES_RU_INDEX_BITMASK_MASK,
+			__cpu_to_le16(ppe_thres[0]));
+
+	for (nss = 0; nss <= ppet->numss_m1; nss++) {
+		u8 ru;
+
+		for (ru = 0;
+		     ru < hweight8(IEEE80211_EHT_PPE_THRES_RU_INDEX_BITMASK_MASK);
+		     ru++) {
+			u32 val = 0;
+			u8 i;
+
+			if ((ppet->ru_bit_mask & BIT(ru)) == 0)
+				continue;
+
+			for (i = 0; i < IEEE80211_EHT_PPE_THRES_INFO_PPET_SIZE;
+			     i++) {
+				val >>= 1;
+				val |= ((ppe_thres[bit_pos / 8] >>
+					(bit_pos % 8)) & 0x1) << 5;
+				bit_pos++;
+			}
+			ppet->ppet16_ppet8_ru3_ru0[nss] |=
+				(val <<
+				 (ru * IEEE80211_EHT_PPE_THRES_INFO_PPET_SIZE));
+		}
+	}
+}
+
+static void ath12k_peer_assoc_h_eht(struct ath12k *ar,
+				    struct ieee80211_vif *vif,
+				    struct ieee80211_sta *sta,
+				    struct peer_assoc_params *arg)
+{
+	const struct ieee80211_sta_eht_cap *eht_cap = &sta->deflink.eht_cap;
+	const struct ieee80211_eht_mcs_nss_supp *mcs_nss =
+						&eht_cap->eht_mcs_nss_supp;
+	const struct ieee80211_eht_mcs_nss_supp_bw *mcs_nss_supp_bw =
+							&mcs_nss->bw._80;
+	u8 mcs_idx = WMI_EHTCAP_TXRX_MCS_NSS_IDX_80;
+
+	if (!sta->deflink.he_cap.has_he || !eht_cap->has_eht)
+		return;
+
+	arg->eht_flag = true;
+	if (eht_cap->eht_cap_elem.phy_cap_info[5] &
+	    IEEE80211_EHT_PHY_CAP5_PPE_THRESHOLD_PRESENT &&
+	    eht_cap->eht_ppe_thres[0] != 0)
+		ath12k_mac_set_eht_ppe_threshold(eht_cap->eht_ppe_thres,
+						 &arg->peer_eht_ppet);
+	memcpy(arg->peer_eht_cap_mac, eht_cap->eht_cap_elem.mac_cap_info,
+	       sizeof(eht_cap->eht_cap_elem.mac_cap_info));
+	memcpy(arg->peer_eht_cap_phy, eht_cap->eht_cap_elem.phy_cap_info,
+	       sizeof(eht_cap->eht_cap_elem.phy_cap_info));
+
+	switch (sta->deflink.bandwidth) {
+	case IEEE80211_STA_RX_BW_320:
+		mcs_nss_supp_bw = &mcs_nss->bw._320;
+		mcs_idx = WMI_EHTCAP_TXRX_MCS_NSS_IDX_320;
+		arg->peer_eht_mcs_count++;
+		ath12k_mac_set_eht_mcs_nss_bitmap(&mcs_nss->bw._320,
+						  &arg->peer_eht_rx_mcs_set[mcs_idx],
+						  &arg->peer_eht_tx_mcs_set[mcs_idx]);
+		fallthrough;
+
+	case IEEE80211_STA_RX_BW_160:
+		mcs_nss_supp_bw = &mcs_nss->bw._160;
+		mcs_idx = WMI_EHTCAP_TXRX_MCS_NSS_IDX_160;
+		arg->peer_eht_mcs_count++;
+		ath12k_mac_set_eht_mcs_nss_bitmap(&mcs_nss->bw._160,
+						  &arg->peer_eht_rx_mcs_set[mcs_idx],
+						  &arg->peer_eht_tx_mcs_set[mcs_idx]);
+		fallthrough;
+
+	default:
+		if (arg->peer_phymode == MODE_11BE_EHT20) {
+			mcs_idx = WMI_EHTCAP_TXRX_MCS_NSS_IDX_80;
+			ath12k_mac_set_eht_mcs_nss_bitmap_20mhz_only(&mcs_nss->only_20mhz,
+					&arg->peer_eht_rx_mcs_set[mcs_idx],
+					&arg->peer_eht_tx_mcs_set[mcs_idx]);
+		} else {
+			mcs_idx = WMI_EHTCAP_TXRX_MCS_NSS_IDX_80;
+			ath12k_mac_set_eht_mcs_nss_bitmap(&mcs_nss->bw._80,
+					&arg->peer_eht_rx_mcs_set[mcs_idx],
+					&arg->peer_eht_tx_mcs_set[mcs_idx]);
+		}
+
+		arg->peer_eht_mcs_count++;
+		break;
+	}
+}
+
 static void ath12k_peer_assoc_h_smps(struct ieee80211_sta *sta,
 				     struct peer_assoc_params *arg)
 {
@@ -2282,6 +2442,7 @@ static void ath12k_peer_assoc_prepare(struct ath12k *ar,
 	ath12k_peer_assoc_h_vht(ar, vif, sta, arg);
 	ath12k_peer_assoc_h_he(ar, vif, sta, arg);
 	ath12k_peer_assoc_h_he_6ghz(ar, vif, sta, arg);
+	ath12k_peer_assoc_h_eht(ar, vif, sta, arg);
 	ath12k_peer_assoc_h_qos(ar, vif, sta, arg);
 	ath12k_peer_assoc_h_smps(sta, arg);
 
diff --git a/drivers/net/wireless/ath/ath12k/wmi.c b/drivers/net/wireless/ath/ath12k/wmi.c
index 6fe85c32f27a..e822e5e8432a 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -1989,6 +1989,13 @@ int ath12k_wmi_send_peer_assoc_cmd(struct ath12k *ar,
 		ptr += sizeof(*he_mcs);
 	}
 
+	/* fill ML Partner links Header TAG */
+	len = 0;
+	tlv = ptr;
+	tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_STRUCT) |
+		      FIELD_PREP(WMI_TLV_LEN, len);
+	ptr += TLV_HDR_SIZE;
+
 	ret = ath12k_wmi_cmd_send(wmi, skb, WMI_PEER_ASSOC_CMDID);
 	if (ret) {
 		ath12k_warn(ar->ab,
diff --git a/drivers/net/wireless/ath/ath12k/wmi.h b/drivers/net/wireless/ath/ath12k/wmi.h
index b5262db8a457..60747e79490c 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -2067,6 +2067,8 @@ enum wmi_tlv_service {
 	WMI_MAX_EXT_SERVICE = 256,
 
 	WMI_TLV_SERVICE_REG_CC_EXT_EVENT_SUPPORT = 281,
+
+	WMI_TLV_SERVICE_BE = 289,
 	WMI_MAX_EXT2_SERVICE,
 };
 
@@ -2207,6 +2209,25 @@ struct ath12k_hal_reg_capabilities_ext {
 
 #define WMI_MAX_EHTCAP_MAC_SIZE  2
 #define WMI_MAX_EHTCAP_PHY_SIZE  3
+#define WMI_MAX_EHTCAP_RATE_SET  3
+
+/*
+ * 0 – index indicated EHT-MCS map for 20Mhz only sta (4 bytes valid)
+ * 1 – index for <= 80MHz bw  (only 3 bytes are valid and other is reserved)
+ * 2 – index for == 160Mhz bw (only 3 bytes are valid and other is reserved)
+ * 3 – index for == 320Mhz bw (only 3 bytes are valid and other is reserved)
+ */
+#define WMI_MAX_EHT_SUPP_MCS_2G_SIZE  2
+#define WMI_MAX_EHT_SUPP_MCS_5G_SIZE  4
+
+#define WMI_EHTCAP_TXRX_MCS_NSS_IDX_80          0
+#define WMI_EHTCAP_TXRX_MCS_NSS_IDX_160         1
+#define WMI_EHTCAP_TXRX_MCS_NSS_IDX_320         2
+
+#define WMI_MCS_NSS_MAP_0_7	GENMASK(3, 0)
+#define WMI_MCS_NSS_MAP_8_9	GENMASK(7, 4)
+#define WMI_MCS_NSS_MAP_10_11	GENMASK(11, 8)
+#define WMI_MCS_NSS_MAP_12_13	GENMASK(15, 12)
 
 /*
  * 0 – index indicated EHT-MCS map for 20Mhz only sta (4 bytes valid)
@@ -3741,6 +3762,13 @@ struct peer_assoc_params {
 	bool twt_responder;
 	bool twt_requester;
 	struct ath12k_ppe_threshold peer_ppet;
+	bool eht_flag;
+	u32 peer_eht_cap_mac[WMI_MAX_EHTCAP_MAC_SIZE];
+	u32 peer_eht_cap_phy[WMI_MAX_EHTCAP_PHY_SIZE];
+	u32 peer_eht_mcs_count;
+	u32 peer_eht_rx_mcs_set[WMI_MAX_EHTCAP_RATE_SET];
+	u32 peer_eht_tx_mcs_set[WMI_MAX_EHTCAP_RATE_SET];
+	struct ath12k_ppe_threshold peer_eht_ppet;
 };
 
 struct  wmi_peer_assoc_complete_cmd {
-- 
2.31.1

