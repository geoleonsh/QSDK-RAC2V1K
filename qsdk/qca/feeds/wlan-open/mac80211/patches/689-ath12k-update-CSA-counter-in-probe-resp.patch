From 293f928bb2139bdb6fdb5aca2630b60ba5e33591 Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Thu, 24 Nov 2022 14:07:16 +0530
Subject: [PATCH] ath12k: update CSA counter in probe response
 frames

Currently, driver only asks Channel Switch (CS) count event
from firmware during Channel Switch Annoucnement (CSA) when
the count goes to zero. But since probe response is handled
in upper layer, and driver is not updating the counter,
the CS count present in probe response frames doesn't change
during the whole CSA time.

Fix this by asking CS count event from firmware for every count
and then accordingly decrementing the count in mac80211.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/wmi.c | 13 +++++++------
 1 file changed, 7 insertions(+), 6 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/wmi.c b/drivers/net/wireless/ath/ath12k/wmi.c
index 44c8de9..e9f6158 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -1859,6 +1859,7 @@ int ath12k_wmi_bcn_tmpl(struct ath12k *ar, u32 vdev_id,
 	cmd->tim_ie_offset = cpu_to_le32(offs->tim_offset);
 	cmd->csa_switch_count_offset = cpu_to_le32(offs->cntdwn_counter_offs[0]);
 	cmd->ext_csa_switch_count_offset = cpu_to_le32(offs->cntdwn_counter_offs[1]);
+	cmd->csa_event_bitmap = cpu_to_le32(0xFFFFFFFF);
 	cmd->buf_len = cpu_to_le32(bcn->len);
 	cmd->mbssid_ie_offset = cpu_to_le32(offs->mbssid_off);
 	cmd->ema_params = cpu_to_le32(ema_params);
@@ -8017,10 +8018,6 @@ ath12k_wmi_process_csa_switch_count_event(struct ath12k_base *ab,
 	struct ath12k_link_vif *arvif;
 	struct ieee80211_bss_conf *link_conf;
 
-	/* Finish CSA once the switch count becomes NULL */
-	if (ev->current_switch_count)
-		return;
-
 	rcu_read_lock();
 	for (i = 0; i < ev->num_vdevs; i++) {
 		arvif = ath12k_mac_get_arvif_by_vdev_id(ab, vdev_ids[i]);
@@ -8036,8 +8033,12 @@ ath12k_wmi_process_csa_switch_count_event(struct ath12k_base *ab,
 			continue;
 
 		/* FIXME some changes are expected for ML vifs */
-		if (arvif->is_up && link_conf->csa_active)
-			ieee80211_csa_finish(arvif->ahvif->vif);
+		if (arvif->is_up && link_conf->csa_active) {
+			if (!ev->current_switch_count)
+				ieee80211_csa_finish(arvif->ahvif->vif);
+			else if (ev->current_switch_count > 1)
+				ieee80211_beacon_update_cntdwn(arvif->ahvif->vif);
+		}
 	}
 	rcu_read_unlock();
 }
-- 
2.17.1

