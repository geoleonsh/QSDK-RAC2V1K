From d7713b5ca78966dd7ea6a3bdd35511503dc59537 Mon Sep 17 00:00:00 2001
From: Ramya Gnanasekar <quic_rgnanase@quicinc.com>
Date: Thu, 14 Apr 2022 12:14:03 +0530
Subject: [PATCH] mesh: add EHT support

Add mesh_eht_enabled and eht ssid config to include EHT capability
and EHT operation IEs in mesh PLINK action frames.
Update mesh_eht_enabled from EHT capability advertised for mesh mode.
Support for mesh channelization in 320MHz.

Signed-off-by: Ramya Gnanasekar <quic_rgnanase@quicinc.com>
Signed-off-by: Sathishkumar Muruganandam <murugana@qti.qualcomm.com>
---
--- a/wpa_supplicant/ap.c
+++ b/wpa_supplicant/ap.c
@@ -326,6 +326,14 @@ int wpa_supplicant_conf_ap_ht(struct wpa
 
 		if (mode && is_6ghz_freq(ssid->frequency) &&
 		    conf->hw_mode == HOSTAPD_MODE_IEEE80211A) {
+			if (mode->eht_capab[wpas_mode_to_ieee80211_mode(
+			    ssid->mode)].eht_supported &&
+                            ssid->eht)
+				conf->ieee80211be = 1;
+			if (mode->he_capab[wpas_mode_to_ieee80211_mode(
+			    ssid->mode)].he_supported &&
+				ssid->he)
+				conf->ieee80211ax = 1;
 #ifdef CONFIG_P2P
 			wpas_conf_ap_he_6ghz(wpa_s, mode, ssid, conf);
 #endif /* CONFIG_P2P */
@@ -409,6 +417,10 @@ int wpa_supplicant_conf_ap_ht(struct wpa
 					    ssid->mode)].he_supported &&
 			    ssid->he)
 				conf->ieee80211ax = 1;
+			if (mode->eht_capab[wpas_mode_to_ieee80211_mode(
+					    ssid->mode)].eht_supported &&
+			    ssid->eht)
+				conf->ieee80211be = 1;
 
 			if (mode->vht_capab && ssid->vht) {
 				conf->ieee80211ac = 1;
--- a/wpa_supplicant/config.c
+++ b/wpa_supplicant/config.c
@@ -2882,6 +2882,7 @@ static const struct parse_data ssid_fiel
 	{ INT_RANGE(disable_40mhz_scan, 0, 1)},
 	{ INT_RANGE(beacon_tx_mode, 1, 2)},
 	{ INT_RANGE(enable_160mhz_bw, 0, 1)},
+	{ INT_RANGE(enable_320mhz_bw, 0, 1)},
 	{ INT_RANGE(disable_eht, 0, 1)},
 	{ INT_RANGE(enable_4addr_mode, 0, 1)},
 };
--- a/wpa_supplicant/mesh.c
+++ b/wpa_supplicant/mesh.c
@@ -226,7 +226,7 @@ static int wpas_mesh_update_freq_params(
 		    ifmsh->conf->ieee80211n,
 		    ifmsh->conf->ieee80211ac,
 		    ifmsh->conf->ieee80211ax,
-		    false,
+		    ifmsh->conf->ieee80211be,
 		    ifmsh->conf->secondary_channel,
 		    hostapd_get_oper_chwidth(ifmsh->conf),
 		    hostapd_get_oper_centr_freq_seg0_idx(ifmsh->conf),
@@ -468,6 +468,9 @@ static int wpa_supplicant_mesh_init(stru
 		case 160:
 			conf->op_class = 134;
 			break;
+		case 320:
+			conf->op_class = 137;
+			break;
 		default:
 			conf->op_class = 131;
 			break;
@@ -659,6 +662,7 @@ int wpa_supplicant_join_mesh(struct wpa_
 	wpa_s->mesh_ht_enabled = !!params->freq.ht_enabled;
 	wpa_s->mesh_vht_enabled = !!params->freq.vht_enabled;
 	wpa_s->mesh_he_enabled = !!params->freq.he_enabled;
+	wpa_s->mesh_eht_enabled = !!params->freq.eht_enabled;
 	if (params->freq.ht_enabled && params->freq.sec_channel_offset)
 		ssid->ht40 = params->freq.sec_channel_offset;
 
@@ -680,6 +684,9 @@ int wpa_supplicant_join_mesh(struct wpa_
 		case 160:
 			ssid->max_oper_chwidth = CONF_OPER_CHWIDTH_160MHZ;
 			break;
+		case 320:
+			ssid->max_oper_chwidth = CONF_OPER_CHWIDTH_320MHZ;
+			break;
 		default:
 			ssid->max_oper_chwidth = CONF_OPER_CHWIDTH_USE_HT;
 			break;
@@ -687,6 +694,8 @@ int wpa_supplicant_join_mesh(struct wpa_
 	}
 	if (wpa_s->mesh_he_enabled)
 		ssid->he = 1;
+	if (wpa_s->mesh_eht_enabled)
+		ssid->eht = 1;
 	if (ssid->beacon_int > 0)
 		params->beacon_int = ssid->beacon_int;
 	else if (wpa_s->conf->beacon_int > 0)
--- a/wpa_supplicant/mesh_mpm.c
+++ b/wpa_supplicant/mesh_mpm.c
@@ -257,6 +257,16 @@ static void mesh_mpm_send_plink_action(s
 				3 + sizeof(struct ieee80211_he_6ghz_band_cap);
 	}
 #endif /* CONFIG_IEEE80211AX */
+#ifdef CONFIG_IEEE80211BE
+	if (type != PLINK_CLOSE && wpa_s->mesh_eht_enabled) {
+		buf_len += 3 +
+			   2 +
+			   EHT_PHY_CAPAB_LEN +
+			   EHT_MCS_NSS_CAPAB_LEN +
+			   EHT_PPE_THRESH_CAPAB_LEN;
+		buf_len += 3 + sizeof(struct ieee80211_eht_operation);
+	}
+#endif /* CONFIG_IEEE80211BE */
 	if (type != PLINK_CLOSE)
 		buf_len += conf->rsn_ie_len; /* RSN IE */
 #ifdef CONFIG_OCV
@@ -391,6 +401,20 @@ static void mesh_mpm_send_plink_action(s
 		wpabuf_put_data(buf, he_capa_oper, pos - he_capa_oper);
 	}
 #endif /* CONFIG_IEEE80211AX */
+#ifdef CONFIG_IEEE80211BE
+	if (type != PLINK_CLOSE && wpa_s->mesh_eht_enabled) {
+		u8 eht_capa_oper[3 +
+				 2 +
+				 EHT_PHY_CAPAB_LEN +
+				 EHT_MCS_NSS_CAPAB_LEN +
+				 EHT_PPE_THRESH_CAPAB_LEN +
+				 3 + sizeof(struct ieee80211_eht_operation)];
+		pos = hostapd_eid_eht_capab(bss, eht_capa_oper,
+			       		    IEEE80211_MODE_MESH);
+		pos = hostapd_eid_eht_operation(bss, pos, IEEE80211_MODE_MESH);
+		wpabuf_put_data(buf, eht_capa_oper, pos - eht_capa_oper);
+	}
+#endif /* CONFIG_IEEE80211BE */
 
 #ifdef CONFIG_OCV
 	if (type != PLINK_CLOSE && conf->ocv) {
@@ -760,6 +784,11 @@ static struct sta_info * mesh_mpm_add_pe
 	copy_sta_he_6ghz_capab(data, sta, elems->he_6ghz_band_cap);
 #endif /* CONFIG_IEEE80211AX */
 
+#ifdef CONFIG_IEEE80211BE
+	copy_sta_eht_capab(data, sta, IEEE80211_MODE_MESH, elems->he_capabilities,
+			   elems->he_capabilities_len, elems->eht_capabilities, elems->eht_capabilities_len);
+#endif /* CONFIG_IEEE80211BE */
+
 	if (hostapd_get_aid(data, sta) < 0) {
 		wpa_msg(wpa_s, MSG_ERROR, "No AIDs available");
 		ap_free_sta(data, sta);
@@ -780,6 +809,8 @@ static struct sta_info * mesh_mpm_add_pe
 	params.he_capab = sta->he_capab;
 	params.he_capab_len = sta->he_capab_len;
 	params.he_6ghz_capab = sta->he_6ghz_capab;
+	params.eht_capab = sta->eht_capab;
+	params.eht_capab_len = sta->eht_capab_len;
 	params.flags |= WPA_STA_WMM;
 	params.flags_mask |= WPA_STA_AUTHENTICATED;
 	if (conf->security == MESH_CONF_SEC_NONE) {
--- a/wpa_supplicant/wpa_supplicant_i.h
+++ b/wpa_supplicant/wpa_supplicant_i.h
@@ -1003,6 +1003,7 @@ struct wpa_supplicant {
 	unsigned int mesh_ht_enabled:1;
 	unsigned int mesh_vht_enabled:1;
 	unsigned int mesh_he_enabled:1;
+	unsigned int mesh_eht_enabled:1;
 	struct wpa_driver_mesh_join_params *mesh_params;
 #ifdef CONFIG_PMKSA_CACHE_EXTERNAL
 	/* struct external_pmksa_cache::list */
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -4298,6 +4298,8 @@ static int hostapd_config_fill(struct ho
 	} else if (os_strcmp(buf, "wowlan_triggers") == 0) {
 		os_free(bss->wowlan_triggers);
 		bss->wowlan_triggers = os_strdup(pos);
+	} else if (os_strcmp(buf, "enable_320mhz_bw") == 0) {
+		conf->enable_320mhz_bw = atoi(pos);
 	} else if (os_strcmp(buf, "enable_160mhz_bw") == 0) {
 		conf->enable_160mhz_bw = atoi(pos);
 	} else if (os_strcmp(buf, "disable_40mhz_scan") == 0) {
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -1183,6 +1183,7 @@ struct hostapd_config {
 	u16 ru_punct_bitmap;
 	u8 ru_punct_ofdma;
 	u8 ru_punct_acs_threshold;
+	int enable_320mhz_bw;
 
 	enum mbssid {
 		MBSSID_DISABLED = 0,
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -1356,6 +1356,11 @@ struct wpa_driver_associate_params {
 	int enable_160mhz_bw;
 
 	/**
+	 * Enable 320MHz BW - set it 1 to enable mesh 320MHz 6G
+	 */
+	int enable_320mhz_bw;
+
+	/**
 	 * disable_eht - Disable EHT for this connection
 	 */
 	int disable_eht;
--- a/wpa_supplicant/config_ssid.h
+++ b/wpa_supplicant/config_ssid.h
@@ -1286,6 +1286,11 @@ struct wpa_ssid {
 	int enable_160mhz_bw;
 
 	/**
+	 * Enable 320MHz BW - set it 1 to enable mesh 320MHz 6G
+	 */
+	int enable_320mhz_bw;
+
+	/**
 	 * disable_eht - Disable EHT (IEEE 802.11be) for this network
 	 *
 	 * By default, use it if it is available, but this can be configured
