From 00003561608c076c48cf7d22a7be907c6b86b286 Mon Sep 17 00:00:00 2001
From: Manish Dharanenthiran <quic_mdharane@quicinc.com>
Date: Tue, 7 Feb 2023 16:26:01 +0530
Subject: [PATCH 1/2] mac80211: update sta max bandwith during peer assoc
 prepare

Currently, mac80211 sends STA bandwidth which is minimum of AP
bandwidth and STA bandwidth during association.

ath12k driver needs the details of maximum sta bandwidth supported
that was exchanged during association to set the nss & mcs rates which
would be used during channel expansion.

Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
---
 include/net/mac80211.h | 1 +
 net/mac80211/eht.c     | 1 +
 net/mac80211/he.c      | 1 +
 net/mac80211/ht.c      | 1 +
 net/mac80211/rx.c      | 1 +
 net/mac80211/vht.c     | 2 ++
 6 files changed, 7 insertions(+)

diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 787e85f..ed42dbb 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -2290,6 +2290,7 @@ struct ieee80211_link_sta {
 
 	u8 rx_nss;
 	enum ieee80211_sta_rx_bandwidth bandwidth;
+	enum ieee80211_sta_rx_bandwidth sta_max_bandwidth;
 	struct ieee80211_sta_txpwr txpwr;
 };
 
diff --git a/net/mac80211/eht.c b/net/mac80211/eht.c
index 4a30fe3..58d19bb 100644
--- a/net/mac80211/eht.c
+++ b/net/mac80211/eht.c
@@ -110,6 +110,7 @@ ieee80211_eht_cap_ie_to_sta_eht_cap(struct ieee80211_sub_if_data *sdata,
 
 	link_sta->cur_max_bandwidth = ieee80211_sta_cap_rx_bw(link_sta);
 	link_sta->pub->bandwidth = ieee80211_sta_cur_vht_bw(link_sta);
+	link_sta->pub->sta_max_bandwidth = link_sta->cur_max_bandwidth;
 }
 
 void ieee80211_eht_op_ie_to_bss_conf(struct ieee80211_bss_conf *link_conf,
diff --git a/net/mac80211/he.c b/net/mac80211/he.c
index 89d42cc..c5f7a5c 100644
--- a/net/mac80211/he.c
+++ b/net/mac80211/he.c
@@ -163,6 +163,7 @@ ieee80211_he_cap_ie_to_sta_he_cap(struct ieee80211_sub_if_data *sdata,
 
 	link_sta->cur_max_bandwidth = ieee80211_sta_cap_rx_bw(link_sta);
 	link_sta->pub->bandwidth = ieee80211_sta_cur_vht_bw(link_sta);
+	link_sta->pub->sta_max_bandwidth = link_sta->cur_max_bandwidth;
 
 	if (sband->band == NL80211_BAND_6GHZ && he_6ghz_capa)
 		ieee80211_update_from_he_6ghz_capa(he_6ghz_capa, link_sta);
diff --git a/net/mac80211/ht.c b/net/mac80211/ht.c
index 45c4c8e..f826031 100644
--- a/net/mac80211/ht.c
+++ b/net/mac80211/ht.c
@@ -281,6 +281,7 @@ bool ieee80211_ht_cap_ie_to_sta_ht_cap(struct ieee80211_sub_if_data *sdata,
 	link_sta->cur_max_bandwidth =
 		ht_cap.cap & IEEE80211_HT_CAP_SUP_WIDTH_20_40 ?
 				IEEE80211_STA_RX_BW_40 : IEEE80211_STA_RX_BW_20;
+	link_sta->pub->sta_max_bandwidth = link_sta->cur_max_bandwidth;
 
 	if (sta->sdata->vif.type == NL80211_IFTYPE_AP ||
 	    sta->sdata->vif.type == NL80211_IFTYPE_AP_VLAN) {
diff --git a/net/mac80211/rx.c b/net/mac80211/rx.c
index de96d12..d1190e5 100644
--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -3638,6 +3638,7 @@ ieee80211_rx_h_action(struct ieee80211_rx_data *rx)
 
 			/* set cur_max_bandwidth and recalc sta bw */
 			rx->link_sta->cur_max_bandwidth = max_bw;
+			rx->link_sta->pub->sta_max_bandwidth = rx->link_sta->cur_max_bandwidth;
 			new_bw = ieee80211_sta_cur_vht_bw(rx->link_sta);
 
 			if (rx->link_sta->pub->bandwidth == new_bw)
diff --git a/net/mac80211/vht.c b/net/mac80211/vht.c
index 29ec31c..63b2181 100644
--- a/net/mac80211/vht.c
+++ b/net/mac80211/vht.c
@@ -301,6 +301,7 @@ ieee80211_vht_cap_ie_to_sta_vht_cap(struct ieee80211_sub_if_data *sdata,
 	}
 
 	link_sta->pub->bandwidth = ieee80211_sta_cur_vht_bw(link_sta);
+	link_sta->pub->sta_max_bandwidth = link_sta->cur_max_bandwidth;
 
 	/*
 	 * FIXME - should the amsdu len be per link? store per link
@@ -672,6 +673,7 @@ u32 __ieee80211_vht_handle_opmode(struct ieee80211_sub_if_data *sdata,
 		break;
 	}
 
+	link_sta->pub->sta_max_bandwidth = link_sta->cur_max_bandwidth;
 	new_bw = ieee80211_sta_cur_vht_bw(link_sta);
 	if (new_bw != link_sta->pub->bandwidth) {
 		link_sta->pub->bandwidth = new_bw;
-- 
2.17.1

