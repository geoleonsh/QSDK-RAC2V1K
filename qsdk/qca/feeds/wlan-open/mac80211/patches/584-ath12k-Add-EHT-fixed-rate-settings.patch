From 0ec7f21c80585637565d79daa868e4cd6b93aadd Mon Sep 17 00:00:00 2001
From: Muna Sinada <quic_msinada@quicinc.com>
Date: Tue, 31 Aug 2021 09:26:40 -0700
Subject: [PATCH 22/27] ath12k: Add EHT fixed rate settings

Adding necessary EHT additions to enable the setting of fixed rate
which encompasses the setting of EHT MCS/NSS, EHT GI and EHT LTF.

Signed-off-by: Muna Sinada <quic_msinada@quicinc.com>
Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 412 ++++++++++++++++++++++----
 drivers/net/wireless/ath/ath12k/wmi.h |   1 +
 2 files changed, 360 insertions(+), 53 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -375,6 +375,18 @@ ath12k_mac_max_he_nss(const u16 he_mcs_m
 	return 1;
 }
 
+static u32
+ath12k_mac_max_eht_nss(const u16 eht_mcs_mask[NL80211_EHT_NSS_MAX])
+{
+	int nss;
+
+	for (nss = NL80211_EHT_NSS_MAX - 1; nss >= 0; nss--)
+		if (eht_mcs_mask[nss])
+			return nss + 1;
+
+	return 1;
+}
+
 static u8 ath12k_parse_mpdudensity(u8 mpdudensity)
 {
 /* 802.11n D2.0 defined values for "Minimum MPDU Start Spacing":
@@ -1991,62 +2003,84 @@ static void ath12k_peer_assoc_h_he_6ghz(
 static void
 ath12k_mac_set_eht_mcs_nss_bitmap_20mhz_only(
 		const struct ieee80211_eht_mcs_nss_supp_20mhz_only *mcsnss,
-		u32 *rx_mcs, u32 *tx_mcs)
+		u32 *rx_mcs, u32 *tx_mcs,
+		const u16 eht_mcs_limit[NL80211_EHT_NSS_MAX])
 {
-	*rx_mcs = FIELD_PREP(WMI_MCS_NSS_MAP_0_7,
-			     u8_get_bits(mcsnss->rx_tx_mcs7_max_nss,
-					 IEEE80211_EHT_MCS_NSS_RX)) |
-		  FIELD_PREP(WMI_MCS_NSS_MAP_8_9,
-			     u8_get_bits(mcsnss->rx_tx_mcs9_max_nss,
-					 IEEE80211_EHT_MCS_NSS_RX)) |
-		  FIELD_PREP(WMI_MCS_NSS_MAP_10_11,
-			     u8_get_bits(mcsnss->rx_tx_mcs11_max_nss,
-					 IEEE80211_EHT_MCS_NSS_RX)) |
-		  FIELD_PREP(WMI_MCS_NSS_MAP_12_13,
-			     u8_get_bits(mcsnss->rx_tx_mcs13_max_nss,
-					 IEEE80211_EHT_MCS_NSS_RX));
-	*tx_mcs = FIELD_PREP(WMI_MCS_NSS_MAP_0_7,
-			     u8_get_bits(mcsnss->rx_tx_mcs7_max_nss,
-					 IEEE80211_EHT_MCS_NSS_TX)) |
-		  FIELD_PREP(WMI_MCS_NSS_MAP_8_9,
-			     u8_get_bits(mcsnss->rx_tx_mcs9_max_nss,
-					 IEEE80211_EHT_MCS_NSS_TX)) |
-		  FIELD_PREP(WMI_MCS_NSS_MAP_10_11,
-			     u8_get_bits(mcsnss->rx_tx_mcs11_max_nss,
-					 IEEE80211_EHT_MCS_NSS_TX)) |
-		   FIELD_PREP(WMI_MCS_NSS_MAP_12_13,
-			     u8_get_bits(mcsnss->rx_tx_mcs13_max_nss,
-					 IEEE80211_EHT_MCS_NSS_TX));
+	int nss;
+	u8 mcs_7 = 0, mcs_9 = 0, mcs_11 = 0, mcs_13 = 0;
+	u8 peer_mcs_7 = 0, peer_mcs_9 = 0, peer_mcs_11 = 0, peer_mcs_13 = 0;
+
+	for (nss = 0; nss < NL80211_EHT_NSS_MAX; nss++) {
+		if (eht_mcs_limit[nss] & 0x00FF)
+			mcs_7++;
+		if (eht_mcs_limit[nss] & 0x0300)
+			mcs_9++;
+		if (eht_mcs_limit[nss] & 0x0C00)
+			mcs_11++;
+		if (eht_mcs_limit[nss] & 0x3000)
+			mcs_13++;
+	}
+
+	peer_mcs_7 = u8_get_bits(mcsnss->rx_tx_mcs7_max_nss, IEEE80211_EHT_MCS_NSS_RX);
+	peer_mcs_9 = u8_get_bits(mcsnss->rx_tx_mcs9_max_nss, IEEE80211_EHT_MCS_NSS_RX);
+	peer_mcs_11 = u8_get_bits(mcsnss->rx_tx_mcs11_max_nss, IEEE80211_EHT_MCS_NSS_RX);
+	peer_mcs_13 = u8_get_bits(mcsnss->rx_tx_mcs13_max_nss, IEEE80211_EHT_MCS_NSS_RX);
+
+	*rx_mcs = FIELD_PREP(WMI_MCS_NSS_MAP_0_7, min(peer_mcs_7, mcs_7)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_8_9, min(peer_mcs_9, mcs_9)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_10_11, min(peer_mcs_11, mcs_11)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_12_13, min (peer_mcs_13, mcs_13));
+
+	peer_mcs_7 = u8_get_bits(mcsnss->rx_tx_mcs7_max_nss, IEEE80211_EHT_MCS_NSS_TX);
+	peer_mcs_9 = u8_get_bits(mcsnss->rx_tx_mcs9_max_nss, IEEE80211_EHT_MCS_NSS_TX);
+	peer_mcs_11 = u8_get_bits(mcsnss->rx_tx_mcs11_max_nss, IEEE80211_EHT_MCS_NSS_TX);
+	peer_mcs_13 = u8_get_bits(mcsnss->rx_tx_mcs13_max_nss, IEEE80211_EHT_MCS_NSS_TX);
+
+	*tx_mcs = FIELD_PREP(WMI_MCS_NSS_MAP_0_7, min(peer_mcs_7, mcs_7)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_8_9, min(peer_mcs_9, mcs_9)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_10_11, min(peer_mcs_11, mcs_11)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_12_13, min (peer_mcs_13, mcs_13));
 }
 
 static void
 ath12k_mac_set_eht_mcs_nss_bitmap(const struct ieee80211_eht_mcs_nss_supp_bw *mcsnss,
-				  u32 *rx_mcs, u32 *tx_mcs)
+				  u32 *rx_mcs, u32 *tx_mcs,
+				  const u16 eht_mcs_limit[NL80211_EHT_NSS_MAX])
 {
-	*rx_mcs = FIELD_PREP(WMI_MCS_NSS_MAP_0_7,
-			     u8_get_bits(mcsnss->rx_tx_mcs9_max_nss,
-					 IEEE80211_EHT_MCS_NSS_RX)) |
-		  FIELD_PREP(WMI_MCS_NSS_MAP_8_9,
-			     u8_get_bits(mcsnss->rx_tx_mcs9_max_nss,
-					 IEEE80211_EHT_MCS_NSS_RX)) |
-		  FIELD_PREP(WMI_MCS_NSS_MAP_10_11,
-			     u8_get_bits(mcsnss->rx_tx_mcs11_max_nss,
-					 IEEE80211_EHT_MCS_NSS_RX)) |
-		  FIELD_PREP(WMI_MCS_NSS_MAP_12_13,
-			     u8_get_bits(mcsnss->rx_tx_mcs13_max_nss,
-					 IEEE80211_EHT_MCS_NSS_RX));
-	*tx_mcs = FIELD_PREP(WMI_MCS_NSS_MAP_0_7,
-			     u8_get_bits(mcsnss->rx_tx_mcs9_max_nss,
-					 IEEE80211_EHT_MCS_NSS_TX)) |
-		  FIELD_PREP(WMI_MCS_NSS_MAP_8_9,
-			     u8_get_bits(mcsnss->rx_tx_mcs9_max_nss,
-					 IEEE80211_EHT_MCS_NSS_TX)) |
-		  FIELD_PREP(WMI_MCS_NSS_MAP_10_11,
-			     u8_get_bits(mcsnss->rx_tx_mcs11_max_nss,
-					 IEEE80211_EHT_MCS_NSS_TX)) |
-		  FIELD_PREP(WMI_MCS_NSS_MAP_12_13,
-			     u8_get_bits(mcsnss->rx_tx_mcs13_max_nss,
-					 IEEE80211_EHT_MCS_NSS_TX));
+	int nss;
+	u8 mcs_7 = 0, mcs_9 = 0, mcs_11 = 0, mcs_13 = 0;
+	u8 peer_mcs_7 = 0, peer_mcs_9 = 0, peer_mcs_11 = 0, peer_mcs_13 = 0;
+
+	for (nss = 0; nss < NL80211_EHT_NSS_MAX; nss++) {
+		if (eht_mcs_limit[nss] & 0x00FF)
+			mcs_7++;
+		if (eht_mcs_limit[nss] & 0x0300)
+			mcs_9++;
+		if (eht_mcs_limit[nss] & 0x0C00)
+			mcs_11++;
+		if (eht_mcs_limit[nss] & 0x3000)
+			mcs_13++;
+	}
+
+	peer_mcs_7 = u8_get_bits(mcsnss->rx_tx_mcs9_max_nss, IEEE80211_EHT_MCS_NSS_RX);
+	peer_mcs_9 = u8_get_bits(mcsnss->rx_tx_mcs9_max_nss, IEEE80211_EHT_MCS_NSS_RX);
+	peer_mcs_11 = u8_get_bits(mcsnss->rx_tx_mcs11_max_nss, IEEE80211_EHT_MCS_NSS_RX);
+	peer_mcs_13 = u8_get_bits(mcsnss->rx_tx_mcs13_max_nss, IEEE80211_EHT_MCS_NSS_RX);
+
+	*rx_mcs = FIELD_PREP(WMI_MCS_NSS_MAP_0_7, min(peer_mcs_7, mcs_7)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_8_9, min(peer_mcs_9, mcs_9)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_10_11, min(peer_mcs_11, mcs_11)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_12_13, min (peer_mcs_13, mcs_13));
+
+	peer_mcs_7 = u8_get_bits(mcsnss->rx_tx_mcs9_max_nss, IEEE80211_EHT_MCS_NSS_TX);
+	peer_mcs_9 = u8_get_bits(mcsnss->rx_tx_mcs9_max_nss, IEEE80211_EHT_MCS_NSS_TX);
+	peer_mcs_11 = u8_get_bits(mcsnss->rx_tx_mcs11_max_nss, IEEE80211_EHT_MCS_NSS_TX);
+	peer_mcs_13 = u8_get_bits(mcsnss->rx_tx_mcs13_max_nss, IEEE80211_EHT_MCS_NSS_TX);
+
+	*tx_mcs = FIELD_PREP(WMI_MCS_NSS_MAP_0_7, min(peer_mcs_7, mcs_7)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_8_9, min(peer_mcs_9, mcs_9)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_10_11, min(peer_mcs_11, mcs_11)) |
+		  FIELD_PREP(WMI_MCS_NSS_MAP_12_13, min (peer_mcs_13, mcs_13));
 }
 
 static void ath12k_mac_set_eht_ppe_threshold(const u8 *ppe_thres,
@@ -2085,17 +2119,45 @@ static void ath12k_mac_set_eht_ppe_thres
 	}
 }
 
+static bool
+ath12k_peer_assoc_h_eht_masked(const u16 eht_mcs_mask[NL80211_EHT_NSS_MAX])
+{
+	int nss;
+
+	for (nss = 0; nss < NL80211_EHT_NSS_MAX; nss++)
+		if (eht_mcs_mask[nss])
+			return false;
+
+	return true;
+}
+
 static void ath12k_peer_assoc_h_eht(struct ath12k *ar,
 				    struct ieee80211_vif *vif,
 				    struct ieee80211_sta *sta,
 				    struct peer_assoc_params *arg)
 {
+	struct ath12k_vif *arvif = (void *)vif->drv_priv;
+	struct cfg80211_chan_def def;
 	const struct ieee80211_sta_eht_cap *eht_cap = &sta->deflink.eht_cap;
 	const struct ieee80211_eht_mcs_nss_supp *mcs_nss =
 						&eht_cap->eht_mcs_nss_supp;
 	const struct ieee80211_eht_mcs_nss_supp_bw *mcs_nss_supp_bw =
 							&mcs_nss->bw._80;
 	u8 mcs_idx = WMI_EHTCAP_TXRX_MCS_NSS_IDX_80;
+	enum nl80211_band band;
+	u16 *eht_mcs_mask;
+	u8 max_nss;
+	int eht_nss, nss_idx;
+	bool user_rate_valid = true;
+
+	if (WARN_ON(ath12k_mac_vif_chan(vif, &def)))
+		return;
+
+	band = def.chan->band;
+	eht_mcs_mask = arvif->bitrate_mask.control[band].eht_mcs;
+
+	if (ath12k_peer_assoc_h_eht_masked(eht_mcs_mask))
+		return;
 
 	if (!sta->deflink.he_cap.has_he || !eht_cap->has_eht)
 		return;
@@ -2119,6 +2181,25 @@ static void ath12k_peer_assoc_h_eht(stru
 	memcpy(&arg->peer_eht_ops, &vif->bss_conf.eht_oper,
 	       sizeof(vif->bss_conf.eht_oper));
 
+	eht_nss = ath12k_mac_max_eht_nss(eht_mcs_mask);
+
+	if (eht_nss > sta->deflink.rx_nss) {
+		user_rate_valid = false;
+		for (nss_idx = (sta->deflink.rx_nss - 1); nss_idx >= 0; nss_idx--) {
+			if (eht_mcs_mask[nss_idx]) {
+				user_rate_valid = true;
+				break;
+			}
+		}
+	}
+
+	if (!user_rate_valid) {
+		ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
+				"Setting eht range MCS value to peer supported nss:%d for peer %pM\n",
+				sta->deflink.rx_nss, sta->deflink.addr);
+		eht_mcs_mask[sta->deflink.rx_nss - 1] = eht_mcs_mask[eht_nss - 1];
+	}
+
 	switch (sta->deflink.bandwidth) {
 	case IEEE80211_STA_RX_BW_320:
 		mcs_nss_supp_bw = &mcs_nss->bw._320;
@@ -2126,7 +2207,8 @@ static void ath12k_peer_assoc_h_eht(stru
 		arg->peer_eht_mcs_count++;
 		ath12k_mac_set_eht_mcs_nss_bitmap(&mcs_nss->bw._320,
 						  &arg->peer_eht_rx_mcs_set[mcs_idx],
-						  &arg->peer_eht_tx_mcs_set[mcs_idx]);
+						  &arg->peer_eht_tx_mcs_set[mcs_idx],
+						  eht_mcs_mask);
 		fallthrough;
 
 	case IEEE80211_STA_RX_BW_160:
@@ -2135,7 +2217,8 @@ static void ath12k_peer_assoc_h_eht(stru
 		arg->peer_eht_mcs_count++;
 		ath12k_mac_set_eht_mcs_nss_bitmap(&mcs_nss->bw._160,
 						  &arg->peer_eht_rx_mcs_set[mcs_idx],
-						  &arg->peer_eht_tx_mcs_set[mcs_idx]);
+						  &arg->peer_eht_tx_mcs_set[mcs_idx],
+						  eht_mcs_mask);
 		fallthrough;
 
 	default:
@@ -2143,17 +2226,46 @@ static void ath12k_peer_assoc_h_eht(stru
 			mcs_idx = WMI_EHTCAP_TXRX_MCS_NSS_IDX_80;
 			ath12k_mac_set_eht_mcs_nss_bitmap_20mhz_only(&mcs_nss->only_20mhz,
 					&arg->peer_eht_rx_mcs_set[mcs_idx],
-					&arg->peer_eht_tx_mcs_set[mcs_idx]);
+					&arg->peer_eht_tx_mcs_set[mcs_idx],
+					eht_mcs_mask);
 		} else {
 			mcs_idx = WMI_EHTCAP_TXRX_MCS_NSS_IDX_80;
 			ath12k_mac_set_eht_mcs_nss_bitmap(&mcs_nss->bw._80,
 					&arg->peer_eht_rx_mcs_set[mcs_idx],
-					&arg->peer_eht_tx_mcs_set[mcs_idx]);
+					&arg->peer_eht_tx_mcs_set[mcs_idx],
+					eht_mcs_mask);
 		}
 
 		arg->peer_eht_mcs_count++;
 		break;
 	}
+
+	if (!(sta->deflink.he_cap.he_cap_elem.phy_cap_info[0] &
+	      IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_MASK_ALL)) {
+		if (mcs_nss->only_20mhz.rx_tx_mcs13_max_nss)
+			max_nss = mcs_nss->only_20mhz.rx_tx_mcs13_max_nss;
+		else if (mcs_nss->only_20mhz.rx_tx_mcs11_max_nss)
+			max_nss = mcs_nss->only_20mhz.rx_tx_mcs11_max_nss;
+		else if (mcs_nss->only_20mhz.rx_tx_mcs9_max_nss)
+			max_nss = mcs_nss->only_20mhz.rx_tx_mcs9_max_nss;
+		else
+			max_nss = mcs_nss->only_20mhz.rx_tx_mcs7_max_nss;
+	} else {
+		if (mcs_nss_supp_bw->rx_tx_mcs13_max_nss)
+			max_nss = mcs_nss_supp_bw->rx_tx_mcs13_max_nss;
+		else if (mcs_nss_supp_bw->rx_tx_mcs11_max_nss)
+			max_nss = mcs_nss_supp_bw->rx_tx_mcs11_max_nss;
+		else
+			max_nss = mcs_nss_supp_bw->rx_tx_mcs9_max_nss;
+	}
+
+	max_nss = max(max_nss, (uint8_t)eht_nss);
+
+	arg->peer_nss = min(sta->deflink.rx_nss, max_nss);
+
+	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
+		   "mac he peer %pM nss %d mcs cnt %d\n",
+		   sta->deflink.addr, arg->peer_nss, arg->peer_he_mcs_count);
 }
 
 static void ath12k_peer_assoc_h_smps(struct ieee80211_sta *sta,
@@ -2392,6 +2504,7 @@ static void ath12k_peer_assoc_h_phymode(
 	const u8 *ht_mcs_mask;
 	const u16 *vht_mcs_mask;
 	const u16 *he_mcs_mask;
+	const u16 *eht_mcs_mask;
 	enum wmi_phy_mode phymode = MODE_UNKNOWN;
 
 	if (WARN_ON(ath12k_mac_vif_chan(vif, &def)))
@@ -2401,10 +2514,12 @@ static void ath12k_peer_assoc_h_phymode(
 	ht_mcs_mask = arvif->bitrate_mask.control[band].ht_mcs;
 	vht_mcs_mask = arvif->bitrate_mask.control[band].vht_mcs;
 	he_mcs_mask = arvif->bitrate_mask.control[band].he_mcs;
+	eht_mcs_mask = arvif->bitrate_mask.control[band].eht_mcs;
 
 	switch (band) {
 	case NL80211_BAND_2GHZ:
-		if (sta->deflink.eht_cap.has_eht) {
+		if (sta->deflink.eht_cap.has_eht &&
+		    !ath12k_peer_assoc_h_eht_masked(eht_mcs_mask)) {
 			if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_40)
 				phymode = MODE_11BE_EHT40_2G;
 			else
@@ -2438,7 +2553,8 @@ static void ath12k_peer_assoc_h_phymode(
 	case NL80211_BAND_5GHZ:
 	case NL80211_BAND_6GHZ:
 		/* Check EHT first */
-		if (sta->deflink.eht_cap.has_eht) {
+		if (sta->deflink.eht_cap.has_eht &&
+		    !ath12k_peer_assoc_h_eht_masked(eht_mcs_mask)) {
 			phymode = ath12k_mac_get_phymode_eht(ar, sta);
 		} else if (sta->deflink.he_cap.has_he &&
 			   !ath12k_peer_assoc_h_he_masked(he_mcs_mask)) {
@@ -3694,6 +3810,20 @@ ath12k_mac_bitrate_mask_num_he_rates(str
 }
 
 static int
+ath12k_mac_bitrate_mask_num_eht_rates(struct ath12k *ar,
+				      enum nl80211_band band,
+				      const struct cfg80211_bitrate_mask *mask)
+{
+	int num_rates = 0;
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(mask->control[band].eht_mcs); i++)
+		num_rates += hweight16(mask->control[band].eht_mcs[i]);
+
+	return num_rates;
+}
+
+static int
 ath12k_mac_set_peer_vht_fixed_rate(struct ath12k_vif *arvif,
 				   struct ieee80211_sta *sta,
 				   const struct cfg80211_bitrate_mask *mask,
@@ -3790,6 +3920,57 @@ ath12k_mac_set_peer_he_fixed_rate(struct
 	return ret;
 }
 
+static int
+ath12k_mac_set_peer_eht_fixed_rate(struct ath12k_vif *arvif,
+				   struct ieee80211_sta *sta,
+				   const struct cfg80211_bitrate_mask *mask,
+				   enum nl80211_band band)
+{
+	struct ath12k *ar = arvif->ar;
+	u8 eht_rate, nss;
+	u32 rate_code;
+	int ret, i;
+
+	lockdep_assert_held(&ar->conf_mutex);
+
+	nss = 0;
+
+	for (i = 0; i < ARRAY_SIZE(mask->control[band].eht_mcs); i++) {
+		if (hweight16(mask->control[band].eht_mcs[i]) == 1) {
+			nss = i + 1;
+			eht_rate = ffs(mask->control[band].eht_mcs[i]) - 1;
+		}
+	}
+
+	if (!nss) {
+		ath12k_warn(ar->ab, "No single EHT Fixed rate found to set for %pM",
+			    sta->deflink.addr);
+		return -EINVAL;
+	}
+
+	/* Avoid updating invalid nss as fixed rate*/
+	if (nss > sta->deflink.rx_nss)
+		return -EINVAL;
+
+	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
+		   "Setting Fixed EHT Rate for peer %pM. Device will not switch to any other selected rates",
+		   sta->deflink.addr);
+
+	rate_code = ATH12K_HW_RATE_CODE(eht_rate, nss - 1,
+					WMI_RATE_PREAMBLE_EHT);
+
+	ret = ath12k_wmi_set_peer_param(ar, sta->deflink.addr,
+					arvif->vdev_id,
+					WMI_PEER_PARAM_FIXED_RATE,
+					rate_code);
+	if (ret)
+		ath12k_warn(ar->ab,
+			    "failed to update STA %pM Fixed Rate %d: %d\n",
+			    sta->deflink.addr, rate_code, ret);
+
+	return ret;
+}
+
 static int ath12k_station_assoc(struct ath12k *ar,
 				struct ieee80211_vif *vif,
 				struct ieee80211_sta *sta,
@@ -3801,7 +3982,7 @@ static int ath12k_station_assoc(struct a
 	struct cfg80211_chan_def def;
 	enum nl80211_band band;
 	struct cfg80211_bitrate_mask *mask;
-	u8 num_vht_rates, num_he_rates;
+	u8 num_vht_rates, num_he_rates, num_eht_rates;
 
 	lockdep_assert_held(&ar->conf_mutex);
 
@@ -3828,10 +4009,11 @@ static int ath12k_station_assoc(struct a
 
 	num_vht_rates = ath12k_mac_bitrate_mask_num_vht_rates(ar, band, mask);
 	num_he_rates = ath12k_mac_bitrate_mask_num_he_rates(ar, band, mask);
+	num_eht_rates = ath12k_mac_bitrate_mask_num_eht_rates(ar, band, mask);
 
-	/* If single VHT/HE rate is configured (by set_bitrate_mask()),
-	 * peer_assoc will disable VHT/HE. This is now enabled by a peer specific
-	 * fixed param.
+	/* If single VHT/HE/EHT rate is configured (by set_bitrate_mask()),
+	 * peer_assoc will disable VHT/HE/EHT. This is now enabled by a peer
+	 * specific fixed param.
 	 * Note that all other rates and NSS will be disabled for this peer.
 	 */
 	if (sta->deflink.vht_cap.vht_supported && num_vht_rates == 1) {
@@ -3844,7 +4026,12 @@ static int ath12k_station_assoc(struct a
 							band);
 		if (ret)
 			return ret;
- 	}
+	} else if (sta->deflink.eht_cap.has_eht && num_eht_rates == 1) {
+		ret = ath12k_mac_set_peer_eht_fixed_rate(arvif, sta, mask,
+							 band);
+		if (ret)
+			return ret;
+	}
 
 	/* Re-assoc is run only to update supported rates for given station. It
 	 * doesn't make much sense to reconfigure the peer completely.
@@ -3916,8 +4103,9 @@ static void ath12k_sta_rc_update_wk(stru
 	const u8 *ht_mcs_mask;
 	const u16 *vht_mcs_mask;
 	const u16 *he_mcs_mask;
+	const u16 *eht_mcs_mask;
 	u32 changed, bw, nss, smps;
-	int err, num_vht_rates, num_he_rates;
+	int err, num_vht_rates, num_he_rates, num_eht_rates;
 	const struct cfg80211_bitrate_mask *mask;
 	struct peer_assoc_params peer_arg;
 
@@ -3933,6 +4121,7 @@ static void ath12k_sta_rc_update_wk(stru
 	ht_mcs_mask = arvif->bitrate_mask.control[band].ht_mcs;
 	vht_mcs_mask = arvif->bitrate_mask.control[band].vht_mcs;
 	he_mcs_mask = arvif->bitrate_mask.control[band].he_mcs;
+	eht_mcs_mask = arvif->bitrate_mask.control[band].eht_mcs;
 
 	spin_lock_bh(&ar->data_lock);
 
@@ -3948,9 +4137,10 @@ static void ath12k_sta_rc_update_wk(stru
 	mutex_lock(&ar->conf_mutex);
 
 	nss = max_t(u32, 1, nss);
-	nss = min(nss, max(max(ath12k_mac_max_ht_nss(ht_mcs_mask),
-			       ath12k_mac_max_vht_nss(vht_mcs_mask)),
-			   ath12k_mac_max_he_nss(he_mcs_mask)));
+	nss = min(nss, max(max(max(ath12k_mac_max_ht_nss(ht_mcs_mask),
+				   ath12k_mac_max_vht_nss(vht_mcs_mask)),
+			       ath12k_mac_max_he_nss(he_mcs_mask)),
+			   ath12k_mac_max_eht_nss(eht_mcs_mask)));
 
 	if (changed & IEEE80211_RC_BW_CHANGED) {
 		err = ath12k_wmi_set_peer_param(ar, sta->deflink.addr, arvif->vdev_id,
@@ -3988,6 +4178,8 @@ static void ath12k_sta_rc_update_wk(stru
 								      mask);
 		num_he_rates = ath12k_mac_bitrate_mask_num_he_rates(ar, band,
 								    mask);
+		num_eht_rates = ath12k_mac_bitrate_mask_num_eht_rates(ar, band,
+								      mask);
 
 		/* Peer_assoc_prepare will reject vht rates in
 		 * bitrate_mask if its not available in range format and
@@ -4006,9 +4198,12 @@ static void ath12k_sta_rc_update_wk(stru
 		} else if (sta->deflink.he_cap.has_he && num_he_rates == 1) {
 			ath12k_mac_set_peer_he_fixed_rate(arvif, sta, mask,
 							  band);
+		} else if (sta->deflink.eht_cap.has_eht && num_eht_rates == 1) {
+			ath12k_mac_set_peer_eht_fixed_rate(arvif, sta, mask,
+							   band);
 		} else {
-			/* If the peer is non-VHT/HE or no fixed VHT/HE rate
-			 * is provided in the new bitrate mask we set the
+			/* If the peer is non-VHT/HE/EHT or no fixed VHT/HE/EHT
+			 * rate is provided in the new bitrate mask we set the
 			 * other rates using peer_assoc command. Also clear
 			 * the peer fixed rate settings as it has higher proprity
 			 * than peer assoc
@@ -5783,6 +5978,8 @@ static int ath12k_mac_op_add_interface(s
 		       sizeof(arvif->bitrate_mask.control[i].vht_mcs));
 		memset(arvif->bitrate_mask.control[i].he_mcs, 0xff,
 		       sizeof(arvif->bitrate_mask.control[i].he_mcs));
+		memset(arvif->bitrate_mask.control[i].eht_mcs, 0xff,
+		       sizeof(arvif->bitrate_mask.control[i].eht_mcs));
 	}
 
 	bit = __ffs64(ab->free_vdev_map);
@@ -6835,6 +7032,9 @@ ath12k_mac_has_single_legacy_rate(struct
 	if (ath12k_mac_bitrate_mask_num_he_rates(ar, band, mask))
 		return false;
 
+	if (ath12k_mac_bitrate_mask_num_eht_rates(ar, band, mask))
+		return false;
+
 	return num_rates == 1;
 }
 
@@ -6861,9 +7061,12 @@ ath12k_mac_bitrate_mask_get_single_nss(s
 	struct ieee80211_supported_band *sband = &ar->mac.sbands[band];
 	u16 vht_mcs_map = le16_to_cpu(sband->vht_cap.vht_mcs.tx_mcs_map);
 	u16 he_mcs_map = 0;
+	u16 eht_mcs_map = 0;
 	u8 ht_nss_mask = 0;
 	u8 vht_nss_mask = 0;
 	u8 he_nss_mask = 0;
+	u8 eht_nss_mask = 0;
+	u8 mcs_nss_len;
 	int i;
 
 	/* No need to consider legacy here. Basic rates are always present
@@ -6903,7 +7106,57 @@ ath12k_mac_bitrate_mask_get_single_nss(s
 			return false;
 	}
 
-	if (ht_nss_mask != vht_nss_mask || ht_nss_mask != he_nss_mask)
+	mcs_nss_len = ieee80211_eht_mcs_nss_size(&sband->iftype_data->he_cap.he_cap_elem,
+						 &sband->iftype_data->eht_cap.eht_cap_elem);
+	if (mcs_nss_len == 4) {
+		/* 20 MHz only STA case */
+		const struct ieee80211_eht_mcs_nss_supp_20mhz_only *eht_mcs_nss =
+			&sband->iftype_data->eht_cap.eht_mcs_nss_supp.only_20mhz;
+		if (eht_mcs_nss->rx_tx_mcs13_max_nss)
+			eht_mcs_map = 0x1fff;
+		else if (eht_mcs_nss->rx_tx_mcs11_max_nss)
+			eht_mcs_map = 0x07ff;
+		else if (eht_mcs_nss->rx_tx_mcs9_max_nss)
+			eht_mcs_map = 0x01ff;
+		else
+			eht_mcs_map = 0x007f;
+	} else {
+		const struct ieee80211_eht_mcs_nss_supp_bw *eht_mcs_nss;
+
+		switch (mcs_nss_len) {
+		case 9:
+			eht_mcs_nss = &sband->iftype_data->eht_cap.eht_mcs_nss_supp.bw._320;
+			break;
+		case 6:
+			eht_mcs_nss = &sband->iftype_data->eht_cap.eht_mcs_nss_supp.bw._160;
+			break;
+		case 3:
+			eht_mcs_nss = &sband->iftype_data->eht_cap.eht_mcs_nss_supp.bw._80;
+			break;
+		default:
+			return false;
+		}
+
+		if (eht_mcs_nss->rx_tx_mcs13_max_nss)
+			eht_mcs_map = 0x1fff;
+		else if (eht_mcs_nss->rx_tx_mcs11_max_nss)
+			eht_mcs_map = 0x7ff;
+		else
+			eht_mcs_map = 0x1ff;
+	}
+
+	for (i = 0; i < ARRAY_SIZE(mask->control[band].eht_mcs); i++) {
+		if (mask->control[band].eht_mcs[i] == 0)
+			continue;
+
+		if (mask->control[band].eht_mcs[i] < eht_mcs_map)
+			eht_nss_mask |= BIT(i);
+		else
+			return false;
+	}
+
+	if (ht_nss_mask != vht_nss_mask || ht_nss_mask != he_nss_mask ||
+	    ht_nss_mask != eht_nss_mask)
 		return false;
 
 	if (ht_nss_mask == 0)
@@ -6951,53 +7204,58 @@ ath12k_mac_get_single_legacy_rate(struct
 }
 
 static int
-ath12k_mac_set_fixed_rate_GI_LTF(struct ath12k_vif *arvif, u8 he_gi, u8 he_ltf)
+ath12k_mac_set_fixed_rate_GI_LTF(struct ath12k_vif *arvif, u8 gi, u8 ltf)
 {
 	struct ath12k *ar = arvif->ar;
-	int ret;
+	int param, ret;
 
 	/* 0.8 = 0, 1.6 = 2 and 3.2 = 3. */
-	if (he_gi && he_gi != 0xFF)
-		he_gi += 1;
+	if (gi && gi != 0xFF)
+		gi += 1;
 
 	ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id,
-					    WMI_VDEV_PARAM_SGI, he_gi);
+					    WMI_VDEV_PARAM_SGI, gi);
 	if (ret) {
 		ath12k_warn(ar->ab, "failed to set HE GI:%d, error:%d\n",
-			    he_gi, ret);
+			    gi, ret);
 		return ret;
 	}
 	/* start from 1 */
-	if (he_ltf != 0xFF)
-		he_ltf += 1;
+	if (ltf != 0xFF)
+		ltf += 1;
+
+	if (arvif->vif->bss_conf.eht_support)
+		param = WMI_VDEV_PARAM_EHT_LTF;
+	else
+		param = WMI_VDEV_PARAM_HE_LTF;
 
 	ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id,
-					    WMI_VDEV_PARAM_HE_LTF, he_ltf);
+					    param, ltf);
 	if (ret) {
 		ath12k_warn(ar->ab, "failed to set HE LTF:%d, error:%d\n",
-			    he_ltf, ret);
+			    ltf, ret);
 		return ret;
 	}
 	return 0;
 }
 
 static int
-ath12k_mac_set_auto_rate_GI_LTF(struct ath12k_vif *arvif, u16 he_gi, u8 he_ltf)
+ath12k_mac_set_auto_rate_GI_LTF(struct ath12k_vif *arvif, u16 gi, u8 ltf)
 {
 	struct ath12k *ar = arvif->ar;
 	int ret;
-	u32 he_ar_gi_ltf = 0;
+	u32 ar_gi_ltf = 0;
 
-	if (he_gi != 0xFF) {
-		switch (he_gi) {
+	if (gi != 0xFF) {
+		switch (gi) {
 		case NL80211_RATE_INFO_HE_GI_0_8:
-			he_gi = WMI_AUTORATE_800NS_GI;
+			gi = WMI_AUTORATE_800NS_GI;
 			break;
 		case NL80211_RATE_INFO_HE_GI_1_6:
-			he_gi = WMI_AUTORATE_1600NS_GI;
+			gi = WMI_AUTORATE_1600NS_GI;
 			break;
 		case NL80211_RATE_INFO_HE_GI_3_2:
-			he_gi = WMI_AUTORATE_3200NS_GI;
+			gi = WMI_AUTORATE_3200NS_GI;
 			break;
 		default:
 			ath12k_warn(ar->ab, "Invalid GI\n");
@@ -7005,16 +7263,16 @@ ath12k_mac_set_auto_rate_GI_LTF(struct a
 		}
 	}
 
-	if (he_ltf != 0xFF) {
-		switch (he_ltf) {
+	if (ltf != 0xFF) {
+		switch (ltf) {
 		case NL80211_RATE_INFO_HE_1XLTF:
-			he_ltf = WMI_HE_AUTORATE_LTF_1X;
+			ltf = WMI_HE_AUTORATE_LTF_1X;
 			break;
 		case NL80211_RATE_INFO_HE_2XLTF:
-			he_ltf = WMI_HE_AUTORATE_LTF_2X;
+			ltf = WMI_HE_AUTORATE_LTF_2X;
 			break;
 		case NL80211_RATE_INFO_HE_4XLTF:
-			he_ltf = WMI_HE_AUTORATE_LTF_4X;
+			ltf = WMI_HE_AUTORATE_LTF_4X;
 			break;
 		default:
 			ath12k_warn(ar->ab, "Invalid LTF\n");
@@ -7022,16 +7280,16 @@ ath12k_mac_set_auto_rate_GI_LTF(struct a
 		}
 	}
 
-	he_ar_gi_ltf = he_gi | he_ltf;
+	ar_gi_ltf = gi | ltf;
 
 
 	ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id,
 					    WMI_VDEV_PARAM_AUTORATE_MISC_CFG,
-					    he_ar_gi_ltf);
+					    ar_gi_ltf);
 	if (ret) {
 		ath12k_warn(ar->ab,
 			    "failed to set HE autorate GI:%u, LTF:%u params, error:%d\n",
-			    he_gi, he_ltf, ret);
+			    gi, ltf, ret);
 		return ret;
 	}
 
@@ -7040,7 +7298,9 @@ ath12k_mac_set_auto_rate_GI_LTF(struct a
 
 static int ath12k_mac_set_rate_params(struct ath12k_vif *arvif,
 				      u32 rate, u8 nss, u8 sgi, u8 ldpc,
-				      u8 he_gi, u8 he_ltf, bool he_fixed_rate)
+				      u8 he_gi, u8 he_ltf, bool he_fixed_rate,
+				      u8 eht_gi, u8 eht_ltf,
+				      bool eht_fixed_rate)
 {
 	struct ath12k *ar = arvif->ar;
 	u32 vdev_param;
@@ -7056,7 +7316,11 @@ static int ath12k_mac_set_rate_params(st
 		   "he_gi:0x%02x, he_ltf:0x%02x, he_fixed_rate:%d\n", he_gi,
 		   he_ltf, he_fixed_rate);
 
-	if (!arvif->vif->bss_conf.he_support) {
+	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
+		   "eht_gi:0x%02x, eht_ltf:0x%02x, eht_fixed_rate:%d\n", eht_gi,
+		   eht_ltf, eht_fixed_rate);
+
+	if (!arvif->vif->bss_conf.he_support || !arvif->vif->bss_conf.eht_support) {
 		vdev_param = WMI_VDEV_PARAM_FIXED_RATE;
 		ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id,
 						    vdev_param, rate);
@@ -7085,7 +7349,17 @@ static int ath12k_mac_set_rate_params(st
 		return ret;
 	}
 
-	if (arvif->vif->bss_conf.he_support) {
+	if (arvif->vif->bss_conf.eht_support) {
+		if (eht_fixed_rate) {
+			ret = ath12k_mac_set_fixed_rate_GI_LTF(arvif, eht_gi,
+							       eht_ltf);
+		} else {
+			ret = ath12k_mac_set_auto_rate_GI_LTF(arvif, eht_gi,
+							      eht_ltf);
+		}
+		if (ret)
+			return ret;
+	} else if (arvif->vif->bss_conf.he_support) {
 		if (he_fixed_rate) {
 			ret = ath12k_mac_set_fixed_rate_GI_LTF(arvif, he_gi,
 							       he_ltf);
@@ -7159,6 +7433,37 @@ ath12k_mac_he_mcs_range_present(struct a
 	return true;
 }
 
+static bool
+ath12k_mac_eht_mcs_range_present(struct ath12k *ar,
+				 enum nl80211_band band,
+				 const struct cfg80211_bitrate_mask *mask)
+{
+	int i;
+	u16 eht_mcs;
+
+	for (i = 0; i < NL80211_EHT_NSS_MAX; i++) {
+		eht_mcs = mask->control[band].eht_mcs[i];
+
+		switch (eht_mcs) {
+		case 0:
+		case BIT(8) - 1:
+		case BIT(10) - 1:
+		case BIT(12) - 1:
+		case BIT(14) - 1:
+			break;
+		case BIT(15) - 1:
+		case BIT(16) - 1:
+			if (i != 0)
+				return false;
+			break;
+		default:
+			return false;
+		}
+	}
+
+	return true;
+}
+
 static void ath12k_mac_set_bitrate_mask_iter(void *data,
 					     struct ieee80211_sta *sta)
 {
@@ -7191,17 +7496,18 @@ static void ath12k_mac_disable_peer_fixe
 }
 
 static bool
-ath12k_mac_validate_vht_he_fixed_rate_settings(struct ath12k *ar, enum nl80211_band band,
-					       const struct cfg80211_bitrate_mask *mask)
+ath12k_mac_validate_fixed_rate_settings(struct ath12k *ar, enum nl80211_band band,
+					const struct cfg80211_bitrate_mask *mask)
 {
-	bool he_fixed_rate = false, vht_fixed_rate = false;
+	bool eht_fixed_rate = false, he_fixed_rate = false, vht_fixed_rate = false;
 	struct ath12k_peer *peer, *tmp;
-	const u16 *vht_mcs_mask, *he_mcs_mask;
-	u8 vht_nss, he_nss;
+	const u16 *vht_mcs_mask, *he_mcs_mask, *eht_mcs_mask;
+	u8 vht_nss, he_nss, eht_nss;
 	bool ret = true;
 
 	vht_mcs_mask = mask->control[band].vht_mcs;
 	he_mcs_mask = mask->control[band].he_mcs;
+	eht_mcs_mask = mask->control[band].eht_mcs;
 
 	if (ath12k_mac_bitrate_mask_num_vht_rates(ar, band, mask) == 1)
 		vht_fixed_rate = true;
@@ -7209,11 +7515,15 @@ ath12k_mac_validate_vht_he_fixed_rate_se
 	if (ath12k_mac_bitrate_mask_num_he_rates(ar, band, mask) == 1)
 		he_fixed_rate = true;
 
-	if (!vht_fixed_rate && !he_fixed_rate)
+	if (ath12k_mac_bitrate_mask_num_eht_rates(ar, band, mask) == 1)
+		eht_fixed_rate = true;
+
+	if (!vht_fixed_rate && !he_fixed_rate && !eht_fixed_rate)
 		return true;
 
 	vht_nss = ath12k_mac_max_vht_nss(vht_mcs_mask);
 	he_nss =  ath12k_mac_max_he_nss(he_mcs_mask);
+	eht_nss = ath12k_mac_max_eht_nss(eht_mcs_mask);
 
 	rcu_read_lock();
 	spin_lock_bh(&ar->ab->base_lock);
@@ -7229,6 +7539,11 @@ ath12k_mac_validate_vht_he_fixed_rate_se
 				ret = false;
 				goto exit;
 			}
+			if (eht_fixed_rate && (!peer->sta->deflink.eht_cap.has_eht ||
+					       peer->sta->deflink.rx_nss < eht_nss)) {
+				ret = false;
+				goto exit;
+			}
 		}
 	}
 exit:
@@ -7249,8 +7564,11 @@ ath12k_mac_op_set_bitrate_mask(struct ie
 	const u8 *ht_mcs_mask;
 	const u16 *vht_mcs_mask;
 	const u16 *he_mcs_mask;
+	const u16 *eht_mcs_mask;
 	u8 he_ltf = 0;
 	u8 he_gi = 0;
+	u8 eht_ltf = 0;
+	u8 eht_gi = 0;
 	u32 rate;
 	u8 nss;
 	u8 sgi;
@@ -7259,6 +7577,7 @@ ath12k_mac_op_set_bitrate_mask(struct ie
 	int ret;
 	int num_rates;
 	bool he_fixed_rate = false;
+	bool eht_fixed_rate = false;
 
 	if (ath12k_mac_vif_chan(vif, &def))
 		return -EPERM;
@@ -7267,6 +7586,7 @@ ath12k_mac_op_set_bitrate_mask(struct ie
 	ht_mcs_mask = mask->control[band].ht_mcs;
 	vht_mcs_mask = mask->control[band].vht_mcs;
 	he_mcs_mask = mask->control[band].he_mcs;
+	eht_mcs_mask = mask->control[band].eht_mcs;
 	ldpc = !!(ar->ht_cap_info & WMI_HT_CAP_LDPC);
 
 	sgi = mask->control[band].gi;
@@ -7276,6 +7596,9 @@ ath12k_mac_op_set_bitrate_mask(struct ie
 	he_gi = mask->control[band].he_gi;
 	he_ltf = mask->control[band].he_ltf;
 
+	eht_gi = mask->control[band].eht_gi;
+	eht_ltf = mask->control[band].eht_ltf;
+
 	/* mac80211 doesn't support sending a fixed HT/VHT MCS alone, rather it
 	 * requires passing at least one of used basic rates along with them.
 	 * Fixed rate setting across different preambles(legacy, HT, VHT) is
@@ -7308,13 +7631,14 @@ ath12k_mac_op_set_bitrate_mask(struct ie
 	} else {
 		rate = WMI_FIXED_RATE_NONE;
 
-		if (!ath12k_mac_validate_vht_he_fixed_rate_settings(ar, band, mask))
+		if (!ath12k_mac_validate_fixed_rate_settings(ar, band, mask))
 			ath12k_warn(ar->ab,
 				    "could not update fixed rate settings to all peers due to mcs/nss incompaitiblity\n");
 		nss = min_t(u32, ar->num_tx_chains,
-			    max(max(ath12k_mac_max_ht_nss(ht_mcs_mask),
-				    ath12k_mac_max_vht_nss(vht_mcs_mask)),
-				ath12k_mac_max_he_nss(he_mcs_mask)));
+			    max(max(max(ath12k_mac_max_ht_nss(ht_mcs_mask),
+					ath12k_mac_max_vht_nss(vht_mcs_mask)),
+				    ath12k_mac_max_he_nss(he_mcs_mask)),
+				ath12k_mac_max_eht_nss(eht_mcs_mask)));
 
 		/* If multiple rates across different preambles are given
 		 * we can reconfigure this info with all peers using PEER_ASSOC
@@ -7361,6 +7685,18 @@ ath12k_mac_op_set_bitrate_mask(struct ie
 			return -EINVAL;
 		}
 
+		num_rates = ath12k_mac_bitrate_mask_num_eht_rates(ar, band,
+								  mask);
+		if (num_rates == 1)
+			eht_fixed_rate = true;
+
+		if (!ath12k_mac_eht_mcs_range_present(ar, band, mask) &&
+		    num_rates > 1) {
+			ath12k_warn(ar->ab,
+				    "Setting more than one EHT MCS Value in bitrate mask not supported\n");
+			return -EINVAL;
+		}
+
 		mutex_lock(&ar->conf_mutex);
 		ieee80211_iterate_stations_atomic(ar->hw,
 						  ath12k_mac_disable_peer_fixed_rate,
@@ -7377,7 +7713,8 @@ ath12k_mac_op_set_bitrate_mask(struct ie
 	mutex_lock(&ar->conf_mutex);
 
 	ret = ath12k_mac_set_rate_params(arvif, rate, nss, sgi, ldpc, he_gi,
-					 he_ltf, he_fixed_rate);
+					 he_ltf, he_fixed_rate, eht_gi, eht_ltf,
+					 eht_fixed_rate);
 	if (ret) {
 		ath12k_warn(ar->ab, "failed to set rate params on vdev %i: %d\n",
 			    arvif->vdev_id, ret);
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -4885,6 +4885,7 @@ enum wmi_rate_preamble {
 	WMI_RATE_PREAMBLE_HT,
 	WMI_RATE_PREAMBLE_VHT,
 	WMI_RATE_PREAMBLE_HE,
+	WMI_RATE_PREAMBLE_EHT,
 };
 
 /**
