From a2a672a9cac96d961066ff45f888858317ae1413 Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Wed, 8 Jun 2022 21:13:58 +0530
Subject: [PATCH] ath12k: add filter settings to enable monitor mode

Add filter settings to collect MSDU, MPDU along with the
PPDU TLV.

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debugfs.c |  2 +-
 drivers/net/wireless/ath/ath12k/dp.h      | 47 +++++++++++++++++++++++++---
 drivers/net/wireless/ath/ath12k/dp_tx.c   | 51 ++++++++++++++++++++++++++-----
 3 files changed, 88 insertions(+), 12 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp.h
+++ b/drivers/net/wireless/ath/ath12k/dp.h
@@ -752,7 +752,12 @@ enum htt_stats_internal_ppdu_frametype {
 #define HTT_RX_RING_SELECTION_CFG_CMD_INFO0_RING_ID	GENMASK(23, 16)
 #define HTT_RX_RING_SELECTION_CFG_CMD_INFO0_SS		BIT(24)
 #define HTT_RX_RING_SELECTION_CFG_CMD_INFO0_PS		BIT(25)
-#define HTT_RX_RING_SELECTION_CFG_CMD_INFO1_BUF_SIZE	GENMASK(15, 0)
+
+#define HTT_RX_RING_SELECTION_CFG_CMD_INFO1_BUF_SIZE		GENMASK(15, 0)
+#define HTT_RX_RING_SELECTION_CFG_CMD_INFO1_CONF_LEN_MGMT	GENMASK(18, 16)
+#define HTT_RX_RING_SELECTION_CFG_CMD_INFO1_CONF_LEN_CTRL	GENMASK(21, 19)
+#define HTT_RX_RING_SELECTION_CFG_CMD_INFO1_CONF_LEN_DATA	GENMASK(24, 22)
+
 #define HTT_RX_RING_SELECTION_CFG_CMD_OFFSET_VALID      BIT(26)
 #define HTT_RX_RING_SELECTION_CFG_CMD_DROP_THRES_VAL	BIT(27)
 #define HTT_RX_RING_SELECTION_CFG_CMD_RXMON_GCONF_EN	BIT(28)
@@ -779,7 +784,7 @@ enum htt_rx_filter_tlv_flags {
 	HTT_RX_FILTER_TLV_FLAGS_PPDU_END_USER_STATS	= BIT(10),
 	HTT_RX_FILTER_TLV_FLAGS_PPDU_END_USER_STATS_EXT	= BIT(11),
 	HTT_RX_FILTER_TLV_FLAGS_PPDU_END_STATUS_DONE	= BIT(12),
-	HTT_RX_FILTER_TLV_FLAGS_ENABLE_FP               = BIT(13),
+	HTT_RX_FILTER_TLV_FLAGS_PPDU_START_USER_INFO	= BIT(13),
 };
 
 enum htt_rx_mgmt_pkt_filter_tlv_flags0 {
@@ -1068,6 +1073,21 @@ enum htt_rx_data_pkt_filter_tlv_flasg3 {
 		HTT_RX_FILTER_TLV_FLAGS_PER_MSDU_HEADER | \
 		HTT_RX_FILTER_TLV_FLAGS_ATTENTION)
 
+#define HTT_RX_MON_FILTER_TLV_FLAGS_MON_DEST_RING \
+		(HTT_RX_FILTER_TLV_FLAGS_MPDU_START | \
+		 HTT_RX_FILTER_TLV_FLAGS_MSDU_START | \
+		 HTT_RX_FILTER_TLV_FLAGS_RX_PACKET | \
+		 HTT_RX_FILTER_TLV_FLAGS_MSDU_END | \
+		 HTT_RX_FILTER_TLV_FLAGS_MPDU_END | \
+		 HTT_RX_FILTER_TLV_FLAGS_PACKET_HEADER | \
+		 HTT_RX_FILTER_TLV_FLAGS_PER_MSDU_HEADER | \
+		 HTT_RX_FILTER_TLV_FLAGS_PPDU_START | \
+		 HTT_RX_FILTER_TLV_FLAGS_PPDU_END | \
+		 HTT_RX_FILTER_TLV_FLAGS_PPDU_END_USER_STATS | \
+		 HTT_RX_FILTER_TLV_FLAGS_PPDU_END_USER_STATS_EXT | \
+		 HTT_RX_FILTER_TLV_FLAGS_PPDU_END_STATUS_DONE | \
+		 HTT_RX_FILTER_TLV_FLAGS_PPDU_START_USER_INFO)
+
 /* msdu start. mpdu end, attention, rx hdr tlv's are not subscribed */
 #define HTT_RX_TLV_FLAGS_RXDMA_RING \
 		(HTT_RX_FILTER_TLV_FLAGS_MPDU_START | \
@@ -1089,10 +1109,22 @@ struct htt_rx_ring_selection_cfg_cmd {
 	u32 rx_mpdu_offset;
 	u32 rx_msdu_offset;
 	u32 rx_attn_offset;
-	u32 rx_drop_threshold;
-	u32 reserved[5];
+	u32 info2;
+	u32 reserved[4];
+	u32 info3;
 } __packed;
 
+#define HTT_RX_TLV_FILTER_INFO0_RX_DROP_THRESHOLD		GENMASK(9, 0)
+#define HTT_RX_TLV_FILTER_INFO0_EN_MSDU_MPDU_LOG_MGMT_TYPE	BIT(17)
+#define HTT_RX_TLV_FILTER_INFO0_EN_MSDU_MPDU_LOG_CTRL_TYPE	BIT(18)
+#define HTT_RX_TLV_FILTER_INFO0_EN_MSDU_MPDU_LOG_DATA_TYPE	BIT(19)
+#define HTT_RX_TLV_FILTER_INFO1_EN_RX_TLV_PKT_OFFSET		BIT(0)
+#define HTT_RX_TLV_FILTER_INFO1_RX_PKT_TLV_OFFSET		GENMASK(14, 1)
+
+#define HTT_RX_RING_TLV_DROP_THRESHOLD_VALUE	32
+#define HTT_RX_RING_DEFAULT_DMA_LENGTH		0x7
+#define HTT_RX_RING_PKT_TLV_OFFSET		0x1
+
 struct htt_rx_ring_tlv_filter {
 	u32 rx_filter; /* see htt_rx_filter_tlv_flags */
 	u32 pkt_filter_flags0; /* MGMT */
@@ -1107,6 +1139,13 @@ struct htt_rx_ring_tlv_filter {
 	u16 rx_msdu_end_offset;
 	u16 rx_msdu_start_offset;
 	u16 rx_attn_offset;
+	u32 rx_drop_threshold;
+	u32 conf_len_ctrl;
+	u32 conf_len_mgmt;
+	u32 conf_len_data;
+	u32 info0;
+	u32 info1;
+	bool drop_threshold_valid;
 };
 
 #define HTT_STATS_FRAME_CTRL_TYPE_MGMT  0x0
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -1080,15 +1080,26 @@ int ath12k_dp_tx_htt_rx_filter_setup(str
 				      HTT_RX_RING_SELECTION_CFG_CMD_INFO0_PS);
 	cmd->info0 |= u32_encode_bits(tlv_filter->offset_valid,
 				      HTT_RX_RING_SELECTION_CFG_CMD_OFFSET_VALID);
+	cmd->info0 |= u32_encode_bits(tlv_filter->drop_threshold_valid,
+				      HTT_RX_RING_SELECTION_CFG_CMD_DROP_THRES_VAL);
 	cmd->info0 |= u32_encode_bits(true,
 				      HTT_RX_RING_SELECTION_CFG_CMD_RXMON_GCONF_EN);
 	cmd->info1 = u32_encode_bits(rx_buf_size,
 				     HTT_RX_RING_SELECTION_CFG_CMD_INFO1_BUF_SIZE);
+	cmd->info1 |= u32_encode_bits(tlv_filter->conf_len_mgmt,
+				      HTT_RX_RING_SELECTION_CFG_CMD_INFO1_CONF_LEN_MGMT);
+	cmd->info1 |= u32_encode_bits(tlv_filter->conf_len_ctrl,
+				      HTT_RX_RING_SELECTION_CFG_CMD_INFO1_CONF_LEN_CTRL);
+	cmd->info1 |= u32_encode_bits(tlv_filter->conf_len_data,
+				      HTT_RX_RING_SELECTION_CFG_CMD_INFO1_CONF_LEN_DATA);
+
 	cmd->pkt_type_en_flags0 = tlv_filter->pkt_filter_flags0;
 	cmd->pkt_type_en_flags1 = tlv_filter->pkt_filter_flags1;
 	cmd->pkt_type_en_flags2 = tlv_filter->pkt_filter_flags2;
 	cmd->pkt_type_en_flags3 = tlv_filter->pkt_filter_flags3;
 	cmd->rx_filter_tlv = tlv_filter->rx_filter;
+	cmd->info2 = tlv_filter->info0;
+	cmd->info3 = tlv_filter->info1;
 
 	if (tlv_filter->offset_valid) {
 		cmd->rx_packet_offset =
@@ -1241,15 +1252,13 @@ int ath12k_dp_tx_htt_monitor_mode_ring_c
 int ath12k_dp_tx_htt_rx_monitor_mode_ring_config(struct ath12k *ar, bool reset)
 {
 	struct ath12k_base *ab = ar->ab;
-	struct ath12k_dp *dp = &ab->dp;
 	struct htt_rx_ring_tlv_filter tlv_filter = {0};
-	int ret = 0, ring_id = 0;
+	int ret = 0, ring_id = 0, i;
 
-	ring_id = dp->rxdma_mon_buf_ring.refill_buf_ring.ring_id;
 	tlv_filter.offset_valid = false;
 
 	if (!reset) {
-		tlv_filter.rx_filter = HTT_RX_MON_FILTER_TLV_FLAGS_MON_BUF_RING;
+		tlv_filter.rx_filter = HTT_RX_MON_FILTER_TLV_FLAGS_MON_DEST_RING;
 		tlv_filter.pkt_filter_flags0 =
 					HTT_RX_MON_FP_MGMT_FILTER_FLAGS0 |
 					HTT_RX_MON_MO_MGMT_FILTER_FLAGS0;
@@ -1264,11 +1273,38 @@ int ath12k_dp_tx_htt_rx_monitor_mode_rin
 					HTT_RX_MON_MO_CTRL_FILTER_FLASG3 |
 					HTT_RX_MON_FP_DATA_FILTER_FLASG3 |
 					HTT_RX_MON_MO_DATA_FILTER_FLASG3;
+
+		tlv_filter.drop_threshold_valid = true;
+		tlv_filter.info0 =
+			u32_encode_bits(HTT_RX_RING_TLV_DROP_THRESHOLD_VALUE,
+				   HTT_RX_TLV_FILTER_INFO0_RX_DROP_THRESHOLD);
+		tlv_filter.info0 |=
+			u32_encode_bits(true,
+				   HTT_RX_TLV_FILTER_INFO0_EN_MSDU_MPDU_LOG_MGMT_TYPE);
+		tlv_filter.info0 |=
+			u32_encode_bits(true,
+				   HTT_RX_TLV_FILTER_INFO0_EN_MSDU_MPDU_LOG_CTRL_TYPE);
+		tlv_filter.info0 |=
+			u32_encode_bits(true,
+				   HTT_RX_TLV_FILTER_INFO0_EN_MSDU_MPDU_LOG_DATA_TYPE);
+
+		tlv_filter.conf_len_ctrl = HTT_RX_RING_DEFAULT_DMA_LENGTH;
+		tlv_filter.conf_len_mgmt = HTT_RX_RING_DEFAULT_DMA_LENGTH;
+		tlv_filter.conf_len_data = HTT_RX_RING_DEFAULT_DMA_LENGTH;
+
+		tlv_filter.info1 =
+			FIELD_PREP(HTT_RX_TLV_FILTER_INFO1_EN_RX_TLV_PKT_OFFSET,
+				   true);
+		tlv_filter.info1 |=
+			FIELD_PREP(HTT_RX_TLV_FILTER_INFO1_RX_PKT_TLV_OFFSET,
+				   HTT_RX_RING_PKT_TLV_OFFSET);
 	}
 
-	if (ab->hw_params->rxdma1_enable) {
-		ret = ath12k_dp_tx_htt_rx_filter_setup(ar->ab, ring_id, 0,
-						       HAL_RXDMA_MONITOR_BUF,
+	for (i = 0; i < ar->ab->hw_params->num_rxmda_per_pdev; i++) {
+		ring_id = ar->dp.rxdma_mon_dst_ring[i].ring_id;
+
+		ret = ath12k_dp_tx_htt_rx_filter_setup(ar->ab, ring_id, ar->dp.mac_id + i,
+						       HAL_RXDMA_MONITOR_DST,
 						       DP_RXDMA_REFILL_RING_SIZE,
 						       &tlv_filter);
 		if (ret) {
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -684,7 +684,7 @@ static ssize_t ath12k_write_extd_rx_stat
 		rx_filter |= HTT_RX_FILTER_TLV_FLAGS_PPDU_END_USER_STATS;
 		rx_filter |= HTT_RX_FILTER_TLV_FLAGS_PPDU_END_USER_STATS_EXT;
 		rx_filter |= HTT_RX_FILTER_TLV_FLAGS_PPDU_END_STATUS_DONE;
-		rx_filter |= HTT_RX_FILTER_TLV_FLAGS_ENABLE_FP;
+		rx_filter |= HTT_RX_FILTER_TLV_FLAGS_PPDU_START_USER_INFO;
 
 		tlv_filter.rx_filter = rx_filter;
 		tlv_filter.pkt_filter_flags0 = HTT_RX_FP_MGMT_FILTER_FLAGS0;
