From 404940a75602c687eb2d67c34cc1bf187700fa27 Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Wed, 23 Mar 2022 14:16:45 +0530
Subject: [PATCH] ath12k: Fix rx stats support by enabling monitor ring

1. Add RxMon Dest/buff ring ids in htt_srng_ring_id.
2. Enable HTT_RX_RING_SELECTION_CFG_CMD_RXMON_GCONF_EN in filter
   config to enable monitor.
3. Update rx tlv struct fields to fetch information from the
   status TLVs.
4. Fix TLV parsing by adding 64bit TLV parsing support.

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debugfs.c  |  1 +
 drivers/net/wireless/ath/ath12k/dp.h       |  8 +++
 drivers/net/wireless/ath/ath12k/dp_mon.c   | 84 +++++++++++++++++-------------
 drivers/net/wireless/ath/ath12k/dp_rx.c    |  4 --
 drivers/net/wireless/ath/ath12k/dp_tx.c    |  8 +--
 drivers/net/wireless/ath/ath12k/hal.c      |  4 +-
 drivers/net/wireless/ath/ath12k/hal.h      |  2 +-
 drivers/net/wireless/ath/ath12k/hal_desc.h |  7 +--
 drivers/net/wireless/ath/ath12k/hal_rx.h   | 45 ++++++++++------
 drivers/net/wireless/ath/ath12k/mac.c      |  5 +-
 10 files changed, 101 insertions(+), 67 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp.h
+++ b/drivers/net/wireless/ath/ath12k/dp.h
@@ -419,11 +419,14 @@ enum htt_srng_ring_id {
 	HTT_RXDMA_MONITOR_BUF_RING,
 	HTT_RXDMA_MONITOR_DESC_RING,
 	HTT_RXDMA_MONITOR_DEST_RING,
+	HTT_RXDMA_HOST_BUF_RING2,
 	HTT_HOST1_TO_FW_RXBUF_RING,
 	HTT_HOST2_TO_FW_RXBUF_RING,
 	HTT_RXDMA_NON_MONITOR_DEST_RING,
 	HTT_TX_MON_HOST2MON_BUF_RING,
 	HTT_TX_MON_MON2HOST_DEST_RING,
+	HTT_RX_MON_HOST2MON_BUF_RING,
+	HTT_RX_MON_MON2HOST_DEST_RING,
 };
 
 /* host -> target  HTT_SRING_SETUP message
@@ -751,6 +754,8 @@ enum htt_stats_internal_ppdu_frametype {
 #define HTT_RX_RING_SELECTION_CFG_CMD_INFO0_PS		BIT(25)
 #define HTT_RX_RING_SELECTION_CFG_CMD_INFO1_BUF_SIZE	GENMASK(15, 0)
 #define HTT_RX_RING_SELECTION_CFG_CMD_OFFSET_VALID      BIT(26)
+#define HTT_RX_RING_SELECTION_CFG_CMD_DROP_THRES_VAL	BIT(27)
+#define HTT_RX_RING_SELECTION_CFG_CMD_RXMON_GCONF_EN	BIT(28)
 
 #define HTT_RX_RING_SELECTION_CFG_RX_PACKET_OFFSET      GENMASK(15, 0)
 #define HTT_RX_RING_SELECTION_CFG_RX_HEADER_OFFSET      GENMASK(31, 16)
@@ -774,6 +779,7 @@ enum htt_rx_filter_tlv_flags {
 	HTT_RX_FILTER_TLV_FLAGS_PPDU_END_USER_STATS	= BIT(10),
 	HTT_RX_FILTER_TLV_FLAGS_PPDU_END_USER_STATS_EXT	= BIT(11),
 	HTT_RX_FILTER_TLV_FLAGS_PPDU_END_STATUS_DONE	= BIT(12),
+	HTT_RX_FILTER_TLV_FLAGS_ENABLE_FP               = BIT(13),
 };
 
 enum htt_rx_mgmt_pkt_filter_tlv_flags0 {
@@ -1083,6 +1089,8 @@ struct htt_rx_ring_selection_cfg_cmd {
 	u32 rx_mpdu_offset;
 	u32 rx_msdu_offset;
 	u32 rx_attn_offset;
+	u32 rx_drop_threshold;
+	u32 reserved[5];
 } __packed;
 
 struct htt_rx_ring_tlv_filter {
--- a/drivers/net/wireless/ath/ath12k/dp_mon.c
+++ b/drivers/net/wireless/ath/ath12k/dp_mon.c
@@ -17,7 +17,7 @@ static void ath12k_dp_mon_rx_handle_ofdm
 				(struct hal_rx_ppdu_end_user_stats *)rx_tlv;
 
 	rx_user_status->ul_ofdma_user_v0_word0 = __le32_to_cpu(ppdu_end_user->info6);
-	rx_user_status->ul_ofdma_user_v0_word1 = __le32_to_cpu(ppdu_end_user->rsvd2[10]);
+	rx_user_status->ul_ofdma_user_v0_word1 = __le32_to_cpu(ppdu_end_user->rsvd5[3]);
 }
 
 static void
@@ -26,15 +26,15 @@ ath12k_dp_mon_rx_populate_byte_count(voi
 {
 	struct hal_rx_ppdu_end_user_stats *ppdu_end_user =
 		(struct hal_rx_ppdu_end_user_stats *)rx_tlv;
-	u32 mpdu_ok_byte_count = __le32_to_cpu(ppdu_end_user->rsvd2[6]);
-	u32 mpdu_err_byte_count = __le32_to_cpu(ppdu_end_user->rsvd2[8]);
+	u32 mpdu_ok_byte_count = __le32_to_cpu(ppdu_end_user->info7);
+	u32 mpdu_err_byte_count = __le32_to_cpu(ppdu_end_user->info8);
 
 	rx_user_status->mpdu_ok_byte_count =
 		u32_get_bits(mpdu_ok_byte_count,
-			     HAL_RX_PPDU_END_USER_STATS_RSVD2_6_MPDU_OK_BYTE_COUNT);
+			     HAL_RX_PPDU_END_USER_STATS_INFO7_MPDU_OK_BYTE_COUNT);
 	rx_user_status->mpdu_err_byte_count =
 		u32_get_bits(mpdu_err_byte_count,
-			     HAL_RX_PPDU_END_USER_STATS_RSVD2_8_MPDU_ERR_BYTE_COUNT);
+			     HAL_RX_PPDU_END_USER_STATS_INFO8_MPDU_ERR_BYTE_COUNT);
 }
 
 static void
@@ -594,11 +594,16 @@ ath12k_dp_mon_rx_parse_status_tlv(struct
 			(struct hal_rx_ppdu_start *)tlv_data;
 
 		info[0] = __le32_to_cpu(ppdu_start->info0);
-
 		ppdu_info->ppdu_id =
 			u32_get_bits(info[0], HAL_RX_PPDU_START_INFO0_PPDU_ID);
-		ppdu_info->chan_num = __le32_to_cpu(ppdu_start->chan_num);
-		ppdu_info->ppdu_ts = __le32_to_cpu(ppdu_start->ppdu_start_ts);
+
+		info[1] = __le32_to_cpu(ppdu_start->info1);
+		ppdu_info->chan_num = u32_get_bits(info[1],
+						   HAL_RX_PPDU_START_INFO1_CHAN_NUM);
+		ppdu_info->freq = u32_get_bits(info,
+					       HAL_RX_PPDU_START_INFO1_CHAN_FREQ);
+		ppdu_info->ppdu_ts = ((__le32_to_cpu(ppdu_start->ppdu_start_ts_31_0) |
+				      (__le32_to_cpu(ppdu_start->ppdu_start_ts_63_32) << 31)));
 
 		if (ppdu_info->ppdu_id != ppdu_info->last_ppdu_id) {
 			ppdu_info->last_ppdu_id = ppdu_info->ppdu_id;
@@ -612,7 +617,7 @@ ath12k_dp_mon_rx_parse_status_tlv(struct
 	case HAL_RX_PPDU_END_USER_STATS: {
 		struct hal_rx_ppdu_end_user_stats *eu_stats =
 			(struct hal_rx_ppdu_end_user_stats *)tlv_data;
-		u32 tid = __le32_to_cpu(eu_stats->rsvd2[0]);
+		u32 tid = __le32_to_cpu(eu_stats->info6);
 
 		info[0] = __le32_to_cpu(eu_stats->info0);
 		info[1] = __le32_to_cpu(eu_stats->info1);
@@ -649,6 +654,7 @@ ath12k_dp_mon_rx_parse_status_tlv(struct
 		ppdu_info->num_mpdu_fcs_err =
 			u32_get_bits(info[0],
 				     HAL_RX_PPDU_END_USER_STATS_INFO0_MPDU_CNT_FCS_ERR);
+
 		switch (ppdu_info->preamble_type) {
 		case HAL_RX_PREAMBLE_11N:
 			ppdu_info->ht_flags = 1;
@@ -727,9 +733,9 @@ ath12k_dp_mon_rx_parse_status_tlv(struct
 		struct hal_rx_phyrx_rssi_legacy_info *rssi =
 			(struct hal_rx_phyrx_rssi_legacy_info *)tlv_data;
 		u32 reception_type = 0;
-		u32 rssi_legacy_info = __le32_to_cpu(rssi->rsvd[0]);
+		u32 rssi_legacy_info = __le32_to_cpu(rssi->info0);
 
-		info[0] = __le32_to_cpu(rssi->info0);
+		info[0] = __le32_to_cpu(rssi->info1);
 
 		/* TODO: Please note that the combined rssi will not be accurate
 		 * in MU case. Rssi in MU needs to be retrieved from
@@ -737,10 +743,10 @@ ath12k_dp_mon_rx_parse_status_tlv(struct
 		 */
 		ppdu_info->rssi_comb =
 			u32_get_bits(info[0],
-				     HAL_RX_PHYRX_RSSI_LEGACY_INFO_INFO0_RSSI_COMB);
+				     HAL_RX_PHYRX_RSSI_LEGACY_INFO_INFO1_RSSI_COMB);
 		reception_type =
 			u32_get_bits(rssi_legacy_info,
-				     HAL_RX_PHYRX_RSSI_LEGACY_INFO_RSVD1_RECEPTION);
+				     HAL_RX_PHYRX_RSSI_LEGACY_INFO_INFO0_RECEPTION);
 
 		switch (reception_type) {
 		case HAL_RECEPTION_TYPE_ULOFMDA:
@@ -770,7 +776,6 @@ ath12k_dp_mon_rx_parse_status_tlv(struct
 	case HAL_RX_MPDU_START: {
 		struct hal_rx_mpdu_start *mpdu_start =
 			(struct hal_rx_mpdu_start *)tlv_data;
-		struct dp_mon_mpdu *mon_mpdu = pmon->mon_mpdu;
 		u16 peer_id;
 
 		info[1] = __le32_to_cpu(mpdu_start->info1);
@@ -787,10 +792,6 @@ ath12k_dp_mon_rx_parse_status_tlv(struct
 				u32_get_bits(info[0], HAL_RX_MPDU_START_INFO1_PEERID);
 		}
 
-		mon_mpdu = kzalloc(sizeof(*mon_mpdu), GFP_ATOMIC);
-		if (!mon_mpdu)
-			return HAL_RX_MON_STATUS_PPDU_NOT_DONE;
-
 		break;
 	}
 	case HAL_RX_MSDU_START:
@@ -803,7 +804,6 @@ ath12k_dp_mon_rx_parse_status_tlv(struct
 		int buf_id = u32_get_bits(packet_info->cookie,
 					  DP_RXDMA_BUF_COOKIE_BUF_ID);
 		struct sk_buff *msdu;
-		struct dp_mon_mpdu *mon_mpdu = pmon->mon_mpdu;
 		struct ath12k_skb_rxcb *rxcb;
 
 		spin_lock_bh(&buf_ring->idr_lock);
@@ -821,11 +821,6 @@ ath12k_dp_mon_rx_parse_status_tlv(struct
 				 msdu->len + skb_tailroom(msdu),
 				 DMA_FROM_DEVICE);
 
-		if (mon_mpdu->tail)
-			mon_mpdu->tail->next = msdu;
-		else
-			mon_mpdu->tail = msdu;
-
 		ath12k_dp_mon_buf_replenish(ab, buf_ring, 1);
 
 		break;
@@ -1193,8 +1188,8 @@ ath12k_dp_mon_parse_rx_dest(struct ath12
 			    struct sk_buff *skb)
 {
 	struct hal_rx_mon_ppdu_info *ppdu_info = &pmon->mon_ppdu_info;
-	struct hal_tlv_hdr *tlv;
-	enum hal_rx_mon_status hal_status;
+	struct hal_tlv_64_hdr *tlv;
+	enum hal_rx_mon_status hal_status = HAL_RX_MON_STATUS_BUF_DONE;
 	u32 tlv_userid = 0;
 	u16 tlv_tag, tlv_len;
 	u8 *ptr = skb->data;
@@ -1202,10 +1197,10 @@ ath12k_dp_mon_parse_rx_dest(struct ath12
 	memset(ppdu_info, 0, sizeof(struct hal_rx_mon_ppdu_info));
 
 	do {
-		tlv = (struct hal_tlv_hdr *)ptr;
-		tlv_tag = u32_get_bits(tlv->tl, HAL_TLV_HDR_TAG);
-		tlv_len = u32_get_bits(tlv->tl, HAL_TLV_HDR_LEN);
-		tlv_userid = u32_get_bits(tlv->tl, HAL_TLV_USR_ID);
+		tlv = (struct hal_tlv_64_hdr *)ptr;
+		tlv_tag = u64_get_bits(tlv->tl, HAL_TLV_64_HDR_TAG);
+		tlv_len = u64_get_bits(tlv->tl, HAL_TLV_64_HDR_LEN);
+		tlv_userid = u64_get_bits(tlv->tl, HAL_TLV_USR_ID);
 		ptr += sizeof(*tlv);
 
 		/* The actual length of PPDU_END is the combined length of many PHY
@@ -1220,7 +1215,7 @@ ath12k_dp_mon_parse_rx_dest(struct ath12
 		hal_status = ath12k_dp_mon_rx_parse_status_tlv(ab, pmon,
 							       tlv_tag, ptr, tlv_userid);
 		ptr += tlv_len;
-		ptr = PTR_ALIGN(ptr, HAL_TLV_ALIGN);
+		ptr = PTR_ALIGN(ptr, HAL_TLV_64_ALIGN);
 
 		if ((ptr - skb->data) >= DP_RX_BUFFER_SIZE)
 			break;
@@ -2070,10 +2065,9 @@ int ath12k_dp_mon_srng_process(struct at
 	struct hal_srng *srng;
 	struct dp_rxdma_ring *buf_ring;
 	u64 cookie;
-	u32 ppdu_id;
+	u32 ppdu_id, end_reason;
 	int num_buffs_reaped = 0, srng_id, buf_id;
 	u8 dest_idx = 0, i;
-	bool end_of_ppdu;
 	struct hal_rx_mon_ppdu_info *ppdu_info;
 	struct ath12k_peer *peer = NULL;
 	u32 rx_buf_sz;
@@ -2134,10 +2128,12 @@ int ath12k_dp_mon_srng_process(struct at
 		pmon->dest_skb_q[dest_idx] = skb;
 		dest_idx++;
 		ppdu_id = mon_dst_desc->ppdu_id;
-		end_of_ppdu = u32_get_bits(mon_dst_desc->info0,
-					   HAL_MON_DEST_INFO0_END_OF_PPDU);
-		if (!end_of_ppdu)
+		end_reason = u32_get_bits(mon_dst_desc->info0,
+					   HAL_MON_DEST_INFO0_END_REASON);
+		if (end_reason != HAL_MON_END_OF_PPDU) {
+			ath12k_warn(ab, "Monitor dest descriptor end reason %d", end_reason);
 			continue;
+		}
 
 		for (i = 0; i < dest_idx; i++) {
 			skb = pmon->dest_skb_q[i];
@@ -2509,11 +2505,12 @@ int ath12k_dp_mon_rx_process_stats(struc
 	struct dp_rxdma_ring *buf_ring;
 	struct ath12k_sta *arsta = NULL;
 	struct ath12k_peer *peer;
+	struct sk_buff_head skb_list;
 	u64 cookie;
 	int num_buffs_reaped = 0, srng_id, buf_id;
-	u8 dest_idx = 0, i;
-	bool end_of_ppdu;
-	u32 hal_status;
+	u32 hal_status, end_reason;
+
+	__skb_queue_head_init(&skb_list);
 
 	srng_id = ath12k_hw_mac_id_to_srng_id(ab->hw_params, mac_id);
 	mon_dst_ring = &pdev_dp->rxdma_mon_dst_ring[srng_id];
@@ -2529,6 +2526,7 @@ int ath12k_dp_mon_rx_process_stats(struc
 				ath12k_hal_srng_dst_peek(ab, srng);
 		if (unlikely(!mon_dst_desc))
 			break;
+
 		cookie = mon_dst_desc->cookie;
 		buf_id = u32_get_bits(cookie, DP_RXDMA_BUF_COOKIE_BUF_ID);
 
@@ -2546,62 +2544,68 @@ int ath12k_dp_mon_rx_process_stats(struc
 		dma_unmap_single(ab->dev, rxcb->paddr,
 				 skb->len + skb_tailroom(skb),
 				 DMA_FROM_DEVICE);
-		pmon->dest_skb_q[dest_idx] = skb;
-		dest_idx++;
-		end_of_ppdu = u32_get_bits(mon_dst_desc->info0,
-					   HAL_MON_DEST_INFO0_END_OF_PPDU);
-		if (!end_of_ppdu)
-			continue;
-
-		for (i = 0; i < dest_idx; i++) {
-			skb = pmon->dest_skb_q[i];
-			hal_status = ath12k_dp_mon_parse_rx_dest(ab, pmon, skb);
-
-			if (ppdu_info->peer_id == HAL_INVALID_PEERID ||
-			    hal_status != HAL_RX_MON_STATUS_PPDU_DONE) {
-				dev_kfree_skb_any(skb);
-				continue;
-			}
 
-			rcu_read_lock();
-			spin_lock_bh(&ab->base_lock);
-			peer = ath12k_peer_find_by_id(ab, ppdu_info->peer_id);
-			if (!peer || !peer->sta) {
-				ath12k_dbg(ab, ATH12K_DBG_DATA,
-					   "failed to find the peer with peer_id %d\n",
-					   ppdu_info->peer_id);
-				spin_unlock_bh(&ab->base_lock);
-				rcu_read_unlock();
-				dev_kfree_skb_any(skb);
-				continue;
-			}
-
-			if (ppdu_info->reception_type == HAL_RX_RECEPTION_TYPE_SU) {
-				arsta = (struct ath12k_sta *)peer->sta->drv_priv;
-				ath12k_dp_mon_rx_update_peer_su_stats(ar, arsta,
-								      ppdu_info);
-			} else if ((ppdu_info->fc_valid) &&
-				   (ppdu_info->ast_index != HAL_AST_IDX_INVALID)) {
-				ath12k_dp_mon_rx_process_ulofdma(ppdu_info);
-				ath12k_dp_mon_rx_update_peer_mu_stats(ar, ppdu_info);
-			}
-
-			spin_unlock_bh(&ab->base_lock);
-			rcu_read_unlock();
+		end_reason = u32_get_bits(mon_dst_desc->info0,
+					  HAL_MON_DEST_INFO0_END_REASON);
+		if ((end_reason == HAL_MON_FLUSH_DETECTED) ||
+		    (end_reason == HAL_MON_PPDU_TRUNCATED)) {
+			ath12k_warn(ab, "Monitor dest descriptor end reason %d", end_reason);
 			dev_kfree_skb_any(skb);
-			memset(ppdu_info, 0, sizeof(*ppdu_info));
-			ppdu_info->peer_id = HAL_INVALID_PEERID;
+			goto move_next;
 		}
 
-		dest_idx = 0;
+		__skb_queue_tail(&skb_list, skb);
 move_next:
 		ath12k_dp_mon_buf_replenish(ab, buf_ring, 1);
-		ath12k_hal_srng_src_get_next_entry(ab, srng);
+		ath12k_hal_srng_dst_get_next_entry(ab, srng);
 		num_buffs_reaped++;
 	}
 
 	ath12k_hal_srng_access_end(ab, srng);
 	spin_unlock_bh(&srng->lock);
+
+	if (!num_buffs_reaped)
+		return 0;
+
+	memset(ppdu_info, 0, sizeof(struct hal_rx_mon_ppdu_info));
+
+	while ((skb = __skb_dequeue(&skb_list))) {
+
+		hal_status = ath12k_dp_mon_parse_rx_dest(ab, pmon, skb);
+		if (ppdu_info->peer_id == HAL_INVALID_PEERID ||
+		    hal_status != HAL_RX_MON_STATUS_PPDU_DONE) {
+			dev_kfree_skb_any(skb);
+			continue;
+		}
+
+		rcu_read_lock();
+		spin_lock_bh(&ab->base_lock);
+		peer = ath12k_peer_find_by_id(ab, ppdu_info->peer_id);
+		if (!peer || !peer->sta) {
+			ath12k_dbg(ab, ATH12K_DBG_DATA,
+				   "failed to find the peer with peer_id %d\n",
+				   ppdu_info->peer_id);
+			goto next_skb;
+		}
+
+		if (ppdu_info->reception_type == HAL_RX_RECEPTION_TYPE_SU) {
+			arsta = (struct ath12k_sta *)peer->sta->drv_priv;
+			ath12k_dp_mon_rx_update_peer_su_stats(ar, arsta,
+							      ppdu_info);
+		} else if ((ppdu_info->fc_valid) &&
+			   (ppdu_info->ast_index != HAL_AST_IDX_INVALID)) {
+			ath12k_dp_mon_rx_process_ulofdma(ppdu_info);
+			ath12k_dp_mon_rx_update_peer_mu_stats(ar, ppdu_info);
+ 		}
+
+next_skb:
+		spin_unlock_bh(&ab->base_lock);
+		rcu_read_unlock();
+		dev_kfree_skb_any(skb);
+		memset(ppdu_info, 0, sizeof(*ppdu_info));
+		ppdu_info->peer_id = HAL_INVALID_PEERID;
+	}
+
 	return num_buffs_reaped;
 }
 
@@ -2612,7 +2616,8 @@ int ath12k_dp_mon_process_ring(struct at
 	int num_buffs_reaped = 0;
 
 	if (!ar->monitor_started)
-		ath12k_dp_mon_rx_process_stats(ar, mac_id, napi, &budget);
+		num_buffs_reaped = ath12k_dp_mon_rx_process_stats(ar, mac_id,
+								  napi, &budget);
 	else
 		num_buffs_reaped = ath12k_dp_mon_srng_process(ar, mac_id, &budget,
 							      flag, napi);
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -4148,7 +4148,6 @@ int ath12k_dp_rxdma_ring_sel_config_wcn7
 						       DP_RXDMA_REFILL_RING_SIZE,
 						       &tlv_filter);
 	}
-#if 0
 
 	return ret;
 }
@@ -4167,7 +4166,6 @@ int ath12k_dp_rx_htt_setup(struct ath12k
 			    ret);
 		return ret;
 	}
-#endif
 
 	if (ab->hw_params->rx_mac_buf_ring) {
 		for (i = 0; i < ab->hw_params->num_rxmda_per_pdev; i++) {
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -812,7 +812,7 @@ ath12k_dp_tx_get_ring_id_type(struct ath
 		*htt_ring_type = HTT_HW_TO_SW_RING;
 		break;
 	case HAL_RXDMA_MONITOR_BUF:
-		*htt_ring_id = HTT_RXDMA_MONITOR_BUF_RING;
+		*htt_ring_id = HTT_RX_MON_HOST2MON_BUF_RING;
 		*htt_ring_type = HTT_SW_TO_HW_RING;
 		break;
 	case HAL_RXDMA_MONITOR_STATUS:
@@ -820,7 +820,7 @@ ath12k_dp_tx_get_ring_id_type(struct ath
 		*htt_ring_type = HTT_SW_TO_HW_RING;
 		break;
 	case HAL_RXDMA_MONITOR_DST:
-		*htt_ring_id = HTT_RXDMA_MONITOR_DEST_RING;
+		*htt_ring_id = HTT_RX_MON_MON2HOST_DEST_RING;
 		*htt_ring_type = HTT_HW_TO_SW_RING;
 		break;
 	case HAL_TX_MONITOR_BUF:
@@ -1080,6 +1080,8 @@ int ath12k_dp_tx_htt_rx_filter_setup(str
 				      HTT_RX_RING_SELECTION_CFG_CMD_INFO0_PS);
 	cmd->info0 |= u32_encode_bits(tlv_filter->offset_valid,
 				      HTT_RX_RING_SELECTION_CFG_CMD_OFFSET_VALID);
+	cmd->info0 |= u32_encode_bits(true,
+				      HTT_RX_RING_SELECTION_CFG_CMD_RXMON_GCONF_EN);
 	cmd->info1 = u32_encode_bits(rx_buf_size,
 				     HTT_RX_RING_SELECTION_CFG_CMD_INFO1_BUF_SIZE);
 	cmd->pkt_type_en_flags0 = tlv_filter->pkt_filter_flags0;
@@ -1221,7 +1223,7 @@ int ath12k_dp_tx_htt_monitor_mode_ring_c
 		return ret;
 	}
 
-	ret = ath12k_dp_tx_htt_tx_monitor_mode_ring_config(ar, reset);
+	ret = ath12k_dp_tx_htt_rx_monitor_mode_ring_config(ar, reset);
 	if (ret) {
 		ath12k_err(ab, "failed to setup rx monitor filter %d\n", ret);
 		return ret;
--- a/drivers/net/wireless/ath/ath12k/hal.c
+++ b/drivers/net/wireless/ath/ath12k/hal.c
@@ -147,7 +147,7 @@ static const struct hal_srng_config hw_s
 		.max_size = HAL_RXDMA_RING_MAX_SIZE_BE,
 	},
 	[HAL_RXDMA_MONITOR_BUF] = {
-		.start_ring_id = HAL_SRNG_SW2RXMON_BUF0,
+		.start_ring_id = HAL_SRNG_SW2RXMON_BUF0, /* HAL_SRNG_RING_ID_WMAC1_SW2RXDMA2_BUF, */
 		.max_rings = 1,
 		.entry_size = sizeof(struct hal_mon_buf_ring) >> 2,
 		.mac_type = ATH12K_HAL_SRNG_PMAC,
@@ -181,7 +181,7 @@ static const struct hal_srng_config hw_s
 		.max_size = HAL_WBM2PPE_RELEASE_RING_BASE_MSB_RING_SIZE,
 	},
 	[HAL_TX_MONITOR_BUF] = {
-		.start_ring_id = HAL_SRNG_SW2TXMON_BUF0,
+		.start_ring_id = HAL_SRNG_RING_ID_WMAC1_SW2TXMON_BUF0,
 		.max_rings = 1,
 		.entry_size = sizeof(struct hal_mon_buf_ring) >> 2,
 		.mac_type = ATH12K_HAL_SRNG_PMAC,
--- a/drivers/net/wireless/ath/ath12k/hal.h
+++ b/drivers/net/wireless/ath/ath12k/hal.h
@@ -493,8 +493,8 @@ enum hal_srng_ring_id {
 	HAL_SRNG_RING_ID_WMAC1_RXMON2SW0 = HAL_SRNG_RING_ID_WMAC1_RXDMA2SW1,
 	HAL_SRNG_RING_ID_WMAC1_SW2RXDMA1_DESC,
 	HAL_SRNG_RING_ID_RXDMA_DIR_BUF,
-	HAL_SRNG_RING_ID_WMAC1_SW2TXMON_BUF0,
 	HAL_SRNG_RING_ID_WMAC1_TXMON2SW0_BUF0,
+	HAL_SRNG_RING_ID_WMAC1_SW2TXMON_BUF0,
 
 	HAL_SRNG_RING_ID_PMAC1_ID_END,
 };
--- a/drivers/net/wireless/ath/ath12k/hal_desc.h
+++ b/drivers/net/wireless/ath/ath12k/hal_desc.h
@@ -580,6 +580,8 @@ struct hal_tlv_hdr {
 #define HAL_TLV_64_HDR_TAG		GENMASK(9, 1)
 #define HAL_TLV_64_HDR_LEN		GENMASK(21, 10)
 
+#define HAL_TLV_64_ALIGN 8
+
 struct hal_tlv_64_hdr {
 	u64 tl;
 	u8 value[];
@@ -2918,9 +2920,8 @@ struct hal_mon_buf_ring {
 
 #define HAL_MON_DEST_COOKIE_BUF_ID      GENMASK(17, 0)
 
-#define HAL_MON_DEST_INFO0_END_OFFSET		GENMASK(15, 0)
-#define HAL_MON_DEST_INFO0_FLUSH_DETECTED	BIT(16)
-#define HAL_MON_DEST_INFO0_END_OF_PPDU		BIT(17)
+#define HAL_MON_DEST_INFO0_END_OFFSET		GENMASK(11, 0)
+#define HAL_MON_DEST_INFO0_END_REASON		GENMASK(17, 16)
 #define HAL_MON_DEST_INFO0_INITIATOR		BIT(18)
 #define HAL_MON_DEST_INFO0_EMPTY_DESC		BIT(19)
 #define HAL_MON_DEST_INFO0_RING_ID		GENMASK(27, 20)
--- a/drivers/net/wireless/ath/ath12k/hal_rx.h
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.h
@@ -156,6 +156,7 @@ struct hal_rx_mon_ppdu_info {
 	u32 preamble_type;
 	u32 mpdu_len;
 	u16 chan_num;
+	u16 freq;
 	u16 tcp_msdu_count;
 	u16 tcp_ack_msdu_count;
 	u16 udp_msdu_count;
@@ -233,11 +234,15 @@ struct hal_rx_mon_ppdu_info {
 };
 
 #define HAL_RX_PPDU_START_INFO0_PPDU_ID		GENMASK(15, 0)
+#define HAL_RX_PPDU_START_INFO1_CHAN_NUM	GENMASK(15, 0)
+#define HAL_RX_PPDU_START_INFO1_CHAN_FREQ	GENMASK(31, 16)
 
 struct hal_rx_ppdu_start {
 	__le32 info0;
-	__le32 chan_num;
-	__le32 ppdu_start_ts;
+	__le32 info1;
+	__le32 ppdu_start_ts_31_0;
+	__le32 ppdu_start_ts_63_32;
+	__le32 reserverd[2];
 } __packed;
 
 #define HAL_RX_PPDU_END_USER_STATS_INFO0_MPDU_CNT_FCS_ERR	GENMASK(25, 16)
@@ -246,7 +251,7 @@ struct hal_rx_ppdu_start {
 #define HAL_RX_PPDU_END_USER_STATS_INFO1_FC_VALID		BIT(9)
 #define HAL_RX_PPDU_END_USER_STATS_INFO1_QOS_CTRL_VALID		BIT(10)
 #define HAL_RX_PPDU_END_USER_STATS_INFO1_HT_CTRL_VALID		BIT(11)
-#define HAL_RX_PPDU_END_USER_STATS_INFO1_PKT_TYPE		GENMASK(23, 20)
+#define HAL_RX_PPDU_END_USER_STATS_INFO1_PKT_TYPE		GENMASK(24, 21)
 
 #define HAL_RX_PPDU_END_USER_STATS_INFO2_AST_INDEX		GENMASK(15, 0)
 #define HAL_RX_PPDU_END_USER_STATS_INFO2_FRAME_CTRL		GENMASK(31, 16)
@@ -262,8 +267,9 @@ struct hal_rx_ppdu_start {
 #define HAL_RX_PPDU_END_USER_STATS_INFO6_TID_BITMAP		GENMASK(15, 0)
 #define HAL_RX_PPDU_END_USER_STATS_INFO6_TID_EOSP_BITMAP	GENMASK(31, 16)
 
-#define HAL_RX_PPDU_END_USER_STATS_RSVD2_6_MPDU_OK_BYTE_COUNT	GENMASK(24, 0)
-#define HAL_RX_PPDU_END_USER_STATS_RSVD2_8_MPDU_ERR_BYTE_COUNT	GENMASK(24, 0)
+#define HAL_RX_PPDU_END_USER_STATS_INFO7_MPDU_OK_BYTE_COUNT	GENMASK(24, 0)
+
+#define HAL_RX_PPDU_END_USER_STATS_INFO8_MPDU_ERR_BYTE_COUNT	GENMASK(24, 0)
 
 struct hal_rx_ppdu_end_user_stats {
 	__le32 rsvd0[2];
@@ -275,8 +281,13 @@ struct hal_rx_ppdu_end_user_stats {
 	__le32 rsvd1[2];
 	__le32 info4;
 	__le32 info5;
+	__le32 rsvd2;
 	__le32 info6;
-	__le32 rsvd2[11];
+	__le32 rsvd3[4];
+	__le32 info7;
+	__le32 rsvd4;
+	__le32 info8;
+	__le32 rsvd5[4];
 } __packed;
 
 struct hal_rx_ppdu_end_user_stats_ext {
@@ -287,6 +298,7 @@ struct hal_rx_ppdu_end_user_stats_ext {
 	__le32 info4;
 	__le32 info5;
 	__le32 info6;
+	__le32 rsvd;
 } __packed;
 
 #define HAL_RX_HT_SIG_INFO_INFO0_MCS		GENMASK(6, 0)
@@ -429,30 +441,33 @@ enum hal_rx_ul_reception_type {
 	HAL_RECEPTION_TYPE_FRAMELESS
 };
 
-#define HAL_RX_PHYRX_RSSI_LEGACY_INFO_INFO0_RSSI_COMB	GENMASK(15, 8)
-#define HAL_RX_PHYRX_RSSI_LEGACY_INFO_RSVD1_RECEPTION   GENMASK(3, 0)
+#define HAL_RX_PHYRX_RSSI_LEGACY_INFO_INFO0_RECEPTION   GENMASK(3, 0)
+#define HAL_RX_PHYRX_RSSI_LEGACY_INFO_INFO1_RSSI_COMB   GENMASK(15, 8)
 
 struct hal_rx_phyrx_rssi_legacy_info {
-	__le32 rsvd[35];
 	__le32 info0;
+	__le32 rsvd0[39];
+	__le32 info1;
+	__le32 rsvd2;
 } __packed;
 
-#define HAL_RX_MPDU_START_INFO0_PPDU_ID	GENMASK(31, 16)
-#define HAL_RX_MPDU_START_INFO1_PEERID	GENMASK(31, 16)
-#define HAL_RX_MPDU_START_INFO2_MPDU_LEN GENMASK(13, 0)
+#define HAL_RX_MPDU_START_INFO0_PPDU_ID		GENMASK(31, 16)
+#define HAL_RX_MPDU_START_INFO1_PEERID		GENMASK(31, 16)
+#define HAL_RX_MPDU_START_INFO2_MPDU_LEN	GENMASK(13, 0)
 struct hal_rx_mpdu_start {
+	__le32 rsvd0[9];
 	__le32 info0;
 	__le32 info1;
-	__le32 rsvd1[11];
+	__le32 rsvd1[2];
 	__le32 info2;
-	__le32 rsvd2[9];
+	__le32 rsvd2[16];
 } __packed;
 
 #define HAL_RX_PPDU_END_DURATION	GENMASK(23, 0)
 struct hal_rx_ppdu_end_duration {
 	__le32 rsvd0[9];
 	__le32 info0;
-	__le32 rsvd1[4];
+	__le32 rsvd1[18];
 } __packed;
 
 struct hal_rx_rxpcu_classification_overview {
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -5969,8 +5969,29 @@ void ath12k_mac_drain_tx(struct ath12k *
 
 static int ath12k_mac_config_mon_status_default(struct ath12k *ar, bool enable)
 {
-	return -ENOTSUPP;
-	/* TODO: Need to support new monitor mode */
+	struct htt_rx_ring_tlv_filter tlv_filter = {0};
+	struct ath12k_base *ab = ar->ab;
+	int i, ret = 0;
+	u32 ring_id;
+
+	if (enable) {
+		tlv_filter = ath12k_mac_mon_status_filter_default;
+		if (ath12k_debugfs_rx_filter(ar))
+			tlv_filter.rx_filter = ath12k_debugfs_rx_filter(ar);
+	}
+
+	tlv_filter.offset_valid = false;
+
+	for (i = 0; i < ab->hw_params->num_rxmda_per_pdev; i++) {
+		ring_id = ar->dp.rxdma_mon_dst_ring[i].ring_id;
+		ret = ath12k_dp_tx_htt_rx_filter_setup(ar->ab, ring_id,
+						       ar->dp.mac_id + i,
+						       HAL_RXDMA_MONITOR_DST,
+						       DP_RXDMA_REFILL_RING_SIZE,
+						       &tlv_filter);
+	}
+
+	return ret;
 }
 
 static int ath12k_mac_op_start(struct ieee80211_hw *hw)
@@ -6586,8 +6607,6 @@ static void ath12k_mac_op_configure_filt
 					   u64 multicast)
 {
 	struct ath12k *ar = hw->priv;
-	bool reset_flag = false;
-	int ret = 0;
 
 	mutex_lock(&ar->conf_mutex);
 
@@ -6595,27 +6614,6 @@ static void ath12k_mac_op_configure_filt
 	*total_flags &= SUPPORTED_FILTERS;
 	ar->filter_flags = *total_flags;
 
-#if 0
-	/* For monitor mode */
-	reset_flag = !(ar->filter_flags & FIF_BCN_PRBRESP_PROMISC);
-
-	ret = ath12k_dp_tx_htt_monitor_mode_ring_config(ar, reset_flag);
-	if (!ret) {
-		if (!reset_flag)
-			set_bit(ATH12K_FLAG_MONITOR_ENABLED, &ar->monitor_flags);
-		else
-			clear_bit(ATH12K_FLAG_MONITOR_ENABLED, &ar->monitor_flags);
-	} else {
-		ath12k_warn(ar->ab,
-			    "fail to set monitor filter: %d\n", ret);
-	}
-#else
-	ath12k_warn(ar->ab, "fail to set monitor filter: %d\n", ret);
-#endif
-	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
-		   "changed_flags:0x%x, total_flags:0x%x, reset_flag:%d\n",
-		   changed_flags, *total_flags, reset_flag);
-
 	mutex_unlock(&ar->conf_mutex);
 }
 
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -641,6 +641,7 @@ static ssize_t ath12k_write_extd_rx_stat
 		rx_filter |= HTT_RX_FILTER_TLV_FLAGS_PPDU_END_USER_STATS;
 		rx_filter |= HTT_RX_FILTER_TLV_FLAGS_PPDU_END_USER_STATS_EXT;
 		rx_filter |= HTT_RX_FILTER_TLV_FLAGS_PPDU_END_STATUS_DONE;
+		rx_filter |= HTT_RX_FILTER_TLV_FLAGS_ENABLE_FP;
 
 		tlv_filter.rx_filter = rx_filter;
 		tlv_filter.pkt_filter_flags0 = HTT_RX_FP_MGMT_FILTER_FLAGS0;
@@ -657,7 +658,7 @@ static ssize_t ath12k_write_extd_rx_stat
 
 	for (i = 0; i < ar->ab->hw_params->num_rxmda_per_pdev; i++) {
 		ring_id = ar->dp.rxdma_mon_dst_ring[i].ring_id;
-		ret = ath12k_dp_tx_htt_rx_filter_setup(ar->ab, ring_id, ar->dp.mac_id,
+		ret = ath12k_dp_tx_htt_rx_filter_setup(ar->ab, ring_id, ar->dp.mac_id + i,
 						       HAL_RXDMA_MONITOR_DST,
 						       DP_RXDMA_REFILL_RING_SIZE,
 						       &tlv_filter);
