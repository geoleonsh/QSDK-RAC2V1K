From 02860e2962d83053dd1e7defc3ce9afa4251faa8 Mon Sep 17 00:00:00 2001
From: Rajat Soni <quic_rajson@quicinc.com>
Date: Thu, 20 Apr 2023 15:56:23 +0530
Subject: [PATCH] ath12k: Add support for AWGN wmi control stats

Add support for AWGN wmi control stats. AWGN stats are only supported for 6Ghz.

Use below command:
Make sure you are requesting stats for 6GHz.

echo <stats_id> <action> > sys/kernel/debug/ath12k/
qcn9274\ hw2.0_0003:01:00.0/mac0/wmi_ctrl_stats

stats_id = 7 = WMI_REQ_CTRL_PATH_AWGN_STAT

action = 1 or 2

1: WMI_REQUEST_CTRL_PATH_STAT_GET
2: WMI_REQUEST_CTRL_PATH_STAT_RESET

To display stats:
cat sys/kernel/debug/ath12k/qcn9274\ hw2.0_0003:01:00.0/mac0/wmi_ctrl_stats

Signed-off-by: Rajat Soni <quic_rajson@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debugfs.c | 87 +++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/wmi.c     | 61 ++++++++++++++++
 drivers/net/wireless/ath/ath12k/wmi.h     | 18 +++++
 3 files changed, 166 insertions(+)

diff --git a/drivers/net/wireless/ath/ath12k/debugfs.c b/drivers/net/wireless/ath/ath12k/debugfs.c
index 9b2142d..ed43193 100644
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -293,6 +293,90 @@ int wmi_ctrl_path_cal_stat(struct ath12k *ar, const char __user *ubuf,
 	return ret_val;
 }
 
+int wmi_ctrl_path_awgn_stat(struct ath12k *ar, const char __user *ubuf,
+			    size_t count, loff_t *ppos)
+{
+	struct wmi_ctrl_path_stats_list *stats;
+	struct wmi_ctrl_path_awgn_stats *awgn_stats;
+	const int size = 2048;
+	int len = 0, ret_val;
+	char *buf;
+
+	buf = kzalloc(size, GFP_KERNEL);
+
+	if (!buf)
+		return -ENOMEM;
+
+	mutex_lock(&ar->wmi_ctrl_path_stats_lock);
+
+	list_for_each_entry(stats, &ar->debug.wmi_list, list) {
+
+		if (!stats)
+			break;
+		awgn_stats = stats->stats_ptr;
+
+		if (!awgn_stats)
+			break;
+
+		len += scnprintf(buf + len, size - len,
+				 "WMI_CTRL_PATH_AWGN_STATS_TLV:\n");
+		len += scnprintf(buf + len, size - len,
+				 "awgn_send_evt_cnt = %u\n",
+				 awgn_stats->awgn_send_evt_cnt);
+		len += scnprintf(buf + len, size - len,
+				 "awgn_pri_int_cnt = %u\n",
+				 awgn_stats->awgn_pri_int_cnt);
+		len += scnprintf(buf + len, size - len,
+				 "awgn_sec_int_cnt = %u\n",
+				 awgn_stats->awgn_sec_int_cnt);
+		len += scnprintf(buf + len, size - len,
+				 "awgn_pkt_drop_trigger_cnt = %u\n",
+				 awgn_stats->awgn_pkt_drop_trigger_cnt);
+		len += scnprintf(buf + len, size - len,
+				 "awgn_pkt_drop_trigger_reset_cnt = %u\n",
+				 awgn_stats->awgn_pkt_drop_trigger_reset_cnt);
+		len += scnprintf(buf + len, size - len,
+				 "awgn_bw_drop_cnt = %u\n",
+				 awgn_stats->awgn_bw_drop_cnt);
+		len += scnprintf(buf + len, size - len,
+				 "awgn_bw_drop_reset_cnt = %u\n",
+				 awgn_stats->awgn_bw_drop_reset_cnt);
+		len += scnprintf(buf + len, size - len,
+				 "awgn_cca_int_cnt = %u\n",
+				 awgn_stats->awgn_cca_int_cnt);
+		len += scnprintf(buf + len, size - len,
+				 "awgn_cca_int_reset_cnt = %u\n",
+				 awgn_stats->awgn_cca_int_reset_cnt);
+		len += scnprintf(buf + len, size - len,
+				 "awgn_cca_ack_blk_cnt = %u\n",
+				 awgn_stats->awgn_cca_ack_blk_cnt);
+		len += scnprintf(buf + len, size - len,
+				 "awgn_cca_ack_reset_cnt = %u\n",
+				 awgn_stats->awgn_cca_ack_reset_cnt);
+		len += scnprintf(buf + len, size - len,
+				 "awgn_int_bw_cnt-AWGN_20[0]: %u\n",
+				 awgn_stats->awgn_int_bw_cnt[0]);
+		len += scnprintf(buf + len, size - len,
+				 "AWGN_40[1]: %u\n",
+				 awgn_stats->awgn_int_bw_cnt[1]);
+		len += scnprintf(buf + len, size - len,
+				 "AWGN_80[2]: %u\n",
+				 awgn_stats->awgn_int_bw_cnt[2]);
+		len += scnprintf(buf + len, size - len,
+				 "AWGN_160[3]: %u\n",
+				 awgn_stats->awgn_int_bw_cnt[3]);
+		len += scnprintf(buf + len, size - len,
+				 "AWGN_320[5]: %u\n",
+				 awgn_stats->awgn_int_bw_cnt[5]);
+	}
+	ath12k_wmi_crl_path_stats_list_free(ar, &ar->debug.wmi_list);
+	mutex_unlock(&ar->wmi_ctrl_path_stats_lock);
+	ret_val =  simple_read_from_buffer(ubuf, count, ppos, buf, len);
+	kfree(buf);
+
+	return ret_val;
+}
+
 int wmi_ctrl_path_btcoex_stat(struct ath12k *ar, const char __user *ubuf,
 			size_t count, loff_t *ppos)
 {
@@ -380,6 +464,9 @@ static ssize_t ath12k_read_wmi_ctrl_path_stats(struct file *file,
 	case WMI_CTRL_PATH_BTCOEX_STATS:
 		ret_val = wmi_ctrl_path_btcoex_stat(ar, ubuf, count, ppos);
 		break;
+	case WMI_CTRL_PATH_AWGN_STATS:
+		ret_val = wmi_ctrl_path_awgn_stat(ar, ubuf, count, ppos);
+		break;
 		/* Add case for newly wmi ctrl path added stats here */
 	default:
 		/* Unsupported tag */
diff --git a/drivers/net/wireless/ath/ath12k/wmi.c b/drivers/net/wireless/ath/ath12k/wmi.c
index 5e66fbd..b321733 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -3954,6 +3954,17 @@ ath12k_wmi_send_wmi_ctrl_stats_cmd(struct ath12k *ar,
 		pdev_id_array[0] = ar->pdev->pdev_id;
 		stats_id = (1 << param->stats_id);
 		break;
+	case WMI_REQ_CTRL_PATH_AWGN_STAT:
+		if (ar->supports_6ghz) {
+			pdev_id_array[0] = ar->pdev->pdev_id;
+			stats_id = (1 << param->stats_id);
+		} else {
+			ath12k_warn(ab,
+			  "Stats id %d awgn stats are only supported for 6GHz",
+			  param->stats_id);
+			return -EIO;
+		}
+		break;
 		/* Add case for newly wmi ctrl path stats here */
 	default:
 		ath12k_warn(ab, "Unsupported stats id %d", param->stats_id);
@@ -4184,6 +4195,53 @@ int wmi_print_ctrl_path_btcoex_stats_tlv(struct ath12k_base *ab, u16 len,
 	return 0;
 }
 
+int wmi_print_ctrl_path_awgn_stats_tlv(struct ath12k_base *ab, u16 len,
+				       const void *ptr, void *data)
+{
+	struct wmi_ctrl_path_stats_ev_parse_param *stats_buff =
+			    (struct wmi_ctrl_path_stats_ev_parse_param *)data;
+	struct wmi_ctrl_path_awgn_stats *awgn_stats_skb, *awgn_stats = NULL;
+	struct wmi_ctrl_path_stats_list *stats;
+	struct ath12k *ar = NULL;
+	int i;
+
+	awgn_stats_skb = (struct wmi_ctrl_path_awgn_stats *)ptr;
+
+	for (i = 0; i < ATH12K_GROUP_MAX_RADIO; i++) {
+		ar = ab->ag->hw_links[i];
+		if (!ar) {
+			ath12k_warn(ab, "Failed to get ar for wmi ctrl awgn stats\n");
+			return -EINVAL;
+		}
+
+		if (ar->supports_6ghz)
+			break;
+	}
+
+	stats = kzalloc(sizeof(*stats), GFP_ATOMIC);
+	if (!stats)
+		return -ENOMEM;
+
+	awgn_stats = kzalloc(sizeof(*awgn_stats), GFP_ATOMIC);
+
+	if (!awgn_stats) {
+		kfree(stats);
+		return -ENOMEM;
+	}
+
+	memcpy(awgn_stats, awgn_stats_skb, sizeof(*awgn_stats));
+	stats->stats_ptr = awgn_stats;
+	list_add_tail(&stats->list, &stats_buff->list);
+
+	mutex_lock(&ar->wmi_ctrl_path_stats_lock);
+	ath12k_wmi_crl_path_stats_list_free(ar, &ar->debug.wmi_list);
+	mutex_unlock(&ar->wmi_ctrl_path_stats_lock);
+	ar->debug.wmi_ctrl_path_stats_tagid = WMI_CTRL_PATH_AWGN_STATS;
+	stats_buff->ar = ar;
+
+	return 0;
+}
+
 static int ath12k_wmi_ctrl_stats_subtlv_parser(struct ath12k_base *ab,
 					       u16 tag, u16 len,
 					       const void *ptr, void *data)
@@ -4202,6 +4260,9 @@ static int ath12k_wmi_ctrl_stats_subtlv_parser(struct ath12k_base *ab,
 	case WMI_CTRL_PATH_BTCOEX_STATS:
 		ret = wmi_print_ctrl_path_btcoex_stats_tlv(ab, len, ptr, data);
 		break;
+	case WMI_CTRL_PATH_AWGN_STATS:
+		ret = wmi_print_ctrl_path_awgn_stats_tlv(ab, len, ptr, data);
+		break;
 		/* Add case for newly wmi ctrl path added stats here */
 	default:
 		ath12k_warn(ab,
diff --git a/drivers/net/wireless/ath/ath12k/wmi.h b/drivers/net/wireless/ath/ath12k/wmi.h
index 0496fdd..f18d27e 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -2010,6 +2010,7 @@ enum wmi_tlv_tag {
 	WMI_TAG_VDEV_CH_POWER_INFO,
 	WMI_CTRL_PATH_CAL_STATS = 0x3BC,
 	WMI_CTRL_PATH_BTCOEX_STATS = 0x3FD,
+	WMI_CTRL_PATH_AWGN_STATS = 0x3F9,
 	WMI_TAG_EHT_RATE_SET = 0x3C4,
 	WMI_TAG_DCS_AWGN_INT_TYPE = 0x3C5,
 	WMI_TAG_MLO_TX_SEND_PARAMS,
@@ -7082,6 +7083,7 @@ wmi_ctrl_path_periodic_cal_type_id_to_name(u8 type_id) {
 #define WMI_CTRL_PATH_CAL_PROF_MASK	GENMASK(12, 8)
 #define WMI_CTRL_PATH_CAL_TYPE_MASK	GENMASK(7, 0)
 #define WMI_CTRL_PATH_IS_PERIODIC_CAL	GENMASK(13, 13)
+#define WMI_AWGN_MAX_BW 6
 
 struct wmi_ctrl_path_pdev_stats {
 	u32 pdev_id;
@@ -7143,6 +7145,21 @@ struct wmi_ctrl_path_btcoex_stats {
 	u32 wl_tx_req_cntr;
 } __packed;
 
+struct wmi_ctrl_path_awgn_stats {
+	u32 awgn_send_evt_cnt;
+	u32 awgn_pri_int_cnt;
+	u32 awgn_sec_int_cnt;
+	u32 awgn_pkt_drop_trigger_cnt;
+	u32 awgn_pkt_drop_trigger_reset_cnt;
+	u32 awgn_bw_drop_cnt;
+	u32 awgn_bw_drop_reset_cnt;
+	u32 awgn_cca_int_cnt;
+	u32 awgn_cca_int_reset_cnt;
+	u32 awgn_cca_ack_blk_cnt;
+	u32 awgn_cca_ack_reset_cnt;
+	u32 awgn_int_bw_cnt[WMI_AWGN_MAX_BW];
+} __packed;
+
 struct wmi_ctrl_path_stats_ev_parse_param {
 	struct list_head list;
 	struct ath12k *ar;
@@ -7712,6 +7729,7 @@ enum  wmi_ctrl_path_stats_id {
 	WMI_REQ_CTRL_PATH_VDEV_EXTD_STAT = 2,
 	WMI_REQ_CTRL_PATH_MEM_STAT       = 3,
 	WMI_REQ_CTRL_PATH_CAL_STAT       = 5,
+	WMI_REQ_CTRL_PATH_AWGN_STAT	 = 7,
 	WMI_REQ_CTRL_PATH_BTCOEX_STAT    = 8,
 };
 
-- 
2.17.1

