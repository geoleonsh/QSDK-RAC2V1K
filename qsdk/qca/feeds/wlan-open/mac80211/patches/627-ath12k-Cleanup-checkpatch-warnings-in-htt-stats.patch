From c22e8b8ee3ab2272827fbec4130a74db9fa524b1 Mon Sep 17 00:00:00 2001
From: Dinesh Karthikeyan <quic_dinek@quicinc.com>
Date: Thu, 21 Apr 2022 12:29:29 +0530
Subject: [PATCH] ath12k: Cleanup checkpatch warnings in htt-stats

Properly align the descendants of a statement to a function open
parenthesis. Remove the extra space before start of the lines that
are descendants of that function.

Signed-off-by: Dinesh Karthikeyan <quic_dinek@quicinc.com>
---
 .../net/wireless/ath/ath12k/debugfs_htt_stats.c    | 1483 ++++++++++----------
 1 file changed, 741 insertions(+), 742 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.c
@@ -83,103 +83,103 @@ static inline void htt_print_tx_pdev_sta
 	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
 			 u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
 	len += scnprintf(buf + len, buf_len - len, "hw_queued = %u\n",
-			   htt_stats_buf->hw_queued);
+			 htt_stats_buf->hw_queued);
 	len += scnprintf(buf + len, buf_len - len, "hw_reaped = %u\n",
-			   htt_stats_buf->hw_reaped);
+			 htt_stats_buf->hw_reaped);
 	len += scnprintf(buf + len, buf_len - len, "underrun = %u\n",
-			   htt_stats_buf->underrun);
+			 htt_stats_buf->underrun);
 	len += scnprintf(buf + len, buf_len - len, "hw_paused = %u\n",
-			   htt_stats_buf->hw_paused);
+			 htt_stats_buf->hw_paused);
 	len += scnprintf(buf + len, buf_len - len, "hw_flush = %u\n",
-			   htt_stats_buf->hw_flush);
+			 htt_stats_buf->hw_flush);
 	len += scnprintf(buf + len, buf_len - len, "hw_filt = %u\n",
-			   htt_stats_buf->hw_filt);
+			 htt_stats_buf->hw_filt);
 	len += scnprintf(buf + len, buf_len - len, "tx_abort = %u\n",
-			   htt_stats_buf->tx_abort);
+			 htt_stats_buf->tx_abort);
 	len += scnprintf(buf + len, buf_len - len, "mpdu_requeued = %u\n",
-			   htt_stats_buf->mpdu_requed);
+			 htt_stats_buf->mpdu_requed);
 	len += scnprintf(buf + len, buf_len - len, "tx_xretry = %u\n",
-			   htt_stats_buf->tx_xretry);
+			 htt_stats_buf->tx_xretry);
 	len += scnprintf(buf + len, buf_len - len, "data_rc = %u\n",
-			   htt_stats_buf->data_rc);
+			 htt_stats_buf->data_rc);
 	len += scnprintf(buf + len, buf_len - len, "mpdu_dropped_xretry = %u\n",
-			   htt_stats_buf->mpdu_dropped_xretry);
+			 htt_stats_buf->mpdu_dropped_xretry);
 	len += scnprintf(buf + len, buf_len - len, "illegal_rate_phy_err = %u\n",
-			   htt_stats_buf->illgl_rate_phy_err);
+			 htt_stats_buf->illgl_rate_phy_err);
 	len += scnprintf(buf + len, buf_len - len, "cont_xretry = %u\n",
-			   htt_stats_buf->cont_xretry);
+			 htt_stats_buf->cont_xretry);
 	len += scnprintf(buf + len, buf_len - len, "tx_timeout = %u\n",
-			   htt_stats_buf->tx_timeout);
+			 htt_stats_buf->tx_timeout);
 	len += scnprintf(buf + len, buf_len - len, "pdev_resets = %u\n",
-			   htt_stats_buf->pdev_resets);
+			 htt_stats_buf->pdev_resets);
 	len += scnprintf(buf + len, buf_len - len, "phy_underrun = %u\n",
-			   htt_stats_buf->phy_underrun);
+			 htt_stats_buf->phy_underrun);
 	len += scnprintf(buf + len, buf_len - len, "txop_ovf = %u\n",
-			   htt_stats_buf->txop_ovf);
+			 htt_stats_buf->txop_ovf);
 	len += scnprintf(buf + len, buf_len - len, "seq_posted = %u\n",
-			   htt_stats_buf->seq_posted);
+			 htt_stats_buf->seq_posted);
 	len += scnprintf(buf + len, buf_len - len, "seq_failed_queueing = %u\n",
-			   htt_stats_buf->seq_failed_queueing);
+			 htt_stats_buf->seq_failed_queueing);
 	len += scnprintf(buf + len, buf_len - len, "seq_completed = %u\n",
-			   htt_stats_buf->seq_completed);
+			 htt_stats_buf->seq_completed);
 	len += scnprintf(buf + len, buf_len - len, "seq_restarted = %u\n",
-			   htt_stats_buf->seq_restarted);
+			 htt_stats_buf->seq_restarted);
 	len += scnprintf(buf + len, buf_len - len, "mu_seq_posted = %u\n",
-			   htt_stats_buf->mu_seq_posted);
+			 htt_stats_buf->mu_seq_posted);
 	len += scnprintf(buf + len, buf_len - len, "seq_switch_hw_paused = %u\n",
-			   htt_stats_buf->seq_switch_hw_paused);
+			 htt_stats_buf->seq_switch_hw_paused);
 	len += scnprintf(buf + len, buf_len - len, "next_seq_posted_dsr = %u\n",
-			   htt_stats_buf->next_seq_posted_dsr);
+			 htt_stats_buf->next_seq_posted_dsr);
 	len += scnprintf(buf + len, buf_len - len, "seq_posted_isr = %u\n",
-			   htt_stats_buf->seq_posted_isr);
+			 htt_stats_buf->seq_posted_isr);
 	len += scnprintf(buf + len, buf_len - len, "seq_ctrl_cached = %u\n",
-			   htt_stats_buf->seq_ctrl_cached);
+			 htt_stats_buf->seq_ctrl_cached);
 	len += scnprintf(buf + len, buf_len - len, "mpdu_count_tqm = %u\n",
-			   htt_stats_buf->mpdu_count_tqm);
+			 htt_stats_buf->mpdu_count_tqm);
 	len += scnprintf(buf + len, buf_len - len, "msdu_count_tqm = %u\n",
-			   htt_stats_buf->msdu_count_tqm);
+			 htt_stats_buf->msdu_count_tqm);
 	len += scnprintf(buf + len, buf_len - len, "mpdu_removed_tqm = %u\n",
-			   htt_stats_buf->mpdu_removed_tqm);
+			 htt_stats_buf->mpdu_removed_tqm);
 	len += scnprintf(buf + len, buf_len - len, "msdu_removed_tqm = %u\n",
-			   htt_stats_buf->msdu_removed_tqm);
+			 htt_stats_buf->msdu_removed_tqm);
 	len += scnprintf(buf + len, buf_len - len, "mpdus_sw_flush = %u\n",
-			   htt_stats_buf->mpdus_sw_flush);
+			 htt_stats_buf->mpdus_sw_flush);
 	len += scnprintf(buf + len, buf_len - len, "mpdus_hw_filter = %u\n",
-			   htt_stats_buf->mpdus_hw_filter);
+			 htt_stats_buf->mpdus_hw_filter);
 	len += scnprintf(buf + len, buf_len - len, "mpdus_truncated = %u\n",
-			   htt_stats_buf->mpdus_truncated);
+			 htt_stats_buf->mpdus_truncated);
 	len += scnprintf(buf + len, buf_len - len, "mpdus_ack_failed = %u\n",
-			   htt_stats_buf->mpdus_ack_failed);
+			 htt_stats_buf->mpdus_ack_failed);
 	len += scnprintf(buf + len, buf_len - len, "mpdus_expired = %u\n",
-			   htt_stats_buf->mpdus_expired);
+			 htt_stats_buf->mpdus_expired);
 	len += scnprintf(buf + len, buf_len - len, "mpdus_seq_hw_retry = %u\n",
-			   htt_stats_buf->mpdus_seq_hw_retry);
+			 htt_stats_buf->mpdus_seq_hw_retry);
 	len += scnprintf(buf + len, buf_len - len, "ack_tlv_proc = %u\n",
-			   htt_stats_buf->ack_tlv_proc);
+			 htt_stats_buf->ack_tlv_proc);
 	len += scnprintf(buf + len, buf_len - len, "coex_abort_mpdu_cnt_valid = %u\n",
-			   htt_stats_buf->coex_abort_mpdu_cnt_valid);
+			 htt_stats_buf->coex_abort_mpdu_cnt_valid);
 	len += scnprintf(buf + len, buf_len - len, "coex_abort_mpdu_cnt = %u\n",
-			   htt_stats_buf->coex_abort_mpdu_cnt);
+			 htt_stats_buf->coex_abort_mpdu_cnt);
 	len += scnprintf(buf + len, buf_len - len, "num_total_ppdus_tried_ota = %u\n",
-			   htt_stats_buf->num_total_ppdus_tried_ota);
+			 htt_stats_buf->num_total_ppdus_tried_ota);
 	len += scnprintf(buf + len, buf_len - len, "num_data_ppdus_tried_ota = %u\n",
-			   htt_stats_buf->num_data_ppdus_tried_ota);
+			 htt_stats_buf->num_data_ppdus_tried_ota);
 	len += scnprintf(buf + len, buf_len - len, "local_ctrl_mgmt_enqued = %u\n",
-			   htt_stats_buf->local_ctrl_mgmt_enqued);
+			 htt_stats_buf->local_ctrl_mgmt_enqued);
 	len += scnprintf(buf + len, buf_len - len, "local_ctrl_mgmt_freed = %u\n",
-			   htt_stats_buf->local_ctrl_mgmt_freed);
+			 htt_stats_buf->local_ctrl_mgmt_freed);
 	len += scnprintf(buf + len, buf_len - len, "local_data_enqued = %u\n",
-			   htt_stats_buf->local_data_enqued);
+			 htt_stats_buf->local_data_enqued);
 	len += scnprintf(buf + len, buf_len - len, "local_data_freed = %u\n",
-			   htt_stats_buf->local_data_freed);
+			 htt_stats_buf->local_data_freed);
 	len += scnprintf(buf + len, buf_len - len, "mpdu_tried = %u\n",
-			   htt_stats_buf->mpdu_tried);
+			 htt_stats_buf->mpdu_tried);
 	len += scnprintf(buf + len, buf_len - len, "isr_wait_seq_posted = %u\n",
-			   htt_stats_buf->isr_wait_seq_posted);
+			 htt_stats_buf->isr_wait_seq_posted);
 	len += scnprintf(buf + len, buf_len - len, "tx_active_dur_us_low = %u\n",
-			   htt_stats_buf->tx_active_dur_us_low);
+			 htt_stats_buf->tx_active_dur_us_low);
 	len += scnprintf(buf + len, buf_len - len, "tx_active_dur_us_high = %u\n",
-			   htt_stats_buf->tx_active_dur_us_high);
+			 htt_stats_buf->tx_active_dur_us_high);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -202,7 +202,6 @@ htt_print_tx_pdev_stats_urrn_tlv_v(const
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_URRN_TLV_V:\n");
 
-
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->urrn_stats, "urrn_stats",
 			   num_elems, "\n\n");
 
@@ -298,7 +297,7 @@ htt_print_tx_pdev_stats_sifs_hist_tlv_v(
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_TX_PDEV_MAX_SIFS_BURST_HIST_STATS);
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_TX_PDEV_STATS_SIFS_HIST_TLV_V:\n");
+			 "HTT_TX_PDEV_STATS_SIFS_HIST_TLV_V:\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->sifs_hist_status,
 			   "sifs_hist_status", num_elems, "\n\n");
@@ -321,22 +320,22 @@ htt_print_tx_pdev_stats_tx_ppdu_stats_tl
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_TX_PDEV_STATS_TX_PPDU_STATS_TLV_V:\n");
+			 "HTT_TX_PDEV_STATS_TX_PPDU_STATS_TLV_V:\n");
 
 	len += scnprintf(buf + len, buf_len - len, "num_data_ppdus_legacy_su = %u\n",
-			   htt_stats_buf->num_data_ppdus_legacy_su);
+			 htt_stats_buf->num_data_ppdus_legacy_su);
 
 	len += scnprintf(buf + len, buf_len - len, "num_data_ppdus_ac_su = %u\n",
-			   htt_stats_buf->num_data_ppdus_ac_su);
+			 htt_stats_buf->num_data_ppdus_ac_su);
 
 	len += scnprintf(buf + len, buf_len - len, "num_data_ppdus_ax_su = %u\n",
-			   htt_stats_buf->num_data_ppdus_ax_su);
+			 htt_stats_buf->num_data_ppdus_ax_su);
 
 	len += scnprintf(buf + len, buf_len - len, "num_data_ppdus_ac_su_txbf = %u\n",
-			   htt_stats_buf->num_data_ppdus_ac_su_txbf);
+			 htt_stats_buf->num_data_ppdus_ac_su_txbf);
 
 	len += scnprintf(buf + len, buf_len - len, "num_data_ppdus_ax_su_txbf = %u\n",
-			   htt_stats_buf->num_data_ppdus_ax_su_txbf);
+			 htt_stats_buf->num_data_ppdus_ax_su_txbf);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -358,9 +357,9 @@ htt_print_tx_pdev_stats_tried_mpdu_cnt_h
 	u32  num_elements = ((tag_len - sizeof(htt_stats_buf->hist_bin_size)) >> 2);
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_TX_PDEV_STATS_TRIED_MPDU_CNT_HIST_TLV_V:\n");
+			 "HTT_TX_PDEV_STATS_TRIED_MPDU_CNT_HIST_TLV_V:\n");
 	len += scnprintf(buf + len, buf_len - len, "TRIED_MPDU_CNT_HIST_BIN_SIZE : %u\n",
-			   htt_stats_buf->hist_bin_size);
+			 htt_stats_buf->hist_bin_size);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tried_mpdu_cnt_hist,
 			   "tried_mpdu_cnt_hist = %s\n", num_elements, "\n\n");
@@ -386,9 +385,9 @@ static inline void htt_print_hw_stats_in
 	       HTT_STATS_MAX_HW_INTR_NAME_LEN);
 	len += scnprintf(buf + len, buf_len - len, "hw_intr_name = %s\n", hw_intr_name);
 	len += scnprintf(buf + len, buf_len - len, "mask = %u\n",
-			   htt_stats_buf->mask);
+			 htt_stats_buf->mask);
 	len += scnprintf(buf + len, buf_len - len, "count = %u\n",
-			   htt_stats_buf->count);
+			 htt_stats_buf->count);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -412,9 +411,9 @@ htt_print_hw_stats_wd_timeout_tlv(const
 	memcpy(hw_module_name, &(htt_stats_buf->hw_module_name[0]),
 	       HTT_STATS_MAX_HW_MODULE_NAME_LEN);
 	len += scnprintf(buf + len, buf_len - len, "hw_module_name = %s\n",
-			   hw_module_name);
+			 hw_module_name);
 	len += scnprintf(buf + len, buf_len - len, "count = %u\n",
-			   htt_stats_buf->count);
+			 htt_stats_buf->count);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -435,27 +434,27 @@ static inline void htt_print_hw_stats_pd
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_HW_STATS_PDEV_ERRS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
-			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+			 u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
 	len += scnprintf(buf + len, buf_len - len, "tx_abort = %u\n",
-			   htt_stats_buf->tx_abort);
+			 htt_stats_buf->tx_abort);
 	len += scnprintf(buf + len, buf_len - len, "tx_abort_fail_count = %u\n",
-			   htt_stats_buf->tx_abort_fail_count);
+			 htt_stats_buf->tx_abort_fail_count);
 	len += scnprintf(buf + len, buf_len - len, "rx_abort = %u\n",
-			   htt_stats_buf->rx_abort);
+			 htt_stats_buf->rx_abort);
 	len += scnprintf(buf + len, buf_len - len, "rx_abort_fail_count = %u\n",
-			   htt_stats_buf->rx_abort_fail_count);
+			 htt_stats_buf->rx_abort_fail_count);
 	len += scnprintf(buf + len, buf_len - len, "warm_reset = %u\n",
-			   htt_stats_buf->warm_reset);
+			 htt_stats_buf->warm_reset);
 	len += scnprintf(buf + len, buf_len - len, "cold_reset = %u\n",
-			   htt_stats_buf->cold_reset);
+			 htt_stats_buf->cold_reset);
 	len += scnprintf(buf + len, buf_len - len, "tx_flush = %u\n",
-			   htt_stats_buf->tx_flush);
+			 htt_stats_buf->tx_flush);
 	len += scnprintf(buf + len, buf_len - len, "tx_glb_reset = %u\n",
-			   htt_stats_buf->tx_glb_reset);
+			 htt_stats_buf->tx_glb_reset);
 	len += scnprintf(buf + len, buf_len - len, "tx_txq_reset = %u\n",
-			   htt_stats_buf->tx_txq_reset);
+			 htt_stats_buf->tx_txq_reset);
 	len += scnprintf(buf + len, buf_len - len, "rx_timeout_reset = %u\n",
-			   htt_stats_buf->rx_timeout_reset);
+			 htt_stats_buf->rx_timeout_reset);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -476,17 +475,17 @@ static inline void htt_print_msdu_flow_s
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_MSDU_FLOW_STATS_TLV:");
 	len += scnprintf(buf + len, buf_len - len, "last_update_timestamp = %u\n",
-			   htt_stats_buf->last_update_timestamp);
+			 htt_stats_buf->last_update_timestamp);
 	len += scnprintf(buf + len, buf_len - len, "last_add_timestamp = %u\n",
-			   htt_stats_buf->last_add_timestamp);
+			 htt_stats_buf->last_add_timestamp);
 	len += scnprintf(buf + len, buf_len - len, "last_remove_timestamp = %u\n",
-			   htt_stats_buf->last_remove_timestamp);
+			 htt_stats_buf->last_remove_timestamp);
 	len += scnprintf(buf + len, buf_len - len, "total_processed_msdu_count = %u\n",
-			   htt_stats_buf->total_processed_msdu_count);
+			 htt_stats_buf->total_processed_msdu_count);
 	len += scnprintf(buf + len, buf_len - len, "cur_msdu_count_in_flowq = %u\n",
-			   htt_stats_buf->cur_msdu_count_in_flowq);
+			 htt_stats_buf->cur_msdu_count_in_flowq);
 	len += scnprintf(buf + len, buf_len - len, "sw_peer_id = %u\n",
-			   htt_stats_buf->sw_peer_id);
+			 htt_stats_buf->sw_peer_id);
 	len += scnprintf(buf + len, buf_len - len, "tx_flow_no = %u\n",
 			 u32_get_bits(drop_rule, HTT_MSDU_FLOW_STATS_TX_FLOW_NO));
 	len += scnprintf(buf + len, buf_len - len, "tid_num = %u\n",
@@ -494,13 +493,13 @@ static inline void htt_print_msdu_flow_s
 	len += scnprintf(buf + len, buf_len - len, "drop_rule = %u\n",
 			 u32_get_bits(drop_rule, HTT_MSDU_FLOW_STATS_DROP_RULE));
 	len += scnprintf(buf + len, buf_len - len, "last_cycle_enqueue_count = %u\n",
-			   htt_stats_buf->last_cycle_enqueue_count);
+			 htt_stats_buf->last_cycle_enqueue_count);
 	len += scnprintf(buf + len, buf_len - len, "last_cycle_dequeue_count = %u\n",
-			   htt_stats_buf->last_cycle_dequeue_count);
+			 htt_stats_buf->last_cycle_dequeue_count);
 	len += scnprintf(buf + len, buf_len - len, "last_cycle_drop_count = %u\n",
-			   htt_stats_buf->last_cycle_drop_count);
+			 htt_stats_buf->last_cycle_drop_count);
 	len += scnprintf(buf + len, buf_len - len, "current_drop_th = %u\n",
-			   htt_stats_buf->current_drop_th);
+			 htt_stats_buf->current_drop_th);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -533,25 +532,25 @@ static inline void htt_print_tx_tid_stat
 	len += scnprintf(buf + len, buf_len - len, "num_ppdu_in_hwq = %u\n",
 			 u32_get_bits(num_ppdu, HTT_TX_TID_STATS_NUM_PPDU_IN_HWQ));
 	len += scnprintf(buf + len, buf_len - len, "tid_flags = 0x%x\n",
-			   htt_stats_buf->tid_flags);
+			 htt_stats_buf->tid_flags);
 	len += scnprintf(buf + len, buf_len - len, "hw_queued = %u\n",
-			   htt_stats_buf->hw_queued);
+			 htt_stats_buf->hw_queued);
 	len += scnprintf(buf + len, buf_len - len, "hw_reaped = %u\n",
-			   htt_stats_buf->hw_reaped);
+			 htt_stats_buf->hw_reaped);
 	len += scnprintf(buf + len, buf_len - len, "mpdus_hw_filter = %u\n",
-			   htt_stats_buf->mpdus_hw_filter);
+			 htt_stats_buf->mpdus_hw_filter);
 	len += scnprintf(buf + len, buf_len - len, "qdepth_bytes = %u\n",
-			   htt_stats_buf->qdepth_bytes);
+			 htt_stats_buf->qdepth_bytes);
 	len += scnprintf(buf + len, buf_len - len, "qdepth_num_msdu = %u\n",
-			   htt_stats_buf->qdepth_num_msdu);
+			 htt_stats_buf->qdepth_num_msdu);
 	len += scnprintf(buf + len, buf_len - len, "qdepth_num_mpdu = %u\n",
-			   htt_stats_buf->qdepth_num_mpdu);
+			 htt_stats_buf->qdepth_num_mpdu);
 	len += scnprintf(buf + len, buf_len - len, "last_scheduled_tsmp = %u\n",
-			   htt_stats_buf->last_scheduled_tsmp);
+			 htt_stats_buf->last_scheduled_tsmp);
 	len += scnprintf(buf + len, buf_len - len, "pause_module_id = %u\n",
-			   htt_stats_buf->pause_module_id);
+			 htt_stats_buf->pause_module_id);
 	len += scnprintf(buf + len, buf_len - len, "block_module_id = %u\n",
-			   htt_stats_buf->block_module_id);
+			 htt_stats_buf->block_module_id);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -584,29 +583,29 @@ static inline void htt_print_tx_tid_stat
 	len += scnprintf(buf + len, buf_len - len, "num_ppdu_in_hwq = %u\n",
 			 u32_get_bits(num_ppdu, HTT_TX_TID_STATS_V1_NUM_PPDU_IN_HWQ));
 	len += scnprintf(buf + len, buf_len - len, "tid_flags = 0x%x\n",
-			   htt_stats_buf->tid_flags);
+			 htt_stats_buf->tid_flags);
 	len += scnprintf(buf + len, buf_len - len, "max_qdepth_bytes = %u\n",
-			   htt_stats_buf->max_qdepth_bytes);
+			 htt_stats_buf->max_qdepth_bytes);
 	len += scnprintf(buf + len, buf_len - len, "max_qdepth_n_msdus = %u\n",
-			   htt_stats_buf->max_qdepth_n_msdus);
+			 htt_stats_buf->max_qdepth_n_msdus);
 	len += scnprintf(buf + len, buf_len - len, "rsvd = %u\n",
-			   htt_stats_buf->rsvd);
+			 htt_stats_buf->rsvd);
 	len += scnprintf(buf + len, buf_len - len, "qdepth_bytes = %u\n",
-			   htt_stats_buf->qdepth_bytes);
+			 htt_stats_buf->qdepth_bytes);
 	len += scnprintf(buf + len, buf_len - len, "qdepth_num_msdu = %u\n",
-			   htt_stats_buf->qdepth_num_msdu);
+			 htt_stats_buf->qdepth_num_msdu);
 	len += scnprintf(buf + len, buf_len - len, "qdepth_num_mpdu = %u\n",
-			   htt_stats_buf->qdepth_num_mpdu);
+			 htt_stats_buf->qdepth_num_mpdu);
 	len += scnprintf(buf + len, buf_len - len, "last_scheduled_tsmp = %u\n",
-			   htt_stats_buf->last_scheduled_tsmp);
+			 htt_stats_buf->last_scheduled_tsmp);
 	len += scnprintf(buf + len, buf_len - len, "pause_module_id = %u\n",
-			   htt_stats_buf->pause_module_id);
+			 htt_stats_buf->pause_module_id);
 	len += scnprintf(buf + len, buf_len - len, "block_module_id = %u\n",
-			   htt_stats_buf->block_module_id);
+			 htt_stats_buf->block_module_id);
 	len += scnprintf(buf + len, buf_len - len, "allow_n_flags = 0x%x\n",
-			   htt_stats_buf->allow_n_flags);
+			 htt_stats_buf->allow_n_flags);
 	len += scnprintf(buf + len, buf_len - len, "sendn_frms_allowed = %u\n",
-			   htt_stats_buf->sendn_frms_allowed);
+			 htt_stats_buf->sendn_frms_allowed);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -634,13 +633,13 @@ static inline void htt_print_rx_tid_stat
 	memcpy(tid_name, &(htt_stats_buf->tid_name[0]), MAX_HTT_TID_NAME);
 	len += scnprintf(buf + len, buf_len - len, "tid_name = %s\n", tid_name);
 	len += scnprintf(buf + len, buf_len - len, "dup_in_reorder = %u\n",
-			   htt_stats_buf->dup_in_reorder);
+			 htt_stats_buf->dup_in_reorder);
 	len += scnprintf(buf + len, buf_len - len, "dup_past_outside_window = %u\n",
-			   htt_stats_buf->dup_past_outside_window);
+			 htt_stats_buf->dup_past_outside_window);
 	len += scnprintf(buf + len, buf_len - len, "dup_past_within_window = %u\n",
-			   htt_stats_buf->dup_past_within_window);
+			 htt_stats_buf->dup_past_within_window);
 	len += scnprintf(buf + len, buf_len - len, "rxdesc_err_decrypt = %u\n",
-			   htt_stats_buf->rxdesc_err_decrypt);
+			 htt_stats_buf->rxdesc_err_decrypt);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -683,33 +682,33 @@ static inline void htt_print_peer_stats_
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_PEER_STATS_CMN_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "ppdu_cnt = %u\n",
-			   htt_stats_buf->ppdu_cnt);
+			 htt_stats_buf->ppdu_cnt);
 	len += scnprintf(buf + len, buf_len - len, "mpdu_cnt = %u\n",
-			   htt_stats_buf->mpdu_cnt);
+			 htt_stats_buf->mpdu_cnt);
 	len += scnprintf(buf + len, buf_len - len, "msdu_cnt = %u\n",
-			   htt_stats_buf->msdu_cnt);
+			 htt_stats_buf->msdu_cnt);
 	len += scnprintf(buf + len, buf_len - len, "pause_bitmap = %u\n",
-			   htt_stats_buf->pause_bitmap);
+			 htt_stats_buf->pause_bitmap);
 	len += scnprintf(buf + len, buf_len - len, "block_bitmap = %u\n",
-			   htt_stats_buf->block_bitmap);
+			 htt_stats_buf->block_bitmap);
 	len += scnprintf(buf + len, buf_len - len, "last_rssi = %d\n",
-			   htt_stats_buf->rssi);
+			 htt_stats_buf->rssi);
 	len += scnprintf(buf + len, buf_len - len, "enqueued_count = %llu\n",
-			   htt_stats_buf->peer_enqueued_count_low |
-			   ((u64)htt_stats_buf->peer_enqueued_count_high << 32));
+			 htt_stats_buf->peer_enqueued_count_low |
+			 ((u64)htt_stats_buf->peer_enqueued_count_high << 32));
 	len += scnprintf(buf + len, buf_len - len, "dequeued_count = %llu\n",
-			   htt_stats_buf->peer_dequeued_count_low |
-			   ((u64)htt_stats_buf->peer_dequeued_count_high << 32));
+			 htt_stats_buf->peer_dequeued_count_low |
+			 ((u64)htt_stats_buf->peer_dequeued_count_high << 32));
 	len += scnprintf(buf + len, buf_len - len, "dropped_count = %llu\n",
-			   htt_stats_buf->peer_dropped_count_low |
-			   ((u64)htt_stats_buf->peer_dropped_count_high << 32));
+			 htt_stats_buf->peer_dropped_count_low |
+			 ((u64)htt_stats_buf->peer_dropped_count_high << 32));
 	len += scnprintf(buf + len, buf_len - len, "transmitted_ppdu_bytes = %llu\n",
-			   htt_stats_buf->ppdu_transmitted_bytes_low |
-			   ((u64)htt_stats_buf->ppdu_transmitted_bytes_high << 32));
+			 htt_stats_buf->ppdu_transmitted_bytes_low |
+			 ((u64)htt_stats_buf->ppdu_transmitted_bytes_high << 32));
 	len += scnprintf(buf + len, buf_len - len, "ttl_removed_count = %u\n",
-			   htt_stats_buf->peer_ttl_removed_count);
+			 htt_stats_buf->peer_ttl_removed_count);
 	len += scnprintf(buf + len, buf_len - len, "inactive_time = %u\n",
-			   htt_stats_buf->inactive_time);
+			 htt_stats_buf->inactive_time);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -732,9 +731,9 @@ static inline void htt_print_peer_detail
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_PEER_DETAILS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "peer_type = %u\n",
-			   htt_stats_buf->peer_type);
+			 htt_stats_buf->peer_type);
 	len += scnprintf(buf + len, buf_len - len, "sw_peer_id = %u\n",
-			   htt_stats_buf->sw_peer_id);
+			 htt_stats_buf->sw_peer_id);
 	len += scnprintf(buf + len, buf_len - len, "vdev_id = %u\n",
 			 u32_get_bits(ast_idx, HTT_PEER_DETAILS_VDEV_ID));
 	len += scnprintf(buf + len, buf_len - len, "pdev_id = %u\n",
@@ -750,9 +749,9 @@ static inline void htt_print_peer_detail
 			 u32_get_bits(mac_addr_16, HTT_MAC_ADDR_H16_0),
 			 u32_get_bits(mac_addr_16, HTT_MAC_ADDR_H16_1));
 	len += scnprintf(buf + len, buf_len - len, "peer_flags = 0x%x\n",
-			   htt_stats_buf->peer_flags);
+			 htt_stats_buf->peer_flags);
 	len += scnprintf(buf + len, buf_len - len, "qpeer_flags = 0x%x\n",
-			   htt_stats_buf->qpeer_flags);
+			 htt_stats_buf->qpeer_flags);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -780,11 +779,11 @@ static inline void htt_print_tx_peer_rat
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_PEER_RATE_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "tx_ldpc = %u\n",
-			   htt_stats_buf->tx_ldpc);
+			 htt_stats_buf->tx_ldpc);
 	len += scnprintf(buf + len, buf_len - len, "rts_cnt = %u\n",
-			   htt_stats_buf->rts_cnt);
+			 htt_stats_buf->rts_cnt);
 	len += scnprintf(buf + len, buf_len - len, "ack_rssi = %u\n",
-			   htt_stats_buf->ack_rssi);
+			 htt_stats_buf->ack_rssi);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_mcs,
 			   "tx_mcs = %s\n", HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
@@ -848,17 +847,17 @@ static inline void htt_print_rx_peer_rat
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_RX_PEER_RATE_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "nsts = %u\n",
-			   htt_stats_buf->nsts);
+			 htt_stats_buf->nsts);
 	len += scnprintf(buf + len, buf_len - len, "rx_ldpc = %u\n",
-			   htt_stats_buf->rx_ldpc);
+			 htt_stats_buf->rx_ldpc);
 	len += scnprintf(buf + len, buf_len - len, "rts_cnt = %u\n",
-			   htt_stats_buf->rts_cnt);
+			 htt_stats_buf->rts_cnt);
 	len += scnprintf(buf + len, buf_len - len, "rssi_mgmt = %u\n",
-			   htt_stats_buf->rssi_mgmt);
+			 htt_stats_buf->rssi_mgmt);
 	len += scnprintf(buf + len, buf_len - len, "rssi_data = %u\n",
-			   htt_stats_buf->rssi_data);
+			 htt_stats_buf->rssi_data);
 	len += scnprintf(buf + len, buf_len - len, "rssi_comb = %u\n",
-			   htt_stats_buf->rssi_comb);
+			 htt_stats_buf->rssi_comb);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_mcs, "rx_mcs",
 			   HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
@@ -873,14 +872,14 @@ static inline void htt_print_rx_peer_rat
 
 	for (j = 0; j < HTT_RX_PEER_STATS_NUM_SPATIAL_STREAMS; j++) {
 		len += scnprintf(buf + len, buf_len - len, "rssi_chain[%u] = %s\n",
-				   j, rssi_chain[j]);
+				 j, rssi_chain[j]);
 		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rssi_chain[j], NULL,
 				   HTT_RX_PEER_STATS_NUM_BW_COUNTERS, "\n");
 	}
 
 	for (j = 0; j < HTT_RX_PEER_STATS_NUM_GI_COUNTERS; j++) {
 		len += scnprintf(buf + len, buf_len - len, "rx_gi[%u] = %s\n",
-				j, rx_gi[j]);
+				 j, rx_gi[j]);
 		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_gi[j], NULL,
 				   HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
 	}
@@ -914,11 +913,11 @@ htt_print_tx_hwq_mu_mimo_sch_stats_tlv(c
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_HWQ_MU_MIMO_SCH_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "mu_mimo_sch_posted = %u\n",
-			   htt_stats_buf->mu_mimo_sch_posted);
+			 htt_stats_buf->mu_mimo_sch_posted);
 	len += scnprintf(buf + len, buf_len - len, "mu_mimo_sch_failed = %u\n",
-			   htt_stats_buf->mu_mimo_sch_failed);
+			 htt_stats_buf->mu_mimo_sch_failed);
 	len += scnprintf(buf + len, buf_len - len, "mu_mimo_ppdu_posted = %u\n",
-			   htt_stats_buf->mu_mimo_ppdu_posted);
+			 htt_stats_buf->mu_mimo_ppdu_posted);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -938,21 +937,21 @@ htt_print_tx_hwq_mu_mimo_mpdu_stats_tlv(
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_TX_HWQ_MU_MIMO_MPDU_STATS_TLV:\n");
+			 "HTT_TX_HWQ_MU_MIMO_MPDU_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "mu_mimo_mpdus_queued_usr = %u\n",
-			   htt_stats_buf->mu_mimo_mpdus_queued_usr);
+			 htt_stats_buf->mu_mimo_mpdus_queued_usr);
 	len += scnprintf(buf + len, buf_len - len, "mu_mimo_mpdus_tried_usr = %u\n",
-			   htt_stats_buf->mu_mimo_mpdus_tried_usr);
+			 htt_stats_buf->mu_mimo_mpdus_tried_usr);
 	len += scnprintf(buf + len, buf_len - len, "mu_mimo_mpdus_failed_usr = %u\n",
-			   htt_stats_buf->mu_mimo_mpdus_failed_usr);
+			 htt_stats_buf->mu_mimo_mpdus_failed_usr);
 	len += scnprintf(buf + len, buf_len - len, "mu_mimo_mpdus_requeued_usr = %u\n",
-			   htt_stats_buf->mu_mimo_mpdus_requeued_usr);
+			 htt_stats_buf->mu_mimo_mpdus_requeued_usr);
 	len += scnprintf(buf + len, buf_len - len, "mu_mimo_err_no_ba_usr = %u\n",
-			   htt_stats_buf->mu_mimo_err_no_ba_usr);
+			 htt_stats_buf->mu_mimo_err_no_ba_usr);
 	len += scnprintf(buf + len, buf_len - len, "mu_mimo_mpdu_underrun_usr = %u\n",
-			   htt_stats_buf->mu_mimo_mpdu_underrun_usr);
+			 htt_stats_buf->mu_mimo_mpdu_underrun_usr);
 	len += scnprintf(buf + len, buf_len - len, "mu_mimo_ampdu_underrun_usr = %u\n",
-			   htt_stats_buf->mu_mimo_ampdu_underrun_usr);
+			 htt_stats_buf->mu_mimo_ampdu_underrun_usr);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -1002,45 +1001,45 @@ htt_print_tx_hwq_stats_cmn_tlv(const voi
 	len += scnprintf(buf + len, buf_len - len, "hwq_id = %u\n",
 			 u32_get_bits(mac_id_word, HTT_TX_HWQ_STATS_HWQ_ID));
 	len += scnprintf(buf + len, buf_len - len, "xretry = %u\n",
-			   htt_stats_buf->xretry);
+			 htt_stats_buf->xretry);
 	len += scnprintf(buf + len, buf_len - len, "underrun_cnt = %u\n",
-			   htt_stats_buf->underrun_cnt);
+			 htt_stats_buf->underrun_cnt);
 	len += scnprintf(buf + len, buf_len - len, "flush_cnt = %u\n",
-			   htt_stats_buf->flush_cnt);
+			 htt_stats_buf->flush_cnt);
 	len += scnprintf(buf + len, buf_len - len, "filt_cnt = %u\n",
-			   htt_stats_buf->filt_cnt);
+			 htt_stats_buf->filt_cnt);
 	len += scnprintf(buf + len, buf_len - len, "null_mpdu_bmap = %u\n",
-			   htt_stats_buf->null_mpdu_bmap);
+			 htt_stats_buf->null_mpdu_bmap);
 	len += scnprintf(buf + len, buf_len - len, "user_ack_failure = %u\n",
-			   htt_stats_buf->user_ack_failure);
+			 htt_stats_buf->user_ack_failure);
 	len += scnprintf(buf + len, buf_len - len, "ack_tlv_proc = %u\n",
-			   htt_stats_buf->ack_tlv_proc);
+			 htt_stats_buf->ack_tlv_proc);
 	len += scnprintf(buf + len, buf_len - len, "sched_id_proc = %u\n",
-			   htt_stats_buf->sched_id_proc);
+			 htt_stats_buf->sched_id_proc);
 	len += scnprintf(buf + len, buf_len - len, "null_mpdu_tx_count = %u\n",
-			   htt_stats_buf->null_mpdu_tx_count);
+			 htt_stats_buf->null_mpdu_tx_count);
 	len += scnprintf(buf + len, buf_len - len, "mpdu_bmap_not_recvd = %u\n",
-			   htt_stats_buf->mpdu_bmap_not_recvd);
+			 htt_stats_buf->mpdu_bmap_not_recvd);
 	len += scnprintf(buf + len, buf_len - len, "num_bar = %u\n",
-			   htt_stats_buf->num_bar);
+			 htt_stats_buf->num_bar);
 	len += scnprintf(buf + len, buf_len - len, "rts = %u\n",
-			   htt_stats_buf->rts);
+			 htt_stats_buf->rts);
 	len += scnprintf(buf + len, buf_len - len, "cts2self = %u\n",
-			   htt_stats_buf->cts2self);
+			 htt_stats_buf->cts2self);
 	len += scnprintf(buf + len, buf_len - len, "qos_null = %u\n",
-			   htt_stats_buf->qos_null);
+			 htt_stats_buf->qos_null);
 	len += scnprintf(buf + len, buf_len - len, "mpdu_tried_cnt = %u\n",
-			   htt_stats_buf->mpdu_tried_cnt);
+			 htt_stats_buf->mpdu_tried_cnt);
 	len += scnprintf(buf + len, buf_len - len, "mpdu_queued_cnt = %u\n",
-			   htt_stats_buf->mpdu_queued_cnt);
+			 htt_stats_buf->mpdu_queued_cnt);
 	len += scnprintf(buf + len, buf_len - len, "mpdu_ack_fail_cnt = %u\n",
-			   htt_stats_buf->mpdu_ack_fail_cnt);
+			 htt_stats_buf->mpdu_ack_fail_cnt);
 	len += scnprintf(buf + len, buf_len - len, "mpdu_filt_cnt = %u\n",
-			   htt_stats_buf->mpdu_filt_cnt);
+			 htt_stats_buf->mpdu_filt_cnt);
 	len += scnprintf(buf + len, buf_len - len, "false_mpdu_ack_count = %u\n",
-			   htt_stats_buf->false_mpdu_ack_count);
+			 htt_stats_buf->false_mpdu_ack_count);
 	len += scnprintf(buf + len, buf_len - len, "txq_timeout = %u\n",
-			   htt_stats_buf->txq_timeout);
+			 htt_stats_buf->txq_timeout);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -1062,9 +1061,9 @@ htt_print_tx_hwq_difs_latency_stats_tlv_
 	u16 data_len = min_t(u16, (tag_len >> 2), HTT_TX_HWQ_MAX_DIFS_LATENCY_BINS);
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_TX_HWQ_DIFS_LATENCY_STATS_TLV_V:");
+			 "HTT_TX_HWQ_DIFS_LATENCY_STATS_TLV_V:");
 	len += scnprintf(buf + len, buf_len - len, "hist_intvl = %u",
-			htt_stats_buf->hist_intvl);
+			 htt_stats_buf->hist_intvl);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->difs_latency_hist,
 			   "difs_latency_hist", data_len, "\n\n");
@@ -1091,7 +1090,7 @@ htt_print_tx_hwq_cmd_result_stats_tlv_v(
 	data_len = min_t(u16, (tag_len >> 2), HTT_TX_HWQ_MAX_CMD_RESULT_STATS);
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_TX_HWQ_CMD_RESULT_STATS_TLV_V:\n");
+			 "HTT_TX_HWQ_CMD_RESULT_STATS_TLV_V:\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->cmd_result, "cmd_result",
 			   data_len, "\n\n");
@@ -1144,7 +1143,7 @@ htt_print_tx_hwq_fes_result_stats_tlv_v(
 	num_elems = min_t(u16, (tag_len >> 2), HTT_TX_HWQ_MAX_FES_RESULT_STATS);
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_TX_HWQ_FES_RESULT_STATS_TLV_V:\n");
+			 "HTT_TX_HWQ_FES_RESULT_STATS_TLV_V:\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->fes_result, "fes_result",
 			   num_elems, "\n\n");
@@ -1170,9 +1169,9 @@ htt_print_tx_hwq_tried_mpdu_cnt_hist_tlv
 			    sizeof(htt_stats_buf->hist_bin_size)) >> 2);
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_TX_HWQ_TRIED_MPDU_CNT_HIST_TLV_V:\n");
+			 "HTT_TX_HWQ_TRIED_MPDU_CNT_HIST_TLV_V:\n");
 	len += scnprintf(buf + len, buf_len - len, "TRIED_MPDU_CNT_HIST_BIN_SIZE : %u\n",
-			   htt_stats_buf->hist_bin_size);
+			 htt_stats_buf->hist_bin_size);
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tried_mpdu_cnt_hist,
 			   "tried_mpdu_cnt_hist", num_elements, "\n\n");
 	if (len >= buf_len)
@@ -1195,7 +1194,7 @@ htt_print_tx_hwq_txop_used_cnt_hist_tlv_
 	u32 num_elements = tag_len >> 2;
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_TX_HWQ_TXOP_USED_CNT_HIST_TLV_V:\n");
+			 "HTT_TX_HWQ_TXOP_USED_CNT_HIST_TLV_V:\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->txop_used_cnt_hist,
 			   "txop_used_cnt_hist", num_elements, "\n\n");
@@ -1223,85 +1222,85 @@ static inline void htt_print_tx_sounding
 
 	if (htt_stats_buf->tx_sounding_mode == HTT_TX_AC_SOUNDING_MODE) {
 		len += scnprintf(buf + len, buf_len - len,
-				   "\nHTT_TX_AC_SOUNDING_STATS_TLV:\n");
+				 "\nHTT_TX_AC_SOUNDING_STATS_TLV:\n");
 		len += scnprintf(buf + len, buf_len - len,
-				   "ac_cbf_20 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
-				   cbf_20[HTT_IMPLICIT_TXBF_STEER_STATS],
-				   cbf_20[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
-				   cbf_20[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
-				   cbf_20[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
-				   cbf_20[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
-		len += scnprintf(buf + len, buf_len - len,
-				   "ac_cbf_40 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
-				   cbf_40[HTT_IMPLICIT_TXBF_STEER_STATS],
-				   cbf_40[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
-				   cbf_40[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
-				   cbf_40[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
-				   cbf_40[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
-		len += scnprintf(buf + len, buf_len - len,
-				   "ac_cbf_80 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
-				   cbf_80[HTT_IMPLICIT_TXBF_STEER_STATS],
-				   cbf_80[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
-				   cbf_80[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
-				   cbf_80[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
-				   cbf_80[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
-		len += scnprintf(buf + len, buf_len - len,
-				   "ac_cbf_160 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
-				   cbf_160[HTT_IMPLICIT_TXBF_STEER_STATS],
-				   cbf_160[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
-				   cbf_160[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
-				   cbf_160[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
-				   cbf_160[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
+				 "ac_cbf_20 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
+				 cbf_20[HTT_IMPLICIT_TXBF_STEER_STATS],
+				 cbf_20[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
+				 cbf_20[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
+				 cbf_20[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
+				 cbf_20[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
+		len += scnprintf(buf + len, buf_len - len,
+				 "ac_cbf_40 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
+				 cbf_40[HTT_IMPLICIT_TXBF_STEER_STATS],
+				 cbf_40[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
+				 cbf_40[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
+				 cbf_40[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
+				 cbf_40[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
+		len += scnprintf(buf + len, buf_len - len,
+				 "ac_cbf_80 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
+				 cbf_80[HTT_IMPLICIT_TXBF_STEER_STATS],
+				 cbf_80[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
+				 cbf_80[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
+				 cbf_80[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
+				 cbf_80[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
+		len += scnprintf(buf + len, buf_len - len,
+				 "ac_cbf_160 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
+				 cbf_160[HTT_IMPLICIT_TXBF_STEER_STATS],
+				 cbf_160[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
+				 cbf_160[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
+				 cbf_160[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
+				 cbf_160[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
 
 		for (i = 0; i < HTT_TX_PDEV_STATS_NUM_AC_MUMIMO_USER_STATS; i++) {
 			len += scnprintf(buf + len, buf_len - len,
-					   "Sounding User %u = 20MHz: %u, 40MHz : %u, 80MHz: %u, 160MHz: %u\n",
-					   i,
-					   htt_stats_buf->sounding[0],
-					   htt_stats_buf->sounding[1],
-					   htt_stats_buf->sounding[2],
-					   htt_stats_buf->sounding[3]);
+					 "Sounding User %u = 20MHz: %u, 40MHz : %u, 80MHz: %u, 160MHz: %u\n",
+					 i,
+					 htt_stats_buf->sounding[0],
+					 htt_stats_buf->sounding[1],
+					 htt_stats_buf->sounding[2],
+					 htt_stats_buf->sounding[3]);
 		}
 	} else if (htt_stats_buf->tx_sounding_mode == HTT_TX_AX_SOUNDING_MODE) {
 		len += scnprintf(buf + len, buf_len - len,
-				   "\nHTT_TX_AX_SOUNDING_STATS_TLV:\n");
+				 "\nHTT_TX_AX_SOUNDING_STATS_TLV:\n");
 		len += scnprintf(buf + len, buf_len - len,
-				   "ax_cbf_20 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
-				   cbf_20[HTT_IMPLICIT_TXBF_STEER_STATS],
-				   cbf_20[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
-				   cbf_20[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
-				   cbf_20[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
-				   cbf_20[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
-		len += scnprintf(buf + len, buf_len - len,
-				   "ax_cbf_40 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
-				   cbf_40[HTT_IMPLICIT_TXBF_STEER_STATS],
-				   cbf_40[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
-				   cbf_40[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
-				   cbf_40[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
-				   cbf_40[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
-		len += scnprintf(buf + len, buf_len - len,
-				   "ax_cbf_80 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
-				   cbf_80[HTT_IMPLICIT_TXBF_STEER_STATS],
-				   cbf_80[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
-				   cbf_80[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
-				   cbf_80[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
-				   cbf_80[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
-		len += scnprintf(buf + len, buf_len - len,
-				   "ax_cbf_160 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
-				   cbf_160[HTT_IMPLICIT_TXBF_STEER_STATS],
-				   cbf_160[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
-				   cbf_160[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
-				   cbf_160[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
-				   cbf_160[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
+				 "ax_cbf_20 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
+				 cbf_20[HTT_IMPLICIT_TXBF_STEER_STATS],
+				 cbf_20[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
+				 cbf_20[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
+				 cbf_20[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
+				 cbf_20[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
+		len += scnprintf(buf + len, buf_len - len,
+				 "ax_cbf_40 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
+				 cbf_40[HTT_IMPLICIT_TXBF_STEER_STATS],
+				 cbf_40[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
+				 cbf_40[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
+				 cbf_40[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
+				 cbf_40[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
+		len += scnprintf(buf + len, buf_len - len,
+				 "ax_cbf_80 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
+				 cbf_80[HTT_IMPLICIT_TXBF_STEER_STATS],
+				 cbf_80[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
+				 cbf_80[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
+				 cbf_80[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
+				 cbf_80[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
+		len += scnprintf(buf + len, buf_len - len,
+				 "ax_cbf_160 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
+				 cbf_160[HTT_IMPLICIT_TXBF_STEER_STATS],
+				 cbf_160[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
+				 cbf_160[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
+				 cbf_160[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
+				 cbf_160[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
 
 		for (i = 0; i < HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS; i++) {
 			len += scnprintf(buf + len, buf_len - len,
-					   "Sounding User %u = 20MHz: %u, 40MHz : %u, 80MHz: %u, 160MHz: %u\n",
-					   i,
-					   htt_stats_buf->sounding[0],
-					   htt_stats_buf->sounding[1],
-					   htt_stats_buf->sounding[2],
-					   htt_stats_buf->sounding[3]);
+					 "Sounding User %u = 20MHz: %u, 40MHz : %u, 80MHz: %u, 160MHz: %u\n",
+					 i,
+					 htt_stats_buf->sounding[0],
+					 htt_stats_buf->sounding[1],
+					 htt_stats_buf->sounding[2],
+					 htt_stats_buf->sounding[3]);
 		}
 	}
 
@@ -1325,29 +1324,29 @@ htt_print_tx_selfgen_cmn_stats_tlv(const
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_SELFGEN_CMN_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
-			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+			 u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
 	len += scnprintf(buf + len, buf_len - len, "su_bar = %u\n",
-			   htt_stats_buf->su_bar);
+			 htt_stats_buf->su_bar);
 	len += scnprintf(buf + len, buf_len - len, "rts = %u\n",
-			   htt_stats_buf->rts);
+			 htt_stats_buf->rts);
 	len += scnprintf(buf + len, buf_len - len, "cts2self = %u\n",
-			   htt_stats_buf->cts2self);
+			 htt_stats_buf->cts2self);
 	len += scnprintf(buf + len, buf_len - len, "qos_null = %u\n",
-			   htt_stats_buf->qos_null);
+			 htt_stats_buf->qos_null);
 	len += scnprintf(buf + len, buf_len - len, "delayed_bar_1 = %u\n",
-			   htt_stats_buf->delayed_bar_1);
+			 htt_stats_buf->delayed_bar_1);
 	len += scnprintf(buf + len, buf_len - len, "delayed_bar_2 = %u\n",
-			   htt_stats_buf->delayed_bar_2);
+			 htt_stats_buf->delayed_bar_2);
 	len += scnprintf(buf + len, buf_len - len, "delayed_bar_3 = %u\n",
-			   htt_stats_buf->delayed_bar_3);
+			 htt_stats_buf->delayed_bar_3);
 	len += scnprintf(buf + len, buf_len - len, "delayed_bar_4 = %u\n",
-			   htt_stats_buf->delayed_bar_4);
+			 htt_stats_buf->delayed_bar_4);
 	len += scnprintf(buf + len, buf_len - len, "delayed_bar_5 = %u\n",
-			   htt_stats_buf->delayed_bar_5);
+			 htt_stats_buf->delayed_bar_5);
 	len += scnprintf(buf + len, buf_len - len, "delayed_bar_6 = %u\n",
-			   htt_stats_buf->delayed_bar_6);
+			 htt_stats_buf->delayed_bar_6);
 	len += scnprintf(buf + len, buf_len - len, "delayed_bar_7 = %u\n",
-			   htt_stats_buf->delayed_bar_7);
+			 htt_stats_buf->delayed_bar_7);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -1368,19 +1367,19 @@ htt_print_tx_selfgen_ac_stats_tlv(const
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_SELFGEN_AC_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "ac_su_ndpa = %u\n",
-			   htt_stats_buf->ac_su_ndpa);
+			 htt_stats_buf->ac_su_ndpa);
 	len += scnprintf(buf + len, buf_len - len, "ac_su_ndp = %u\n",
-			   htt_stats_buf->ac_su_ndp);
+			 htt_stats_buf->ac_su_ndp);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndpa = %u\n",
-			   htt_stats_buf->ac_mu_mimo_ndpa);
+			 htt_stats_buf->ac_mu_mimo_ndpa);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndp = %u\n",
-			   htt_stats_buf->ac_mu_mimo_ndp);
+			 htt_stats_buf->ac_mu_mimo_ndp);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_1 = %u\n",
-			   htt_stats_buf->ac_mu_mimo_brpoll_1);
+			 htt_stats_buf->ac_mu_mimo_brpoll_1);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_2 = %u\n",
-			   htt_stats_buf->ac_mu_mimo_brpoll_2);
+			 htt_stats_buf->ac_mu_mimo_brpoll_2);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_3 = %u\n",
-			   htt_stats_buf->ac_mu_mimo_brpoll_3);
+			 htt_stats_buf->ac_mu_mimo_brpoll_3);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -1401,35 +1400,35 @@ htt_print_tx_selfgen_ax_stats_tlv(const
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_SELFGEN_AX_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "ax_su_ndpa = %u\n",
-			   htt_stats_buf->ax_su_ndpa);
+			 htt_stats_buf->ax_su_ndpa);
 	len += scnprintf(buf + len, buf_len - len, "ax_su_ndp = %u\n",
-			   htt_stats_buf->ax_su_ndp);
+			 htt_stats_buf->ax_su_ndp);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_ndpa = %u\n",
-			   htt_stats_buf->ax_mu_mimo_ndpa);
+			 htt_stats_buf->ax_mu_mimo_ndpa);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_ndp = %u\n",
-			   htt_stats_buf->ax_mu_mimo_ndp);
+			 htt_stats_buf->ax_mu_mimo_ndp);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_1 = %u\n",
-			   htt_stats_buf->ax_mu_mimo_brpoll_1);
+			 htt_stats_buf->ax_mu_mimo_brpoll_1);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_2 = %u\n",
-			   htt_stats_buf->ax_mu_mimo_brpoll_2);
+			 htt_stats_buf->ax_mu_mimo_brpoll_2);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_3 = %u\n",
-			   htt_stats_buf->ax_mu_mimo_brpoll_3);
+			 htt_stats_buf->ax_mu_mimo_brpoll_3);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_4 = %u\n",
-			   htt_stats_buf->ax_mu_mimo_brpoll_4);
+			 htt_stats_buf->ax_mu_mimo_brpoll_4);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_5 = %u\n",
-			   htt_stats_buf->ax_mu_mimo_brpoll_5);
+			 htt_stats_buf->ax_mu_mimo_brpoll_5);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_6 = %u\n",
-			   htt_stats_buf->ax_mu_mimo_brpoll_6);
+			 htt_stats_buf->ax_mu_mimo_brpoll_6);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_7 = %u\n",
-			   htt_stats_buf->ax_mu_mimo_brpoll_7);
+			 htt_stats_buf->ax_mu_mimo_brpoll_7);
 	len += scnprintf(buf + len, buf_len - len, "ax_basic_trigger = %u\n",
-			   htt_stats_buf->ax_basic_trigger);
+			 htt_stats_buf->ax_basic_trigger);
 	len += scnprintf(buf + len, buf_len - len, "ax_bsr_trigger = %u\n",
-			   htt_stats_buf->ax_bsr_trigger);
+			 htt_stats_buf->ax_bsr_trigger);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_bar_trigger = %u\n",
-			   htt_stats_buf->ax_mu_bar_trigger);
+			 htt_stats_buf->ax_mu_bar_trigger);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_rts_trigger = %u\n",
-			   htt_stats_buf->ax_mu_rts_trigger);
+			 htt_stats_buf->ax_mu_rts_trigger);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -1450,19 +1449,19 @@ htt_print_tx_selfgen_ac_err_stats_tlv(co
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_SELFGEN_AC_ERR_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "ac_su_ndp_err = %u\n",
-			   htt_stats_buf->ac_su_ndp_err);
+			 htt_stats_buf->ac_su_ndp_err);
 	len += scnprintf(buf + len, buf_len - len, "ac_su_ndpa_err = %u\n",
-			   htt_stats_buf->ac_su_ndpa_err);
+			 htt_stats_buf->ac_su_ndpa_err);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndpa_err = %u\n",
-			   htt_stats_buf->ac_mu_mimo_ndpa_err);
+			 htt_stats_buf->ac_mu_mimo_ndpa_err);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndp_err = %u\n",
-			   htt_stats_buf->ac_mu_mimo_ndp_err);
+			 htt_stats_buf->ac_mu_mimo_ndp_err);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brp1_err = %u\n",
-			   htt_stats_buf->ac_mu_mimo_brp1_err);
+			 htt_stats_buf->ac_mu_mimo_brp1_err);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brp2_err = %u\n",
-			   htt_stats_buf->ac_mu_mimo_brp2_err);
+			 htt_stats_buf->ac_mu_mimo_brp2_err);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brp3_err = %u\n",
-			   htt_stats_buf->ac_mu_mimo_brp3_err);
+			 htt_stats_buf->ac_mu_mimo_brp3_err);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -1483,35 +1482,35 @@ htt_print_tx_selfgen_ax_err_stats_tlv(co
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_SELFGEN_AX_ERR_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "ax_su_ndp_err = %u\n",
-			   htt_stats_buf->ax_su_ndp_err);
+			 htt_stats_buf->ax_su_ndp_err);
 	len += scnprintf(buf + len, buf_len - len, "ax_su_ndpa_err = %u\n",
-			   htt_stats_buf->ax_su_ndpa_err);
+			 htt_stats_buf->ax_su_ndpa_err);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_ndpa_err = %u\n",
-			   htt_stats_buf->ax_mu_mimo_ndpa_err);
+			 htt_stats_buf->ax_mu_mimo_ndpa_err);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_ndp_err = %u\n",
-			   htt_stats_buf->ax_mu_mimo_ndp_err);
+			 htt_stats_buf->ax_mu_mimo_ndp_err);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp1_err = %u\n",
-			   htt_stats_buf->ax_mu_mimo_brp1_err);
+			 htt_stats_buf->ax_mu_mimo_brp1_err);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp2_err = %u\n",
-			   htt_stats_buf->ax_mu_mimo_brp2_err);
+			 htt_stats_buf->ax_mu_mimo_brp2_err);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp3_err = %u\n",
-			   htt_stats_buf->ax_mu_mimo_brp3_err);
+			 htt_stats_buf->ax_mu_mimo_brp3_err);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp4_err = %u\n",
-			   htt_stats_buf->ax_mu_mimo_brp4_err);
+			 htt_stats_buf->ax_mu_mimo_brp4_err);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp5_err = %u\n",
-			   htt_stats_buf->ax_mu_mimo_brp5_err);
+			 htt_stats_buf->ax_mu_mimo_brp5_err);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp6_err = %u\n",
-			   htt_stats_buf->ax_mu_mimo_brp6_err);
+			 htt_stats_buf->ax_mu_mimo_brp6_err);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp7_err = %u\n",
-			   htt_stats_buf->ax_mu_mimo_brp7_err);
+			 htt_stats_buf->ax_mu_mimo_brp7_err);
 	len += scnprintf(buf + len, buf_len - len, "ax_basic_trigger_err = %u\n",
-			   htt_stats_buf->ax_basic_trigger_err);
+			 htt_stats_buf->ax_basic_trigger_err);
 	len += scnprintf(buf + len, buf_len - len, "ax_bsr_trigger_err = %u\n",
-			   htt_stats_buf->ax_bsr_trigger_err);
+			 htt_stats_buf->ax_bsr_trigger_err);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_bar_trigger_err = %u\n",
-			   htt_stats_buf->ax_mu_bar_trigger_err);
+			 htt_stats_buf->ax_mu_bar_trigger_err);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_rts_trigger_err = %u\n",
-			   htt_stats_buf->ax_mu_rts_trigger_err);
+			 htt_stats_buf->ax_mu_rts_trigger_err);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -1532,34 +1531,34 @@ htt_print_tx_pdev_mu_mimo_sch_stats_tlv(
 	u8 i;
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_TX_PDEV_MU_MIMO_SCH_STATS_TLV:\n");
+			 "HTT_TX_PDEV_MU_MIMO_SCH_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "mu_mimo_sch_posted = %u\n",
-			   htt_stats_buf->mu_mimo_sch_posted);
+			 htt_stats_buf->mu_mimo_sch_posted);
 	len += scnprintf(buf + len, buf_len - len, "mu_mimo_sch_failed = %u\n",
-			   htt_stats_buf->mu_mimo_sch_failed);
+			 htt_stats_buf->mu_mimo_sch_failed);
 	len += scnprintf(buf + len, buf_len - len, "mu_mimo_ppdu_posted = %u\n",
-			   htt_stats_buf->mu_mimo_ppdu_posted);
+			 htt_stats_buf->mu_mimo_ppdu_posted);
 
 	len += scnprintf(buf + len, buf_len - len, "11ac MU_MIMO SCH STATS:\n");
 
 	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_AC_MUMIMO_USER_STATS; i++)
 		len += scnprintf(buf + len, buf_len - len,
-				   "ac_mu_mimo_sch_nusers_%u = %u\n",
-				   i, htt_stats_buf->ac_mu_mimo_sch_nusers[i]);
+				 "ac_mu_mimo_sch_nusers_%u = %u\n",
+				 i, htt_stats_buf->ac_mu_mimo_sch_nusers[i]);
 
 	len += scnprintf(buf + len, buf_len - len, "\n11ax MU_MIMO SCH STATS:\n");
 
 	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS; i++)
 		len += scnprintf(buf + len, buf_len - len,
-				   "ax_mu_mimo_sch_nusers_%u = %u\n",
-				   i, htt_stats_buf->ax_mu_mimo_sch_nusers[i]);
+				 "ax_mu_mimo_sch_nusers_%u = %u\n",
+				 i, htt_stats_buf->ax_mu_mimo_sch_nusers[i]);
 
 	len += scnprintf(buf + len, buf_len - len, "\n11ax OFDMA SCH STATS:\n");
 
 	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_OFDMA_USER_STATS; i++)
 		len += scnprintf(buf + len, buf_len - len,
-				   "ax_ofdma_sch_nusers_%u = %u\n",
-				   i, htt_stats_buf->ax_ofdma_sch_nusers[i]);
+				 "ax_ofdma_sch_nusers_%u = %u\n",
+				 i, htt_stats_buf->ax_ofdma_sch_nusers[i]);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -1581,113 +1580,113 @@ htt_print_tx_pdev_mu_mimo_mpdu_stats_tlv
 	if (htt_stats_buf->tx_sched_mode == HTT_STATS_TX_SCHED_MODE_MU_MIMO_AC) {
 		if (!htt_stats_buf->user_index)
 			len += scnprintf(buf + len, buf_len - len,
-					   "HTT_TX_PDEV_MU_MIMO_AC_MPDU_STATS:\n");
+					 "HTT_TX_PDEV_MU_MIMO_AC_MPDU_STATS:\n");
 
 		if (htt_stats_buf->user_index <
 		    HTT_TX_PDEV_STATS_NUM_AC_MUMIMO_USER_STATS) {
 			len += scnprintf(buf + len, buf_len - len,
-					   "ac_mu_mimo_mpdus_queued_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->mpdus_queued_usr);
-			len += scnprintf(buf + len, buf_len - len,
-					   "ac_mu_mimo_mpdus_tried_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->mpdus_tried_usr);
-			len += scnprintf(buf + len, buf_len - len,
-					   "ac_mu_mimo_mpdus_failed_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->mpdus_failed_usr);
-			len += scnprintf(buf + len, buf_len - len,
-					   "ac_mu_mimo_mpdus_requeued_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->mpdus_requeued_usr);
-			len += scnprintf(buf + len, buf_len - len,
-					   "ac_mu_mimo_err_no_ba_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->err_no_ba_usr);
-			len += scnprintf(buf + len, buf_len - len,
-					   "ac_mu_mimo_mpdu_underrun_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->mpdu_underrun_usr);
-			len += scnprintf(buf + len, buf_len - len,
-					   "ac_mu_mimo_ampdu_underrun_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->ampdu_underrun_usr);
+					 "ac_mu_mimo_mpdus_queued_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdus_queued_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "ac_mu_mimo_mpdus_tried_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdus_tried_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "ac_mu_mimo_mpdus_failed_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdus_failed_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "ac_mu_mimo_mpdus_requeued_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdus_requeued_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "ac_mu_mimo_err_no_ba_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->err_no_ba_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "ac_mu_mimo_mpdu_underrun_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdu_underrun_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "ac_mu_mimo_ampdu_underrun_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->ampdu_underrun_usr);
 		}
 	}
 
 	if (htt_stats_buf->tx_sched_mode == HTT_STATS_TX_SCHED_MODE_MU_MIMO_AX) {
 		if (!htt_stats_buf->user_index)
 			len += scnprintf(buf + len, buf_len - len,
-					   "HTT_TX_PDEV_MU_MIMO_AX_MPDU_STATS:\n");
+					 "HTT_TX_PDEV_MU_MIMO_AX_MPDU_STATS:\n");
 
 		if (htt_stats_buf->user_index <
 		    HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS) {
 			len += scnprintf(buf + len, buf_len - len,
-					   "ax_mu_mimo_mpdus_queued_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->mpdus_queued_usr);
-			len += scnprintf(buf + len, buf_len - len,
-					   "ax_mu_mimo_mpdus_tried_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->mpdus_tried_usr);
-			len += scnprintf(buf + len, buf_len - len,
-					   "ax_mu_mimo_mpdus_failed_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->mpdus_failed_usr);
-			len += scnprintf(buf + len, buf_len - len,
-					   "ax_mu_mimo_mpdus_requeued_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->mpdus_requeued_usr);
-			len += scnprintf(buf + len, buf_len - len,
-					   "ax_mu_mimo_err_no_ba_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->err_no_ba_usr);
-			len += scnprintf(buf + len, buf_len - len,
-					   "ax_mu_mimo_mpdu_underrun_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->mpdu_underrun_usr);
-			len += scnprintf(buf + len, buf_len - len,
-					   "ax_mu_mimo_ampdu_underrun_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->ampdu_underrun_usr);
+					 "ax_mu_mimo_mpdus_queued_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdus_queued_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "ax_mu_mimo_mpdus_tried_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdus_tried_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "ax_mu_mimo_mpdus_failed_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdus_failed_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "ax_mu_mimo_mpdus_requeued_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdus_requeued_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "ax_mu_mimo_err_no_ba_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->err_no_ba_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "ax_mu_mimo_mpdu_underrun_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdu_underrun_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "ax_mu_mimo_ampdu_underrun_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->ampdu_underrun_usr);
 		}
 	}
 
 	if (htt_stats_buf->tx_sched_mode == HTT_STATS_TX_SCHED_MODE_MU_OFDMA_AX) {
 		if (!htt_stats_buf->user_index)
 			len += scnprintf(buf + len, buf_len - len,
-					   "HTT_TX_PDEV_AX_MU_OFDMA_MPDU_STATS:\n");
+					 "HTT_TX_PDEV_AX_MU_OFDMA_MPDU_STATS:\n");
 
 		if (htt_stats_buf->user_index < HTT_TX_PDEV_STATS_NUM_OFDMA_USER_STATS) {
 			len += scnprintf(buf + len, buf_len - len,
-					   "ax_mu_ofdma_mpdus_queued_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->mpdus_queued_usr);
-			len += scnprintf(buf + len, buf_len - len,
-					   "ax_mu_ofdma_mpdus_tried_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->mpdus_tried_usr);
-			len += scnprintf(buf + len, buf_len - len,
-					   "ax_mu_ofdma_mpdus_failed_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->mpdus_failed_usr);
-			len += scnprintf(buf + len, buf_len - len,
-					   "ax_mu_ofdma_mpdus_requeued_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->mpdus_requeued_usr);
-			len += scnprintf(buf + len, buf_len - len,
-					   "ax_mu_ofdma_err_no_ba_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->err_no_ba_usr);
-			len += scnprintf(buf + len, buf_len - len,
-					   "ax_mu_ofdma_mpdu_underrun_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->mpdu_underrun_usr);
-			len += scnprintf(buf + len, buf_len - len,
-					   "ax_mu_ofdma_ampdu_underrun_usr_%u = %u\n",
-					   htt_stats_buf->user_index,
-					   htt_stats_buf->ampdu_underrun_usr);
+					 "ax_mu_ofdma_mpdus_queued_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdus_queued_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "ax_mu_ofdma_mpdus_tried_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdus_tried_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "ax_mu_ofdma_mpdus_failed_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdus_failed_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "ax_mu_ofdma_mpdus_requeued_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdus_requeued_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "ax_mu_ofdma_err_no_ba_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->err_no_ba_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "ax_mu_ofdma_mpdu_underrun_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->mpdu_underrun_usr);
+			len += scnprintf(buf + len, buf_len - len,
+					 "ax_mu_ofdma_ampdu_underrun_usr_%u = %u\n",
+					 htt_stats_buf->user_index,
+					 htt_stats_buf->ampdu_underrun_usr);
 		}
 	}
 
@@ -1761,7 +1760,7 @@ htt_print_sched_txq_sched_order_su_tlv_v
 		min_t(u32, (tag_len >> 2), HTT_TX_PDEV_NUM_SCHED_ORDER_LOG);
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_SCHED_TXQ_SCHED_ORDER_SU_TLV_V:\n");
+			 "HTT_SCHED_TXQ_SCHED_ORDER_SU_TLV_V:\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->sched_order_su, "sched_order_su",
 			   sched_order_su_num_entries, "\n\n");
@@ -1787,7 +1786,7 @@ htt_print_sched_txq_sched_ineligibility_
 	u32 sched_ineligibility_num_entries = tag_len >> 2;
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_SCHED_TXQ_SCHED_INELIGIBILITY_V:\n");
+			 "HTT_SCHED_TXQ_SCHED_INELIGIBILITY_V:\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->sched_ineligibility,
 			   "sched_ineligibility", sched_ineligibility_num_entries,
@@ -1812,54 +1811,54 @@ htt_print_tx_pdev_stats_sched_per_txq_tl
 	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__txq_id__word);
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_TX_PDEV_STATS_SCHED_PER_TXQ_TLV:\n");
+			 "HTT_TX_PDEV_STATS_SCHED_PER_TXQ_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
 			 u32_get_bits(mac_id_word,
 				      HTT_TX_PDEV_STATS_SCHED_PER_TXQ_MAC_ID));
 	len += scnprintf(buf + len, buf_len - len, "txq_id = %u\n",
 			 u32_get_bits(mac_id_word, HTT_TX_PDEV_STATS_SCHED_PER_TXQ_ID));
 	len += scnprintf(buf + len, buf_len - len, "sched_policy = %u\n",
-			   htt_stats_buf->sched_policy);
+			 htt_stats_buf->sched_policy);
 	len += scnprintf(buf + len, buf_len - len,
-			   "last_sched_cmd_posted_timestamp = %u\n",
-			   htt_stats_buf->last_sched_cmd_posted_timestamp);
+			 "last_sched_cmd_posted_timestamp = %u\n",
+			 htt_stats_buf->last_sched_cmd_posted_timestamp);
 	len += scnprintf(buf + len, buf_len - len,
-			   "last_sched_cmd_compl_timestamp = %u\n",
-			   htt_stats_buf->last_sched_cmd_compl_timestamp);
+			 "last_sched_cmd_compl_timestamp = %u\n",
+			 htt_stats_buf->last_sched_cmd_compl_timestamp);
 	len += scnprintf(buf + len, buf_len - len, "sched_2_tac_lwm_count = %u\n",
-			   htt_stats_buf->sched_2_tac_lwm_count);
+			 htt_stats_buf->sched_2_tac_lwm_count);
 	len += scnprintf(buf + len, buf_len - len, "sched_2_tac_ring_full = %u\n",
-			   htt_stats_buf->sched_2_tac_ring_full);
+			 htt_stats_buf->sched_2_tac_ring_full);
 	len += scnprintf(buf + len, buf_len - len, "sched_cmd_post_failure = %u\n",
-			   htt_stats_buf->sched_cmd_post_failure);
+			 htt_stats_buf->sched_cmd_post_failure);
 	len += scnprintf(buf + len, buf_len - len, "num_active_tids = %u\n",
-			   htt_stats_buf->num_active_tids);
+			 htt_stats_buf->num_active_tids);
 	len += scnprintf(buf + len, buf_len - len, "num_ps_schedules = %u\n",
-			   htt_stats_buf->num_ps_schedules);
+			 htt_stats_buf->num_ps_schedules);
 	len += scnprintf(buf + len, buf_len - len, "sched_cmds_pending = %u\n",
-			   htt_stats_buf->sched_cmds_pending);
+			 htt_stats_buf->sched_cmds_pending);
 	len += scnprintf(buf + len, buf_len - len, "num_tid_register = %u\n",
-			   htt_stats_buf->num_tid_register);
+			 htt_stats_buf->num_tid_register);
 	len += scnprintf(buf + len, buf_len - len, "num_tid_unregister = %u\n",
-			   htt_stats_buf->num_tid_unregister);
+			 htt_stats_buf->num_tid_unregister);
 	len += scnprintf(buf + len, buf_len - len, "num_qstats_queried = %u\n",
-			   htt_stats_buf->num_qstats_queried);
+			 htt_stats_buf->num_qstats_queried);
 	len += scnprintf(buf + len, buf_len - len, "qstats_update_pending = %u\n",
-			   htt_stats_buf->qstats_update_pending);
+			 htt_stats_buf->qstats_update_pending);
 	len += scnprintf(buf + len, buf_len - len, "last_qstats_query_timestamp = %u\n",
-			   htt_stats_buf->last_qstats_query_timestamp);
+			 htt_stats_buf->last_qstats_query_timestamp);
 	len += scnprintf(buf + len, buf_len - len, "num_tqm_cmdq_full = %u\n",
-			   htt_stats_buf->num_tqm_cmdq_full);
+			 htt_stats_buf->num_tqm_cmdq_full);
 	len += scnprintf(buf + len, buf_len - len, "num_de_sched_algo_trigger = %u\n",
-			   htt_stats_buf->num_de_sched_algo_trigger);
+			 htt_stats_buf->num_de_sched_algo_trigger);
 	len += scnprintf(buf + len, buf_len - len, "num_rt_sched_algo_trigger = %u\n",
-			   htt_stats_buf->num_rt_sched_algo_trigger);
+			 htt_stats_buf->num_rt_sched_algo_trigger);
 	len += scnprintf(buf + len, buf_len - len, "num_tqm_sched_algo_trigger = %u\n",
-			   htt_stats_buf->num_tqm_sched_algo_trigger);
+			 htt_stats_buf->num_tqm_sched_algo_trigger);
 	len += scnprintf(buf + len, buf_len - len, "notify_sched = %u\n",
-			   htt_stats_buf->notify_sched);
+			 htt_stats_buf->notify_sched);
 	len += scnprintf(buf + len, buf_len - len, "dur_based_sendn_term = %u\n",
-			   htt_stats_buf->dur_based_sendn_term);
+			 htt_stats_buf->dur_based_sendn_term);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -1880,9 +1879,9 @@ static inline void htt_print_stats_tx_sc
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_STATS_TX_SCHED_CMN_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
-			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+			 u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
 	len += scnprintf(buf + len, buf_len - len, "current_timestamp = %u\n",
-			   htt_stats_buf->current_timestamp);
+			 htt_stats_buf->current_timestamp);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -1929,7 +1928,7 @@ htt_print_tx_tqm_list_mpdu_stats_tlv_v(c
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_TX_TQM_MAX_LIST_MPDU_END_REASON);
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_TX_TQM_LIST_MPDU_STATS_TLV_V:\n");
+			 "HTT_TX_TQM_LIST_MPDU_STATS_TLV_V:\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->list_mpdu_end_reason,
 			   "list_mpdu_end_reason", num_elems, "\n\n");
@@ -1978,67 +1977,67 @@ htt_print_tx_tqm_pdev_stats_tlv_v(const
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_TQM_PDEV_STATS_TLV_V:\n");
 	len += scnprintf(buf + len, buf_len - len, "msdu_count = %u\n",
-			   htt_stats_buf->msdu_count);
+			 htt_stats_buf->msdu_count);
 	len += scnprintf(buf + len, buf_len - len, "mpdu_count = %u\n",
-			   htt_stats_buf->mpdu_count);
+			 htt_stats_buf->mpdu_count);
 	len += scnprintf(buf + len, buf_len - len, "remove_msdu = %u\n",
-			   htt_stats_buf->remove_msdu);
+			 htt_stats_buf->remove_msdu);
 	len += scnprintf(buf + len, buf_len - len, "remove_mpdu = %u\n",
-			   htt_stats_buf->remove_mpdu);
+			 htt_stats_buf->remove_mpdu);
 	len += scnprintf(buf + len, buf_len - len, "remove_msdu_ttl = %u\n",
-			   htt_stats_buf->remove_msdu_ttl);
+			 htt_stats_buf->remove_msdu_ttl);
 	len += scnprintf(buf + len, buf_len - len, "send_bar = %u\n",
-			   htt_stats_buf->send_bar);
+			 htt_stats_buf->send_bar);
 	len += scnprintf(buf + len, buf_len - len, "bar_sync = %u\n",
-			   htt_stats_buf->bar_sync);
+			 htt_stats_buf->bar_sync);
 	len += scnprintf(buf + len, buf_len - len, "notify_mpdu = %u\n",
-			   htt_stats_buf->notify_mpdu);
+			 htt_stats_buf->notify_mpdu);
 	len += scnprintf(buf + len, buf_len - len, "sync_cmd = %u\n",
-			   htt_stats_buf->sync_cmd);
+			 htt_stats_buf->sync_cmd);
 	len += scnprintf(buf + len, buf_len - len, "write_cmd = %u\n",
-			   htt_stats_buf->write_cmd);
+			 htt_stats_buf->write_cmd);
 	len += scnprintf(buf + len, buf_len - len, "hwsch_trigger = %u\n",
-			   htt_stats_buf->hwsch_trigger);
+			 htt_stats_buf->hwsch_trigger);
 	len += scnprintf(buf + len, buf_len - len, "ack_tlv_proc = %u\n",
-			   htt_stats_buf->ack_tlv_proc);
+			 htt_stats_buf->ack_tlv_proc);
 	len += scnprintf(buf + len, buf_len - len, "gen_mpdu_cmd = %u\n",
-			   htt_stats_buf->gen_mpdu_cmd);
+			 htt_stats_buf->gen_mpdu_cmd);
 	len += scnprintf(buf + len, buf_len - len, "gen_list_cmd = %u\n",
-			   htt_stats_buf->gen_list_cmd);
+			 htt_stats_buf->gen_list_cmd);
 	len += scnprintf(buf + len, buf_len - len, "remove_mpdu_cmd = %u\n",
-			   htt_stats_buf->remove_mpdu_cmd);
+			 htt_stats_buf->remove_mpdu_cmd);
 	len += scnprintf(buf + len, buf_len - len, "remove_mpdu_tried_cmd = %u\n",
-			   htt_stats_buf->remove_mpdu_tried_cmd);
+			 htt_stats_buf->remove_mpdu_tried_cmd);
 	len += scnprintf(buf + len, buf_len - len, "mpdu_queue_stats_cmd = %u\n",
-			   htt_stats_buf->mpdu_queue_stats_cmd);
+			 htt_stats_buf->mpdu_queue_stats_cmd);
 	len += scnprintf(buf + len, buf_len - len, "mpdu_head_info_cmd = %u\n",
-			   htt_stats_buf->mpdu_head_info_cmd);
+			 htt_stats_buf->mpdu_head_info_cmd);
 	len += scnprintf(buf + len, buf_len - len, "msdu_flow_stats_cmd = %u\n",
-			   htt_stats_buf->msdu_flow_stats_cmd);
+			 htt_stats_buf->msdu_flow_stats_cmd);
 	len += scnprintf(buf + len, buf_len - len, "remove_msdu_cmd = %u\n",
-			   htt_stats_buf->remove_msdu_cmd);
+			 htt_stats_buf->remove_msdu_cmd);
 	len += scnprintf(buf + len, buf_len - len, "remove_msdu_ttl_cmd = %u\n",
-			   htt_stats_buf->remove_msdu_ttl_cmd);
+			 htt_stats_buf->remove_msdu_ttl_cmd);
 	len += scnprintf(buf + len, buf_len - len, "flush_cache_cmd = %u\n",
-			   htt_stats_buf->flush_cache_cmd);
+			 htt_stats_buf->flush_cache_cmd);
 	len += scnprintf(buf + len, buf_len - len, "update_mpduq_cmd = %u\n",
-			   htt_stats_buf->update_mpduq_cmd);
+			 htt_stats_buf->update_mpduq_cmd);
 	len += scnprintf(buf + len, buf_len - len, "enqueue = %u\n",
-			   htt_stats_buf->enqueue);
+			 htt_stats_buf->enqueue);
 	len += scnprintf(buf + len, buf_len - len, "enqueue_notify = %u\n",
-			   htt_stats_buf->enqueue_notify);
+			 htt_stats_buf->enqueue_notify);
 	len += scnprintf(buf + len, buf_len - len, "notify_mpdu_at_head = %u\n",
-			   htt_stats_buf->notify_mpdu_at_head);
+			 htt_stats_buf->notify_mpdu_at_head);
 	len += scnprintf(buf + len, buf_len - len, "notify_mpdu_state_valid = %u\n",
-			   htt_stats_buf->notify_mpdu_state_valid);
+			 htt_stats_buf->notify_mpdu_state_valid);
 	len += scnprintf(buf + len, buf_len - len, "sched_udp_notify1 = %u\n",
-			   htt_stats_buf->sched_udp_notify1);
+			 htt_stats_buf->sched_udp_notify1);
 	len += scnprintf(buf + len, buf_len - len, "sched_udp_notify2 = %u\n",
-			   htt_stats_buf->sched_udp_notify2);
+			 htt_stats_buf->sched_udp_notify2);
 	len += scnprintf(buf + len, buf_len - len, "sched_nonudp_notify1 = %u\n",
-			   htt_stats_buf->sched_nonudp_notify1);
+			 htt_stats_buf->sched_nonudp_notify1);
 	len += scnprintf(buf + len, buf_len - len, "sched_nonudp_notify2 = %u\n",
-			   htt_stats_buf->sched_nonudp_notify2);
+			 htt_stats_buf->sched_nonudp_notify2);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2059,21 +2058,21 @@ static inline void htt_print_tx_tqm_cmn_
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_TQM_CMN_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
-			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+			 u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
 	len += scnprintf(buf + len, buf_len - len, "max_cmdq_id = %u\n",
-			   htt_stats_buf->max_cmdq_id);
+			 htt_stats_buf->max_cmdq_id);
 	len += scnprintf(buf + len, buf_len - len, "list_mpdu_cnt_hist_intvl = %u\n",
-			   htt_stats_buf->list_mpdu_cnt_hist_intvl);
+			 htt_stats_buf->list_mpdu_cnt_hist_intvl);
 	len += scnprintf(buf + len, buf_len - len, "add_msdu = %u\n",
-			   htt_stats_buf->add_msdu);
+			 htt_stats_buf->add_msdu);
 	len += scnprintf(buf + len, buf_len - len, "q_empty = %u\n",
-			   htt_stats_buf->q_empty);
+			 htt_stats_buf->q_empty);
 	len += scnprintf(buf + len, buf_len - len, "q_not_empty = %u\n",
-			   htt_stats_buf->q_not_empty);
+			 htt_stats_buf->q_not_empty);
 	len += scnprintf(buf + len, buf_len - len, "drop_notification = %u\n",
-			   htt_stats_buf->drop_notification);
+			 htt_stats_buf->drop_notification);
 	len += scnprintf(buf + len, buf_len - len, "desc_threshold = %u\n",
-			   htt_stats_buf->desc_threshold);
+			 htt_stats_buf->desc_threshold);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2093,11 +2092,11 @@ static inline void htt_print_tx_tqm_erro
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_TQM_ERROR_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "q_empty_failure = %u\n",
-			   htt_stats_buf->q_empty_failure);
+			 htt_stats_buf->q_empty_failure);
 	len += scnprintf(buf + len, buf_len - len, "q_not_empty_failure = %u\n",
-			   htt_stats_buf->q_not_empty_failure);
+			 htt_stats_buf->q_not_empty_failure);
 	len += scnprintf(buf + len, buf_len - len, "add_msdu_failure = %u\n",
-			   htt_stats_buf->add_msdu_failure);
+			 htt_stats_buf->add_msdu_failure);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2122,27 +2121,27 @@ static inline void htt_print_tx_tqm_cmdq
 	len += scnprintf(buf + len, buf_len - len, "cmdq_id = %u\n\n",
 			 u32_get_bits(mac_id_word, HTT_TX_TQM_CMDQ_STATUS_CMDQ_ID));
 	len += scnprintf(buf + len, buf_len - len, "sync_cmd = %u\n",
-			   htt_stats_buf->sync_cmd);
+			 htt_stats_buf->sync_cmd);
 	len += scnprintf(buf + len, buf_len - len, "write_cmd = %u\n",
-			   htt_stats_buf->write_cmd);
+			 htt_stats_buf->write_cmd);
 	len += scnprintf(buf + len, buf_len - len, "gen_mpdu_cmd = %u\n",
-			   htt_stats_buf->gen_mpdu_cmd);
+			 htt_stats_buf->gen_mpdu_cmd);
 	len += scnprintf(buf + len, buf_len - len, "mpdu_queue_stats_cmd = %u\n",
-			   htt_stats_buf->mpdu_queue_stats_cmd);
+			 htt_stats_buf->mpdu_queue_stats_cmd);
 	len += scnprintf(buf + len, buf_len - len, "mpdu_head_info_cmd = %u\n",
-			   htt_stats_buf->mpdu_head_info_cmd);
+			 htt_stats_buf->mpdu_head_info_cmd);
 	len += scnprintf(buf + len, buf_len - len, "msdu_flow_stats_cmd = %u\n",
-			   htt_stats_buf->msdu_flow_stats_cmd);
+			 htt_stats_buf->msdu_flow_stats_cmd);
 	len += scnprintf(buf + len, buf_len - len, "remove_mpdu_cmd = %u\n",
-			   htt_stats_buf->remove_mpdu_cmd);
+			 htt_stats_buf->remove_mpdu_cmd);
 	len += scnprintf(buf + len, buf_len - len, "remove_msdu_cmd = %u\n",
-			   htt_stats_buf->remove_msdu_cmd);
+			 htt_stats_buf->remove_msdu_cmd);
 	len += scnprintf(buf + len, buf_len - len, "flush_cache_cmd = %u\n",
-			   htt_stats_buf->flush_cache_cmd);
+			 htt_stats_buf->flush_cache_cmd);
 	len += scnprintf(buf + len, buf_len - len, "update_mpduq_cmd = %u\n",
-			   htt_stats_buf->update_mpduq_cmd);
+			 htt_stats_buf->update_mpduq_cmd);
 	len += scnprintf(buf + len, buf_len - len, "update_msduq_cmd = %u\n",
-			   htt_stats_buf->update_msduq_cmd);
+			 htt_stats_buf->update_msduq_cmd);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2162,19 +2161,19 @@ htt_print_tx_de_eapol_packets_stats_tlv(
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_TX_DE_EAPOL_PACKETS_STATS_TLV:\n");
+			 "HTT_TX_DE_EAPOL_PACKETS_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "m1_packets = %u\n",
-			   htt_stats_buf->m1_packets);
+			 htt_stats_buf->m1_packets);
 	len += scnprintf(buf + len, buf_len - len, "m2_packets = %u\n",
-			   htt_stats_buf->m2_packets);
+			 htt_stats_buf->m2_packets);
 	len += scnprintf(buf + len, buf_len - len, "m3_packets = %u\n",
-			   htt_stats_buf->m3_packets);
+			 htt_stats_buf->m3_packets);
 	len += scnprintf(buf + len, buf_len - len, "m4_packets = %u\n",
-			   htt_stats_buf->m4_packets);
+			 htt_stats_buf->m4_packets);
 	len += scnprintf(buf + len, buf_len - len, "g1_packets = %u\n",
-			   htt_stats_buf->g1_packets);
+			 htt_stats_buf->g1_packets);
 	len += scnprintf(buf + len, buf_len - len, "g2_packets = %u\n",
-			   htt_stats_buf->g2_packets);
+			 htt_stats_buf->g2_packets);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2194,33 +2193,33 @@ htt_print_tx_de_classify_failed_stats_tl
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_TX_DE_CLASSIFY_FAILED_STATS_TLV:\n");
+			 "HTT_TX_DE_CLASSIFY_FAILED_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "ap_bss_peer_not_found = %u\n",
-			   htt_stats_buf->ap_bss_peer_not_found);
+			 htt_stats_buf->ap_bss_peer_not_found);
 	len += scnprintf(buf + len, buf_len - len, "ap_bcast_mcast_no_peer = %u\n",
-			   htt_stats_buf->ap_bcast_mcast_no_peer);
+			 htt_stats_buf->ap_bcast_mcast_no_peer);
 	len += scnprintf(buf + len, buf_len - len, "sta_delete_in_progress = %u\n",
-			   htt_stats_buf->sta_delete_in_progress);
+			 htt_stats_buf->sta_delete_in_progress);
 	len += scnprintf(buf + len, buf_len - len, "ibss_no_bss_peer = %u\n",
-			   htt_stats_buf->ibss_no_bss_peer);
+			 htt_stats_buf->ibss_no_bss_peer);
 	len += scnprintf(buf + len, buf_len - len, "invalid_vdev_type = %u\n",
-			   htt_stats_buf->invalid_vdev_type);
+			 htt_stats_buf->invalid_vdev_type);
 	len += scnprintf(buf + len, buf_len - len, "invalid_ast_peer_entry = %u\n",
-			   htt_stats_buf->invalid_ast_peer_entry);
+			 htt_stats_buf->invalid_ast_peer_entry);
 	len += scnprintf(buf + len, buf_len - len, "peer_entry_invalid = %u\n",
-			   htt_stats_buf->peer_entry_invalid);
+			 htt_stats_buf->peer_entry_invalid);
 	len += scnprintf(buf + len, buf_len - len, "ethertype_not_ip = %u\n",
-			   htt_stats_buf->ethertype_not_ip);
+			 htt_stats_buf->ethertype_not_ip);
 	len += scnprintf(buf + len, buf_len - len, "eapol_lookup_failed = %u\n",
-			   htt_stats_buf->eapol_lookup_failed);
+			 htt_stats_buf->eapol_lookup_failed);
 	len += scnprintf(buf + len, buf_len - len, "qpeer_not_allow_data = %u\n",
-			   htt_stats_buf->qpeer_not_allow_data);
+			 htt_stats_buf->qpeer_not_allow_data);
 	len += scnprintf(buf + len, buf_len - len, "fse_tid_override = %u\n",
-			   htt_stats_buf->fse_tid_override);
+			 htt_stats_buf->fse_tid_override);
 	len += scnprintf(buf + len, buf_len - len, "ipv6_jumbogram_zero_length = %u\n",
-			   htt_stats_buf->ipv6_jumbogram_zero_length);
+			 htt_stats_buf->ipv6_jumbogram_zero_length);
 	len += scnprintf(buf + len, buf_len - len, "qos_to_non_qos_in_prog = %u\n",
-			   htt_stats_buf->qos_to_non_qos_in_prog);
+			 htt_stats_buf->qos_to_non_qos_in_prog);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2241,71 +2240,71 @@ htt_print_tx_de_classify_stats_tlv(const
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_DE_CLASSIFY_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "arp_packets = %u\n",
-			   htt_stats_buf->arp_packets);
+			 htt_stats_buf->arp_packets);
 	len += scnprintf(buf + len, buf_len - len, "igmp_packets = %u\n",
-			   htt_stats_buf->igmp_packets);
+			 htt_stats_buf->igmp_packets);
 	len += scnprintf(buf + len, buf_len - len, "dhcp_packets = %u\n",
-			   htt_stats_buf->dhcp_packets);
+			 htt_stats_buf->dhcp_packets);
 	len += scnprintf(buf + len, buf_len - len, "host_inspected = %u\n",
-			   htt_stats_buf->host_inspected);
+			 htt_stats_buf->host_inspected);
 	len += scnprintf(buf + len, buf_len - len, "htt_included = %u\n",
-			   htt_stats_buf->htt_included);
+			 htt_stats_buf->htt_included);
 	len += scnprintf(buf + len, buf_len - len, "htt_valid_mcs = %u\n",
-			   htt_stats_buf->htt_valid_mcs);
+			 htt_stats_buf->htt_valid_mcs);
 	len += scnprintf(buf + len, buf_len - len, "htt_valid_nss = %u\n",
-			   htt_stats_buf->htt_valid_nss);
+			 htt_stats_buf->htt_valid_nss);
 	len += scnprintf(buf + len, buf_len - len, "htt_valid_preamble_type = %u\n",
-			   htt_stats_buf->htt_valid_preamble_type);
+			 htt_stats_buf->htt_valid_preamble_type);
 	len += scnprintf(buf + len, buf_len - len, "htt_valid_chainmask = %u\n",
-			   htt_stats_buf->htt_valid_chainmask);
+			 htt_stats_buf->htt_valid_chainmask);
 	len += scnprintf(buf + len, buf_len - len, "htt_valid_guard_interval = %u\n",
-			   htt_stats_buf->htt_valid_guard_interval);
+			 htt_stats_buf->htt_valid_guard_interval);
 	len += scnprintf(buf + len, buf_len - len, "htt_valid_retries = %u\n",
-			   htt_stats_buf->htt_valid_retries);
+			 htt_stats_buf->htt_valid_retries);
 	len += scnprintf(buf + len, buf_len - len, "htt_valid_bw_info = %u\n",
-			   htt_stats_buf->htt_valid_bw_info);
+			 htt_stats_buf->htt_valid_bw_info);
 	len += scnprintf(buf + len, buf_len - len, "htt_valid_power = %u\n",
-			   htt_stats_buf->htt_valid_power);
+			 htt_stats_buf->htt_valid_power);
 	len += scnprintf(buf + len, buf_len - len, "htt_valid_key_flags = 0x%x\n",
-			   htt_stats_buf->htt_valid_key_flags);
+			 htt_stats_buf->htt_valid_key_flags);
 	len += scnprintf(buf + len, buf_len - len, "htt_valid_no_encryption = %u\n",
-			   htt_stats_buf->htt_valid_no_encryption);
+			 htt_stats_buf->htt_valid_no_encryption);
 	len += scnprintf(buf + len, buf_len - len, "fse_entry_count = %u\n",
-			   htt_stats_buf->fse_entry_count);
+			 htt_stats_buf->fse_entry_count);
 	len += scnprintf(buf + len, buf_len - len, "fse_priority_be = %u\n",
-			   htt_stats_buf->fse_priority_be);
+			 htt_stats_buf->fse_priority_be);
 	len += scnprintf(buf + len, buf_len - len, "fse_priority_high = %u\n",
-			   htt_stats_buf->fse_priority_high);
+			 htt_stats_buf->fse_priority_high);
 	len += scnprintf(buf + len, buf_len - len, "fse_priority_low = %u\n",
-			   htt_stats_buf->fse_priority_low);
+			 htt_stats_buf->fse_priority_low);
 	len += scnprintf(buf + len, buf_len - len, "fse_traffic_ptrn_be = %u\n",
-			   htt_stats_buf->fse_traffic_ptrn_be);
+			 htt_stats_buf->fse_traffic_ptrn_be);
 	len += scnprintf(buf + len, buf_len - len, "fse_traffic_ptrn_over_sub = %u\n",
-			   htt_stats_buf->fse_traffic_ptrn_over_sub);
+			 htt_stats_buf->fse_traffic_ptrn_over_sub);
 	len += scnprintf(buf + len, buf_len - len, "fse_traffic_ptrn_bursty = %u\n",
-			   htt_stats_buf->fse_traffic_ptrn_bursty);
+			 htt_stats_buf->fse_traffic_ptrn_bursty);
 	len += scnprintf(buf + len, buf_len - len, "fse_traffic_ptrn_interactive = %u\n",
-			   htt_stats_buf->fse_traffic_ptrn_interactive);
+			 htt_stats_buf->fse_traffic_ptrn_interactive);
 	len += scnprintf(buf + len, buf_len - len, "fse_traffic_ptrn_periodic = %u\n",
-			   htt_stats_buf->fse_traffic_ptrn_periodic);
+			 htt_stats_buf->fse_traffic_ptrn_periodic);
 	len += scnprintf(buf + len, buf_len - len, "fse_hwqueue_alloc = %u\n",
-			   htt_stats_buf->fse_hwqueue_alloc);
+			 htt_stats_buf->fse_hwqueue_alloc);
 	len += scnprintf(buf + len, buf_len - len, "fse_hwqueue_created = %u\n",
-			   htt_stats_buf->fse_hwqueue_created);
+			 htt_stats_buf->fse_hwqueue_created);
 	len += scnprintf(buf + len, buf_len - len, "fse_hwqueue_send_to_host = %u\n",
-			   htt_stats_buf->fse_hwqueue_send_to_host);
+			 htt_stats_buf->fse_hwqueue_send_to_host);
 	len += scnprintf(buf + len, buf_len - len, "mcast_entry = %u\n",
-			   htt_stats_buf->mcast_entry);
+			 htt_stats_buf->mcast_entry);
 	len += scnprintf(buf + len, buf_len - len, "bcast_entry = %u\n",
-			   htt_stats_buf->bcast_entry);
+			 htt_stats_buf->bcast_entry);
 	len += scnprintf(buf + len, buf_len - len, "htt_update_peer_cache = %u\n",
-			   htt_stats_buf->htt_update_peer_cache);
+			 htt_stats_buf->htt_update_peer_cache);
 	len += scnprintf(buf + len, buf_len - len, "htt_learning_frame = %u\n",
-			   htt_stats_buf->htt_learning_frame);
+			 htt_stats_buf->htt_learning_frame);
 	len += scnprintf(buf + len, buf_len - len, "fse_invalid_peer = %u\n",
-			   htt_stats_buf->fse_invalid_peer);
+			 htt_stats_buf->fse_invalid_peer);
 	len += scnprintf(buf + len, buf_len - len, "mec_notify = %u\n",
-			   htt_stats_buf->mec_notify);
+			 htt_stats_buf->mec_notify);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2325,23 +2324,23 @@ htt_print_tx_de_classify_status_stats_tl
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_TX_DE_CLASSIFY_STATUS_STATS_TLV:\n");
+			 "HTT_TX_DE_CLASSIFY_STATUS_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "eok = %u\n",
-			   htt_stats_buf->eok);
+			 htt_stats_buf->eok);
 	len += scnprintf(buf + len, buf_len - len, "classify_done = %u\n",
-			   htt_stats_buf->classify_done);
+			 htt_stats_buf->classify_done);
 	len += scnprintf(buf + len, buf_len - len, "lookup_failed = %u\n",
-			   htt_stats_buf->lookup_failed);
+			 htt_stats_buf->lookup_failed);
 	len += scnprintf(buf + len, buf_len - len, "send_host_dhcp = %u\n",
-			   htt_stats_buf->send_host_dhcp);
+			 htt_stats_buf->send_host_dhcp);
 	len += scnprintf(buf + len, buf_len - len, "send_host_mcast = %u\n",
-			   htt_stats_buf->send_host_mcast);
+			 htt_stats_buf->send_host_mcast);
 	len += scnprintf(buf + len, buf_len - len, "send_host_unknown_dest = %u\n",
-			   htt_stats_buf->send_host_unknown_dest);
+			 htt_stats_buf->send_host_unknown_dest);
 	len += scnprintf(buf + len, buf_len - len, "send_host = %u\n",
-			   htt_stats_buf->send_host);
+			 htt_stats_buf->send_host);
 	len += scnprintf(buf + len, buf_len - len, "status_invalid = %u\n",
-			   htt_stats_buf->status_invalid);
+			 htt_stats_buf->status_invalid);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2361,13 +2360,13 @@ htt_print_tx_de_enqueue_packets_stats_tl
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_TX_DE_ENQUEUE_PACKETS_STATS_TLV:\n");
+			 "HTT_TX_DE_ENQUEUE_PACKETS_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "enqueued_pkts = %u\n",
-			htt_stats_buf->enqueued_pkts);
+			 htt_stats_buf->enqueued_pkts);
 	len += scnprintf(buf + len, buf_len - len, "to_tqm = %u\n",
-			htt_stats_buf->to_tqm);
+			 htt_stats_buf->to_tqm);
 	len += scnprintf(buf + len, buf_len - len, "to_tqm_bypass = %u\n",
-			htt_stats_buf->to_tqm_bypass);
+			 htt_stats_buf->to_tqm_bypass);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2387,13 +2386,13 @@ htt_print_tx_de_enqueue_discard_stats_tl
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_TX_DE_ENQUEUE_DISCARD_STATS_TLV:\n");
+			 "HTT_TX_DE_ENQUEUE_DISCARD_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "discarded_pkts = %u\n",
-			   htt_stats_buf->discarded_pkts);
+			 htt_stats_buf->discarded_pkts);
 	len += scnprintf(buf + len, buf_len - len, "local_frames = %u\n",
-			   htt_stats_buf->local_frames);
+			 htt_stats_buf->local_frames);
 	len += scnprintf(buf + len, buf_len - len, "is_ext_msdu = %u\n",
-			   htt_stats_buf->is_ext_msdu);
+			 htt_stats_buf->is_ext_msdu);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2413,15 +2412,15 @@ static inline void htt_print_tx_de_compl
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_DE_COMPL_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "tcl_dummy_frame = %u\n",
-			   htt_stats_buf->tcl_dummy_frame);
+			 htt_stats_buf->tcl_dummy_frame);
 	len += scnprintf(buf + len, buf_len - len, "tqm_dummy_frame = %u\n",
-			   htt_stats_buf->tqm_dummy_frame);
+			 htt_stats_buf->tqm_dummy_frame);
 	len += scnprintf(buf + len, buf_len - len, "tqm_notify_frame = %u\n",
-			   htt_stats_buf->tqm_notify_frame);
+			 htt_stats_buf->tqm_notify_frame);
 	len += scnprintf(buf + len, buf_len - len, "fw2wbm_enq = %u\n",
-			   htt_stats_buf->fw2wbm_enq);
+			 htt_stats_buf->fw2wbm_enq);
 	len += scnprintf(buf + len, buf_len - len, "tqm_bypass_frame = %u\n",
-			   htt_stats_buf->tqm_bypass_frame);
+			 htt_stats_buf->tqm_bypass_frame);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2443,7 +2442,7 @@ htt_print_tx_de_fw2wbm_ring_full_hist_tl
 	u16  num_elements = tag_len >> 2;
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_TX_DE_FW2WBM_RING_FULL_HIST_TLV\n");
+			 "HTT_TX_DE_FW2WBM_RING_FULL_HIST_TLV\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->fw2wbm_ring_full_hist,
 			   "fw2wbm_ring_full_hist", num_elements, "\n\n");
@@ -2467,19 +2466,19 @@ htt_print_tx_de_cmn_stats_tlv(const void
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_DE_CMN_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
-			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+			 u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
 	len += scnprintf(buf + len, buf_len - len, "tcl2fw_entry_count = %u\n",
-			   htt_stats_buf->tcl2fw_entry_count);
+			 htt_stats_buf->tcl2fw_entry_count);
 	len += scnprintf(buf + len, buf_len - len, "not_to_fw = %u\n",
-			   htt_stats_buf->not_to_fw);
+			 htt_stats_buf->not_to_fw);
 	len += scnprintf(buf + len, buf_len - len, "invalid_pdev_vdev_peer = %u\n",
-			   htt_stats_buf->invalid_pdev_vdev_peer);
+			 htt_stats_buf->invalid_pdev_vdev_peer);
 	len += scnprintf(buf + len, buf_len - len, "tcl_res_invalid_addrx = %u\n",
-			   htt_stats_buf->tcl_res_invalid_addrx);
+			 htt_stats_buf->tcl_res_invalid_addrx);
 	len += scnprintf(buf + len, buf_len - len, "wbm2fw_entry_count = %u\n",
-			   htt_stats_buf->wbm2fw_entry_count);
+			 htt_stats_buf->wbm2fw_entry_count);
 	len += scnprintf(buf + len, buf_len - len, "invalid_pdev = %u\n",
-			   htt_stats_buf->invalid_pdev);
+			 htt_stats_buf->invalid_pdev);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2503,9 +2502,9 @@ static inline void htt_print_ring_if_sta
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_RING_IF_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "base_addr = %u\n",
-			   htt_stats_buf->base_addr);
+			 htt_stats_buf->base_addr);
 	len += scnprintf(buf + len, buf_len - len, "elem_size = %u\n",
-			   htt_stats_buf->elem_size);
+			 htt_stats_buf->elem_size);
 	len += scnprintf(buf + len, buf_len - len, "num_elems = %lu\n",
 			 (unsigned long)u32_get_bits(tail_idx,
 						     HTT_RING_IF_STATS_NUM_ELEMS));
@@ -2533,13 +2532,13 @@ static inline void htt_print_ring_if_sta
 			 (unsigned long)u32_get_bits(thresh,
 						HTT_RING_IF_STATS_HWM_THRESH));
 	len += scnprintf(buf + len, buf_len - len, "overrun_hit_count = %u\n",
-			   htt_stats_buf->overrun_hit_count);
+			 htt_stats_buf->overrun_hit_count);
 	len += scnprintf(buf + len, buf_len - len, "underrun_hit_count = %u\n",
-			   htt_stats_buf->underrun_hit_count);
+			 htt_stats_buf->underrun_hit_count);
 	len += scnprintf(buf + len, buf_len - len, "prod_blockwait_count = %u\n",
-			   htt_stats_buf->prod_blockwait_count);
+			 htt_stats_buf->prod_blockwait_count);
 	len += scnprintf(buf + len, buf_len - len, "cons_blockwait_count = %u\n",
-			   htt_stats_buf->cons_blockwait_count);
+			 htt_stats_buf->cons_blockwait_count);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->low_wm_hit_count,
 			   "low_wm_hit_count", HTT_STATS_LOW_WM_BINS, "\n");
@@ -2567,7 +2566,7 @@ static inline void htt_print_ring_if_cmn
 	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
 			 u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
 	len += scnprintf(buf + len, buf_len - len, "num_records = %u\n",
-			   htt_stats_buf->num_records);
+			 htt_stats_buf->num_records);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2610,19 +2609,19 @@ static inline void htt_print_sfm_client_
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_SFM_CLIENT_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "client_id = %u\n",
-			   htt_stats_buf->client_id);
+			 htt_stats_buf->client_id);
 	len += scnprintf(buf + len, buf_len - len, "buf_min = %u\n",
-			   htt_stats_buf->buf_min);
+			 htt_stats_buf->buf_min);
 	len += scnprintf(buf + len, buf_len - len, "buf_max = %u\n",
-			   htt_stats_buf->buf_max);
+			 htt_stats_buf->buf_max);
 	len += scnprintf(buf + len, buf_len - len, "buf_busy = %u\n",
-			   htt_stats_buf->buf_busy);
+			 htt_stats_buf->buf_busy);
 	len += scnprintf(buf + len, buf_len - len, "buf_alloc = %u\n",
-			   htt_stats_buf->buf_alloc);
+			 htt_stats_buf->buf_alloc);
 	len += scnprintf(buf + len, buf_len - len, "buf_avail = %u\n",
-			   htt_stats_buf->buf_avail);
+			 htt_stats_buf->buf_avail);
 	len += scnprintf(buf + len, buf_len - len, "num_users = %u\n",
-			   htt_stats_buf->num_users);
+			 htt_stats_buf->num_users);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2643,15 +2642,15 @@ static inline void htt_print_sfm_cmn_tlv
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_SFM_CMN_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
-			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+			 u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
 	len += scnprintf(buf + len, buf_len - len, "buf_total = %u\n",
-			   htt_stats_buf->buf_total);
+			 htt_stats_buf->buf_total);
 	len += scnprintf(buf + len, buf_len - len, "mem_empty = %u\n",
-			   htt_stats_buf->mem_empty);
+			 htt_stats_buf->mem_empty);
 	len += scnprintf(buf + len, buf_len - len, "deallocate_bufs = %u\n",
-			   htt_stats_buf->deallocate_bufs);
+			 htt_stats_buf->deallocate_bufs);
 	len += scnprintf(buf + len, buf_len - len, "num_records = %u\n",
-			   htt_stats_buf->num_records);
+			 htt_stats_buf->num_records);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2684,13 +2683,13 @@ static inline void htt_print_sring_stats
 	len += scnprintf(buf + len, buf_len - len, "ep = %u\n",
 			 u32_get_bits(mac_id_word, HTT_SRING_STATS_EP));
 	len += scnprintf(buf + len, buf_len - len, "base_addr_lsb = 0x%x\n",
-			   htt_stats_buf->base_addr_lsb);
+			 htt_stats_buf->base_addr_lsb);
 	len += scnprintf(buf + len, buf_len - len, "base_addr_msb = 0x%x\n",
-			   htt_stats_buf->base_addr_msb);
+			 htt_stats_buf->base_addr_msb);
 	len += scnprintf(buf + len, buf_len - len, "ring_size = %u\n",
-			   htt_stats_buf->ring_size);
+			 htt_stats_buf->ring_size);
 	len += scnprintf(buf + len, buf_len - len, "elem_size = %u\n",
-			   htt_stats_buf->elem_size);
+			 htt_stats_buf->elem_size);
 	len += scnprintf(buf + len, buf_len - len, "num_avail_words = %u\n",
 			 u32_get_bits(avail_words, HTT_SRING_STATS_NUM_AVAIL_WORDS));
 	len += scnprintf(buf + len, buf_len - len, "num_valid_words = %u\n",
@@ -2726,7 +2725,7 @@ static inline void htt_print_sring_cmn_t
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_SRING_CMN_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "num_records = %u\n",
-			   htt_stats_buf->num_records);
+			 htt_stats_buf->num_records);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2756,40 +2755,40 @@ static inline void htt_print_tx_pdev_rat
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_PDEV_RATE_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
-			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+			 u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
 	len += scnprintf(buf + len, buf_len - len, "tx_ldpc = %u\n",
-			   htt_stats_buf->tx_ldpc);
+			 htt_stats_buf->tx_ldpc);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_tx_ldpc = %u\n",
-			   htt_stats_buf->ac_mu_mimo_tx_ldpc);
+			 htt_stats_buf->ac_mu_mimo_tx_ldpc);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_tx_ldpc = %u\n",
-			   htt_stats_buf->ax_mu_mimo_tx_ldpc);
+			 htt_stats_buf->ax_mu_mimo_tx_ldpc);
 	len += scnprintf(buf + len, buf_len - len, "ofdma_tx_ldpc = %u\n",
-			   htt_stats_buf->ofdma_tx_ldpc);
+			 htt_stats_buf->ofdma_tx_ldpc);
 	len += scnprintf(buf + len, buf_len - len, "rts_cnt = %u\n",
-			   htt_stats_buf->rts_cnt);
+			 htt_stats_buf->rts_cnt);
 	len += scnprintf(buf + len, buf_len - len, "rts_success = %u\n",
-			   htt_stats_buf->rts_success);
+			 htt_stats_buf->rts_success);
 	len += scnprintf(buf + len, buf_len - len, "ack_rssi = %u\n",
-			   htt_stats_buf->ack_rssi);
+			 htt_stats_buf->ack_rssi);
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "Legacy CCK Rates: 1 Mbps: %u, 2 Mbps: %u, 5.5 Mbps: %u, 11 Mbps: %u\n",
-			   htt_stats_buf->tx_legacy_cck_rate[0],
-			   htt_stats_buf->tx_legacy_cck_rate[1],
-			   htt_stats_buf->tx_legacy_cck_rate[2],
-			   htt_stats_buf->tx_legacy_cck_rate[3]);
-
-	len += scnprintf(buf + len, buf_len - len,
-			   "Legacy OFDM Rates: 6 Mbps: %u, 9 Mbps: %u, 12 Mbps: %u, 18 Mbps: %u\n"
-			   "                   24 Mbps: %u, 36 Mbps: %u, 48 Mbps: %u, 54 Mbps: %u\n",
-			   htt_stats_buf->tx_legacy_ofdm_rate[0],
-			   htt_stats_buf->tx_legacy_ofdm_rate[1],
-			   htt_stats_buf->tx_legacy_ofdm_rate[2],
-			   htt_stats_buf->tx_legacy_ofdm_rate[3],
-			   htt_stats_buf->tx_legacy_ofdm_rate[4],
-			   htt_stats_buf->tx_legacy_ofdm_rate[5],
-			   htt_stats_buf->tx_legacy_ofdm_rate[6],
-			   htt_stats_buf->tx_legacy_ofdm_rate[7]);
+			 "Legacy CCK Rates: 1 Mbps: %u, 2 Mbps: %u, 5.5 Mbps: %u, 11 Mbps: %u\n",
+			 htt_stats_buf->tx_legacy_cck_rate[0],
+			 htt_stats_buf->tx_legacy_cck_rate[1],
+			 htt_stats_buf->tx_legacy_cck_rate[2],
+			 htt_stats_buf->tx_legacy_cck_rate[3]);
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "Legacy OFDM Rates: 6 Mbps: %u, 9 Mbps: %u, 12 Mbps: %u, 18 Mbps: %u\n"
+			 "                   24 Mbps: %u, 36 Mbps: %u, 48 Mbps: %u, 54 Mbps: %u\n",
+			 htt_stats_buf->tx_legacy_ofdm_rate[0],
+			 htt_stats_buf->tx_legacy_ofdm_rate[1],
+			 htt_stats_buf->tx_legacy_ofdm_rate[2],
+			 htt_stats_buf->tx_legacy_ofdm_rate[3],
+			 htt_stats_buf->tx_legacy_ofdm_rate[4],
+			 htt_stats_buf->tx_legacy_ofdm_rate[5],
+			 htt_stats_buf->tx_legacy_ofdm_rate[6],
+			 htt_stats_buf->tx_legacy_ofdm_rate[7]);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->tx_mcs, "tx_mcs",
 			   HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
@@ -2946,21 +2945,21 @@ static inline void htt_print_rx_pdev_rat
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_RX_PDEV_RATE_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
-			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+			 u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
 	len += scnprintf(buf + len, buf_len - len, "nsts = %u\n",
-			   htt_stats_buf->nsts);
+			 htt_stats_buf->nsts);
 	len += scnprintf(buf + len, buf_len - len, "rx_ldpc = %u\n",
-			   htt_stats_buf->rx_ldpc);
+			 htt_stats_buf->rx_ldpc);
 	len += scnprintf(buf + len, buf_len - len, "rts_cnt = %u\n",
-			   htt_stats_buf->rts_cnt);
+			 htt_stats_buf->rts_cnt);
 	len += scnprintf(buf + len, buf_len - len, "rssi_mgmt = %u\n",
-			   htt_stats_buf->rssi_mgmt);
+			 htt_stats_buf->rssi_mgmt);
 	len += scnprintf(buf + len, buf_len - len, "rssi_data = %u\n",
-			   htt_stats_buf->rssi_data);
+			 htt_stats_buf->rssi_data);
 	len += scnprintf(buf + len, buf_len - len, "rssi_comb = %u\n",
-			   htt_stats_buf->rssi_comb);
+			 htt_stats_buf->rssi_comb);
 	len += scnprintf(buf + len, buf_len - len, "rssi_in_dbm = %d\n",
-			   htt_stats_buf->rssi_in_dbm);
+			 htt_stats_buf->rssi_in_dbm);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_mcs, "rx_mcs",
 			   HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
@@ -2974,10 +2973,10 @@ static inline void htt_print_rx_pdev_rat
 			   HTT_RX_PDEV_STATS_NUM_BW_COUNTERS, "\n");
 
 	len += scnprintf(buf + len, buf_len - len, "rx_evm_nss_count = %u\n",
-			htt_stats_buf->nss_count);
+			 htt_stats_buf->nss_count);
 
 	len += scnprintf(buf + len, buf_len - len, "rx_evm_pilot_count = %u\n",
-			htt_stats_buf->pilot_count);
+			 htt_stats_buf->pilot_count);
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++) {
 		len += scnprintf(buf + len, buf_len - len,
@@ -3020,15 +3019,15 @@ static inline void htt_print_rx_pdev_rat
 			   HTT_RX_PDEV_STATS_NUM_PREAMBLE_TYPES, "\n");
 
 	len += scnprintf(buf + len, buf_len - len, "rx_11ax_su_ext = %u\n",
-			   htt_stats_buf->rx_11ax_su_ext);
+			 htt_stats_buf->rx_11ax_su_ext);
 	len += scnprintf(buf + len, buf_len - len, "rx_11ac_mumimo = %u\n",
-			   htt_stats_buf->rx_11ac_mumimo);
+			 htt_stats_buf->rx_11ac_mumimo);
 	len += scnprintf(buf + len, buf_len - len, "rx_11ax_mumimo = %u\n",
-			   htt_stats_buf->rx_11ax_mumimo);
+			 htt_stats_buf->rx_11ax_mumimo);
 	len += scnprintf(buf + len, buf_len - len, "rx_11ax_ofdma = %u\n",
-			   htt_stats_buf->rx_11ax_ofdma);
+			 htt_stats_buf->rx_11ax_ofdma);
 	len += scnprintf(buf + len, buf_len - len, "txbf = %u\n",
-			   htt_stats_buf->txbf);
+			 htt_stats_buf->txbf);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_legacy_cck_rate,
 			   "rx_legacy_cck_rate",
@@ -3039,11 +3038,11 @@ static inline void htt_print_rx_pdev_rat
 			   HTT_RX_PDEV_STATS_NUM_LEGACY_OFDM_STATS, "\n");
 
 	len += scnprintf(buf + len, buf_len - len, "rx_active_dur_us_low = %u\n",
-			   htt_stats_buf->rx_active_dur_us_low);
+			 htt_stats_buf->rx_active_dur_us_low);
 	len += scnprintf(buf + len, buf_len - len, "rx_active_dur_us_high = %u\n",
-			htt_stats_buf->rx_active_dur_us_high);
+			 htt_stats_buf->rx_active_dur_us_high);
 	len += scnprintf(buf + len, buf_len - len, "rx_11ax_ul_ofdma = %u\n",
-			htt_stats_buf->rx_11ax_ul_ofdma);
+			 htt_stats_buf->rx_11ax_ul_ofdma);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ul_ofdma_rx_mcs,
 			   "ul_ofdma_rx_mcs",
@@ -3051,7 +3050,7 @@ static inline void htt_print_rx_pdev_rat
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
 		len += scnprintf(buf + len, buf_len - len, "ul_ofdma_rx_gi[%u] = %s\n",
-				   j, rx_gi[j]);
+				 j, rx_gi[j]);
 		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ul_ofdma_rx_gi[j], NULL,
 				   HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
 
@@ -3065,9 +3064,9 @@ static inline void htt_print_rx_pdev_rat
 			   HTT_RX_PDEV_STATS_NUM_BW_COUNTERS, "\n");
 
 	len += scnprintf(buf + len, buf_len - len, "ul_ofdma_rx_stbc = %u\n",
-			htt_stats_buf->ul_ofdma_rx_stbc);
+			 htt_stats_buf->ul_ofdma_rx_stbc);
 	len += scnprintf(buf + len, buf_len - len, "ul_ofdma_rx_ldpc = %u\n",
-			htt_stats_buf->ul_ofdma_rx_ldpc);
+			 htt_stats_buf->ul_ofdma_rx_ldpc);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_ulofdma_non_data_ppdu,
 			   "rx_ulofdma_non_data_ppdu",
@@ -3160,32 +3159,32 @@ static inline void htt_print_rx_soc_fw_s
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_RX_SOC_FW_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "fw_reo_ring_data_msdu = %u\n",
-			   htt_stats_buf->fw_reo_ring_data_msdu);
+			 htt_stats_buf->fw_reo_ring_data_msdu);
 	len += scnprintf(buf + len, buf_len - len, "fw_to_host_data_msdu_bcmc = %u\n",
-			   htt_stats_buf->fw_to_host_data_msdu_bcmc);
+			 htt_stats_buf->fw_to_host_data_msdu_bcmc);
 	len += scnprintf(buf + len, buf_len - len, "fw_to_host_data_msdu_uc = %u\n",
-			   htt_stats_buf->fw_to_host_data_msdu_uc);
+			 htt_stats_buf->fw_to_host_data_msdu_uc);
 	len += scnprintf(buf + len, buf_len - len,
-			   "ofld_remote_data_buf_recycle_cnt = %u\n",
-			   htt_stats_buf->ofld_remote_data_buf_recycle_cnt);
+			 "ofld_remote_data_buf_recycle_cnt = %u\n",
+			 htt_stats_buf->ofld_remote_data_buf_recycle_cnt);
 	len += scnprintf(buf + len, buf_len - len,
-			   "ofld_remote_free_buf_indication_cnt = %u\n",
-			   htt_stats_buf->ofld_remote_free_buf_indication_cnt);
+			 "ofld_remote_free_buf_indication_cnt = %u\n",
+			 htt_stats_buf->ofld_remote_free_buf_indication_cnt);
 	len += scnprintf(buf + len, buf_len - len,
-			   "ofld_buf_to_host_data_msdu_uc = %u\n",
-			   htt_stats_buf->ofld_buf_to_host_data_msdu_uc);
+			 "ofld_buf_to_host_data_msdu_uc = %u\n",
+			 htt_stats_buf->ofld_buf_to_host_data_msdu_uc);
 	len += scnprintf(buf + len, buf_len - len,
-			   "reo_fw_ring_to_host_data_msdu_uc = %u\n",
-			   htt_stats_buf->reo_fw_ring_to_host_data_msdu_uc);
+			 "reo_fw_ring_to_host_data_msdu_uc = %u\n",
+			 htt_stats_buf->reo_fw_ring_to_host_data_msdu_uc);
 	len += scnprintf(buf + len, buf_len - len, "wbm_sw_ring_reap = %u\n",
-			   htt_stats_buf->wbm_sw_ring_reap);
+			 htt_stats_buf->wbm_sw_ring_reap);
 	len += scnprintf(buf + len, buf_len - len, "wbm_forward_to_host_cnt = %u\n",
-			   htt_stats_buf->wbm_forward_to_host_cnt);
+			 htt_stats_buf->wbm_forward_to_host_cnt);
 	len += scnprintf(buf + len, buf_len - len, "wbm_target_recycle_cnt = %u\n",
-			   htt_stats_buf->wbm_target_recycle_cnt);
+			 htt_stats_buf->wbm_target_recycle_cnt);
 	len += scnprintf(buf + len, buf_len - len,
-			   "target_refill_ring_recycle_cnt = %u\n",
-			   htt_stats_buf->target_refill_ring_recycle_cnt);
+			 "target_refill_ring_recycle_cnt = %u\n",
+			 htt_stats_buf->target_refill_ring_recycle_cnt);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -3207,7 +3206,7 @@ htt_print_rx_soc_fw_refill_ring_empty_tl
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_RX_STATS_REFILL_MAX_RING);
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_RX_SOC_FW_REFILL_RING_EMPTY_TLV_V:\n");
+			 "HTT_RX_SOC_FW_REFILL_RING_EMPTY_TLV_V:\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->refill_ring_empty_cnt,
 			   "refill_ring_empty_cnt", num_elems, "\n\n");
@@ -3233,7 +3232,7 @@ htt_print_rx_soc_fw_refill_ring_num_rxdm
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_RX_RXDMA_MAX_ERR_CODE);
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_RX_SOC_FW_REFILL_RING_NUM_RXDMA_ERR_TLV_V:\n");
+			 "HTT_RX_SOC_FW_REFILL_RING_NUM_RXDMA_ERR_TLV_V:\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rxdma_err, "rxdma_err",
 			   num_elems, "\n\n");
@@ -3258,7 +3257,7 @@ htt_print_rx_soc_fw_refill_ring_num_reo_
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_RX_REO_MAX_ERR_CODE);
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_RX_SOC_FW_REFILL_RING_NUM_REO_ERR_TLV_V:\n");
+			 "HTT_RX_SOC_FW_REFILL_RING_NUM_REO_ERR_TLV_V:\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->reo_err, "reo_err",
 			   num_elems, "\n\n");
@@ -3282,25 +3281,25 @@ htt_print_rx_reo_debug_stats_tlv_v(const
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_RX_REO_RESOURCE_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "sample_id = %u\n",
-			   htt_stats_buf->sample_id);
+			 htt_stats_buf->sample_id);
 	len += scnprintf(buf + len, buf_len - len, "total_max = %u\n",
-			   htt_stats_buf->total_max);
+			 htt_stats_buf->total_max);
 	len += scnprintf(buf + len, buf_len - len, "total_avg = %u\n",
-			   htt_stats_buf->total_avg);
+			 htt_stats_buf->total_avg);
 	len += scnprintf(buf + len, buf_len - len, "total_sample = %u\n",
-			   htt_stats_buf->total_sample);
+			 htt_stats_buf->total_sample);
 	len += scnprintf(buf + len, buf_len - len, "non_zeros_avg = %u\n",
-			   htt_stats_buf->non_zeros_avg);
+			 htt_stats_buf->non_zeros_avg);
 	len += scnprintf(buf + len, buf_len - len, "non_zeros_sample = %u\n",
-			   htt_stats_buf->non_zeros_sample);
+			 htt_stats_buf->non_zeros_sample);
 	len += scnprintf(buf + len, buf_len - len, "last_non_zeros_max = %u\n",
-			   htt_stats_buf->last_non_zeros_max);
+			 htt_stats_buf->last_non_zeros_max);
 	len += scnprintf(buf + len, buf_len - len, "last_non_zeros_min %u\n",
-			   htt_stats_buf->last_non_zeros_min);
+			 htt_stats_buf->last_non_zeros_min);
 	len += scnprintf(buf + len, buf_len - len, "last_non_zeros_avg %u\n",
-			   htt_stats_buf->last_non_zeros_avg);
+			 htt_stats_buf->last_non_zeros_avg);
 	len += scnprintf(buf + len, buf_len - len, "last_non_zeros_sample %u\n",
-			   htt_stats_buf->last_non_zeros_sample);
+			 htt_stats_buf->last_non_zeros_sample);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -3322,7 +3321,7 @@ htt_print_rx_soc_fw_refill_ring_num_refi
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_RX_STATS_REFILL_MAX_RING);
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_RX_SOC_FW_REFILL_RING_NUM_REFILL_TLV_V:\n");
+			 "HTT_RX_SOC_FW_REFILL_RING_NUM_REFILL_TLV_V:\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->refill_ring_num_refill,
 			   "refill_ring_num_refill", num_elems, "\n\n");
@@ -3346,96 +3345,96 @@ static inline void htt_print_rx_pdev_fw_
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_RX_PDEV_FW_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
-			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+			 u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
 	len += scnprintf(buf + len, buf_len - len, "ppdu_recvd = %u\n",
-			   htt_stats_buf->ppdu_recvd);
+			 htt_stats_buf->ppdu_recvd);
 	len += scnprintf(buf + len, buf_len - len, "mpdu_cnt_fcs_ok = %u\n",
-			   htt_stats_buf->mpdu_cnt_fcs_ok);
+			 htt_stats_buf->mpdu_cnt_fcs_ok);
 	len += scnprintf(buf + len, buf_len - len, "mpdu_cnt_fcs_err = %u\n",
-			   htt_stats_buf->mpdu_cnt_fcs_err);
+			 htt_stats_buf->mpdu_cnt_fcs_err);
 	len += scnprintf(buf + len, buf_len - len, "tcp_msdu_cnt = %u\n",
-			   htt_stats_buf->tcp_msdu_cnt);
+			 htt_stats_buf->tcp_msdu_cnt);
 	len += scnprintf(buf + len, buf_len - len, "tcp_ack_msdu_cnt = %u\n",
-			   htt_stats_buf->tcp_ack_msdu_cnt);
+			 htt_stats_buf->tcp_ack_msdu_cnt);
 	len += scnprintf(buf + len, buf_len - len, "udp_msdu_cnt = %u\n",
-			   htt_stats_buf->udp_msdu_cnt);
+			 htt_stats_buf->udp_msdu_cnt);
 	len += scnprintf(buf + len, buf_len - len, "other_msdu_cnt = %u\n",
-			   htt_stats_buf->other_msdu_cnt);
+			 htt_stats_buf->other_msdu_cnt);
 	len += scnprintf(buf + len, buf_len - len, "fw_ring_mpdu_ind = %u\n",
-			   htt_stats_buf->fw_ring_mpdu_ind);
+			 htt_stats_buf->fw_ring_mpdu_ind);
 	len += scnprintf(buf + len, buf_len - len, "fw_ring_mcast_data_msdu = %u\n",
-			   htt_stats_buf->fw_ring_mcast_data_msdu);
+			 htt_stats_buf->fw_ring_mcast_data_msdu);
 	len += scnprintf(buf + len, buf_len - len, "fw_ring_bcast_data_msdu = %u\n",
-			   htt_stats_buf->fw_ring_bcast_data_msdu);
+			 htt_stats_buf->fw_ring_bcast_data_msdu);
 	len += scnprintf(buf + len, buf_len - len, "fw_ring_ucast_data_msdu = %u\n",
-			   htt_stats_buf->fw_ring_ucast_data_msdu);
+			 htt_stats_buf->fw_ring_ucast_data_msdu);
 	len += scnprintf(buf + len, buf_len - len, "fw_ring_null_data_msdu = %u\n",
-			   htt_stats_buf->fw_ring_null_data_msdu);
+			 htt_stats_buf->fw_ring_null_data_msdu);
 	len += scnprintf(buf + len, buf_len - len, "fw_ring_mpdu_drop = %u\n",
-			   htt_stats_buf->fw_ring_mpdu_drop);
+			 htt_stats_buf->fw_ring_mpdu_drop);
 	len += scnprintf(buf + len, buf_len - len, "ofld_local_data_ind_cnt = %u\n",
-			   htt_stats_buf->ofld_local_data_ind_cnt);
+			 htt_stats_buf->ofld_local_data_ind_cnt);
 	len += scnprintf(buf + len, buf_len - len,
-			   "ofld_local_data_buf_recycle_cnt = %u\n",
-			   htt_stats_buf->ofld_local_data_buf_recycle_cnt);
+			 "ofld_local_data_buf_recycle_cnt = %u\n",
+			 htt_stats_buf->ofld_local_data_buf_recycle_cnt);
 	len += scnprintf(buf + len, buf_len - len, "drx_local_data_ind_cnt = %u\n",
-			   htt_stats_buf->drx_local_data_ind_cnt);
+			 htt_stats_buf->drx_local_data_ind_cnt);
 	len += scnprintf(buf + len, buf_len - len,
-			   "drx_local_data_buf_recycle_cnt = %u\n",
-			   htt_stats_buf->drx_local_data_buf_recycle_cnt);
+			 "drx_local_data_buf_recycle_cnt = %u\n",
+			 htt_stats_buf->drx_local_data_buf_recycle_cnt);
 	len += scnprintf(buf + len, buf_len - len, "local_nondata_ind_cnt = %u\n",
-			   htt_stats_buf->local_nondata_ind_cnt);
+			 htt_stats_buf->local_nondata_ind_cnt);
 	len += scnprintf(buf + len, buf_len - len, "local_nondata_buf_recycle_cnt = %u\n",
-			   htt_stats_buf->local_nondata_buf_recycle_cnt);
+			 htt_stats_buf->local_nondata_buf_recycle_cnt);
 	len += scnprintf(buf + len, buf_len - len, "fw_status_buf_ring_refill_cnt = %u\n",
-			   htt_stats_buf->fw_status_buf_ring_refill_cnt);
+			 htt_stats_buf->fw_status_buf_ring_refill_cnt);
 	len += scnprintf(buf + len, buf_len - len, "fw_status_buf_ring_empty_cnt = %u\n",
-			   htt_stats_buf->fw_status_buf_ring_empty_cnt);
+			 htt_stats_buf->fw_status_buf_ring_empty_cnt);
 	len += scnprintf(buf + len, buf_len - len, "fw_pkt_buf_ring_refill_cnt = %u\n",
-			   htt_stats_buf->fw_pkt_buf_ring_refill_cnt);
+			 htt_stats_buf->fw_pkt_buf_ring_refill_cnt);
 	len += scnprintf(buf + len, buf_len - len, "fw_pkt_buf_ring_empty_cnt = %u\n",
-			   htt_stats_buf->fw_pkt_buf_ring_empty_cnt);
+			 htt_stats_buf->fw_pkt_buf_ring_empty_cnt);
 	len += scnprintf(buf + len, buf_len - len, "fw_link_buf_ring_refill_cnt = %u\n",
-			   htt_stats_buf->fw_link_buf_ring_refill_cnt);
+			 htt_stats_buf->fw_link_buf_ring_refill_cnt);
 	len += scnprintf(buf + len, buf_len - len, "fw_link_buf_ring_empty_cnt = %u\n",
-			   htt_stats_buf->fw_link_buf_ring_empty_cnt);
+			 htt_stats_buf->fw_link_buf_ring_empty_cnt);
 	len += scnprintf(buf + len, buf_len - len, "host_pkt_buf_ring_refill_cnt = %u\n",
-			   htt_stats_buf->host_pkt_buf_ring_refill_cnt);
+			 htt_stats_buf->host_pkt_buf_ring_refill_cnt);
 	len += scnprintf(buf + len, buf_len - len, "host_pkt_buf_ring_empty_cnt = %u\n",
-			   htt_stats_buf->host_pkt_buf_ring_empty_cnt);
+			 htt_stats_buf->host_pkt_buf_ring_empty_cnt);
 	len += scnprintf(buf + len, buf_len - len, "mon_pkt_buf_ring_refill_cnt = %u\n",
-			   htt_stats_buf->mon_pkt_buf_ring_refill_cnt);
+			 htt_stats_buf->mon_pkt_buf_ring_refill_cnt);
 	len += scnprintf(buf + len, buf_len - len, "mon_pkt_buf_ring_empty_cnt = %u\n",
-			   htt_stats_buf->mon_pkt_buf_ring_empty_cnt);
+			 htt_stats_buf->mon_pkt_buf_ring_empty_cnt);
 	len += scnprintf(buf + len, buf_len - len,
-			   "mon_status_buf_ring_refill_cnt = %u\n",
-			   htt_stats_buf->mon_status_buf_ring_refill_cnt);
+			 "mon_status_buf_ring_refill_cnt = %u\n",
+			 htt_stats_buf->mon_status_buf_ring_refill_cnt);
 	len += scnprintf(buf + len, buf_len - len, "mon_status_buf_ring_empty_cnt = %u\n",
-			   htt_stats_buf->mon_status_buf_ring_empty_cnt);
+			 htt_stats_buf->mon_status_buf_ring_empty_cnt);
 	len += scnprintf(buf + len, buf_len - len, "mon_desc_buf_ring_refill_cnt = %u\n",
-			   htt_stats_buf->mon_desc_buf_ring_refill_cnt);
+			 htt_stats_buf->mon_desc_buf_ring_refill_cnt);
 	len += scnprintf(buf + len, buf_len - len, "mon_desc_buf_ring_empty_cnt = %u\n",
-			   htt_stats_buf->mon_desc_buf_ring_empty_cnt);
+			 htt_stats_buf->mon_desc_buf_ring_empty_cnt);
 	len += scnprintf(buf + len, buf_len - len, "mon_dest_ring_update_cnt = %u\n",
-			   htt_stats_buf->mon_dest_ring_update_cnt);
+			 htt_stats_buf->mon_dest_ring_update_cnt);
 	len += scnprintf(buf + len, buf_len - len, "mon_dest_ring_full_cnt = %u\n",
-			   htt_stats_buf->mon_dest_ring_full_cnt);
+			 htt_stats_buf->mon_dest_ring_full_cnt);
 	len += scnprintf(buf + len, buf_len - len, "rx_suspend_cnt = %u\n",
-			   htt_stats_buf->rx_suspend_cnt);
+			 htt_stats_buf->rx_suspend_cnt);
 	len += scnprintf(buf + len, buf_len - len, "rx_suspend_fail_cnt = %u\n",
-			   htt_stats_buf->rx_suspend_fail_cnt);
+			 htt_stats_buf->rx_suspend_fail_cnt);
 	len += scnprintf(buf + len, buf_len - len, "rx_resume_cnt = %u\n",
-			   htt_stats_buf->rx_resume_cnt);
+			 htt_stats_buf->rx_resume_cnt);
 	len += scnprintf(buf + len, buf_len - len, "rx_resume_fail_cnt = %u\n",
-			   htt_stats_buf->rx_resume_fail_cnt);
+			 htt_stats_buf->rx_resume_fail_cnt);
 	len += scnprintf(buf + len, buf_len - len, "rx_ring_switch_cnt = %u\n",
-			   htt_stats_buf->rx_ring_switch_cnt);
+			 htt_stats_buf->rx_ring_switch_cnt);
 	len += scnprintf(buf + len, buf_len - len, "rx_ring_restore_cnt = %u\n",
-			   htt_stats_buf->rx_ring_restore_cnt);
+			 htt_stats_buf->rx_ring_restore_cnt);
 	len += scnprintf(buf + len, buf_len - len, "rx_flush_cnt = %u\n",
-			   htt_stats_buf->rx_flush_cnt);
+			 htt_stats_buf->rx_flush_cnt);
 	len += scnprintf(buf + len, buf_len - len, "rx_recovery_reset_cnt = %u\n",
-			   htt_stats_buf->rx_recovery_reset_cnt);
+			 htt_stats_buf->rx_recovery_reset_cnt);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -3455,7 +3454,7 @@ htt_print_rx_pdev_fw_ring_mpdu_err_tlv_v
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_RX_PDEV_FW_RING_MPDU_ERR_TLV_V:\n");
+			 "HTT_RX_PDEV_FW_RING_MPDU_ERR_TLV_V:\n");
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->fw_ring_mpdu_err,
 			   "fw_ring_mpdu_err", HTT_RX_STATS_RXDMA_MAX_ERR, "\n");
@@ -3504,9 +3503,9 @@ htt_print_rx_pdev_fw_stats_phy_err_tlv(c
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_RX_PDEV_FW_STATS_PHY_ERR_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "mac_id__word = %u\n",
-			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+			 u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
 	len += scnprintf(buf + len, buf_len - len, "total_phy_err_nct = %u\n",
-			   htt_stats_buf->total_phy_err_cnt);
+			 htt_stats_buf->total_phy_err_cnt);
 
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->phy_err, "phy_errs",
 			   HTT_STATS_PHY_ERR_MAX, "\n\n");
@@ -3530,18 +3529,18 @@ htt_print_pdev_cca_stats_hist_tlv(const
 
 	len += scnprintf(buf + len, buf_len - len, "\nHTT_PDEV_CCA_STATS_HIST_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "chan_num = %u\n",
-			   htt_stats_buf->chan_num);
+			 htt_stats_buf->chan_num);
 	len += scnprintf(buf + len, buf_len - len, "num_records = %u\n",
-			   htt_stats_buf->num_records);
+			 htt_stats_buf->num_records);
 	len += scnprintf(buf + len, buf_len - len, "valid_cca_counters_bitmap = 0x%x\n",
-			   htt_stats_buf->valid_cca_counters_bitmap);
+			 htt_stats_buf->valid_cca_counters_bitmap);
 	len += scnprintf(buf + len, buf_len - len, "collection_interval = %u\n",
-			   htt_stats_buf->collection_interval);
+			 htt_stats_buf->collection_interval);
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "HTT_PDEV_STATS_CCA_COUNTERS_TLV:(in usec)\n");
+			 "HTT_PDEV_STATS_CCA_COUNTERS_TLV:(in usec)\n");
 	len += scnprintf(buf + len, buf_len - len,
-			   "|  tx_frame|   rx_frame|   rx_clear| my_rx_frame|        cnt| med_rx_idle| med_tx_idle_global|   cca_obss|");
+			 "|  tx_frame|   rx_frame|   rx_clear| my_rx_frame|        cnt| med_rx_idle| med_tx_idle_global|   cca_obss|");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -3561,15 +3560,15 @@ htt_print_pdev_stats_cca_counters_tlv(co
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "|%10u| %10u| %10u| %11u| %10u| %11u| %18u| %10u|",
-			   htt_stats_buf->tx_frame_usec,
-			   htt_stats_buf->rx_frame_usec,
-			   htt_stats_buf->rx_clear_usec,
-			   htt_stats_buf->my_rx_frame_usec,
-			   htt_stats_buf->usec_cnt,
-			   htt_stats_buf->med_rx_idle_usec,
-			   htt_stats_buf->med_tx_idle_global_usec,
-			   htt_stats_buf->cca_obss_usec);
+			 "|%10u| %10u| %10u| %11u| %10u| %11u| %18u| %10u|",
+			 htt_stats_buf->tx_frame_usec,
+			 htt_stats_buf->rx_frame_usec,
+			 htt_stats_buf->rx_clear_usec,
+			 htt_stats_buf->my_rx_frame_usec,
+			 htt_stats_buf->usec_cnt,
+			 htt_stats_buf->med_rx_idle_usec,
+			 htt_stats_buf->med_tx_idle_global_usec,
+			 htt_stats_buf->cca_obss_usec);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -3590,30 +3589,30 @@ static inline void htt_print_hw_stats_wh
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_HW_STATS_WHAL_TX_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
-			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+			 u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
 	len += scnprintf(buf + len, buf_len - len, "last_unpause_ppdu_id = %u\n",
-			   htt_stats_buf->last_unpause_ppdu_id);
+			 htt_stats_buf->last_unpause_ppdu_id);
 	len += scnprintf(buf + len, buf_len - len, "hwsch_unpause_wait_tqm_write = %u\n",
-			   htt_stats_buf->hwsch_unpause_wait_tqm_write);
+			 htt_stats_buf->hwsch_unpause_wait_tqm_write);
 	len += scnprintf(buf + len, buf_len - len, "hwsch_dummy_tlv_skipped = %u\n",
-			   htt_stats_buf->hwsch_dummy_tlv_skipped);
+			 htt_stats_buf->hwsch_dummy_tlv_skipped);
 	len += scnprintf(buf + len, buf_len - len,
-			   "hwsch_misaligned_offset_received = %u\n",
-			   htt_stats_buf->hwsch_misaligned_offset_received);
+			 "hwsch_misaligned_offset_received = %u\n",
+			 htt_stats_buf->hwsch_misaligned_offset_received);
 	len += scnprintf(buf + len, buf_len - len, "hwsch_reset_count = %u\n",
-			   htt_stats_buf->hwsch_reset_count);
+			 htt_stats_buf->hwsch_reset_count);
 	len += scnprintf(buf + len, buf_len - len, "hwsch_dev_reset_war = %u\n",
-			   htt_stats_buf->hwsch_dev_reset_war);
+			 htt_stats_buf->hwsch_dev_reset_war);
 	len += scnprintf(buf + len, buf_len - len, "hwsch_delayed_pause = %u\n",
-			   htt_stats_buf->hwsch_delayed_pause);
+			 htt_stats_buf->hwsch_delayed_pause);
 	len += scnprintf(buf + len, buf_len - len, "hwsch_long_delayed_pause = %u\n",
-			   htt_stats_buf->hwsch_long_delayed_pause);
+			 htt_stats_buf->hwsch_long_delayed_pause);
 	len += scnprintf(buf + len, buf_len - len, "sch_rx_ppdu_no_response = %u\n",
-			   htt_stats_buf->sch_rx_ppdu_no_response);
+			 htt_stats_buf->sch_rx_ppdu_no_response);
 	len += scnprintf(buf + len, buf_len - len, "sch_selfgen_response = %u\n",
-			   htt_stats_buf->sch_selfgen_response);
+			 htt_stats_buf->sch_selfgen_response);
 	len += scnprintf(buf + len, buf_len - len, "sch_rx_sifs_resp_trigger= %u\n",
-			   htt_stats_buf->sch_rx_sifs_resp_trigger);
+			 htt_stats_buf->sch_rx_sifs_resp_trigger);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -3634,9 +3633,9 @@ htt_print_pdev_stats_twt_sessions_tlv(co
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_PDEV_STATS_TWT_SESSIONS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "pdev_id = %u\n",
-			   htt_stats_buf->pdev_id);
+			 htt_stats_buf->pdev_id);
 	len += scnprintf(buf + len, buf_len - len, "num_sessions = %u\n",
-			   htt_stats_buf->num_sessions);
+			 htt_stats_buf->num_sessions);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -3659,7 +3658,7 @@ htt_print_pdev_stats_twt_session_tlv(con
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_PDEV_STATS_TWT_SESSION_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "vdev_id = %u\n",
-			   htt_stats_buf->vdev_id);
+			 htt_stats_buf->vdev_id);
 	len += scnprintf(buf + len, buf_len - len,
 			 "peer_mac = %02x:%02x:%02x:%02x:%02x:%02x\n",
 			 u32_get_bits(mac_addr, HTT_MAC_ADDR_L32_0),
@@ -3669,15 +3668,15 @@ htt_print_pdev_stats_twt_session_tlv(con
 			 u32_get_bits(mac_addr_16, HTT_MAC_ADDR_H16_0),
 			 u32_get_bits(mac_addr_16, HTT_MAC_ADDR_H16_1));
 	len += scnprintf(buf + len, buf_len - len, "flow_id_flags = %u\n",
-			   htt_stats_buf->flow_id_flags);
+			 htt_stats_buf->flow_id_flags);
 	len += scnprintf(buf + len, buf_len - len, "dialog_id = %u\n",
-			   htt_stats_buf->dialog_id);
+			 htt_stats_buf->dialog_id);
 	len += scnprintf(buf + len, buf_len - len, "wake_dura_us = %u\n",
-			   htt_stats_buf->wake_dura_us);
+			 htt_stats_buf->wake_dura_us);
 	len += scnprintf(buf + len, buf_len - len, "wake_intvl_us = %u\n",
-			   htt_stats_buf->wake_intvl_us);
+			 htt_stats_buf->wake_intvl_us);
 	len += scnprintf(buf + len, buf_len - len, "sp_offset_us = %u\n",
-			   htt_stats_buf->sp_offset_us);
+			 htt_stats_buf->sp_offset_us);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -3722,24 +3721,24 @@ static inline void htt_print_backpressur
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
 	len += scnprintf(buf + len, buf_len - len, "pdev_id = %u\n",
-			   htt_stats_buf->pdev_id);
+			 htt_stats_buf->pdev_id);
 	len += scnprintf(buf + len, buf_len - len, "current_head_idx = %u\n",
-			   htt_stats_buf->current_head_idx);
+			 htt_stats_buf->current_head_idx);
 	len += scnprintf(buf + len, buf_len - len, "current_tail_idx = %u\n",
-			   htt_stats_buf->current_tail_idx);
+			 htt_stats_buf->current_tail_idx);
 	len += scnprintf(buf + len, buf_len - len, "num_htt_msgs_sent = %u\n",
-			   htt_stats_buf->num_htt_msgs_sent);
+			 htt_stats_buf->num_htt_msgs_sent);
 	len += scnprintf(buf + len, buf_len - len,
-			   "backpressure_time_ms = %u\n",
-			   htt_stats_buf->backpressure_time_ms);
+			 "backpressure_time_ms = %u\n",
+			 htt_stats_buf->backpressure_time_ms);
 
 	for (i = 0; i < 5; i++)
 		len += scnprintf(buf + len, buf_len - len,
-				   "backpressure_hist_%u = %u\n",
-				   i + 1, htt_stats_buf->backpressure_hist[i]);
+				 "backpressure_hist_%u = %u\n",
+				 i + 1, htt_stats_buf->backpressure_hist[i]);
 
 	len += scnprintf(buf + len, buf_len - len,
-			   "============================");
+			 "============================");
 
 	if (len >= buf_len) {
 		buf[buf_len - 1] = 0;
