From 35ed35f71e4846ca85f5bf63a584c107e6c7f57e Mon Sep 17 00:00:00 2001
From: Aloka Dixit <quic_alokad@quicinc.com>
Date: Mon, 11 Apr 2022 15:20:36 -0700
Subject: [PATCH 2/2] ath12k: add statistics for rx RU puncturing

Add new type of stats 'rx_su_punctured_mode' which indicates
the number of PPDUs sent in punctured mode. The punctured bandwidth
mode is given by enum HTT_RX_PDEV_STATS_NUM_PUNCTURED_MODE_TYPE.
Add a new function to parse HTT_STATS_RX_PDEV_RATE_EXT_STATS_TAG
which is the tag used by target.

Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debugfs.h     |  6 +++
 .../wireless/ath/ath12k/debugfs_htt_stats.c   | 30 ++++++++++++
 .../wireless/ath/ath12k/debugfs_htt_stats.h   | 48 +++++++++++++++++++
 3 files changed, 84 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.c
@@ -3274,6 +3274,32 @@ fail:
 		kfree(rx_gi[i]);
 }
 
+static inline void htt_print_rx_pdev_rate_ext_stats_tlv(const void *tag_buf,
+						       struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_rx_pdev_rate_ext_stats_tlv *htt_stats_buf = tag_buf;
+	char str_buf[HTT_MAX_STRING_LEN] = {0};
+	u8 *buf = stats_req->buf;
+	u32 len = stats_req->buf_len;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+
+	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
+	ARRAY_TO_STRING(str_buf, htt_stats_buf->rx_su_punctured_mode,
+			HTT_RX_PDEV_STATS_NUM_PUNCTURED_MODE_COUNTERS);
+	len += HTT_DBG_OUT(buf + len, buf_len - len,
+			   "rx_su_punctured_mode = %s ", str_buf);
+
+	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
+
+	if (len >= buf_len)
+		buf[buf_len - 1] = 0;
+	else
+		buf[len] = 0;
+
+	stats_req->buf_len = len;
+}
+
+
 static inline void htt_print_rx_soc_fw_stats_tlv(const void *tag_buf,
 						 struct debug_htt_stats_req *stats_req)
 {
@@ -4861,6 +4887,10 @@ static int ath12k_dbg_htt_ext_stats_pars
 		htt_print_rx_pdev_rate_stats_tlv(tag_buf, stats_req);
 		break;
 
+	case HTT_STATS_RX_PDEV_RATE_EXT_STATS_TAG:
+		htt_print_rx_pdev_rate_ext_stats_tlv(tag_buf, stats_req);
+		break;
+
 	case HTT_STATS_TX_PDEV_SCHEDULER_TXQ_STATS_TAG:
 		htt_print_tx_pdev_stats_sched_per_txq_tlv(tag_buf, stats_req);
 		break;
--- a/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.h
+++ b/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.h
@@ -103,6 +103,19 @@ enum htt_tlv_tag_t {
 	HTT_STATS_PDEV_OBSS_PD_TAG                          = 88,
 	HTT_STATS_HW_WAR_TAG				    = 89,
 	HTT_STATS_RING_BACKPRESSURE_STATS_TAG		    = 90,
+	HTT_STATS_LATENCY_PROF_STATS_TAG		    = 91,
+	HTT_STATS_LATENCY_CTX_TAG			    = 92,
+	HTT_STATS_LATENCY_CNT_TAG			    = 93,
+	HTT_STATS_RX_PDEV_UL_TRIG_STATS_TAG		    = 94,
+	HTT_STATS_RX_PDEV_UL_OFDMA_USER_STATS_TAG	    = 95,
+	HTT_STATS_RX_PDEV_UL_MIMO_USER_STATS_TAG	    = 96,
+	HTT_STATS_RX_PDEV_UL_MUMIMO_TRIG_STATS_TAG	    = 97,
+	HTT_STATS_RX_FSE_STATS_TAG			    = 98,
+	HTT_STATS_PEER_SCHED_STATS_TAG			    = 99,
+	HTT_STATS_SCHED_TXQ_SUPERCYCLE_TRIGGER_TAG	    = 100,
+	HTT_STATS_PEER_CTRL_PATH_TXRX_STATS_TAG		    = 101,
+	HTT_STATS_PDEV_CTRL_PATH_TX_STATS_TAG		    = 102,
+	HTT_STATS_RX_PDEV_RATE_EXT_STATS_TAG		    = 103,
 	/* 11be stats */
 	HTT_STATS_TX_PDEV_BE_RATE_STATS_TAG		    = 131,
 	HTT_STATS_AST_ENTRY_TAG				    = 132,
@@ -1329,6 +1342,7 @@ struct htt_tx_pdev_rate_stats_tlv {
 #define HTT_RX_PDEV_STATS_NUM_GI_COUNTERS          4
 #define HTT_RX_PDEV_STATS_NUM_DCM_COUNTERS         5
 #define HTT_RX_PDEV_STATS_NUM_BW_COUNTERS          4
+#define HTT_RX_PDEV_STATS_NUM_BW_EXT_COUNTERS      4
 #define HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS      8
 #define HTT_RX_PDEV_STATS_NUM_PREAMBLE_TYPES       HTT_STATS_PREAM_COUNT
 #define HTT_RX_PDEV_MAX_OFDMA_NUM_USER             8
@@ -1385,6 +1399,16 @@ enum HTT_RX_PDEV_STATS_BE_RU_SIZE {
     HTT_RX_PDEV_STATS_NUM_BE_RU_SIZE_COUNTERS,
 };
 
+/* Introduce new RX counters to support 320MHZ support and punctured modes */
+typedef enum {
+	HTT_RX_PDEV_STATS_PUNCTURED_NONE = 0,
+	HTT_RX_PDEV_STATS_PUNCTURED_20 = 1,
+	HTT_RX_PDEV_STATS_PUNCTURED_40 = 2,
+	HTT_RX_PDEV_STATS_PUNCTURED_80 = 3,
+	HTT_RX_PDEV_STATS_PUNCTURED_120 = 4,
+	HTT_RX_PDEV_STATS_NUM_PUNCTURED_MODE_COUNTERS = 5
+} HTT_RX_PDEV_STATS_NUM_PUNCTURED_MODE_TYPE;
+
 struct htt_rx_pdev_rate_stats_tlv {
 	u32 mac_id__word;
 	u32 nsts;
@@ -1464,6 +1488,30 @@ struct htt_rx_pdev_rate_stats_tlv {
 				   [HTT_RX_PDEV_STATS_NUM_BW_COUNTERS];
 };
 
+struct htt_rx_pdev_rate_ext_stats_tlv {
+	u8 rssi_chain_ext[HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS]
+			  [HTT_RX_PDEV_STATS_NUM_BW_EXT_COUNTERS];
+	s8 rx_per_chain_rssi_ext_in_dbm[HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS]
+				       [HTT_RX_PDEV_STATS_NUM_BW_EXT_COUNTERS];
+	s32 rssi_mcast_in_dbm;
+	s32 rssi_mgmt_in_dbm;
+	u32 rx_mcs_ext[HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS_EXT];
+	u32 rx_stbc_ext[HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS_EXT];
+	u32 rx_gi_ext[HTT_RX_PDEV_STATS_NUM_GI_COUNTERS]
+		     [HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS_EXT];
+	u32 ul_ofdma_rx_mcs_ext[HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS_EXT];
+	u32 ul_ofdma_rx_gi_ext[HTT_TX_PDEV_STATS_NUM_GI_COUNTERS]
+			      [HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS_EXT];
+	u32 rx_11ax_su_txbf_mcs_ext[HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS_EXT];
+	u32 rx_11ax_mu_txbf_mcs_ext[HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS_EXT];
+	u32 rx_11ax_dl_ofdma_mcs_ext[HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS_EXT];
+	u32 rx_mcs_ext_2[HTT_RX_PDEV_STATS_NUM_EXTRA2_MCS_COUNTERS];
+	u32 rx_bw_ext[HTT_RX_PDEV_STATS_NUM_BW_EXT2_COUNTERS];
+	u32 rx_gi_ext_2[HTT_RX_PDEV_STATS_NUM_GI_COUNTERS]
+		       [HTT_RX_PDEV_STATS_NUM_EXTRA2_MCS_COUNTERS];
+	u32 rx_su_punctured_mode[HTT_RX_PDEV_STATS_NUM_PUNCTURED_MODE_COUNTERS];
+};
+
 /* == RX PDEV/SOC STATS == */
 struct htt_rx_soc_fw_stats_tlv {
 	u32 fw_reo_ring_data_msdu;
