From eb43f258ad479de0a82c4779a1467d4744387021 Mon Sep 17 00:00:00 2001
From: Nagarajan Maran <quic_nmaran@quicinc.com>
Date: Tue, 6 Jun 2023 08:25:27 +0530
Subject: [PATCH] wifi: ath12k: Add support to handle streaming stats

Add support to enable/disable streaming stats to target.
Also handle the streaming stats when received from target.

Signed-off-by: Nagarajan Maran <quic_nmaran@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp.h     |   2 +
 drivers/net/wireless/ath/ath12k/dp_rx.c  |   3 +
 drivers/net/wireless/ath/ath12k/sawf.c   | 186 +++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/sawf.h   | 165 ++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/vendor.c |  49 ++++++
 drivers/net/wireless/ath/ath12k/vendor.h |  11 ++
 6 files changed, 416 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/dp.h
+++ b/drivers/net/wireless/ath/ath12k/dp.h
@@ -536,6 +536,7 @@ enum htt_h2t_msg_type {
 	HTT_H2T_MSG_TYPE_SAWF_DEF_Q_MAP_REQ	= 0x1c,
 	HTT_H2T_MSG_TYPE_SAWF_DEF_Q_UNMAP_REQ	= 0x1d,
 	HTT_H2T_MSG_TYPE_SAWF_DEF_Q_MAP_REPORT_REQ = 0x1e,
+	HTT_H2T_MSG_TYPE_STREAMING_STATS_REQ	= 0x20,
 };
 
 #define HTT_VER_REQ_INFO_MSG_ID		GENMASK(7, 0)
@@ -1405,6 +1406,7 @@ enum htt_t2h_msg_type {
 	HTT_T2H_MSG_TYPE_VDEV_TXRX_STATS_PERIODIC_IND = 0x2c,
 	HTT_T2H_MSG_TYPE_SAWF_DEF_QUEUES_MAP_REPORT_CONF = 0x2d,
 	HTT_T2H_MSG_TYPE_SAWF_MSDUQ_INFO_IND = 0x2e,
+	HTT_T2H_MSG_TYPE_STREAMING_STATS_IND = 0x2f,
 };
 
 #define HTT_TARGET_VERSION_MAJOR 3
--- a/drivers/net/wireless/ath/ath12k/sawf.c
+++ b/drivers/net/wireless/ath/ath12k/sawf.c
@@ -8,6 +8,7 @@
 #include "wmi.h"
 #include "sawf.h"
 #include "peer.h"
+#include "debugfs_htt_stats.h"
 #include <linux/module.h>
 #include <qca-nss-ecm/ecm_classifier_emesh_public.h>
 
@@ -1086,6 +1087,199 @@ unlock_base_lock:
 	return ret;
 }
 
+int ath12k_htt_sawf_streaming_stats_configure(struct ath12k *ar,
+					      u8 stats_type,
+					      u8 configure,
+					      u32 config_param_0,
+					      u32 config_param_1,
+					      u32 config_param_2,
+					      u32 config_param_3)
+{
+	struct ath12k_base *ab = ar->ab;
+        struct ath12k_dp *dp = &ab->dp;
+        struct sk_buff *skb;
+        struct ath12k_htt_h2t_sawf_streaming_req *cmd;
+        int len = sizeof(*cmd);
+        int ret;
+
+	if (!(ath12k_debugfs_is_sawf_stats_enabled(ar) & ATH12K_SAWF_STATS_ADVNCD))
+                return -EOPNOTSUPP;
+
+        skb = ath12k_htc_alloc_skb(ab, len);
+        if (!skb) {
+                ath12k_err(ab, "Insufficient Memory\n");
+                return -ENOMEM;
+        }
+
+        skb_put(skb, len);
+        cmd = (struct ath12k_htt_h2t_sawf_streaming_req*)skb->data;
+        cmd->info = u32_encode_bits(HTT_H2T_MSG_TYPE_STREAMING_STATS_REQ,
+                                    HTT_H2T_MSG_TYPE_ID) |
+                    u32_encode_bits(stats_type,
+                                    HTT_H2T_MSG_TYPE_STREAMING_STATS_TYPE) |
+                    u32_encode_bits(configure,
+                                    HTT_H2T_MSG_TYPE_STREAMING_STATS_CONFIGURE);
+
+	cmd->config_param_0 = config_param_0;
+	cmd->config_param_1 = config_param_1;
+	cmd->config_param_2 = config_param_2;
+	cmd->config_param_3 = config_param_3;
+
+        ath12k_dbg(ab, ATH12K_DBG_SAWF, "Configure streaming stats :0x%x\n", cmd->info);
+
+        ret = ath12k_htc_send(&ab->htc, dp->eid, skb);
+        if (ret)
+                dev_kfree_skb_any(skb);
+        return ret;
+}
+
+static int ath12k_fw_mpdu_stats_update(struct ath12k_base *ab, u16 peer_id,
+				       u8 tid, u8 q_type, u16 svc_int_success,
+				       u16 svc_int_fail, u16 burst_sz_success,
+				       u16 burst_sz_fail)
+{
+	struct ath12k *ar = NULL;
+	struct ath12k_peer *peer;
+	struct ath12k_sawf_stats *sawf_stats;
+	struct sawf_fw_mpdu_stats *svc_intval_stats;
+	struct sawf_fw_mpdu_stats *burst_size_stats;
+	int ret = 0;
+	int q_id;
+
+	if (tid >= ATH12K_SAWF_MAX_TID_SUPPORT)
+		return -EINVAL;
+
+	if (q_type >= ab->max_msduq_per_tid)
+		return -EINVAL;
+
+	q_id = q_type - ab->default_msduq_per_tid;
+
+	spin_lock_bh(&ab->base_lock);
+	peer = ath12k_peer_find_by_id(ab, peer_id);
+	if (unlikely(!peer)) {
+		ath12k_dbg(ab, ATH12K_DBG_SAWF,
+			   "SAWF: failed to find the peer with peer_id %u\n",
+			   peer_id);
+		ret = -ENOENT;
+		goto end;
+	}
+
+	ar = ath12k_mac_get_ar_by_vdev_id(ab, peer->vdev_id);
+	if (!ar) {
+		ret = -ENOENT;
+		goto end;
+	}
+
+	if (!(ath12k_debugfs_is_sawf_stats_enabled(ar) & ATH12K_SAWF_STATS_ADVNCD)) {
+		ret = -EOPNOTSUPP;
+		goto end;
+	}
+
+	sawf_stats = &peer->sawf_stats;
+	if (!sawf_stats) {
+		ret = -ENODATA;
+		goto end;
+	}
+
+	svc_intval_stats = &sawf_stats->tx_stats[tid][q_id].svc_intval_stats;
+	if (!svc_intval_stats) {
+		ret = -ENODATA;
+		goto end;
+	}
+
+	burst_size_stats = &sawf_stats->tx_stats[tid][q_id].burst_size_stats;
+	if (!burst_size_stats) {
+		ret = -ENODATA;
+		goto end;
+	}
+
+	svc_intval_stats->success_cnt += svc_int_success;
+	svc_intval_stats->failure_cnt += svc_int_fail;
+	burst_size_stats->success_cnt += burst_sz_success;
+	burst_size_stats->failure_cnt += burst_sz_fail;
+
+end:
+	spin_unlock_bh(&ab->base_lock);
+	return ret;
+}
+
+void ath12k_htt_sawf_streaming_stats_ind_handler(struct ath12k_base *ab,
+						 struct sk_buff *skb)
+{
+	struct htt_stats_strm_gen_mpdus_tlv *mpdus_tlv;
+        struct htt_stats_strm_gen_mpdus_details_tlv *mpdus_detail_tlv;
+	const struct htt_tlv *tlv;
+	u32 *data = NULL;
+	u32 len, tlv_tag, tlv_len;
+	u16 info;
+	u8 tid, q_type;
+
+	data = skb->data;
+	len = skb->len;
+
+	data++;
+	if (len > HTT_T2H_STREAMING_STATS_IND_HDR_SIZE)
+		len -= HTT_T2H_STREAMING_STATS_IND_HDR_SIZE;
+	else
+		return;
+
+	while(len > 0) {
+		tlv = (struct htt_tlv *)data;
+		tlv_tag = u32_get_bits(*data, HTT_TLV_TAG);
+		tlv_len = u32_get_bits(*data, HTT_TLV_LEN);
+
+		if (!tlv_len)
+			break;
+
+		data++;
+		if (tlv_tag == HTT_STATS_STRM_GEN_MPDUS_TAG) {
+			u16 svc_interval_success, svc_interval_failure, burst_size_success, burst_size_failure, peer_id;
+			mpdus_tlv = (struct htt_stats_strm_gen_mpdus_tlv*)data;
+
+			peer_id = __le16_to_cpu(mpdus_tlv->peer_id);
+			info = __le16_to_cpu(mpdus_tlv->info);
+			tid = u16_get_bits(info, SAWF_TTH_TID_MASK);
+			q_type = u16_get_bits(info, SAWF_TTH_QTYPE_MASK);
+			svc_interval_success = __le16_to_cpu(mpdus_tlv->svc_interval_success);
+			svc_interval_failure = __le16_to_cpu(mpdus_tlv->svc_interval_failure);
+			burst_size_success = __le16_to_cpu(mpdus_tlv->burst_size_success);
+			burst_size_failure = __le16_to_cpu(mpdus_tlv->burst_size_failure);
+
+			ath12k_fw_mpdu_stats_update(ab, peer_id, tid,
+						    q_type, svc_interval_success,
+						    svc_interval_failure,
+						    burst_size_success,
+						    burst_size_failure);
+		} else if (tlv_tag == HTT_STATS_STRM_GEN_MPDUS_DETAILS_TAG) {
+			mpdus_detail_tlv = (struct htt_stats_strm_gen_mpdus_details_tlv *)data;
+			info = __le16_to_cpu(mpdus_detail_tlv->info);
+			tid = u16_get_bits(info, SAWF_TTH_TID_MASK);
+			q_type = u16_get_bits(info, SAWF_TTH_QTYPE_MASK);
+
+			ath12k_dbg(ab, ATH12K_DBG_SAWF, "SAWF: peer_id %u tid %u qtype %u "
+				   "svc_intvl: ts_prior %ums ts_now %ums "
+				   "intvl_spec %ums margin %ums|"
+				   "burst_size: consumed_bytes_orig %u "
+				   "consumed_bytes_final %u remaining_bytes %u "
+				   "burst_size_spec %u margin_bytes %u\n",
+				   __le16_to_cpu(mpdus_detail_tlv->peer_id),
+				   tid, q_type,
+				   __le16_to_cpu(mpdus_detail_tlv->svc_interval_timestamp_prior_ms),
+				   __le16_to_cpu(mpdus_detail_tlv->svc_interval_timestamp_now_ms),
+				   __le16_to_cpu(mpdus_detail_tlv->svc_interval_interval_spec_ms),
+				   __le16_to_cpu(mpdus_detail_tlv->svc_interval_interval_margin_ms),
+				   __le16_to_cpu(mpdus_detail_tlv->burst_size_consumed_bytes_orig),
+				   __le16_to_cpu(mpdus_detail_tlv->burst_size_consumed_bytes_final),
+				   __le16_to_cpu(mpdus_detail_tlv->burst_size_remaining_bytes),
+				   __le16_to_cpu(mpdus_detail_tlv->burst_size_burst_size_spec),
+				   __le16_to_cpu(mpdus_detail_tlv->burst_size_margin_bytes));
+		}
+		data += (tlv_len - 4);
+		len -= tlv_len;
+	}
+	return;
+}
+
 void ath12k_sawf_tx_enqueue_peer_stats(struct ath12k_base *ab,
 				       struct ath12k_peer *peer,
 				       u32 msduq_id, u32 len)
@@ -1147,7 +1341,7 @@ void ath12k_sawf_stats_update(struct ath
 	if (!(ath12k_debugfs_is_sawf_stats_enabled(ar) & ATH12K_SAWF_STATS_BASIC))
 		goto latency_stats_update;
 
-	len = skb->len; /* Need to add frag length? */
+	len = skb->len;
 
 	tx_stats = &sawf_stats->tx_stats[tid][q_id];
 
--- a/drivers/net/wireless/ath/ath12k/sawf.h
+++ b/drivers/net/wireless/ath/ath12k/sawf.h
@@ -545,6 +545,160 @@ struct ath12k_sawf_stats {
 	struct sawf_tx_stats tx_stats[ATH12K_SAWF_MAX_TID_SUPPORT][MAX_Q_PER_TID];
 };
 
+/* MSG_TYPE => HTT_H2T_MSG_TYPE_STREAMING_STATS_REQ
+ *
+ * @details
+ * The following field definitions describe the format of the HTT host
+ * to target message that requests the target to start or stop producing
+ * ongoing stats of the specified type.
+ *
+ * |31|30         |23          16|15           8|7            0|
+ * |-----------------------------------------------------------|
+ * |EN| reserved  | stats type   |    reserved  |   msg type   |
+ * |-----------------------------------------------------------|
+ * |                   config param [0]                        |
+ * |-----------------------------------------------------------|
+ * |                   config param [1]                        |
+ * |-----------------------------------------------------------|
+ * |                   config param [2]                        |
+ * |-----------------------------------------------------------|
+ * |                   config param [3]                        |
+ * |-----------------------------------------------------------|
+ * Where:
+ *   - EN is an enable/disable flag
+ * Header fields:
+ *   - MSG_TYPE
+ *     Bits 7:0
+ *     Purpose: identifies this is a streaming stats upload request message
+ *     Value: 0x20 (HTT_H2T_MSG_TYPE_STREAMING_STATS_REQ)
+ *   - STATS_TYPE
+ *     Bits 23:16
+ *     Purpose: identifies which FW statistics to upload
+ *     Value: Defined values are HTT_STRM_GEN_MPDUS_STATS for basic
+ *            stats and HTT_STRM_GEN_MPDUS_DETAILS_STAT for extended
+ *            stats.
+ *   - ENABLE
+ *     Bit 31
+ *     Purpose: enable/disable the target's ongoing stats of the specified type
+ *     Value:
+ *         0 - disable ongoing production of the specified stats type
+ *         1 - enable  ongoing production of the specified stats type
+ *   - CONFIG_PARAM [0]
+ *     Bits 31:0
+ *     Purpose: give an opaque configuration value to the specified stats type
+ *     Value: stats-type specific configuration value
+ *   - CONFIG_PARAM [1]
+ *     Bits 31:0
+ *     Purpose: give an opaque configuration value to the specified stats type
+ *     Value: stats-type specific configuration value
+ *   - CONFIG_PARAM [2]
+ *     Bits 31:0
+ *     Purpose: give an opaque configuration value to the specified stats type
+ *     Value: stats-type specific configuration value
+ *   - CONFIG_PARAM [3]
+ *     Bits 31:0
+ *     Purpose: give an opaque configuration value to the specified stats type
+ *     Value: stats-type specific configuration value
+ */
+
+#define HTT_STRM_GEN_MPDUS_STATS 43
+#define HTT_STRM_GEN_MPDUS_DETAILS_STATS 44
+#define HTT_H2T_MSG_TYPE_STREAMING_STATS_TYPE GENMASK(23,16)
+#define HTT_H2T_MSG_TYPE_STREAMING_STATS_CONFIGURE BIT(31)
+
+struct ath12k_htt_h2t_sawf_streaming_req {
+	u32 info;
+	u32 config_param_0;
+	u32 config_param_1;
+	u32 config_param_2;
+	u32 config_param_3;
+};
+
+/**
+ * @brief target -> host streaming statistics upload
+ *
+ * MSG_TYPE => HTT_T2H_MSG_TYPE_STREAMING_STATS_IND
+ *
+ * @details
+ * The following field definitions describe the format of the HTT target
+ * to host streaming stats upload indication message.
+ * The host can use a HTT_H2T_MSG_TYPE_STREAMING_STATS_REQ message to enable
+ * the target to produce an ongoing series of HTT_T2H_MSG_TYPE_STREAMING_STATS_IND
+ * STREAMING_STATS_IND messages, and can also use the
+ * HTT_H2T_MSG_TYPE_STREAMING_STATS_REQ message to halt the target's production of
+ * HTT_T2H_MSG_TYPE_STREAMING_STATS_IND messages.
+ *
+ * The HTT_T2H_MSG_TYPE_STREAMING_STATS_IND message contains a payload of TLVs
+ * containing the stats enabled by the host's HTT_H2T_MSG_TYPE_STREAMING_STATS_REQ
+ * message.
+ *
+ * |31                                           8|7             0|
+ * |--------------------------------------------------------------|
+ * |                   reserved                   |    msg type   |
+ * |--------------------------------------------------------------|
+ * |                   type-specific stats info                   |
+ * |--------------------------------------------------------------|
+ * Header fields:
+ *  - MSG_TYPE
+ *    Bits 7:0
+ *    Purpose: Identifies this as a streaming statistics upload indication
+ *             message.
+ *    Value: 0x2f (HTT_T2H_MSG_TYPE_STREAMING_STATS_IND)
+ */
+
+#define HTT_T2H_STREAMING_STATS_IND_HDR_SIZE 4
+#define SAWF_TTH_TID_MASK GENMASK(3,0)
+#define SAWF_TTH_QTYPE_MASK GENMASK(7,4)
+
+struct htt_stats_strm_gen_mpdus_tlv {
+/*
+ * |31     24|23      20|19       16|15                          0|
+ * |---------+----------+----------+------------------------------|
+ * |Reserved |   QTYPE  |   TID    |            Peer ID           |
+ * |--------------------------------------------------------------|
+ * |    svc interval failure       |   svc interval success       |
+ * |--------------------------------------------------------------|
+ * |    burst size failure         |   burst size success         |
+ * |--------------------------------------------------------------|
+*/
+	__le16 peer_id;
+	__le16 info;
+	__le16 svc_interval_success;
+	__le16 svc_interval_failure;
+	__le16 burst_size_success;
+	__le16 burst_size_failure;
+} __packed;
+
+struct htt_stats_strm_gen_mpdus_details_tlv {
+	__le16 peer_id;
+	__le16 info;
+	__le16 svc_interval_timestamp_prior_ms;
+	__le16 svc_interval_timestamp_now_ms;
+	__le16 svc_interval_interval_spec_ms;
+	__le16 svc_interval_interval_margin_ms;
+	/* consumed_bytes_orig:
+	 * Raw count (actually estimate) of how many bytes were removed
+	 * from the MSDU queue by the GEN_MPDUS operation.
+	 */
+	__le16 burst_size_consumed_bytes_orig;
+	/* consumed_bytes_final:
+	 * Adjusted count of removed bytes that incorporates normalizing
+	 * by the actual service interval compared to the expected
+	 * service interval.
+	 * This allows the burst size computation to be independent of
+	 * whether the target is doing GEN_MPDUS at only the service
+	 * interval, or substantially more often than the service
+	 * interval.
+	 *     consumed_bytes_final = consumed_bytes_orig /
+	 *         (svc_interval / ref_svc_interval)
+	 */
+	__le16 burst_size_consumed_bytes_final;
+	__le16 burst_size_remaining_bytes;
+	__le16 burst_size_reserved;
+	__le16 burst_size_burst_size_spec;
+	__le16 burst_size_margin_bytes;
+} __packed;
+
 extern bool ath12k_sawf_enable;
 struct ath12k_sawf_ctx *ath12k_get_sawf_context(void);
 void ath12k_sawf_init(struct ath12k_base *ab);
@@ -585,6 +739,15 @@ void ath12k_sawf_stats_update(struct ath
 void ath12k_sawf_tx_enqueue_peer_stats(struct ath12k_base *ab,
 				       struct ath12k_peer *peer,
 				       u32 msduq_id, u32 len);
+int ath12k_htt_sawf_streaming_stats_configure(struct ath12k *ar,
+					      u8 stats_type,
+					      u8 configure,
+					      u32 config_param_0,
+					      u32 config_param_1,
+					      u32 config_param_2,
+					      u32 config_param_3);
+void ath12k_htt_sawf_streaming_stats_ind_handler(struct ath12k_base *ab,
+						 struct sk_buff *skb);
 #else /* CPTCFG_ATH12K_SAWF */
 
 static inline void ath12k_sawf_init(struct ath12k_base *ab) {
@@ -597,7 +760,7 @@ static inline void ath12k_sawf_deinit(st
 
 static inline void ath12k_sawf_stats_update(struct ath12k *ar, struct sk_buff *skb,
 					    struct hal_tx_status *ts,
-			      		    struct ath12k_peer *peer)
+					    struct ath12k_peer *peer)
 {
 	return;
 }
--- a/drivers/net/wireless/ath/ath12k/vendor.c
+++ b/drivers/net/wireless/ath/ath12k/vendor.c
@@ -77,6 +77,12 @@ ath12k_vendor_telemetry_sawf_sla_samples
 	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_TIME_SEC] = {.type = NLA_U32},
 };
 
+static const struct nla_policy
+ath12k_vendor_sawf_streaming[QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_MAX + 1] = {
+	[QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_BASIC_STATS] = {.type = NLA_U8},
+	[QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_EXTND_STATS] = {.type = NLA_U8},
+};
+
 static void ath12k_set_default_values(struct ath12k_sawf_svc_params *param)
 {
 	param->min_throughput_rate = SAWF_SVC_PARAM_DEFAULT_MIN_THRUPUT;
@@ -604,6 +610,92 @@ static int ath12k_vendor_telemetry_sawf_
 
 	return ret;
 }
+
+static struct ath12k *ath12k_get_ar_from_wdev(struct wireless_dev *wdev, u8 link_id)
+{
+        struct ieee80211_vif *vif =  NULL;
+        struct ath12k_vif *ahvif = NULL;
+        struct ieee80211_hw *hw = NULL;
+        struct ath12k *ar = NULL;
+
+	vif = wdev_to_ieee80211_vif(wdev);
+	if (!vif)
+		return NULL;
+
+	ahvif = (struct ath12k_vif *)vif->drv_priv;
+	if (!ahvif)
+		return NULL;
+
+	mutex_lock(&ahvif->ah->conf_mutex);
+	hw = ahvif->ah->hw;
+	if (!hw) {
+		mutex_unlock(&ahvif->ah->conf_mutex);
+		return NULL;
+	}
+
+	ar = ath12k_get_ar_by_vif(hw, vif, link_id);
+	mutex_unlock(&ahvif->ah->conf_mutex);
+
+	return ar;
+}
+
+static int ath12k_vendor_sawf_streaming_stats_configure(struct wiphy *wiphy,
+							struct wireless_dev *wdev,
+							const void *data,
+							int data_len)
+{
+	struct nlattr *tb[QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_MAX + 1];
+	struct ath12k *ar = NULL;
+	int ret = 0;
+	u8 basic_stats_configure, extnd_stats_configure, link_id;
+
+	if (!ath12k_sawf_enable)
+		return -EOPNOTSUPP;
+
+	if(!wdev)
+		return -ENODATA;
+
+	ret = nla_parse(tb, QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_MAX, data, data_len,
+			ath12k_vendor_sawf_streaming, NULL);
+	if (ret) {
+		ath12k_warn(NULL, "invalid sawf streaming stats configuration\n");
+		return ret;
+	}
+
+	if (wdev->valid_links) { /* MLO case */
+		if (!tb[QCA_WLAN_VENDOR_ATTR_MLO_LINK_ID])
+			return -EINVAL;
+		link_id = nla_get_u8(tb[QCA_WLAN_VENDOR_ATTR_MLO_LINK_ID]);
+		if (!(wdev->valid_links & BIT(link_id)))
+			return -ENOLINK;
+	} else { /* NON-MLO case */
+		if (!tb[QCA_WLAN_VENDOR_ATTR_MLO_LINK_ID])
+			link_id = 0;
+		else
+			return -EINVAL;
+	}
+
+	ar = ath12k_get_ar_from_wdev(wdev, link_id);
+	if (!ar)
+		return -ENODATA;
+
+	if (tb[QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_BASIC_STATS]) {
+		basic_stats_configure = nla_get_u8(tb[QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_BASIC_STATS]);
+		ret = ath12k_htt_sawf_streaming_stats_configure(ar, HTT_STRM_GEN_MPDUS_STATS,
+								basic_stats_configure, 0, 0, 0, 0);
+		if (ret)
+			return ret;
+	}
+
+	if (tb[QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_EXTND_STATS]) {
+		extnd_stats_configure = nla_get_u8(tb[QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_EXTND_STATS]);
+		ret = ath12k_htt_sawf_streaming_stats_configure(ar, HTT_STRM_GEN_MPDUS_DETAILS_STATS,
+								extnd_stats_configure, 0, 0, 0, 0);
+	}
+
+	return ret;
+}
+
 #endif /* CPTCFG_ATH12K_SAWF */
 static struct wiphy_vendor_command ath12k_vendor_commands[] = {
 #ifdef CPTCFG_ATH12K_SAWF
@@ -673,7 +765,15 @@ static struct wiphy_vendor_command ath12
 		.policy = ath12k_vendor_telemetry_sawf_sla_detect_config_policy,
 		.maxattr = QCA_WLAN_VENDOR_TELEMETRY_SLA_DETECT_ATTR_CONFIG_MAX,
 	},
-#endif
+	{
+		.info.vendor_id = QCA_NL80211_VENDOR_ID,
+		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_SAWF_STREAMING_STATS,
+		.doit = ath12k_vendor_sawf_streaming_stats_configure,
+		.policy = ath12k_vendor_sawf_streaming,
+		.maxattr = QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_MAX,
+		.flags = WIPHY_VENDOR_CMD_NEED_NETDEV,
+	},
+#endif /* CPTCFG_ATH12K_SAWF */
 };
 
 int ath12k_vendor_register(struct ath12k_hw *ah)
--- a/drivers/net/wireless/ath/ath12k/vendor.h
+++ b/drivers/net/wireless/ath/ath12k/vendor.h
@@ -20,6 +20,7 @@ enum qca_nl80211_vendor_subcmds {
 	QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_SLA_THERSHOLD_CFG = 210,
 	QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_SLA_SAMPLES_CFG = 211,
 	QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_SLA_BREACH_DETECTION_CFG = 212,
+	QCA_NL80211_VENDOR_SUBCMD_SAWF_STREAMING_STATS = 213,
 #endif /* CPTCFG_ATH12K_SAWF */
 };
 
@@ -105,6 +106,17 @@ enum qca_wlan_vendor_attr_telemetry_sawf
 	QCA_WLAN_VENDOR_TELEMETRY_SLA_THERSHOLD_CFG_AFTER_LAST - 1,
 };
 
+enum ath12k_vendor_attr_sawf_streaming {
+	QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_INVALID = 0,
+	QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_BASIC_STATS = 1,
+	QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_EXTND_STATS = 2,
+	QCA_WLAN_VENDOR_ATTR_MLO_LINK_ID = 3,
+	/* keep last */
+	QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_AFTER_LAST,
+	QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_MAX =
+		QCA_WLAN_VENDOR_ATTR_SAWF_STREAMING_AFTER_LAST - 1,
+};
+
 #endif /* CPTCFG_ATH12K_SAWF */
 
 int ath12k_vendor_register(struct ath12k_hw *ah);
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -2182,6 +2182,9 @@ void ath12k_dp_htt_htc_t2h_msg_handler(s
 	case HTT_T2H_MSG_TYPE_SAWF_DEF_QUEUES_MAP_REPORT_CONF:
 		ath12k_htt_sawf_def_q_map_report_handler(ab, skb);
 		break;
+	case HTT_T2H_MSG_TYPE_STREAMING_STATS_IND:
+		ath12k_htt_sawf_streaming_stats_ind_handler(ab, skb);
+		break;
 #endif /* CPTCFG_ATH12K_SAWF */
 	default:
 		ath12k_dbg(ab, ATH12K_DBG_DP_HTT, "dp_htt event %d not handled\n",
