From 2258561e0cdaddf1380c55749a199e6c4e95694a Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Thu, 1 Sep 2022 15:52:03 +0530
Subject: [PATCH 5/5] Revert "ath12k: remove testmode support"

This reverts commit e8debdc2b28102dde483374e29ecc305639b87a9.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/Makefile     |   1 +
 drivers/net/wireless/ath/ath12k/mac.c        |   3 +-
 drivers/net/wireless/ath/ath12k/testmode.c   | 200 +++++++++++++++++++
 drivers/net/wireless/ath/ath12k/testmode.h   |  30 +++
 drivers/net/wireless/ath/ath12k/testmode_i.h |  51 +++++
 5 files changed, 284 insertions(+), 1 deletion(-)
 create mode 100644 drivers/net/wireless/ath/ath12k/testmode.c
 create mode 100644 drivers/net/wireless/ath/ath12k/testmode.h
 create mode 100644 drivers/net/wireless/ath/ath12k/testmode_i.h

--- a/drivers/net/wireless/ath/ath12k/Makefile
+++ b/drivers/net/wireless/ath/ath12k/Makefile
@@ -23,6 +23,7 @@ ath12k-y += core.o \
 	    dp_mon.o
 
 ath12k-$(CPTCFG_ATH12K_DEBUGFS) += debugfs.o debugfs_htt_stats.o debugfs_sta.o
+ath12k-$(CPTCFG_NL80211_TESTMODE) += testmode.o
 ath12k-$(CPTCFG_ATH12K_TRACING) += trace.o
 ath12k-$(CONFIG_THERMAL) += thermal.o
 ath12k-$(CPTCFG_ATH12K_SPECTRAL) += spectral.o
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -13,6 +13,7 @@
 #include "hw.h"
 #include "dp_tx.h"
 #include "dp_rx.h"
+#include "testmode.h"
 #include "peer.h"
 #include "debugfs_sta.h"
 
@@ -6469,7 +6470,7 @@ static const struct ieee80211_ops ath12k
 	.get_survey			= ath12k_mac_op_get_survey,
 	.flush				= ath12k_mac_op_flush,
 	.sta_statistics			= ath12k_mac_op_sta_statistics,
-
+	CFG80211_TESTMODE_CMD(ath12k_tm_cmd)
 #ifdef CPTCFG_ATH12K_DEBUGFS
 	.sta_add_debugfs		= ath12k_debugfs_sta_op_add,
 #endif
--- /dev/null
+++ b/drivers/net/wireless/ath/ath12k/testmode.c
@@ -0,0 +1,200 @@
+// SPDX-License-Identifier: BSD-3-Clause-Clear
+/*
+ * Copyright (c) 2018-2021 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2021-2022 Qualcomm Innovation Center, Inc. All rights reserved.
+ */
+
+#include "testmode.h"
+#include <net/netlink.h>
+#include "debug.h"
+#include "wmi.h"
+#include "hw.h"
+#include "core.h"
+#include "testmode_i.h"
+
+static const struct nla_policy ath12k_tm_policy[ATH12K_TM_ATTR_MAX + 1] = {
+	[ATH12K_TM_ATTR_CMD]		= { .type = NLA_U32 },
+	[ATH12K_TM_ATTR_DATA]		= { .type = NLA_BINARY,
+					    .len = ATH12K_TM_DATA_MAX_LEN },
+	[ATH12K_TM_ATTR_WMI_CMDID]	= { .type = NLA_U32 },
+	[ATH12K_TM_ATTR_VERSION_MAJOR]	= { .type = NLA_U32 },
+	[ATH12K_TM_ATTR_VERSION_MINOR]	= { .type = NLA_U32 },
+};
+
+/* Returns true if callee consumes the skb and the skb should be discarded.
+ * Returns false if skb is not used. Does not sleep.
+ */
+bool ath12k_tm_event_wmi(struct ath12k *ar, u32 cmd_id, struct sk_buff *skb)
+{
+	struct sk_buff *nl_skb;
+	bool consumed;
+	int ret;
+
+	ath12k_dbg(ar->ab, ATH12K_DBG_TESTMODE,
+		   "testmode event wmi cmd_id %d skb %pK skb->len %d\n",
+		   cmd_id, skb, skb->len);
+
+	ath12k_dbg_dump(ar->ab, ATH12K_DBG_TESTMODE, NULL, "", skb->data, skb->len);
+
+	spin_lock_bh(&ar->data_lock);
+
+	consumed = true;
+
+	nl_skb = cfg80211_testmode_alloc_event_skb(ar->hw->wiphy,
+						   2 * sizeof(u32) + skb->len,
+						   GFP_ATOMIC);
+	if (!nl_skb) {
+		ath12k_warn(ar->ab,
+			    "failed to allocate skb for testmode wmi event\n");
+		goto out;
+	}
+
+	ret = nla_put_u32(nl_skb, ATH12K_TM_ATTR_CMD, ATH12K_TM_CMD_WMI);
+	if (ret) {
+		ath12k_warn(ar->ab,
+			    "failed to put testmode wmi event cmd attribute: %d\n",
+			    ret);
+		kfree_skb(nl_skb);
+		goto out;
+	}
+
+	ret = nla_put_u32(nl_skb, ATH12K_TM_ATTR_WMI_CMDID, cmd_id);
+	if (ret) {
+		ath12k_warn(ar->ab,
+			    "failed to put testmode wmi even cmd_id: %d\n",
+			    ret);
+		kfree_skb(nl_skb);
+		goto out;
+	}
+
+	ret = nla_put(nl_skb, ATH12K_TM_ATTR_DATA, skb->len, skb->data);
+	if (ret) {
+		ath12k_warn(ar->ab,
+			    "failed to copy skb to testmode wmi event: %d\n",
+			    ret);
+		kfree_skb(nl_skb);
+		goto out;
+	}
+
+	cfg80211_testmode_event(nl_skb, GFP_ATOMIC);
+
+out:
+	spin_unlock_bh(&ar->data_lock);
+
+	return consumed;
+}
+
+static int ath12k_tm_cmd_get_version(struct ath12k *ar, struct nlattr *tb[])
+{
+	struct sk_buff *skb;
+	int ret;
+
+	ath12k_dbg(ar->ab, ATH12K_DBG_TESTMODE,
+		   "testmode cmd get version_major %d version_minor %d\n",
+		   ATH12K_TESTMODE_VERSION_MAJOR,
+		   ATH12K_TESTMODE_VERSION_MINOR);
+
+	skb = cfg80211_testmode_alloc_reply_skb(ar->hw->wiphy,
+						nla_total_size(sizeof(u32)));
+	if (!skb)
+		return -ENOMEM;
+
+	ret = nla_put_u32(skb, ATH12K_TM_ATTR_VERSION_MAJOR,
+			  ATH12K_TESTMODE_VERSION_MAJOR);
+	if (ret) {
+		kfree_skb(skb);
+		return ret;
+	}
+
+	ret = nla_put_u32(skb, ATH12K_TM_ATTR_VERSION_MINOR,
+			  ATH12K_TESTMODE_VERSION_MINOR);
+	if (ret) {
+		kfree_skb(skb);
+		return ret;
+	}
+
+	return cfg80211_testmode_reply(skb);
+}
+
+static int ath12k_tm_cmd_wmi(struct ath12k *ar, struct nlattr *tb[])
+{
+	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct sk_buff *skb;
+	u32 cmd_id, buf_len;
+	int ret;
+	void *buf;
+
+	mutex_lock(&ar->conf_mutex);
+
+	if (ar->state != ATH12K_STATE_ON) {
+		ret = -ENETDOWN;
+		goto out;
+	}
+
+	if (!tb[ATH12K_TM_ATTR_DATA]) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	if (!tb[ATH12K_TM_ATTR_WMI_CMDID]) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	buf = nla_data(tb[ATH12K_TM_ATTR_DATA]);
+	buf_len = nla_len(tb[ATH12K_TM_ATTR_DATA]);
+	cmd_id = nla_get_u32(tb[ATH12K_TM_ATTR_WMI_CMDID]);
+
+	ath12k_dbg(ar->ab, ATH12K_DBG_TESTMODE,
+		   "testmode cmd wmi cmd_id %d buf %pK buf_len %d\n",
+		   cmd_id, buf, buf_len);
+
+	ath12k_dbg_dump(ar->ab, ATH12K_DBG_TESTMODE, NULL, "", buf, buf_len);
+
+	skb = ath12k_wmi_alloc_skb(wmi->wmi_ab, buf_len);
+	if (!skb) {
+		ret = -ENOMEM;
+		goto out;
+	}
+
+	memcpy(skb->data, buf, buf_len);
+
+	ret = ath12k_wmi_cmd_send(wmi, skb, cmd_id);
+	if (ret) {
+		dev_kfree_skb(skb);
+		ath12k_warn(ar->ab, "failed to transmit wmi command (testmode): %d\n",
+			    ret);
+		goto out;
+	}
+
+	ret = 0;
+
+out:
+	mutex_unlock(&ar->conf_mutex);
+	return ret;
+}
+
+int ath12k_tm_cmd(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+		  void *data, int len)
+{
+	struct ath12k *ar = hw->priv;
+	struct nlattr *tb[ATH12K_TM_ATTR_MAX + 1];
+	int ret;
+
+	ret = nla_parse(tb, ATH12K_TM_ATTR_MAX, data, len, ath12k_tm_policy,
+			NULL);
+	if (ret)
+		return ret;
+
+	if (!tb[ATH12K_TM_ATTR_CMD])
+		return -EINVAL;
+
+	switch (nla_get_u32(tb[ATH12K_TM_ATTR_CMD])) {
+	case ATH12K_TM_CMD_GET_VERSION:
+		return ath12k_tm_cmd_get_version(ar, tb);
+	case ATH12K_TM_CMD_WMI:
+		return ath12k_tm_cmd_wmi(ar, tb);
+	default:
+		return -EOPNOTSUPP;
+	}
+}
--- /dev/null
+++ b/drivers/net/wireless/ath/ath12k/testmode.h
@@ -0,0 +1,30 @@
+/* SPDX-License-Identifier: BSD-3-Clause-Clear */
+/*
+ * Copyright (c) 2018-2021 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2021-2022 Qualcomm Innovation Center, Inc. All rights reserved.
+ */
+
+#include "core.h"
+
+#ifdef CPTCFG_NL80211_TESTMODE
+
+bool ath12k_tm_event_wmi(struct ath12k *ar, u32 cmd_id, struct sk_buff *skb);
+int ath12k_tm_cmd(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+		  void *data, int len);
+
+#else
+
+static inline bool ath12k_tm_event_wmi(struct ath12k *ar, u32 cmd_id,
+				       struct sk_buff *skb)
+{
+	return false;
+}
+
+static inline int ath12k_tm_cmd(struct ieee80211_hw *hw,
+				struct ieee80211_vif *vif,
+				void *data, int len)
+{
+	return 0;
+}
+
+#endif
--- /dev/null
+++ b/drivers/net/wireless/ath/ath12k/testmode_i.h
@@ -0,0 +1,51 @@
+/* SPDX-License-Identifier: BSD-3-Clause-Clear */
+/*
+ * Copyright (c) 2018-2021 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2021-2022 Qualcomm Innovation Center, Inc. All rights reserved.
+ */
+
+/* "API" level of the ath12k testmode interface. Bump it after every
+ * incompatible interface change.
+ */
+#define ATH12K_TESTMODE_VERSION_MAJOR 1
+
+/* Bump this after every _compatible_ interface change, for example
+ * addition of a new command or an attribute.
+ */
+#define ATH12K_TESTMODE_VERSION_MINOR 0
+
+#define ATH12K_TM_DATA_MAX_LEN		5000
+
+enum ath12k_tm_attr {
+	__ATH12K_TM_ATTR_INVALID		= 0,
+	ATH12K_TM_ATTR_CMD			= 1,
+	ATH12K_TM_ATTR_DATA			= 2,
+	ATH12K_TM_ATTR_WMI_CMDID		= 3,
+	ATH12K_TM_ATTR_VERSION_MAJOR		= 4,
+	ATH12K_TM_ATTR_VERSION_MINOR		= 5,
+	ATH12K_TM_ATTR_WMI_OP_VERSION		= 6,
+
+	/* keep last */
+	__ATH12K_TM_ATTR_AFTER_LAST,
+	ATH12K_TM_ATTR_MAX		= __ATH12K_TM_ATTR_AFTER_LAST - 1,
+};
+
+/* All ath12k testmode interface commands specified in
+ * ATH12K_TM_ATTR_CMD
+ */
+enum ath12k_tm_cmd {
+	/* Returns the supported ath12k testmode interface version in
+	 * ATH12K_TM_ATTR_VERSION. Always guaranteed to work. User space
+	 * uses this to verify it's using the correct version of the
+	 * testmode interface
+	 */
+	ATH12K_TM_CMD_GET_VERSION = 0,
+
+	/* The command used to transmit a WMI command to the firmware and
+	 * the event to receive WMI events from the firmware. Without
+	 * struct wmi_cmd_hdr header, only the WMI payload. Command id is
+	 * provided with ATH12K_TM_ATTR_WMI_CMDID and payload in
+	 * ATH12K_TM_ATTR_DATA.
+	 */
+	ATH12K_TM_CMD_WMI = 1,
+};
