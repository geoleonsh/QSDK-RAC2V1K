From cf8481141791f0716965997fa7867caf0925abb2 Mon Sep 17 00:00:00 2001
From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Date: Wed, 10 Aug 2022 14:23:44 -0700
Subject: [PATCH 06/12] ath12k: Optimize tx completions in case of stats
 disable

Currently we parse all the necessary fields in tx completions.
But when stats are disabled, all these are not used. Hence, Parse
only necessary information from descriptors when stats
are disabled.

Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_tx.c | 100 +++++++++++++-----------
 1 file changed, 55 insertions(+), 45 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -611,9 +611,37 @@ err_out:
 	spin_unlock_bh(&ab->base_lock);
 }
 
+static inline void ath12k_dp_tx_status_parse(struct ath12k_base *ab,
+					     struct hal_wbm_completion_ring_tx *desc,
+					     struct hal_tx_status *ts)
+{
+	ts->buf_rel_source =
+		FIELD_GET(HAL_WBM_COMPL_TX_INFO0_REL_SRC_MODULE, desc->info0);
+	if (ts->buf_rel_source != HAL_WBM_REL_SRC_MODULE_FW &&
+	    ts->buf_rel_source != HAL_WBM_REL_SRC_MODULE_TQM)
+		return;
+
+	if (ts->buf_rel_source == HAL_WBM_REL_SRC_MODULE_FW)
+		return;
+
+	ts->status = FIELD_GET(HAL_WBM_COMPL_TX_INFO0_TQM_RELEASE_REASON,
+			       desc->info0);
+	ts->ppdu_id = FIELD_GET(HAL_WBM_COMPL_TX_INFO1_TQM_STATUS_NUMBER,
+				desc->info1);
+	if (desc->rate_stats.info0 & HAL_TX_RATE_STATS_INFO0_VALID)
+		ts->rate_stats = desc->rate_stats.info0;
+	else
+		ts->rate_stats = 0;
+
+	ts->peer_id = FIELD_GET(HAL_WBM_RELEASE_TX_INFO3_PEER_ID, desc->info3);
+	ts->flags = FIELD_GET(HAL_WBM_RELEASE_TX_INFO2_FIRST_MSDU, desc->info2) |
+		    FIELD_GET(HAL_WBM_RELEASE_TX_INFO2_LAST_MSDU, desc->info2);
+}
+
 static void ath12k_dp_tx_complete_msdu(struct ath12k *ar,
 				       struct sk_buff *msdu,
-				       struct hal_tx_status *ts)
+				       struct hal_wbm_release_ring *tx_status,
+				       enum hal_wbm_rel_src_module buf_rel_source)
 {
 	struct ieee80211_tx_status status = { 0 };
 
@@ -623,10 +651,12 @@ static void ath12k_dp_tx_complete_msdu(s
 	struct ath12k_peer *peer;
 	struct ath12k_sta *arsta;
 	struct rate_info rate;
+	struct hal_tx_status ts = { 0 };
+	enum hal_wbm_tqm_rel_reason rel_status;
 	u8 flags = 0;
 
 
-	if (WARN_ON_ONCE(ts->buf_rel_source != HAL_WBM_REL_SRC_MODULE_TQM)) {
+	if (WARN_ON_ONCE(buf_rel_source != HAL_WBM_REL_SRC_MODULE_TQM)) {
 		/* Must not happen */
 		return;
 	}
@@ -640,11 +670,14 @@ static void ath12k_dp_tx_complete_msdu(s
 
 	flags = skb_cb->flags;
 
+	rel_status = FIELD_GET(HAL_WBM_COMPL_TX_INFO0_TQM_RELEASE_REASON,
+			       tx_status->info0);
+
 	/* Free skb here if stats is disabled */
 	if (ab->stats_disable && !(flags & ATH12K_SKB_TX_STATUS)) {
 		if (msdu->destructor) {
 			msdu->wifi_acked_valid = 1;
-			msdu->wifi_acked = ts->status ==
+			msdu->wifi_acked = rel_status ==
 					   HAL_WBM_TQM_REL_REASON_FRAME_ACKED;
 		}
 		if (skb_has_frag_list(msdu)) {
@@ -655,6 +688,8 @@ static void ath12k_dp_tx_complete_msdu(s
 		return;
 	}
 
+	ath12k_dp_tx_status_parse(ab, tx_status, &ts);
+
 	rcu_read_lock();
 
 	if (!rcu_dereference(ab->pdevs_active[ar->pdev_idx])) {
@@ -673,48 +708,48 @@ static void ath12k_dp_tx_complete_msdu(s
 	/* skip tx rate update from ieee80211_status*/
 	info->status.rates[0].idx = -1;
 
-	if (ts->status == HAL_WBM_TQM_REL_REASON_FRAME_ACKED &&
+	if (ts.status == HAL_WBM_TQM_REL_REASON_FRAME_ACKED &&
 	    !(info->flags & IEEE80211_TX_CTL_NO_ACK)) {
 		info->flags |= IEEE80211_TX_STAT_ACK;
 		info->status.ack_signal = ATH12K_DEFAULT_NOISE_FLOOR +
-					  ts->ack_rssi;
+					  ts.ack_rssi;
 		info->status.flags = IEEE80211_TX_STATUS_ACK_SIGNAL_VALID;
 	}
 
-	if (ts->status == HAL_WBM_TQM_REL_REASON_CMD_REMOVE_TX &&
+	if (ts.status == HAL_WBM_TQM_REL_REASON_CMD_REMOVE_TX &&
 	    (info->flags & IEEE80211_TX_CTL_NO_ACK))
 		info->flags |= IEEE80211_TX_STAT_NOACK_TRANSMITTED;
 
 	if (ath12k_debugfs_is_extd_tx_stats_enabled(ar) ||
 	    ab->hw_params->single_pdev_only) {
-		if (ts->flags & HAL_TX_STATUS_FLAGS_FIRST_MSDU) {
+		if (ts.flags & HAL_TX_STATUS_FLAGS_FIRST_MSDU) {
 			if (ar->last_ppdu_id == 0) {
-				ar->last_ppdu_id = ts->ppdu_id;
-			} else if (ar->last_ppdu_id == ts->ppdu_id ||
+				ar->last_ppdu_id = ts.ppdu_id;
+			} else if (ar->last_ppdu_id == ts.ppdu_id ||
 				   ar->cached_ppdu_id == ar->last_ppdu_id) {
 				ar->cached_ppdu_id = ar->last_ppdu_id;
 				ar->cached_stats.is_ampdu = true;
-				ath12k_dp_tx_update_txcompl(ar, ts);
+				ath12k_dp_tx_update_txcompl(ar, &ts);
 				memset(&ar->cached_stats, 0,
 				       sizeof(struct ath12k_per_peer_tx_stats));
 			} else {
 				ar->cached_stats.is_ampdu = false;
-				ath12k_dp_tx_update_txcompl(ar, ts);
+				ath12k_dp_tx_update_txcompl(ar, &ts);
 				memset(&ar->cached_stats, 0,
 				       sizeof(struct ath12k_per_peer_tx_stats));
 			}
-			ar->last_ppdu_id = ts->ppdu_id;
+			ar->last_ppdu_id = ts.ppdu_id;
 		}
 
-		ath12k_dp_tx_cache_peer_stats(ar, msdu, ts);
+		ath12k_dp_tx_cache_peer_stats(ar, msdu, &ts);
 	}
 
 	spin_lock_bh(&ab->base_lock);
-	peer = ath12k_peer_find_by_id(ab, ts->peer_id);
+	peer = ath12k_peer_find_by_id(ab, ts.peer_id);
 	if (!peer || !peer->sta) {
 		 ath12k_dbg(ab, ATH12K_DBG_DATA,
 				 "dp_tx: failed to find the peer with peer_id %d\n",
-				 ts->peer_id);
+				 ts.peer_id);
 		 spin_unlock_bh(&ab->base_lock);
 		 dev_kfree_skb_any(msdu);
 		 goto exit;
@@ -735,33 +770,6 @@ exit:
 	rcu_read_unlock();
 }
 
-static void ath12k_dp_tx_status_parse(struct ath12k_base *ab,
-				      struct hal_wbm_completion_ring_tx *desc,
-				      struct hal_tx_status *ts)
-{
-	ts->buf_rel_source =
-		u32_get_bits(desc->info0, HAL_WBM_COMPL_TX_INFO0_REL_SRC_MODULE);
-	if (ts->buf_rel_source != HAL_WBM_REL_SRC_MODULE_FW &&
-	    ts->buf_rel_source != HAL_WBM_REL_SRC_MODULE_TQM)
-		return;
-
-	if (ts->buf_rel_source == HAL_WBM_REL_SRC_MODULE_FW)
-		return;
-
-	ts->status = u32_get_bits(desc->info0,
-				  HAL_WBM_COMPL_TX_INFO0_TQM_RELEASE_REASON);
-
-	ts->ppdu_id = u32_get_bits(desc->info1,
-				   HAL_WBM_COMPL_TX_INFO1_TQM_STATUS_NUMBER);
-	if (desc->rate_stats.info0 & HAL_TX_RATE_STATS_INFO0_VALID)
-		ts->rate_stats = desc->rate_stats.info0;
-	else
-		ts->rate_stats = 0;
-
-	ts->peer_id = FIELD_GET(HAL_WBM_RELEASE_TX_INFO3_PEER_ID,desc->info3);
-	ts->flags = FIELD_GET(HAL_WBM_RELEASE_TX_INFO2_FIRST_MSDU ,desc->info2) | FIELD_GET(HAL_WBM_RELEASE_TX_INFO2_LAST_MSDU ,desc->info2);
-}
-
 static inline bool ath12k_dp_tx_completion_valid(struct hal_wbm_release_ring *desc)
 {
 	struct htt_tx_wbm_completion *status_desc;
@@ -786,13 +794,13 @@ void ath12k_dp_tx_completion_handler(str
 	struct hal_srng *status_ring = &ab->hal.srng_list[hal_ring_id];
 	struct ath12k_tx_desc_info *tx_desc = NULL;
 	struct sk_buff *msdu;
-	struct hal_tx_status ts = { 0 };
 	struct dp_tx_ring *tx_ring = &dp->tx_ring[ring_id];
 	u32 *desc, desc_id;
 	u8 mac_id;
 	u64 desc_va;
 	int valid_entries, count = 0, i = 0;
 	struct hal_wbm_completion_ring_tx *tx_status;
+	enum hal_wbm_rel_src_module buf_rel_source;
 
 	spin_lock_bh(&status_ring->lock);
 
@@ -825,7 +833,6 @@ void ath12k_dp_tx_completion_handler(str
 
 	while (count--) {
 		tx_status = &tx_ring->tx_status[i++];
-		ath12k_dp_tx_status_parse(ab, tx_status, &ts);
 
 		if (u32_get_bits(tx_status->info0, HAL_WBM_COMPL_TX_INFO0_CC_DONE)) {
 			/* HW done cookie conversion */
@@ -851,7 +858,9 @@ void ath12k_dp_tx_completion_handler(str
 		 * to reduce contention
 		 */
 		ath12k_dp_tx_release_txbuf(dp, tx_desc, tx_desc->pool_id);
-		if (ts.buf_rel_source == HAL_WBM_REL_SRC_MODULE_FW) {
+		buf_rel_source = FIELD_GET(HAL_WBM_RELEASE_INFO0_REL_SRC_MODULE,
+					   tx_status->info0);
+		if (unlikely(buf_rel_source == HAL_WBM_REL_SRC_MODULE_FW)) {
 			ath12k_dp_tx_process_htt_tx_complete(ab,
 							     (void *)tx_status,
 							     mac_id, msdu,
@@ -864,7 +873,7 @@ void ath12k_dp_tx_completion_handler(str
 		if (atomic_dec_and_test(&ar->dp.num_tx_pending))
 			wake_up(&ar->dp.tx_empty_waitq);
 
-		ath12k_dp_tx_complete_msdu(ar, msdu, &ts);
+		ath12k_dp_tx_complete_msdu(ar, msdu, tx_status, buf_rel_source);
 	}
 }
 
