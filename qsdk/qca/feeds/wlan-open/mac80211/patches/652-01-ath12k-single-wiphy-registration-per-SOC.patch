From 3e5bc1991519d88ae2f87767680d962954f48c83 Mon Sep 17 00:00:00 2001
From: Sriram R <quic_srirrama@quicinc.com>
Date: Tue, 21 Dec 2021 13:44:27 +0530
Subject: [PATCH 01/10] ath12k: single wiphy registration per SOC

Group all the hardware within the SOC as a single wiphy. For MLO,
we have to move away from multi-wiphy model to support MLO accross
multiple radio. So combine all the radio and register as single
wiphy. It avoid overhead across the hardware access in upper layer.
Also made the change in mac80211 registration and mac80211 callback.

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Signed-off-by: Sriram R <quic_srirrama@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c |  49 ++---
 drivers/net/wireless/ath/ath12k/core.h |  17 +-
 drivers/net/wireless/ath/ath12k/mac.c  | 384 ++++++++++++++++++---------------
 drivers/net/wireless/ath/ath12k/reg.c  |   6 +-
 drivers/net/wireless/ath/ath12k/reg.h  |   2 +-
 drivers/net/wireless/ath/ath12k/wmi.c  |  12 +-
 6 files changed, 257 insertions(+), 213 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -473,23 +473,23 @@ static int ath12k_core_pdev_create(struc
 		return ret;
 	}
 
-	ret = ath12k_mac_register(ab);
+	ret = ath12k_dp_pdev_alloc(ab);
 	if (ret) {
-		ath12k_err(ab, "failed register the radio with mac80211: %d\n", ret);
+		ath12k_err(ab, "failed to attach DP pdev: %d\n", ret);
 		goto err_pdev_debug;
 	}
 
-	ret = ath12k_dp_pdev_alloc(ab);
+	ret = ath12k_mac_register(ab);
 	if (ret) {
-		ath12k_err(ab, "failed to attach DP pdev: %d\n", ret);
-		goto err_mac_unregister;
+		ath12k_err(ab, "failed register the radio with mac80211: %d\n", ret);
+		goto err_dp_pdev_free;
 	}
 
 	ret = ath12k_thermal_register(ab);
 	if (ret) {
 		ath12k_err(ab, "could not register thermal device: %d\n",
 			   ret);
-		goto err_dp_pdev_free;
+		goto err_mac_unregister;
 	}
 
 	ret = ath12k_spectral_init(ab);
@@ -502,10 +502,10 @@ static int ath12k_core_pdev_create(struc
 
 err_thermal_unregister:
 	ath12k_thermal_unregister(ab);
-err_dp_pdev_free:
-	ath12k_dp_pdev_free(ab);
 err_mac_unregister:
 	ath12k_mac_unregister(ab);
+err_dp_pdev_free:
+	ath12k_dp_pdev_free(ab);
 err_pdev_debug:
 	ath12k_debugfs_pdev_destroy(ab);
 
@@ -576,13 +576,6 @@ static int ath12k_core_start(struct ath1
 		goto err_hif_stop;
 	}
 
-	ret = ath12k_mac_allocate(ab);
-	if (ret) {
-		ath12k_err(ab, "failed to create new hw device with mac80211 :%d\n",
-			   ret);
-		goto err_hif_stop;
-	}
-
 	ath12k_dp_cc_config(ab);
 
 	ath12k_dp_pdev_pre_alloc(ab);
@@ -590,20 +583,27 @@ static int ath12k_core_start(struct ath1
 	ret = ath12k_dp_rx_pdev_reo_setup(ab);
 	if (ret) {
 		ath12k_err(ab, "failed to initialize reo destination rings: %d\n", ret);
-		goto err_mac_destroy;
+		goto err_hif_stop;
+	}
+
+	ret = ath12k_mac_allocate(ab);
+	if (ret) {
+		ath12k_err(ab, "failed to create new hw device with mac80211 :%d\n",
+			   ret);
+		goto err_reo_cleanup;
 	}
 
 	ret = ath12k_wmi_cmd_init(ab);
 	if (ret) {
 		ath12k_err(ab, "failed to send wmi init cmd: %d\n", ret);
-		goto err_reo_cleanup;
+		goto err_mac_destroy;
 	}
 
 	ret = ath12k_wmi_wait_for_unified_ready(ab);
 	if (ret) {
 		ath12k_err(ab, "failed to receive wmi unified ready event: %d\n",
 			   ret);
-		goto err_reo_cleanup;
+		goto err_mac_destroy;
 	}
 
 	/* put hardware to DBS mode */
@@ -611,7 +611,7 @@ static int ath12k_core_start(struct ath1
 		ret = ath12k_wmi_set_hw_mode(ab, WMI_HOST_HW_MODE_DBS);
 		if (ret) {
 			ath12k_err(ab, "failed to send dbs mode: %d\n", ret);
-			goto err_hif_stop;
+			goto err_mac_destroy;
 		}
 	}
 
@@ -619,15 +619,15 @@ static int ath12k_core_start(struct ath1
 	if (ret) {
 		ath12k_err(ab, "failed to send htt version request message: %d\n",
 			   ret);
-		goto err_reo_cleanup;
+		goto err_mac_destroy;
 	}
 
 	return 0;
 
-err_reo_cleanup:
-	ath12k_dp_rx_pdev_reo_cleanup(ab);
 err_mac_destroy:
 	ath12k_mac_destroy(ab);
+err_reo_cleanup:
+	ath12k_dp_rx_pdev_reo_cleanup(ab);
 err_hif_stop:
 	ath12k_hif_stop(ab);
 err_wmi_detach:
@@ -798,6 +798,8 @@ static void ath12k_core_restart(struct w
 	ab->stats.fw_crash_counter++;
 	spin_unlock_bh(&ab->base_lock);
 
+	ieee80211_stop_queues(ab->ah->hw);
+
 	for (i = 0; i < ab->num_radios; i++) {
 		pdev = &ab->pdevs[i];
 		ar = pdev->ar;
@@ -810,7 +812,6 @@ static void ath12k_core_restart(struct w
 			}
 		}
 
-		ieee80211_stop_queues(ar->hw);
 		ath12k_mac_drain_tx(ar);
 		complete(&ar->scan.started);
 		complete(&ar->scan.completed);
@@ -855,7 +856,7 @@ static void ath12k_core_restart(struct w
 		case ATH12K_STATE_ON:
 			ar->state = ATH12K_STATE_RESTARTING;
 			ath12k_core_halt(ar);
-			ieee80211_restart_hw(ar->hw);
+			ieee80211_restart_hw(ab->ah->hw);
 			break;
 		case ATH12K_STATE_OFF:
 			ath12k_warn(ab,
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -598,9 +598,8 @@ enum ath12k_fw_recovery_option {
 
 struct ath12k {
 	struct ath12k_base *ab;
-	struct ath12k_pdev *pdev;
 	struct ieee80211_hw *hw;
-	struct ieee80211_ops *ops;
+	struct ath12k_pdev *pdev;
 	struct ath12k_pdev_wmi *wmi;
 	struct ath12k_pdev_dp dp;
 	u8 mac_addr[ETH_ALEN];
@@ -843,11 +842,24 @@ struct ath12k_reg_freq {
 };
 
 
+struct ath12k_hw {
+	struct ieee80211_hw *hw;
+	const struct ieee80211_ops *ops;
+
+	/* To synchronize concurrent synchronous mac80211 callback operations,
+	 * concurrent debugfs configuration and concurrent FW statistics events.
+	 */
+	struct mutex conf_mutex;
+	u8 num_radio;
+	struct ath12k radio[0] __aligned(sizeof(void *));
+};
+
 /* Master structure to hold the hw data which may be used in core module */
 struct ath12k_base {
 	enum ath12k_hw_rev hw_rev;
 	struct platform_device *pdev;
 	struct device *dev;
+	struct ath12k_hw *ah;
 	struct ath12k_qmi qmi;
 	struct ath12k_wmi_base wmi_ab;
 	struct completion fw_ready;
@@ -1165,5 +1177,4 @@ static inline const char *ath12k_bus_str
 
 	return "unknown";
 }
-
 #endif /* _CORE_H_ */
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -9680,9 +9680,9 @@ static int ath12k_mac_setup_channels_rat
 	return 0;
 }
 
-static int ath12k_mac_setup_iface_combinations(struct ath12k *ar)
+static int ath12k_mac_setup_iface_combinations(struct ath12k_base *ab)
 {
-	struct ath12k_base *ab = ar->ab;
+	struct ieee80211_hw *hw = ab->ah->hw;
 	struct ieee80211_iface_combination *combinations;
 	struct ieee80211_iface_limit *limits;
 	int n_limits, max_interfaces;
@@ -9736,8 +9736,8 @@ static int ath12k_mac_setup_iface_combin
 						BIT(NL80211_CHAN_WIDTH_160) |
 						BIT(NL80211_CHAN_WIDTH_320);
 
-	ar->hw->wiphy->iface_combinations = combinations;
-	ar->hw->wiphy->n_iface_combinations = 1;
+	hw->wiphy->iface_combinations = combinations;
+	hw->wiphy->n_iface_combinations = 1;
 
 	return 0;
 }
@@ -9787,19 +9787,12 @@ static void __ath12k_mac_unregister(stru
 {
 	cancel_work_sync(&ar->regd_update_work);
 
-	ieee80211_unregister_hw(ar->hw);
-
 	idr_for_each(&ar->txmgmt_idr, ath12k_mac_tx_mgmt_pending_free, ar);
 	idr_destroy(&ar->txmgmt_idr);
 
 	kfree(ar->mac.sbands[NL80211_BAND_2GHZ].channels);
 	kfree(ar->mac.sbands[NL80211_BAND_5GHZ].channels);
 	kfree(ar->mac.sbands[NL80211_BAND_6GHZ].channels);
-
-	kfree(ar->hw->wiphy->iface_combinations[0].limits);
-	kfree(ar->hw->wiphy->iface_combinations);
-
-	SET_IEEE80211_DEV(ar->hw, NULL);
 }
 
 void ath12k_mac_unregister(struct ath12k_base *ab)
@@ -9816,211 +9809,96 @@ void ath12k_mac_unregister(struct ath12k
 
 		__ath12k_mac_unregister(ar);
 	}
+
+	kfree(ab->ah->hw->wiphy->iface_combinations[0].limits);
+	kfree(ab->ah->hw->wiphy->iface_combinations);
+
+	ieee80211_unregister_hw(ab->ah->hw);
+	SET_IEEE80211_DEV(ab->ah->hw, NULL);
 }
 
 static int __ath12k_mac_register(struct ath12k *ar)
 {
-	struct ath12k_base *ab = ar->ab;
-	struct ath12k_pdev_cap *cap = &ar->pdev->cap;
-	static const u32 cipher_suites[] = {
-		WLAN_CIPHER_SUITE_TKIP,
-		WLAN_CIPHER_SUITE_CCMP,
-		WLAN_CIPHER_SUITE_AES_CMAC,
-		WLAN_CIPHER_SUITE_BIP_CMAC_256,
-		WLAN_CIPHER_SUITE_BIP_GMAC_128,
-		WLAN_CIPHER_SUITE_BIP_GMAC_256,
-		WLAN_CIPHER_SUITE_GCMP,
-		WLAN_CIPHER_SUITE_GCMP_256,
-		WLAN_CIPHER_SUITE_CCMP_256,
-	};
+	struct ieee80211_hw *hw;
+	struct ath12k_pdev_cap *cap;
 	int ret;
 	u32 ht_cap = 0;
 
-	ath12k_pdev_caps_update(ar);
-
-	SET_IEEE80211_PERM_ADDR(ar->hw, ar->mac_addr);
-
-	SET_IEEE80211_DEV(ar->hw, ab->dev);
+	hw = ar->hw;
+	init_waitqueue_head(&ar->txmgmt_empty_waitq);
+	idr_init(&ar->txmgmt_idr);
+	spin_lock_init(&ar->txmgmt_idr_lock);
 
+	cap = &ar->pdev->cap;
 	ret = ath12k_mac_setup_channels_rates(ar,
 					      cap->supported_bands);
 	if (ret)
-		goto err;
+		return ret;
 
 	ath12k_mac_setup_ht_vht_cap(ar, cap, &ht_cap);
 	ath12k_mac_setup_he_eht_cap(ar, cap);
 
-	ret = ath12k_mac_setup_iface_combinations(ar);
-	if (ret) {
-		ath12k_err(ar->ab, "failed to setup interface combinations: %d\n", ret);
-		goto err_free_channels;
-	}
-
-	ar->hw->wiphy->available_antennas_rx = cap->rx_chain_mask;
-	ar->hw->wiphy->available_antennas_tx = cap->tx_chain_mask;
-
-	ar->hw->wiphy->interface_modes = ab->hw_params->interface_modes;
+	ath12k_pdev_caps_update(ar);
 
-	ar->hw->wiphy->ru_punct_supp_bw = NL80211_RU_PUNCT_SUPP_BW_80;
-
-	ieee80211_hw_set(ar->hw, SIGNAL_DBM);
-	ieee80211_hw_set(ar->hw, SUPPORTS_PS);
-	ieee80211_hw_set(ar->hw, SUPPORTS_DYNAMIC_PS);
-	ieee80211_hw_set(ar->hw, MFP_CAPABLE);
-	ieee80211_hw_set(ar->hw, REPORTS_TX_ACK_STATUS);
-	ieee80211_hw_set(ar->hw, HAS_RATE_CONTROL);
-	ieee80211_hw_set(ar->hw, AP_LINK_PS);
-	ieee80211_hw_set(ar->hw, SPECTRUM_MGMT);
-	ieee80211_hw_set(ar->hw, CONNECTION_MONITOR);
-	ieee80211_hw_set(ar->hw, SUPPORTS_PER_STA_GTK);
-	ieee80211_hw_set(ar->hw, WANT_MONITOR_VIF);
-	ieee80211_hw_set(ar->hw, CHANCTX_STA_CSA);
-	ieee80211_hw_set(ar->hw, QUEUE_CONTROL);
-	ieee80211_hw_set(ar->hw, SUPPORTS_TX_FRAG);
-	ieee80211_hw_set(ar->hw, REPORTS_LOW_ACK);
-	if (ath12k_frame_mode == ATH12K_HW_TXRX_ETHERNET) {
-		ieee80211_hw_set(ar->hw, SUPPORTS_TX_ENCAP_OFFLOAD);
-		ieee80211_hw_set(ar->hw, SUPPORTS_RX_DECAP_OFFLOAD);
-	}
+	ar->max_num_stations = TARGET_NUM_STATIONS;
+	ar->max_num_peers = TARGET_NUM_PEERS_PDEV;
 
 	if (cap->nss_ratio_enabled)
-		ieee80211_hw_set(ar->hw, SUPPORTS_VHT_EXT_NSS_BW);
+		ieee80211_hw_set(hw, SUPPORTS_VHT_EXT_NSS_BW);
 
-	if ((ht_cap & WMI_HT_CAP_ENABLED) || ar->supports_6ghz) {
-		ieee80211_hw_set(ar->hw, AMPDU_AGGREGATION);
-		ieee80211_hw_set(ar->hw, TX_AMPDU_SETUP_IN_HW);
-		ieee80211_hw_set(ar->hw, SUPPORTS_REORDERING_BUFFER);
-		ieee80211_hw_set(ar->hw, SUPPORTS_AMSDU_IN_AMPDU);
-		ieee80211_hw_set(ar->hw, USES_RSS);
-	}
-
-	if (ar->ab->hw_params->supports_ap_ps)
-		ieee80211_hw_set(ar->hw, SUPPORTS_AP_PS);
-
-	ar->hw->wiphy->features |= NL80211_FEATURE_STATIC_SMPS;
-	ar->hw->wiphy->flags |= WIPHY_FLAG_IBSS_RSN;
+	ieee80211_hw_set(hw, AMPDU_AGGREGATION);
+	ieee80211_hw_set(hw, TX_AMPDU_SETUP_IN_HW);
+	ieee80211_hw_set(hw, SUPPORTS_REORDERING_BUFFER);
+	ieee80211_hw_set(hw, SUPPORTS_AMSDU_IN_AMPDU);
+	ieee80211_hw_set(hw, USES_RSS);
 
 	/* TODO: Check if HT capability advertised from firmware is different
 	 * for each band for a dual band capable radio. It will be tricky to
 	 * handle it when the ht capability different for each band.
 	 */
 	if (ht_cap & WMI_HT_CAP_DYNAMIC_SMPS || ar->supports_6ghz)
-		ar->hw->wiphy->features |= NL80211_FEATURE_DYNAMIC_SMPS;
-
-	ar->hw->wiphy->max_scan_ssids = WLAN_SCAN_PARAMS_MAX_SSID;
-	ar->hw->wiphy->max_scan_ie_len = WLAN_SCAN_PARAMS_MAX_IE_LEN;
-
-	ar->hw->max_listen_interval = ATH12K_MAX_HW_LISTEN_INTERVAL;
-
-	ar->hw->wiphy->flags |= WIPHY_FLAG_HAS_REMAIN_ON_CHANNEL;
-	ar->hw->wiphy->flags |= WIPHY_FLAG_HAS_CHANNEL_SWITCH;
-	ar->hw->wiphy->max_remain_on_channel_duration = 5000;
-
-	ar->hw->wiphy->flags |= WIPHY_FLAG_AP_UAPSD;
-	ar->hw->wiphy->features |= NL80211_FEATURE_AP_MODE_CHAN_WIDTH_CHANGE |
-				   NL80211_FEATURE_AP_SCAN;
-
-	ar->max_num_stations = TARGET_NUM_STATIONS;
-	ar->max_num_peers = TARGET_NUM_PEERS_PDEV;
-
-	ar->hw->wiphy->max_ap_assoc_sta = ar->max_num_stations;
-
-	ar->hw->queues = ATH12K_HW_MAX_QUEUES;
-	ar->hw->wiphy->tx_queue_len = ATH12K_QUEUE_LEN;
-	ar->hw->offchannel_tx_hw_queue = ATH12K_HW_MAX_QUEUES - 1;
-	ar->hw->max_rx_aggregation_subframes = IEEE80211_MAX_AMPDU_BUF_EHT;
-
-	ar->hw->vif_data_size = sizeof(struct ath12k_vif);
-	ar->hw->sta_data_size = sizeof(struct ath12k_sta);
-
-	wiphy_ext_feature_set(ar->hw->wiphy, NL80211_EXT_FEATURE_CQM_RSSI_LIST);
-	wiphy_ext_feature_set(ar->hw->wiphy, NL80211_EXT_FEATURE_STA_TX_PWR);
-
-	if (test_bit(WMI_TLV_SERVICE_BSS_COLOR_OFFLOAD, ar->ab->wmi_ab.svc_map))
-                wiphy_ext_feature_set(ar->hw->wiphy,
-                                      NL80211_EXT_FEATURE_BSS_COLOR);
-
-	ar->hw->wiphy->cipher_suites = cipher_suites;
-	ar->hw->wiphy->n_cipher_suites = ARRAY_SIZE(cipher_suites);
-
-	ar->hw->wiphy->iftype_ext_capab = ath12k_iftypes_ext_capa;
-	ar->hw->wiphy->num_iftype_ext_capab =
-		ARRAY_SIZE(ath12k_iftypes_ext_capa);
+		hw->wiphy->features |= NL80211_FEATURE_DYNAMIC_SMPS;
 
 	if (ar->supports_6ghz) {
-		wiphy_ext_feature_set(ar->hw->wiphy,
+		wiphy_ext_feature_set(hw->wiphy,
 				      NL80211_EXT_FEATURE_FILS_DISCOVERY);
-		wiphy_ext_feature_set(ar->hw->wiphy,
+		wiphy_ext_feature_set(hw->wiphy,
 				      NL80211_EXT_FEATURE_UNSOL_BCAST_PROBE_RESP);
 	}
 
-	ar->hw->wiphy->mbssid_max_interfaces = TARGET_NUM_VDEVS;
-	ar->hw->wiphy->ema_max_profile_periodicity = TARGET_EMA_MAX_PROFILE_PERIOD;
-
-	ath12k_reg_init(ar);
-
-	if (!test_bit(ATH12K_FLAG_RAW_MODE, &ab->dev_flags)) {
-		ar->hw->netdev_features = NETIF_F_HW_CSUM;
-		ieee80211_hw_set(ar->hw, SW_CRYPTO_CONTROL);
-		ieee80211_hw_set(ar->hw, SUPPORT_FAST_XMIT);
-	}
-
-	ret = ieee80211_register_hw(ar->hw);
-	if (ret) {
-		ath12k_err(ar->ab, "ieee80211 registration failed: %d\n", ret);
-		goto err_free_if_combs;
-	}
-
-	if (!ab->hw_params->supports_monitor)
-		/* There's a race between calling ieee80211_register_hw()
-		 * and here where the monitor mode is enabled for a little
-		 * while. But that time is so short and in practise it make
-		 * a difference in real life.
-		 */
-		ar->hw->wiphy->interface_modes &= ~BIT(NL80211_IFTYPE_MONITOR);
-
-	/* Apply the regd received during initialization */
-	ret = ath12k_regd_update(ar, true);
-	if (ret) {
-		ath12k_err(ar->ab, "ath12k regd update failed: %d\n", ret);
-		goto err_unregister_hw;
-	}
-
-	ret = ath12k_debugfs_register(ar);
-	if (ret) {
-		ath12k_err(ar->ab, "debugfs registration failed: %d\n", ret);
-		goto err_unregister_hw;
-	}
-
 	return 0;
-
-err_unregister_hw:
-	ieee80211_unregister_hw(ar->hw);
-
-err_free_if_combs:
-	kfree(ar->hw->wiphy->iface_combinations[0].limits);
-	kfree(ar->hw->wiphy->iface_combinations);
-
-err_free_channels:
-	kfree(ar->mac.sbands[NL80211_BAND_2GHZ].channels);
-	kfree(ar->mac.sbands[NL80211_BAND_5GHZ].channels);
-	kfree(ar->mac.sbands[NL80211_BAND_6GHZ].channels);
-
-err:
-	SET_IEEE80211_DEV(ar->hw, NULL);
-	return ret;
 }
 
 int ath12k_mac_register(struct ath12k_base *ab)
 {
+	struct ieee80211_hw *hw;
+	struct ath12k_pdev_cap *cap;
 	struct ath12k *ar;
 	struct ath12k_pdev *pdev;
 	int i;
 	int ret;
+	u32 antennas_rx, antennas_tx;
+	bool unregister = false;
+	static const u32 cipher_suites[] = {
+		WLAN_CIPHER_SUITE_TKIP,
+		WLAN_CIPHER_SUITE_CCMP,
+		WLAN_CIPHER_SUITE_AES_CMAC,
+		WLAN_CIPHER_SUITE_BIP_CMAC_256,
+		WLAN_CIPHER_SUITE_BIP_GMAC_128,
+		WLAN_CIPHER_SUITE_BIP_GMAC_256,
+		WLAN_CIPHER_SUITE_GCMP,
+		WLAN_CIPHER_SUITE_GCMP_256,
+		WLAN_CIPHER_SUITE_CCMP_256,
+	};
 
 	if (test_bit(ATH12K_FLAG_REGISTERED, &ab->dev_flags))
 		return 0;
 
+	hw = ab->ah->hw;
+	hw->wiphy->max_ap_assoc_sta = 0;
+	antennas_rx = 0;
+	antennas_tx = 0;
+
 	for (i = 0; i < ab->num_radios; i++) {
 		pdev = &ab->pdevs[i];
 		ar = pdev->ar;
@@ -10035,17 +9913,146 @@ int ath12k_mac_register(struct ath12k_ba
 		if (ret)
 			goto err_cleanup;
 
-		init_waitqueue_head(&ar->txmgmt_empty_waitq);
-		idr_init(&ar->txmgmt_idr);
-		spin_lock_init(&ar->txmgmt_idr_lock);
+		/* Advertise the max antenna support of all radios, driver can handle
+		 * per pdev specific antenna setting based on pdev cap when antenna changes
+		 * are made
+		 */
+		antennas_rx = max_t(u32, antennas_rx, cap->rx_chain_mask);
+		antennas_tx = max_t(u32, antennas_tx, cap->tx_chain_mask);
+
+		hw->wiphy->max_ap_assoc_sta += ar->max_num_stations;
+	}
+
+	hw->wiphy->available_antennas_rx = antennas_rx;
+	hw->wiphy->available_antennas_tx = antennas_tx;
+
+	ret = ath12k_mac_setup_iface_combinations(ab);
+	if (ret) {
+		ath12k_err(ab, "failed to setup interface combinations: %d\n", ret);
+		goto err_cleanup;
 	}
 
 	/* Initialize channel counters frequency value in hertz */
 	ab->cc_freq_hz = 320000;
 	ab->free_vdev_map = (1LL << (ab->num_radios * TARGET_NUM_VDEVS)) - 1;
 
+	/* TODO: SET_IEEE80211_PERM_ADDR() */
+	SET_IEEE80211_DEV(hw, ab->dev);
+
+	hw->wiphy->interface_modes = ab->hw_params->interface_modes;
+	hw->wiphy->ru_punct_supp_bw = NL80211_RU_PUNCT_SUPP_BW_80;
+
+	ieee80211_hw_set(hw, SIGNAL_DBM);
+	ieee80211_hw_set(hw, SUPPORTS_PS);
+	ieee80211_hw_set(hw, SUPPORTS_DYNAMIC_PS);
+	ieee80211_hw_set(hw, MFP_CAPABLE);
+	ieee80211_hw_set(hw, REPORTS_TX_ACK_STATUS);
+	ieee80211_hw_set(hw, HAS_RATE_CONTROL);
+	ieee80211_hw_set(hw, AP_LINK_PS);
+	ieee80211_hw_set(hw, SPECTRUM_MGMT);
+	ieee80211_hw_set(hw, CONNECTION_MONITOR);
+	ieee80211_hw_set(hw, WANT_MONITOR_VIF);
+	ieee80211_hw_set(hw, SUPPORTS_PER_STA_GTK);
+	ieee80211_hw_set(hw, CHANCTX_STA_CSA);
+	ieee80211_hw_set(hw, QUEUE_CONTROL);
+	ieee80211_hw_set(hw, SUPPORTS_TX_FRAG);
+	ieee80211_hw_set(hw, REPORTS_LOW_ACK);
+	if (ath12k_frame_mode == ATH12K_HW_TXRX_ETHERNET) {
+		ieee80211_hw_set(hw, SUPPORTS_TX_ENCAP_OFFLOAD);
+		ieee80211_hw_set(hw, SUPPORTS_RX_DECAP_OFFLOAD);
+	}
+
+	if (ab->hw_params->supports_ap_ps)
+		ieee80211_hw_set(hw, SUPPORTS_AP_PS);
+
+	hw->wiphy->features |= NL80211_FEATURE_STATIC_SMPS;
+	hw->wiphy->flags |= WIPHY_FLAG_IBSS_RSN;
+
+	hw->wiphy->max_scan_ssids = WLAN_SCAN_PARAMS_MAX_SSID;
+	hw->wiphy->max_scan_ie_len = WLAN_SCAN_PARAMS_MAX_IE_LEN;
+
+	hw->max_listen_interval = ATH12K_MAX_HW_LISTEN_INTERVAL;
+
+	hw->wiphy->flags |= WIPHY_FLAG_HAS_REMAIN_ON_CHANNEL;
+	hw->wiphy->flags |= WIPHY_FLAG_HAS_CHANNEL_SWITCH;
+	hw->wiphy->max_remain_on_channel_duration = 5000;
+
+	hw->wiphy->flags |= WIPHY_FLAG_AP_UAPSD;
+	hw->wiphy->features |= NL80211_FEATURE_AP_MODE_CHAN_WIDTH_CHANGE |
+			       NL80211_FEATURE_AP_SCAN;
+
+	hw->queues = ATH12K_HW_MAX_QUEUES;
+	hw->wiphy->tx_queue_len = ATH12K_QUEUE_LEN;
+	hw->offchannel_tx_hw_queue = ATH12K_HW_MAX_QUEUES - 1;
+	hw->max_rx_aggregation_subframes = IEEE80211_MAX_AMPDU_BUF_EHT;
+
+	hw->vif_data_size = sizeof(struct ath12k_vif);
+	hw->sta_data_size = sizeof(struct ath12k_sta);
+
+	wiphy_ext_feature_set(hw->wiphy, NL80211_EXT_FEATURE_CQM_RSSI_LIST);
+	wiphy_ext_feature_set(hw->wiphy, NL80211_EXT_FEATURE_STA_TX_PWR);
+
+	if (test_bit(WMI_TLV_SERVICE_BSS_COLOR_OFFLOAD, ab->wmi_ab.svc_map))
+                wiphy_ext_feature_set(hw->wiphy,
+                                      NL80211_EXT_FEATURE_BSS_COLOR);
+
+	hw->wiphy->cipher_suites = cipher_suites;
+	hw->wiphy->n_cipher_suites = ARRAY_SIZE(cipher_suites);
+
+	hw->wiphy->iftype_ext_capab = ath12k_iftypes_ext_capa;
+	hw->wiphy->num_iftype_ext_capab = ARRAY_SIZE(ath12k_iftypes_ext_capa);
+
+	hw->wiphy->mbssid_max_interfaces = ab->num_radios * TARGET_NUM_VDEVS;
+	hw->wiphy->ema_max_profile_periodicity = TARGET_EMA_MAX_PROFILE_PERIOD;
+
+	ath12k_reg_init(ab);
+
+	if (!test_bit(ATH12K_FLAG_RAW_MODE, &ab->dev_flags)) {
+		hw->netdev_features = NETIF_F_HW_CSUM;
+		ieee80211_hw_set(hw, SW_CRYPTO_CONTROL);
+		ieee80211_hw_set(hw, SUPPORT_FAST_XMIT);
+	}
+
+	ret = ieee80211_register_hw(hw);
+	if (ret) {
+		ath12k_err(ab, "ieee80211 registration failed: %d\n", ret);
+		goto err_full_cleanup;
+	}
+
+	if (!ab->hw_params->supports_monitor)
+		/* There's a race between calling ieee80211_register_hw()
+		 * and here where the monitor mode is enabled for a little
+		 * while. But that time is so short and in practise it make
+		 * a difference in real life.
+		 */
+		hw->wiphy->interface_modes &= ~BIT(NL80211_IFTYPE_MONITOR);
+
+ 	for (i = 0; i < ab->num_radios; i++) {
+ 		pdev = &ab->pdevs[i];
+ 		ar = pdev->ar;
+
+		/* FIXME regd needs to be set only once */
+		ret = ath12k_regd_update(ar, true);
+		if (ret) {
+			ath12k_err(ar->ab, "ath12k regd update failed: %d\n", ret);
+			goto err_unregister_hw;
+		}
+
+		ret = ath12k_debugfs_register(ar);
+		if (ret) {
+			ath12k_err(ar->ab, "debugfs registration failed: %d\n", ret);
+			goto err_unregister_hw;
+		}
+	}
+
 	return 0;
 
+err_unregister_hw:
+	unregister = true;
+err_full_cleanup:
+	kfree(hw->wiphy->iface_combinations[0].limits);
+	kfree(hw->wiphy->iface_combinations);
+	i = ab->num_radios;
 err_cleanup:
 	for (i = i - 1; i >= 0; i--) {
 		pdev = &ab->pdevs[i];
@@ -10053,32 +10060,56 @@ err_cleanup:
 		__ath12k_mac_unregister(ar);
 	}
 
+	if (unregister) {
+		ieee80211_unregister_hw(ab->ah->hw);
+		SET_IEEE80211_DEV(ab->ah->hw, NULL);
+	}
+
 	return ret;
 }
 
+static inline struct ath12k *ath12k_mac_get_ar(struct ath12k_hw *ah,
+					       u8 pdev_idx)
+{
+	struct ath12k *ar = ah->radio;
+
+	return ar + pdev_idx;
+}
+
 int ath12k_mac_allocate(struct ath12k_base *ab)
 {
 	struct ieee80211_hw *hw;
+	struct ath12k_hw *ah;
 	struct ath12k *ar;
 	struct ath12k_pdev *pdev;
-	int ret;
+	size_t len;
 	int i;
 
 	if (test_bit(ATH12K_FLAG_REGISTERED, &ab->dev_flags))
 		return 0;
 
+	len = sizeof(struct ath12k_hw) + (ab->num_radios * sizeof(struct ath12k));
+
+	hw = ieee80211_alloc_hw(len, &ath12k_ops);
+	if (!hw) {
+		ath12k_warn(ab, "failed to allocate mac80211 hw device\n");
+		return -ENOMEM;
+	}
+
+	ah = hw->priv;
+	ah->hw = hw;
+	ah->ops = &ath12k_ops;
+	ah->num_radio = ab->num_radios;
+	ab->ah = ah;
+
+	mutex_init(&ah->conf_mutex);
+
 	for (i = 0; i < ab->num_radios; i++) {
 		pdev = &ab->pdevs[i];
-		hw = ieee80211_alloc_hw(sizeof(struct ath12k), &ath12k_ops);
-		if (!hw) {
-			ath12k_warn(ab, "failed to allocate mac80211 hw device\n");
-			ret = -ENOMEM;
-			goto err_free_mac;
-		}
+		ar = ath12k_mac_get_ar(ah, i);
 
-		ar = hw->priv;
-		ar->hw = hw;
 		ar->ab = ab;
+		ar->hw = hw;
 		ar->pdev = pdev;
 		ar->pdev_idx = i;
 		ar->lmac_id = ath12k_hw_get_mac_from_pdev_id(ab->hw_params, i);
@@ -10120,11 +10151,6 @@ int ath12k_mac_allocate(struct ath12k_ba
 	}
 
 	return 0;
-
-err_free_mac:
-	ath12k_mac_destroy(ab);
-
-	return ret;
 }
 
 void ath12k_mac_destroy(struct ath12k_base *ab)
@@ -10139,7 +10165,9 @@ void ath12k_mac_destroy(struct ath12k_ba
 		if (!ar)
 			continue;
 
-		ieee80211_free_hw(ar->hw);
 		pdev->ar = NULL;
 	}
+
+	ieee80211_free_hw(ab->ah->hw);
+	ab->ah = NULL;
 }
--- a/drivers/net/wireless/ath/ath12k/reg.c
+++ b/drivers/net/wireless/ath/ath12k/reg.c
@@ -701,10 +701,10 @@ void ath12k_regd_update_work(struct work
 	}
 }
 
-void ath12k_reg_init(struct ath12k *ar)
+void ath12k_reg_init(struct ath12k_base *ab)
 {
-	ar->hw->wiphy->regulatory_flags = REGULATORY_WIPHY_SELF_MANAGED;
-	ar->hw->wiphy->reg_notifier = ath12k_reg_notifier;
+	ab->ah->hw->wiphy->regulatory_flags = REGULATORY_WIPHY_SELF_MANAGED;
+	ab->ah->hw->wiphy->reg_notifier = ath12k_reg_notifier;
 }
 
 void ath12k_reg_free(struct ath12k_base *ab)
--- a/drivers/net/wireless/ath/ath12k/reg.h
+++ b/drivers/net/wireless/ath/ath12k/reg.h
@@ -26,7 +26,7 @@ enum ath12k_dfs_region {
 };
 
 /* ATH12K Regulatory API's */
-void ath12k_reg_init(struct ath12k *ar);
+void ath12k_reg_init(struct ath12k_base *ab);
 void ath12k_reg_free(struct ath12k_base *ab);
 void ath12k_regd_update_work(struct work_struct *work);
 struct ieee80211_regdomain *
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -5881,7 +5881,8 @@ static void ath12k_wmi_event_scan_foreig
 		break;
 	case ATH12K_SCAN_RUNNING:
 	case ATH12K_SCAN_ABORTING:
-		ar->scan_channel = ieee80211_get_channel(ar->hw->wiphy, freq);
+		ar->scan_channel = ieee80211_get_channel(ar->hw->wiphy,
+							 freq);
 		break;
 	}
 }
@@ -6830,7 +6831,8 @@ static int ath12k_reg_handle_chan_list(s
 		ar = ab->pdevs[pdev_idx].ar;
 		kfree(ab->new_regd[pdev_idx]);
 		ab->new_regd[pdev_idx] = regd;
-		ieee80211_queue_work(ar->hw, &ar->regd_update_work);
+
+		ieee80211_queue_work(ab->ah->hw, &ar->regd_update_work);
 	} else {
 		/* Multiple events for the same *ar is not expected. But we
 		 * can still clear any previously stored default_regd if we
@@ -7224,7 +7226,7 @@ static void ath12k_mgmt_rx_event(struct
 		   status->freq, status->band, status->signal,
 		   status->rate_idx);
 
-	ieee80211_rx_ni(ar->hw, skb);
+	ieee80211_rx_ni(ab->ah->hw, skb);
 
 exit:
 	rcu_read_unlock();
@@ -7384,7 +7386,7 @@ static void ath12k_peer_sta_kickout_even
 		goto exit;
 	}
 
-	sta = ieee80211_find_sta_by_ifaddr(ar->hw,
+	sta = ieee80211_find_sta_by_ifaddr(ab->ah->hw,
 					   arg.mac_addr, NULL);
 	if (!sta) {
 		ath12k_warn(ab, "Spurious quick kickout for STA %pM\n",
@@ -7864,7 +7866,7 @@ ath12k_wmi_pdev_dfs_radar_detected_event
 	if (ar->dfs_block_radar_events)
 		ath12k_info(ab, "DFS Radar detected, but ignored as requested\n");
 	else
-		ieee80211_radar_detected(ar->hw);
+		ieee80211_radar_detected(ab->ah->hw);
 
 exit:
 	kfree(tb);
