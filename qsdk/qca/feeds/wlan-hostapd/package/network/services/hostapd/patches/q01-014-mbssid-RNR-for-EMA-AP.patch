From 4a58da0a8bcb37f5ceac80fabb64c38ec2eedd94 Mon Sep 17 00:00:00 2001
From: Aloka Dixit <quic_alokad@quicinc.com>
Date: Thu, 10 Dec 2020 15:13:11 -0800
Subject: [PATCH 14/15] hostad: RNR for EMA AP

(1) Enable RNR by default for EMA AP.
(2) Only for EMA AP, split reduced neighbor report in as many groups as
    number of multiple BSSID offset groups.
    Each RNR group skips the profiles already include in the corresponding
    MBSSID groups.
    The last additional group will have data common for all EMA beacons.
(3) Enable reduced neighbor report by default in 5GHz/2.4GHz beacons
    and probe responses if one or more 6GHz APs are co-located.

Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
---
 src/ap/beacon.c      |  52 ++++++++++++++-------
 src/ap/ieee802_11.c  | 106 +++++++++++++++++++++++++++++++++++++------
 src/ap/ieee802_11.h  |   5 +-
 src/drivers/driver.h |  22 +++++++++
 4 files changed, 152 insertions(+), 33 deletions(-)

--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -469,7 +469,9 @@ ieee802_11_build_ap_params_mbssid(struct
 	struct hostapd_iface *iface = hapd->iface;
 	struct hostapd_data *tx_bss;
 	size_t len;
+	int rnr_elem_len, rnr_elem_count;
 	u8 elem_count = 0, *elem = NULL, **elem_offset = NULL, *end;
+	u8 *rnr_elem = NULL, **rnr_elem_offset;
 
 	if (!iface->mbssid_max_interfaces ||
 	    iface->num_bss > iface->mbssid_max_interfaces ||
@@ -479,7 +481,7 @@ ieee802_11_build_ap_params_mbssid(struct
 
 	tx_bss = hostapd_mbssid_get_tx_bss(hapd);
 	len = hostapd_eid_mbssid_len(tx_bss, WLAN_FC_STYPE_BEACON, &elem_count,
-				     NULL, 0);
+				     NULL, 0, &rnr_elem_len);
 	if (!len || (iface->conf->mbssid == ENHANCED_MBSSID_ENABLED &&
 		     elem_count > iface->ema_max_periodicity))
 		goto fail;
@@ -492,8 +494,18 @@ ieee802_11_build_ap_params_mbssid(struct
 	if (!elem_offset)
 		goto fail;
 
+	rnr_elem = os_zalloc(rnr_elem_len);
+	if (!rnr_elem)
+		goto fail;
+
+	rnr_elem_offset = os_zalloc((elem_count + 1) * sizeof(u8 *));
+	if (!rnr_elem_offset)
+		goto fail;
+
 	end = hostapd_eid_mbssid(tx_bss, elem, elem + len, WLAN_FC_STYPE_BEACON,
-				 elem_count, elem_offset, NULL, 0);
+				 elem_count, elem_offset, NULL, 0,
+				 rnr_elem, rnr_elem_offset,
+				 &rnr_elem_count, rnr_elem_len);
 
 	params->mbssid_tx_iface = tx_bss->conf->iface;
 	params->mbssid_index = hostapd_mbssid_get_bss_index(hapd);
@@ -503,11 +515,17 @@ ieee802_11_build_ap_params_mbssid(struct
 	params->mbssid_elem_offset = elem_offset;
 	if (iface->conf->mbssid == ENHANCED_MBSSID_ENABLED)
 		params->ema = true;
+	params->rnr_elem = rnr_elem;
+	params->rnr_elem_offset = rnr_elem_offset;
+	params->rnr_elem_count = rnr_elem_count;
+	params->rnr_elem_len = rnr_elem_len;
 
 	return 0;
 
 fail:
 	os_free(elem);
+	os_free(rnr_elem);
+	os_free(rnr_elem_offset);
 	wpa_printf(MSG_ERROR, "MBSSID: Configuration failed");
 	return -1;
 }
@@ -589,7 +607,7 @@ static u8 * hostapd_gen_probe_resp(struc
 #endif /* CONFIG_IEEE80211BE */
 
 	buflen += hostapd_eid_mbssid_len(hapd, WLAN_FC_STYPE_PROBE_RESP, NULL,
-					 known_bss, known_bss_len);
+					 known_bss, known_bss_len, NULL);
 	buflen += hostapd_eid_rnr_len(hapd, WLAN_FC_STYPE_PROBE_RESP);
 	buflen += hostapd_mbo_ie_len(hapd);
 	buflen += hostapd_eid_owe_trans_len(hapd);
@@ -668,7 +686,8 @@ static u8 * hostapd_gen_probe_resp(struc
 	pos = hostapd_get_rsne(hapd, pos, epos - pos);
 	pos = hostapd_eid_bss_load(hapd, pos, epos - pos);
 	pos = hostapd_eid_mbssid(hapd, pos, epos, WLAN_FC_STYPE_PROBE_RESP, 0,
-				 NULL, known_bss, known_bss_len);
+				 NULL, known_bss, known_bss_len,
+				 NULL, NULL, NULL, 0);
 	pos = hostapd_eid_rm_enabled_capab(hapd, pos, epos - pos);
 	pos = hostapd_get_mde(hapd, pos, epos - pos);
 
@@ -2022,6 +2041,10 @@ void ieee802_11_free_ap_params(struct wp
 	params->mbssid_elem = NULL;
 	os_free(params->mbssid_elem_offset);
 	params->mbssid_elem_offset = NULL;
+	os_free(params->rnr_elem);
+	params->rnr_elem = NULL;
+	os_free(params->rnr_elem_offset);
+	params->rnr_elem_offset = NULL;
 #ifdef CONFIG_FILS
 	os_free(params->fd_frame_tmpl);
 	params->fd_frame_tmpl = NULL;
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -6572,9 +6572,12 @@ static size_t hostapd_eid_nr_db_len(stru
 }
 
 
+const int ema_not_applicable = -1;
 static size_t hostapd_eid_rnr_iface_len(struct hostapd_data *hapd,
 					struct hostapd_data *reporting_hapd,
-					size_t *current_len)
+					size_t *current_len,
+					int ema_bss_index_1,
+					int ema_bss_index_2)
 {
 	size_t total_len = 0, len = *current_len;
 	int tbtt_count = 0;
@@ -6600,6 +6603,10 @@ static size_t hostapd_eid_rnr_iface_len(
 			    bss->conf->ignore_broadcast_ssid)
 				continue;
 
+			if ((ema_bss_index_1 != -1) && (ema_bss_index_2 != -1) &&
+			    (i >= ema_bss_index_1) && (i < ema_bss_index_2))
+				continue;
+
 			if (len + RNR_TBTT_INFO_LEN > 255 ||
 			    tbtt_count >= RNR_TBTT_INFO_COUNT_MAX)
 				break;
@@ -6678,7 +6685,9 @@ static size_t hostapd_eid_rnr_colocation
 			continue;
 
 		len += hostapd_eid_rnr_iface_len(iface->bss[0], hapd,
-						 current_len);
+						 current_len,
+						 ema_not_applicable,
+						 ema_not_applicable);
 	}
 
 	return len;
@@ -6701,15 +6710,20 @@ size_t hostapd_eid_rnr_len(struct hostap
 			total_len += hostapd_eid_rnr_colocation_len(
 				hapd, &current_len);
 
-		if (hapd->conf->rnr && hapd->iface->num_bss > 1)
+		if (hapd->conf->rnr && hapd->iface->num_bss > 1 &&
+		    !hapd->iconf->mbssid)
 			total_len += hostapd_eid_rnr_iface_len(hapd, hapd,
-							       &current_len);
+							       &current_len,
+							       ema_not_applicable,
+							       ema_not_applicable);
 		break;
 
 	case WLAN_FC_STYPE_ACTION:
 		if (hapd->iface->num_bss > 1 && mode == STANDALONE_6GHZ)
 			total_len += hostapd_eid_rnr_iface_len(hapd, hapd,
-							       &current_len);
+							       &current_len,
+							       ema_not_applicable,
+							       ema_not_applicable);
 		break;
 
 	default:
@@ -6777,7 +6791,8 @@ static u8 * hostapd_eid_nr_db(struct hos
 
 static u8 * hostapd_eid_rnr_iface(struct hostapd_data *hapd,
 				  struct hostapd_data *reporting_hapd,
-				  u8 *eid, size_t *current_len)
+				  u8 *eid, size_t *current_len,
+				  int ema_bss_index_1, int ema_bss_index_2)
 {
 	struct hostapd_data *bss;
 	struct hostapd_iface *iface = hapd->iface;
@@ -6822,6 +6837,10 @@ static u8 * hostapd_eid_rnr_iface(struct
 			    bss->conf->ignore_broadcast_ssid)
 				continue;
 
+			if ((ema_bss_index_1 != -1) && (ema_bss_index_2 != -1) &&
+			    (i >= ema_bss_index_1) && (i < ema_bss_index_2))
+				continue;
+
 			if (len + RNR_TBTT_INFO_LEN > 255 ||
 			    tbtt_count >= RNR_TBTT_INFO_COUNT_MAX)
 				break;
@@ -6843,6 +6862,12 @@ static u8 * hostapd_eid_rnr_iface(struct
 						RNR_BSS_PARAM_TRANSMITTED_BSSID;
 			}
 
+			if (hapd->iconf->mbssid) {
+				bss_param |= RNR_BSS_PARAM_MULTIPLE_BSSID;
+				if (bss == hostapd_mbssid_get_tx_bss(hapd))
+					bss_param |= RNR_BSS_PARAM_TRANSMITTED_BSSID;
+			}
+
 			if (is_6ghz_op_class(hapd->iconf->op_class) &&
 			    bss->conf->unsol_bcast_probe_resp_interval)
 				bss_param |=
@@ -6886,7 +6911,8 @@ static u8 * hostapd_eid_rnr_colocation(s
 			continue;
 
 		eid = hostapd_eid_rnr_iface(iface->bss[0], hapd, eid,
-					    current_len);
+					    current_len, ema_not_applicable,
+					    ema_not_applicable);
 	}
 
 	return eid;
@@ -6910,15 +6936,20 @@ u8 * hostapd_eid_rnr(struct hostapd_data
 			eid = hostapd_eid_rnr_colocation(hapd, eid,
 							 &current_len);
 
-		if (hapd->conf->rnr && hapd->iface->num_bss > 1)
+		if (hapd->conf->rnr && hapd->iface->num_bss > 1 &&
+		    !hapd->iconf->mbssid)
 			eid = hostapd_eid_rnr_iface(hapd, hapd, eid,
-						    &current_len);
+						    &current_len,
+						    ema_not_applicable,
+						    ema_not_applicable);
 		break;
 
 	case WLAN_FC_STYPE_ACTION:
 		if (hapd->iface->num_bss > 1 && mode == STANDALONE_6GHZ)
 			eid = hostapd_eid_rnr_iface(hapd, hapd,	eid,
-						    &current_len);
+						    &current_len,
+						    ema_not_applicable,
+						    ema_not_applicable);
 		break;
 
 	default:
@@ -7012,9 +7043,9 @@ static size_t hostapd_eid_mbssid_elem_le
 
 size_t hostapd_eid_mbssid_len(struct hostapd_data *hapd, u32 frame_type,
 			      u8 *elem_count, const u8 *known_bss,
-			      size_t known_bss_len)
+			      size_t known_bss_len, size_t *rnr_len)
 {
-	size_t len = 0, bss_index = 1;
+	size_t len = 0, bss_index = 1, rnr_cur_len = 0, rnr_count;
 
 	if (!hapd->iconf->mbssid || hapd->iface->num_bss <= 1 ||
 	    (frame_type != WLAN_FC_STYPE_BEACON &&
@@ -7031,13 +7062,26 @@ size_t hostapd_eid_mbssid_len(struct hos
 	}
 
 	while (bss_index < hapd->iface->num_bss) {
+		rnr_count = bss_index;
 		len += hostapd_eid_mbssid_elem_len(hapd, frame_type,
 						   &bss_index, known_bss,
 						   known_bss_len);
 
 		if (frame_type == WLAN_FC_STYPE_BEACON)
 			*elem_count += 1;
+		if (hapd->iconf->ema && rnr_len) {
+			rnr_cur_len = 0;
+			(*rnr_len) += hostapd_eid_rnr_iface_len(hapd,
+								hostapd_mbssid_get_tx_bss(hapd),
+								&rnr_cur_len,
+								rnr_count,
+								bss_index);
+		}
 	}
+
+	if (hapd->iconf->ema && rnr_len)
+		(*rnr_len) += hostapd_eid_rnr_len(hapd, frame_type);
+
 	return len;
 }
 
@@ -7158,10 +7202,14 @@ static u8 * hostapd_eid_mbssid_elem(stru
 u8 * hostapd_eid_mbssid(struct hostapd_data *hapd, u8 *eid, u8 *end,
 			unsigned int frame_stype, u8 elem_count,
 			u8 **elem_offset,
-			const u8 *known_bss, size_t known_bss_len)
+			const u8 *known_bss, size_t known_bss_len,
+			u8 *rnr_eid, u8 **rnr_offsets, int *rnr_count,
+			int rnr_len)
 {
-	size_t bss_index = 1;
-	u8 elem_index = 0;
+
+	size_t bss_index = 1, cur_len = 0;
+	u8 elem_index = 0, *rnr_start_eid = rnr_eid;
+	bool add_rnr = false;
 
 	if (!hapd->iconf->mbssid || hapd->iface->num_bss <= 1 ||
 	    (frame_stype != WLAN_FC_STYPE_BEACON &&
@@ -7174,7 +7222,13 @@ u8 * hostapd_eid_mbssid(struct hostapd_d
 		return eid;
 	}
 
+	if (hapd->iconf->ema && frame_stype == WLAN_FC_STYPE_BEACON && rnr_len)
+		add_rnr = true;
+
+
 	while (bss_index < hapd->iface->num_bss) {
+		int rnr_start_count = bss_index;
+
 		if (frame_stype == WLAN_FC_STYPE_BEACON) {
 			if (elem_index == elem_count) {
 				wpa_printf(MSG_WARNING,
@@ -7189,7 +7243,30 @@ u8 * hostapd_eid_mbssid(struct hostapd_d
 					      hostapd_max_bssid_indicator(hapd),
 					      &bss_index, elem_count,
 					      known_bss, known_bss_len);
-	}
+		if (add_rnr == true) {
+                        rnr_offsets[*rnr_count] = rnr_eid;
+                        *rnr_count = *rnr_count + 1;
+                        cur_len = 0;
+
+                        rnr_eid = hostapd_eid_rnr_iface(hapd,
+                                                        hostapd_mbssid_get_tx_bss(hapd),
+                                                        rnr_eid, &cur_len,
+                                                        rnr_start_count,
+                                                        bss_index, false);
+                }
+	}
+
+	if ((add_rnr == true) && ((rnr_eid - rnr_start_eid) < rnr_len)) {
+                rnr_offsets[*rnr_count] = rnr_eid;
+                *rnr_count = *rnr_count + 1;
+                cur_len = 0;
+
+                if (hapd->conf->rnr)
+                        rnr_eid = hostapd_eid_nr_db(hapd, rnr_eid, &cur_len);
+                if (get_colocation_mode(hapd) == COLOCATED_LOWER_BAND)
+                        rnr_eid = hostapd_eid_rnr_colocation(hapd, rnr_eid,
+                                                             &cur_len);
+        }
 
 	return eid;
 }
--- a/src/ap/ieee802_11.h
+++ b/src/ap/ieee802_11.h
@@ -224,10 +224,11 @@ u16 copy_sta_eht_capab(struct hostapd_da
 		       const u8 *eht_capab, size_t eht_capab_len);
 size_t hostapd_eid_mbssid_len(struct hostapd_data *hapd, u32 frame_type,
 			      u8 *elem_count, const u8 *known_bss,
-			      size_t known_bss_len);
+			      size_t known_bss_len, size_t *rnr_len);
 u8 * hostapd_eid_mbssid(struct hostapd_data *hapd, u8 *eid, u8 *end,
 			unsigned int frame_stype, u8 elem_count,
 			u8 **elem_offset,
-			const u8 *known_bss, size_t known_bss_len);
+			const u8 *known_bss, size_t known_bss_len, u8 *rnr_eid,
+			u8 **rnr_offsets, int *rnr_count, int rnr_len);
 
 #endif /* IEEE802_11_H */
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -1256,6 +1256,9 @@ static int hostapd_setup_bss(struct host
 			os_memcpy(hapd->own_addr, if_addr, ETH_ALEN);
 	}
 
+	if (is_zero_ether_addr(conf->bssid))
+		os_memcpy(conf->bssid, hapd->own_addr, ETH_ALEN);
+
 	if (conf->wmm_enabled < 0)
 		conf->wmm_enabled = hapd->iconf->ieee80211n |
 			hapd->iconf->ieee80211ax;
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -1755,6 +1755,25 @@ struct wpa_driver_ap_params {
 	bool ema;
 
 	/**
+	 * rnr_elem - This buffer contains all of reduced neighbor report (RNR)
+	 * elements
+	 */
+	u8 *rnr_elem;
+	/**
+	 * rnr_elem_len - Length of rnr_elem buffer
+	 */
+	size_t rnr_elem_len;
+	/**
+	 * rnr_elem_count - Number of RNR elements
+	 */
+	int rnr_elem_count;
+	/**
+	 * rnr_elem_offset - The offsets to the elements in rnr_elem.
+	 * Kernel will use these to include RNR elements in EMA beacons.
+	 */
+	u8 **rnr_elem_offset;
+
+	/**
 	 * Beacon Tx mode - To configure STAGGERED or BURST mode
 	 * 1 = STAGGERED beacon tx mode
 	 * 2 = BURST beacon tx mode
