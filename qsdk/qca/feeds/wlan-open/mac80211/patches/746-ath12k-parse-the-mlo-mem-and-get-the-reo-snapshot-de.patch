From 1e5af18b38348548fc6b40c508d83b6669606f1a Mon Sep 17 00:00:00 2001
From: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
Date: Mon, 6 Feb 2023 12:20:31 +0530
Subject: [PATCH 1/3] ath12k: parse the mlo mem and get the reo snapshot
 details

Parse the shared mlo memory between host and firmware to get the snapshot
details without any delay. This snapshot information is used to compute
the reo rx reordering process accurately.

Signed-off-by: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c |   1 +
 drivers/net/wireless/ath/ath12k/core.h |   2 +
 drivers/net/wireless/ath/ath12k/qmi.c  | 534 +++++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/wmi.h  | 270 +++++++++++++
 4 files changed, 807 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -136,6 +136,7 @@ ath12k_core_hw_group_alloc(u8 id, u8 max
 	ag->mlo_capable = !!ath12k_mlo_capable;
 	list_add(&ag->list, &ath12k_hw_groups);
 	mutex_init(&ag->mutex_lock);
+	mutex_init(&ag->mlomem_arena.mutex_lock);
 	ag->hw_queues_stopped = false;
 
 	return ag;
@@ -1269,6 +1270,8 @@ int ath12k_core_qmi_firmware_ready(struc
 
 	mutex_unlock(&ag->mutex_lock);
 
+	ath12k_qmi_mlo_global_snapshot_mem_init(ab);
+
 	/* Add code here carefully */
 	return 0;
 
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1120,6 +1120,7 @@ struct ath12k_mlo_memory {
 	struct target_mem_chunk chunk[ATH12K_QMI_WLANFW_MAX_NUM_MEM_SEG_V01];
 	struct reserved_mem *rsv;
 	bool init_done;
+	bool is_mlo_mem_avail;
 };
 
 enum ath12k_mlo_recovery_mode {
@@ -1145,6 +1146,7 @@ struct ath12k_hw_group {
 	struct ath12k __rcu *hw_links[ATH12K_GROUP_MAX_RADIO];
 	struct ath12k_mlo_memory mlo_mem;
 	struct mutex mutex_lock;
+	struct ath12k_host_mlo_mem_arena mlomem_arena;
 };
 
 /* Master structure to hold the hw data which may be used in core module */
@@ -1262,6 +1264,7 @@ struct ath12k_base {
 		u32 fw_crash_counter;
 		u32 last_recovery_time;
 	} stats;
+	bool mgmt_rx_reorder;
 	bool ftm_segment_handler;
 	struct ath12k_ftm_event_obj ftm_event_obj;
 	u32 pktlog_defs_checksum;
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -3249,6 +3249,21 @@ out:
 	return ret;
 }
 
+/**
+ * ath12k_free_mlo_mgmt_rx_reo_per_link_info() - Free Rx REO per-link info
+ * @snapshot_info: Pointer to MGMT Rx REO snapshot info
+ *
+ * Return: None
+ */
+void ath12k_free_mlo_mgmt_rx_reo_per_link_info
+	(struct ath12k_host_mlo_glb_rx_reo_snapshot_info *snapshot_info)
+{
+	if (snapshot_info && snapshot_info->link_info) {
+		kfree(snapshot_info->link_info);
+		snapshot_info->link_info =  NULL;
+	}
+}
+
 static void ath12k_qmi_free_mlo_mem_chunk(struct ath12k_base *ab,
 					  struct target_mem_chunk *chunk,
 					  int idx)
@@ -3256,6 +3271,8 @@ static void ath12k_qmi_free_mlo_mem_chun
 	struct ath12k_hw_group *ag = ab->ag;
 	struct target_mem_chunk *mlo_chunk;
 	bool fixed_mem = ab->bus_params.fixed_mem_region;
+	struct ath12k_host_mlo_mem_arena
+		*mlomem_arena_ctx = &ab->ag->mlomem_arena;
 
 	lockdep_assert_held(&ag->mutex_lock);
 
@@ -3293,6 +3310,19 @@ static void ath12k_qmi_free_mlo_mem_chun
 		chunk->v.addr = NULL;
 	chunk->paddr = NULL;
 	chunk->size = 0;
+
+	ag->mlo_mem.is_mlo_mem_avail = false;
+
+	/* We need to de-initialize when mlo memory is cleaned */
+	mutex_lock(&mlomem_arena_ctx->mutex_lock);
+	if (mlomem_arena_ctx->init_done) {
+		mlomem_arena_ctx->init_done = false;
+		ath12k_free_mlo_mgmt_rx_reo_per_link_info
+			(&mlomem_arena_ctx->rx_reo_snapshot_info);
+	}
+	mutex_unlock(&mlomem_arena_ctx->mutex_lock);
+
+	return;
 }
 
 void ath12k_qmi_free_target_mem_chunk(struct ath12k_base *ab)
@@ -3395,6 +3425,7 @@ static int ath12k_qmi_alloc_target_mem_c
 			}
 			chunk->paddr = mlo_chunk->paddr;
 			chunk->v.addr = mlo_chunk->v.addr;
+			ag->mlo_mem.is_mlo_mem_avail = true;
 			mlo_idx++;
 			break;
 		case HOST_DDR_REGION_TYPE:
@@ -3425,6 +3456,518 @@ out:
 	return ret;
 }
 
+/**
+ * ath12k_mgmt_rx_reo_process_tlv_header() - Process a given TLV header
+ * @data: Pointer to start of the TLV
+ * @remaining_len: Length (in bytes) remaining in the arena from @data pointer
+ * @expected_tag: Expected TLV tag
+ * @tlv_len: Address of TLV length variable to be populated. This API populates
+ * the entire length(payload + header) of the TLV into @tlv_len
+ * @tlv_tag: Address of TLV Tag variable to be populated.
+ *
+ * Return: 0 on success, -1 on failure
+ */
+static int
+ath12k_mgmt_rx_reo_process_tlv_header(struct ath12k_base *ab,
+				      const u8 *data, size_t remaining_len,
+				      u32 expected_tag, u32 *tlv_len,
+				      u32 *tlv_tag)
+{
+	if (remaining_len < MLO_SHMEM_TLV_HDR_SIZE) {
+		ath12k_err(ab, "Not enough space(%zu) to read TLV header(%u)\n",
+			   remaining_len, (u32)MLO_SHMEM_TLV_HDR_SIZE);
+		return -EINVAL;
+	}
+	*tlv_len = MLO_SHMEMTLV_GET_TLVLEN(MLO_SHMEMTLV_GET_HDR(data));
+	*tlv_len += MLO_SHMEM_TLV_HDR_SIZE;
+	if (remaining_len < *tlv_len) {
+		ath12k_err(ab, "Not enough space(%zu) to read TLV payload(%u)\n",
+			   remaining_len, *tlv_len);
+		return -EINVAL;
+	}
+
+	*tlv_tag = MLO_SHMEMTLV_GET_TLVTAG(MLO_SHMEMTLV_GET_HDR(data));
+	if (*tlv_tag != expected_tag) {
+		ath12k_err(ab, "Unexpected TLV tag: %u is seen. Expected: %u\n",
+			   *tlv_tag,
+			   expected_tag);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+/**
+ * ath12k_mgmt_rx_reo_extract_ath12k_mlo_glb_shmem_tlv() - extract ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_H_SHMEM
+ * TLV
+ * @data: Pointer to start of the TLV
+ * @remaining_len: Length (in bytes) remaining in the arena from @data pointer
+ * @shmem_params: Pointer to MLO Global shared memory parameters. Extracted
+ * information will be populated in this data structure.
+ *
+ * Return: On success, the number of bytes parsed. On failure, errno is returned.
+ */
+static int
+ath12k_mgmt_rx_reo_extract_ath12k_mlo_glb_shmem_tlv(struct ath12k_base *ab,
+					       u8 *data, size_t remaining_len,
+	struct ath12k_host_ath12k_mlo_glb_shmem_params *shmem_params)
+{
+	struct ath12k_mlo_glb_shmem *ptlv;
+	u32 tlv_len, tlv_tag;
+	u32 major_minor_version;
+
+	if (ath12k_mgmt_rx_reo_process_tlv_header(ab, data, remaining_len,
+						  ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_H_SHMEM,
+						  &tlv_len, &tlv_tag) < 0) {
+		ath12k_err(ab, "%s:process tlv hdr failed\n", __func__);
+		return -EINVAL;
+	}
+
+	ptlv = (struct ath12k_mlo_glb_shmem *)data;
+	major_minor_version = get_field_value_in_tlv(ptlv, major_minor_version,
+						     tlv_len);
+	shmem_params->major_version =
+		MLO_SHMEM_GLB_H_SHMEM_PARAM_MAJOR_VERSION_GET(
+				major_minor_version);
+	shmem_params->minor_version =
+		MLO_SHMEM_GLB_H_SHMEM_PARAM_MINOR_VERSION_GET(
+				major_minor_version);
+
+	return tlv_len;
+}
+
+/**
+ * ath12k_mgmt_rx_reo_extract_mlo_glb_link_info_tlv() - extract lobal link info from shmem
+ * @data: Pointer to the first TLV in the arena
+ * @remaining_len: Length (in bytes) remaining in the arena from @data pointer
+ * @link_info: Pointer to which link info needs to be copied
+ *
+ * Return: On success, the number of bytes parsed. On failure, errno is returned.
+ */
+static int
+ath12k_mgmt_rx_reo_extract_mlo_glb_link_info_tlv(struct ath12k_base *ab,
+						 u8 *data,
+				  size_t remaining_len,
+				  u32 *link_info)
+{
+	struct mlo_glb_link_info *ptlv;
+	u32 tlv_len, tlv_tag;
+
+	if (ath12k_mgmt_rx_reo_process_tlv_header(ab, data, remaining_len,
+						  ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_LINK_INFO,
+						  &tlv_len, &tlv_tag) < 0) {
+		ath12k_err(ab, "%s:process tlv hdr failed\n", __func__);
+		return -EPERM;
+	}
+
+	ptlv = (struct mlo_glb_link_info *)data;
+
+	*link_info = get_field_value_in_tlv(ptlv, link_info, tlv_len);
+
+	return tlv_len;
+}
+
+/**
+ * ath12k_mgmt_rx_reo_process_mlo_glb_per_link_status_tlv() - process per link info
+ * @data: Pointer to the first TLV in the arena
+ * @remaining_len: Length (in bytes) remaining in the arena from @data pointer
+ *
+ * Return: On success, the number of bytes parsed. On failure, errno is returned.
+ */
+static int
+ath12k_mgmt_rx_reo_process_mlo_glb_per_link_status_tlv(struct ath12k_base *ab,
+						       u8 *data, size_t remaining_len)
+{
+	u32 tlv_len, tlv_tag;
+
+	if (ath12k_mgmt_rx_reo_process_tlv_header(ab, data, remaining_len,
+						  ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_LINK,
+						  &tlv_len, &tlv_tag) < 0) {
+		ath12k_err(ab, "%s:process tlv hdr failed\n", __func__);
+		return -EPERM;
+	}
+
+	return tlv_len;
+}
+
+/**
+ * ath12k_mgmt_rx_reo_parse_global_link_info() - parse lobal link info
+ * @data: Pointer to the first TLV in the arena
+ * @remaining_len: Length (in bytes) remaining in the arena from @data pointer
+ *
+ * Return: On success, the number of bytes parsed. On failure, errno is returned.
+ */
+static int
+ath12k_mgmt_rx_reo_parse_global_link_info(struct ath12k_base *ab, u8 *data, size_t remaining_len)
+{
+	int parsed_bytes, len;
+	u8 link;
+	u32 link_info;
+	u8 num_links;
+
+	/* Extract ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_LINK_INFO_TLV */
+	len = ath12k_mgmt_rx_reo_extract_mlo_glb_link_info_tlv(ab, data, remaining_len, &link_info);
+	ATH12K_VALIDATE_PARSED_DATA_POINTER(len, data, remaining_len);
+	parsed_bytes = len;
+
+	num_links = MLO_SHMEM_GLB_LINK_INFO_PARAM_NO_OF_LINKS_GET(link_info);
+
+	for (link = 0; link < num_links; link++) {
+		len = ath12k_mgmt_rx_reo_process_mlo_glb_per_link_status_tlv(ab, data, remaining_len);
+		ATH12K_VALIDATE_PARSED_DATA_POINTER(len, data,
+							   remaining_len);
+		parsed_bytes += len;
+	}
+
+	return parsed_bytes;
+}
+
+/**
+ * ath12k_mgmt_rx_reo_get_num_links_from_valid_link_bitmap() - Get the number of valid links
+ * @valid_link_bmap: Link bit map where the valid links are set to 1
+ *
+ * Return: Number of valid links
+ */
+static u8
+ath12k_mgmt_rx_reo_get_num_links_from_valid_link_bitmap(u16 valid_link_bmap)
+{
+	u8 num_links = 0;
+
+	/* Find the number of set bits */
+	while (valid_link_bmap) {
+		num_links++;
+		valid_link_bmap &= (valid_link_bmap - 1);
+	}
+
+	return num_links;
+}
+
+/**
+ * ath12k_mgmt_rx_reo_extract_mlo_glb_rx_reo_snapshot_info_tlv() - extract
+ * ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_RX_REO_SNAPSHOT_INFO TLV
+ * @data: Pointer to start of the TLV
+ * @remaining_len: Length (in bytes) remaining in the arena from @data pointer
+ * @snapshot_info: Pointer to MGMT Rx REO snapshot info. Extracted information
+ * will be populated in this data structure.
+ *
+ * Return: On success, the number of bytes parsed. On failure, errno is returned.
+ */
+static int
+ath12k_mgmt_rx_reo_extract_mlo_glb_rx_reo_snapshot_info_tlv(struct ath12k_base *ab,
+							    u8 *data, size_t remaining_len,
+	struct ath12k_host_mlo_glb_rx_reo_snapshot_info *snapshot_info)
+{
+	struct mlo_glb_rx_reo_snapshot_info *ptlv;
+	u32 tlv_len, tlv_tag;
+	u32 link_info;
+	u16 valid_link_bmap;
+
+	/* process ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_RX_REO_SNAPSHOT_INFO TLV */
+	if (ath12k_mgmt_rx_reo_process_tlv_header(ab, data, remaining_len,
+						  ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_RX_REO_SNAPSHOT_INFO,
+						  &tlv_len, &tlv_tag) < 0) {
+		ath12k_err(ab, "%s:process tlv hdr failed\n", __func__);
+		return -EINVAL;
+	}
+
+	ptlv = (struct mlo_glb_rx_reo_snapshot_info *)data;
+	link_info = get_field_value_in_tlv(ptlv, link_info, tlv_len);
+	valid_link_bmap =
+		MLO_SHMEM_GLB_LINK_INFO_PARAM_VALID_LINK_BMAP_GET(link_info);
+	snapshot_info->valid_link_bmap = valid_link_bmap;
+
+	if (is_field_present_in_tlv(ptlv, snapshot_ver_info, tlv_len)) {
+		u32 snapshot_ver_info;
+
+		snapshot_ver_info = get_field_value_in_tlv
+			(ptlv, snapshot_ver_info, tlv_len);
+		snapshot_info->hw_forwarded_snapshot_ver =
+			MLO_SHMEM_GLB_RX_REO_SNAPSHOT_PARAM_HW_FWD_SNAPSHOT_VER_GET
+			(snapshot_ver_info);
+		snapshot_info->fw_forwarded_snapshot_ver =
+			MLO_SHMEM_GLB_RX_REO_SNAPSHOT_PARAM_FW_FWD_SNAPSHOT_VER_GET
+			(snapshot_ver_info);
+		snapshot_info->fw_consumed_snapshot_ver =
+			MLO_SHMEM_GLB_RX_REO_SNAPSHOT_PARAM_FW_CONSUMED_SNAPSHOT_VER_GET
+			(snapshot_ver_info);
+	}
+
+	snapshot_info->num_links =
+		ath12k_mgmt_rx_reo_get_num_links_from_valid_link_bitmap(valid_link_bmap);
+	snapshot_info->link_info = kmalloc_array(snapshot_info->num_links,
+						 sizeof(*snapshot_info->link_info),
+			GFP_KERNEL);
+	if (!snapshot_info->link_info) {
+		ath12k_err(ab, "Couldn't allocate memory for rx_reo_per_link_info\n");
+		return -EINVAL;
+	}
+
+	return tlv_len;
+}
+
+/**
+ * ath12k_mgmt_rx_reo_get_next_valid_link_id() - Get next valid link ID
+ * @valid_link_bmap: Link bit map where the valid links are set to 1
+ * @prev_link_id: Previous link ID
+ *
+ * Return: Next valid link ID if there are valid links after @prev_link_id,
+ * else -1
+ */
+static int
+ath12k_mgmt_rx_reo_get_next_valid_link_id(u16 valid_link_bmap, int prev_link_id)
+{
+	int cur_link_id;
+	u16 mask;
+	u8 maxbits = sizeof(valid_link_bmap) * 8;
+
+	cur_link_id = prev_link_id + 1;
+	mask = 1 << cur_link_id;
+
+	while (!(valid_link_bmap & mask)) {
+		cur_link_id++;
+		if (cur_link_id == maxbits)
+			return -EINVAL;
+		mask = mask << 1;
+	}
+
+	return cur_link_id;
+}
+
+/**
+ * ath12k_mgmt_rx_reo_extract_mgmt_rx_reo_snapshot_tlv() - extract MGMT_RX_REO_SNAPSHOT TLV
+ * @data: Pointer to start of the TLV
+ * @remaining_len: Length (in bytes) remaining in the arena from @data pointer
+ * @address_ptr: Pointer to the snapshot address. This API will populate the
+ * snapshot address into the variable pointed by @address_ptr
+ *
+ * Return: On success, the number of bytes parsed. On failure, errno is returned.
+ */
+static int
+ath12k_mgmt_rx_reo_extract_mgmt_rx_reo_snapshot_tlv(struct ath12k_base *ab,
+						    u8 *data, size_t remaining_len,
+				 void **address_ptr)
+{
+	struct mgmt_rx_reo_snapshot *ptlv;
+	u32 tlv_len, tlv_tag;
+
+	/* process ATH12K_MLO_SHMEM_TLV_STRUCT_MGMT_RX_REO_SNAPSHOT TLV */
+	if (ath12k_mgmt_rx_reo_process_tlv_header(ab, data, remaining_len,
+						  ATH12K_MLO_SHMEM_TLV_STRUCT_MGMT_RX_REO_SNAPSHOT,
+						  &tlv_len, &tlv_tag) < 0) {
+		ath12k_err(ab, "%s:process tlv hdr failed\n", __func__);
+		return -EINVAL;
+	}
+
+	ptlv = (struct mgmt_rx_reo_snapshot *)data;
+	*address_ptr = get_field_pointer_in_tlv(ptlv, mgmt_rx_reo_snapshot_low,
+						tlv_len);
+
+	return tlv_len;
+}
+
+/**
+ * ath12k_mgmt_rx_reo_extract_mlo_glb_rx_reo_per_link_info_tlv() - extract
+ * RX_REO_PER_LINK_SNAPSHOT_INFO TLV
+ * @data: Pointer to start of the TLV
+ * @remaining_len: Length (in bytes) remaining in the arena from @data pointer
+ * @link_info: Pointer to MGMT Rx REO per link info. Extracted information
+ * will be populated in this data structure.
+ *
+ * Return: On success, the number of bytes parsed. On failure, errno is returned.
+ */
+static int
+ath12k_mgmt_rx_reo_extract_mlo_glb_rx_reo_per_link_info_tlv(struct ath12k_base *ab,
+							    u8 *data, size_t remaining_len, u8 link_id,
+	struct ath12k_host_mlo_glb_rx_reo_per_link_info *link_info)
+{
+	struct mlo_glb_rx_reo_per_link_snapshot_info *ptlv;
+	u32 tlv_len, tlv_tag;
+	int len;
+	u8 *fw_consumed;
+	int parsed_bytes;
+
+	/* process ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_RX_REO_PER_LINK_SNAPSHOT_INFO TLV */
+	if (ath12k_mgmt_rx_reo_process_tlv_header(ab, data, remaining_len,
+						  ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_RX_REO_PER_LINK_SNAPSHOT_INFO,
+						  &tlv_len, &tlv_tag) < 0) {
+		ath12k_err(ab, "%s:process tlv hdr failed\n", __func__);
+		return -EINVAL;
+	}
+
+	ptlv = (struct mlo_glb_rx_reo_per_link_snapshot_info *)data;
+
+	link_info->link_id = link_id;
+
+	/**
+	 * Get the pointer to the fw_consumed snapshot with in the TLV.
+	 * Note that snapshots are nested TLVs within link_sanpshot_info TLV.
+	 */
+	data += offsetof(struct mlo_glb_rx_reo_per_link_snapshot_info,
+			fw_consumed);
+	fw_consumed = (u8 *)get_field_pointer_in_tlv(ptlv, fw_consumed,
+			tlv_len);
+	remaining_len -= offsetof(struct mlo_glb_rx_reo_per_link_snapshot_info,
+			fw_consumed);
+	parsed_bytes = offsetof(struct mlo_glb_rx_reo_per_link_snapshot_info,
+				fw_consumed);
+
+	/* extract fw_consumed snapshot */
+	len = ath12k_mgmt_rx_reo_extract_mgmt_rx_reo_snapshot_tlv(ab, data, remaining_len,
+								  &link_info->fw_consumed);
+	ATH12K_VALIDATE_PARSED_DATA_POINTER(len, data, remaining_len);
+	parsed_bytes += len;
+
+	/* extract fw_forwarded snapshot */
+	len = ath12k_mgmt_rx_reo_extract_mgmt_rx_reo_snapshot_tlv(ab, data, remaining_len,
+								  &link_info->fw_forwarded);
+	ATH12K_VALIDATE_PARSED_DATA_POINTER(len, data, remaining_len);
+	parsed_bytes += len;
+
+	/* extract hw_forwarded snapshot */
+	len = ath12k_mgmt_rx_reo_extract_mgmt_rx_reo_snapshot_tlv(ab, data, remaining_len,
+								  &link_info->hw_forwarded);
+	ATH12K_VALIDATE_PARSED_DATA_POINTER(len, data, remaining_len);
+	parsed_bytes += len;
+
+	/**
+	 * Return the length of link_sanpshot_info TLV itself as the snapshots
+	 * are nested inside link_sanpshot_info TLV and hence no need to add
+	 * their lengths separately.
+	 */
+	return tlv_len;
+}
+
+/**
+ * ath12k_mgmt_rx_reo_extract_mlo_glb_rx_reo_snapshot_info() - extract MGMT Rx REO snapshot info
+ * @data: Pointer to start of ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_RX_REO_SNAPSHOT_INFO
+ * TLV
+ * @remaining_len: Length (in bytes) remaining in the arena from @data pointer
+ * @snapshot_info: Pointer to MGMT Rx REO snapshot info. Extracted information
+ * will be populated in this data structure.
+ *
+ * Return: On success, the number of bytes parsed. On failure, errno is returned.
+ */
+static int
+ath12k_mgmt_rx_reo_extract_mlo_glb_rx_reo_snapshot_info(struct ath12k_base *ab,
+							u8 *data, size_t remaining_len,
+	struct ath12k_host_mlo_glb_rx_reo_snapshot_info *snapshot_info)
+{
+	int parsed_bytes, len;
+	u8 link;
+	int cur_link_id, prev_link_id = -1;
+	u16 valid_link_bmap;
+
+	/* Extract ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_RX_REO_SNAPSHOT_INFO TLV */
+	len = ath12k_mgmt_rx_reo_extract_mlo_glb_rx_reo_snapshot_info_tlv(ab, data, remaining_len,
+									  snapshot_info);
+	ATH12K_VALIDATE_PARSED_DATA_POINTER(len, data, remaining_len);
+	parsed_bytes = len;
+
+	valid_link_bmap = snapshot_info->valid_link_bmap;
+	/* Foreach valid link */
+	for (link = 0; link < snapshot_info->num_links; ++link) {
+		cur_link_id = ath12k_mgmt_rx_reo_get_next_valid_link_id(valid_link_bmap,
+									prev_link_id);
+
+		WARN_ON(!(cur_link_id >= 0));
+
+		/* Extract per_link_info */
+		len  = ath12k_mgmt_rx_reo_extract_mlo_glb_rx_reo_per_link_info_tlv(ab,
+										   data, remaining_len, cur_link_id,
+				&snapshot_info->link_info[link]);
+		ATH12K_VALIDATE_PARSED_DATA_POINTER(len, data,
+							   remaining_len);
+		parsed_bytes += len;
+		prev_link_id = cur_link_id;
+	}
+
+	return parsed_bytes;
+}
+
+/**
+ * ath12k_qmi_parse_mlo_mem_arena() - Parse MLO Global shared memory arena
+ * @data: Pointer to the first TLV in the arena
+ * @remaining_len: Length (in bytes) remaining in the arena from @data pointer
+ * @mlomem_arena_ctx: Pointer to MLO Global shared memory arena context.
+ * Extracted information will be populated in this data structure.
+ *
+ * Return: On success, the number of bytes parsed. On failure, errno is returned.
+ */
+static int ath12k_qmi_parse_mlo_mem_arena(struct ath12k_base *ab,
+					  u8 *data, size_t remaining_len,
+	struct ath12k_host_mlo_mem_arena *mlomem_arena_ctx)
+{
+	int parsed_bytes;
+	int len;
+
+	if (!data)
+		return -EINVAL;
+
+	len = ath12k_mgmt_rx_reo_extract_ath12k_mlo_glb_shmem_tlv(ab, data, remaining_len,
+							     &mlomem_arena_ctx->shmem_params);
+	ATH12K_VALIDATE_PARSED_DATA_POINTER(len, data, remaining_len);
+	parsed_bytes = len;
+
+	len = ath12k_mgmt_rx_reo_extract_mlo_glb_rx_reo_snapshot_info(ab,
+								      data, remaining_len, &mlomem_arena_ctx->rx_reo_snapshot_info);
+	ATH12K_VALIDATE_PARSED_DATA_POINTER(len, data, remaining_len);
+	parsed_bytes += len;
+
+	len = ath12k_mgmt_rx_reo_parse_global_link_info(ab, data, remaining_len);
+	ATH12K_VALIDATE_PARSED_DATA_POINTER(len, data, remaining_len);
+	parsed_bytes += len;
+
+	return parsed_bytes;
+}
+
+int ath12k_qmi_mlo_global_snapshot_mem_init(struct ath12k_base *ab)
+{
+	struct ath12k_host_mlo_mem_arena *mlomem_arena_ctx = &ab->ag->mlomem_arena;
+	struct ath12k_hw_group *ag = ab->ag;
+	struct target_mem_chunk *mlo_chunk;
+	int ret = 0, mlo_idx = 0;
+
+	if (!ab->mgmt_rx_reorder)
+		return 0;
+
+	if (!ag->mlo_mem.is_mlo_mem_avail)
+		return 0;
+
+	mlo_chunk = &ab->ag->mlo_mem.chunk[mlo_idx];
+
+	/* We need to initialize only for the first invocation */
+	mutex_lock(&mlomem_arena_ctx->mutex_lock);
+	if (mlomem_arena_ctx->init_done) {
+		mutex_unlock(&mlomem_arena_ctx->mutex_lock);
+		return 0;
+	}
+
+	if (ab->bus_params.fixed_mem_region)
+		ret = ath12k_qmi_parse_mlo_mem_arena(ab,
+						mlo_chunk->v.ioaddr,
+						mlo_chunk->size,
+						mlomem_arena_ctx);
+	else
+		ret = ath12k_qmi_parse_mlo_mem_arena(ab,
+						mlo_chunk->v.addr,
+						mlo_chunk->size,
+						mlomem_arena_ctx);
+
+	if (ret < 0) {
+		ath12k_err(ab, "parsing of mlo shared memory failed ret %d\n", ret);
+		ath12k_free_mlo_mgmt_rx_reo_per_link_info(
+				&mlomem_arena_ctx->rx_reo_snapshot_info);
+		mutex_unlock(&mlomem_arena_ctx->mutex_lock);
+		return ret;
+	}
+
+	mlomem_arena_ctx->init_done = true;
+
+	mutex_unlock(&mlomem_arena_ctx->mutex_lock);
+
+	return 0;
+}
+
 #define MAX_TGT_MEM_MODES 5
 static int ath12k_qmi_assign_target_mem_chunk(struct ath12k_base *ab)
 {
@@ -3571,6 +4114,7 @@ skip_mlo_mem_init:
 			ab->qmi.target_mem[idx].size = mlo_chunk->size;
 			ab->qmi.target_mem[idx].type = mlo_chunk->type;
 			mlo_sz += mlo_chunk->size;
+			ag->mlo_mem.is_mlo_mem_avail = true;
 			idx++;
 			mlo_idx++;
 			break;
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -71,6 +71,57 @@ struct wmi_tlv {
 #define WMI_BA_MODE_BUFFER_SIZE_256  3
 #define WMI_BA_MODE_BUFFER_SIZE_1024 6
 
+#define ATH12K_VALIDATE_PARSED_DATA_POINTER(parsed_bytes, data, \
+			   remaining_len) \
+do { \
+	if ((parsed_bytes) < 0 || (parsed_bytes > remaining_len)) { \
+		ath12k_err(ab, "TLV extraction failed\n"); \
+		return -EINVAL; \
+	} \
+	(data) += (parsed_bytes); \
+	(remaining_len) -= (parsed_bytes); \
+} while (0)
+
+/**
+ * is_field_present_in_tlv() - Check whether a given field is present
+ * in a given TLV
+ * @ptlv: Pointer to start of the TLV
+ * @field_name: name of the field in the TLV structure
+ * @tlv_len: Length of the TLV
+ *
+ * Return: true if the field is present within the TLV,
+ * else false
+ */
+#define is_field_present_in_tlv(ptlv, field_name, tlv_len) \
+	(offsetof(typeof(*(ptlv)), field_name) < (tlv_len) ? \
+	true : false)
+
+/**
+ * get_field_value_in_tlv() - Get the value of a given field in a given TLV
+ * @ptlv: Pointer to start of the TLV
+ * @field_name: name of the field in the TLV structure
+ * @tlv_len: Length of the TLV
+ *
+ * Return: Value of the given field if the offset of the field with in the TLV
+ * structure is less than the TLV length, else 0.
+ */
+#define get_field_value_in_tlv(ptlv, field_name, tlv_len) \
+	(offsetof(typeof(*(ptlv)), field_name) < (tlv_len) ? \
+	(ptlv)->field_name : 0)
+
+/**
+ * get_field_pointer_in_tlv() - Get the address of a given field in a given TLV
+ * @ptlv: Pointer to start of the TLV
+ * @field_name: name of the field in the TLV structure
+ * @tlv_len: Length of the TLV
+ *
+ * Return: Address of the given field if the offset of the field with in the
+ * TLV structure is less than the TLV length, else NULL.
+ */
+#define get_field_pointer_in_tlv(ptlv, field_name, tlv_len) \
+	(offsetof(typeof(*(ptlv)), field_name) < (tlv_len) ? \
+	&(ptlv)->field_name : NULL)
+
 /* HW mode config type replicated from FW header
  * @WMI_HOST_HW_MODE_SINGLE: Only one PHY is active.
  * @WMI_HOST_HW_MODE_DBS: Both PHYs are active in different bands,
@@ -5172,6 +5223,225 @@ struct wmi_pdev_update_muedca_event {
 
 #define WLAN_MGMT_TXRX_HOST_MAX_ANTENNA 4
 
+/**
+ * ath12k_host_mlo_glb_rx_reo_snapshot_info - MGMT Rx REO information in MLO
+ * global shared memory
+ * @num_links: Number of valid links
+ * @valid_link_bmap: Valid link bitmap
+ * @link_info: pointer to an array of Rx REO per-link information
+ * @hw_forwarded_snapshot_ver: HW forwarded snapshot version
+ * @fw_forwarded_snapshot_ver: FW forwarded snapshot version
+ * @fw_consumed_snapshot_ver: FW consumed snapshot version
+ */
+struct ath12k_host_mlo_glb_rx_reo_snapshot_info {
+	u8 num_links;
+	u16 valid_link_bmap;
+	struct ath12k_host_mlo_glb_rx_reo_per_link_info *link_info;
+	u8 hw_forwarded_snapshot_ver;
+	u8 fw_forwarded_snapshot_ver;
+	u8 fw_consumed_snapshot_ver;
+};
+
+/**
+ * ath12k_host_ath12k_mlo_glb_shmem_params - MLO global shared memory parameters
+ * @major_version: Major version
+ * @minor_version: Minor version
+ */
+struct ath12k_host_ath12k_mlo_glb_shmem_params {
+	u16 major_version;
+	u16 minor_version;
+};
+
+/**
+ * ath12k_host_mlo_mem_arena - MLO Global shared memory arena context
+ * @shmem_params: shared memory parameters
+ * @rx_reo_snapshot_info: MGMT Rx REO snapshot information
+ * @init_done: Initialized snapshot info
+ */
+struct ath12k_host_mlo_mem_arena {
+	struct ath12k_host_ath12k_mlo_glb_shmem_params shmem_params;
+	struct ath12k_host_mlo_glb_rx_reo_snapshot_info rx_reo_snapshot_info;
+	bool init_done;
+	/* Protect the parallel initialization */
+	struct mutex mutex_lock;
+};
+
+/** Helper Macros for tlv header of the given tlv buffer */
+/* Size of the TLV Header which is the Tag and Length fields */
+#define MLO_SHMEM_TLV_HDR_SIZE (1 * sizeof(u32))
+
+/* TLV Helper macro to get the TLV Header given the pointer to the TLV buffer. */
+#define MLO_SHMEMTLV_GET_HDR(tlv_buf) (((u32 *)(tlv_buf))[0])
+
+/* TLV Helper macro to set the TLV Header given the pointer to the TLV buffer. */
+#define MLO_SHMEMTLV_SET_HDR(tlv_buf, tag, len) \
+	((((u32 *)(tlv_buf))[0]) = ((tag << 16) | (len & 0x0000FFFF)))
+
+/* TLV Helper macro to get the TLV Tag given the TLV header. */
+#define MLO_SHMEMTLV_GET_TLVTAG(tlv_header)  ((u32)((tlv_header) >> 16))
+
+/* TLV Helper macro to get the TLV Buffer Length (minus TLV header size)
+ * given the TLV header.
+ */
+#define MLO_SHMEMTLV_GET_TLVLEN(tlv_header) \
+	((u32)((tlv_header) & 0x0000FFFF))
+/* TLV Helper macro to get the TLV length from TLV structure size
+ * by removing TLV header size.
+ */
+#define MLO_SHMEMTLV_GET_STRUCT_TLVLEN(tlv_struct) \
+	((u32)(sizeof(tlv_struct) - MLO_SHMEM_TLV_HDR_SIZE))
+
+/* Definition of Global H SHMEM Arena */
+struct ath12k_mlo_glb_shmem {
+	/* TLV tag and len; tag equals ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_H_SHMEM */
+	u32 tlv_header;
+	/**
+	 * major_minor_version
+	 *
+	 * [15:0]:   minor version
+	 * [31:16]:  major version
+	 */
+	u32 major_minor_version;
+	/*  This TLV is followed by TLVs
+	 *  mlo_glb_rx_reo_snapshot_info reo_snapshot;
+	 *  struct mlo_glb_link_info glb_info;
+	 */
+};
+
+#define MLO_SHMEM_GLB_H_SHMEM_PARAM_MAJOR_VERSION_MASK	GENMASK(31, 16)
+#define MLO_SHMEM_GLB_H_SHMEM_PARAM_MINOR_VERSION_MASK	GENMASK(15, 0)
+#define MLO_SHMEM_GLB_LINK_INFO_PARAM_VALID_LINK_BMAP_MASK	GENMASK(19, 4)
+#define MLO_SHMEM_GLB_LINK_INFO_PARAM_NO_OF_LINKS_MASK	GENMASK(3, 0)
+#define MLO_SHMEM_GLB_RX_REO_SNAPSHOT_PARAM_HW_FWD_SNAPSHOT_VER_MASK	GENMASK(2, 0)
+#define MLO_SHMEM_GLB_RX_REO_SNAPSHOT_PARAM_FW_FWD_SNAPSHOT_VER_MASK	GENMASK(5, 3)
+#define	MLO_SHMEM_GLB_RX_REO_SNAPSHOT_PARAM_FW_CONSUMED_SNAPSHOT_VER_MASK	GENMASK(8, 6)
+#define MLO_SHMEM_CHIP_CRASH_INFO_PARAM_NO_OF_CHIPS_MASK	GENMASK(1, 0)
+#define	MLO_SHMEM_CHIP_CRASH_INFO_PARAM_VALID_CHIP_BMAP_MASK	GENMASK(4, 2)
+
+#define MLO_SHMEM_GLB_H_SHMEM_PARAM_MAJOR_VERSION_GET(major_minor_version) \
+	FIELD_GET(MLO_SHMEM_GLB_H_SHMEM_PARAM_MAJOR_VERSION_MASK, major_minor_version)
+#define MLO_SHMEM_GLB_H_SHMEM_PARAM_MINOR_VERSION_GET(major_minor_version) \
+	FIELD_GET(MLO_SHMEM_GLB_H_SHMEM_PARAM_MINOR_VERSION_MASK, major_minor_version)
+
+#define MLO_SHMEM_GLB_LINK_INFO_PARAM_VALID_LINK_BMAP_GET(link_info) \
+	FIELD_GET(MLO_SHMEM_GLB_LINK_INFO_PARAM_VALID_LINK_BMAP_MASK, link_info)
+#define MLO_SHMEM_GLB_LINK_INFO_PARAM_NO_OF_LINKS_GET(link_info) \
+	FIELD_GET(MLO_SHMEM_GLB_LINK_INFO_PARAM_NO_OF_LINKS_MASK, link_info)
+#define MLO_SHMEM_GLB_RX_REO_SNAPSHOT_PARAM_HW_FWD_SNAPSHOT_VER_GET(snapshot_ver_info) \
+	FIELD_GET(MLO_SHMEM_GLB_RX_REO_SNAPSHOT_PARAM_HW_FWD_SNAPSHOT_VER_MASK, snapshot_ver_info)
+#define MLO_SHMEM_GLB_RX_REO_SNAPSHOT_PARAM_FW_FWD_SNAPSHOT_VER_GET(snapshot_ver_info) \
+	FIELD_GET(MLO_SHMEM_GLB_RX_REO_SNAPSHOT_PARAM_FW_FWD_SNAPSHOT_VER_MASK, snapshot_ver_info)
+#define MLO_SHMEM_GLB_RX_REO_SNAPSHOT_PARAM_FW_CONSUMED_SNAPSHOT_VER_GET(snapshot_ver_info) \
+	FIELD_GET(MLO_SHMEM_GLB_RX_REO_SNAPSHOT_PARAM_FW_CONSUMED_SNAPSHOT_VER_MASK, snapshot_ver_info)
+
+#define MLO_SHMEM_CHIP_CRASH_INFO_PARAM_NO_OF_CHIPS_GET(chip_info) \
+	FIELD_GET(MLO_SHMEM_CHIP_CRASH_INFO_PARAM_NO_OF_CHIPS_MASK, chip_info)
+#define MLO_SHMEM_CHIP_CRASH_INFO_PARAM_VALID_CHIP_BMAP_GET(chip_info) \
+	FIELD_GET(MLO_SHMEM_CHIP_CRASH_INFO_PARAM_VALID_CHIP_BMAP_MASK, chip_info)
+
+/** Definition of the GLB_H_SHMEM arena tlv structures */
+enum {
+	ATH12K_MLO_SHMEM_TLV_STRUCT_MGMT_RX_REO_SNAPSHOT,
+	ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_RX_REO_PER_LINK_SNAPSHOT_INFO,
+	ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_RX_REO_SNAPSHOT_INFO,
+	ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_LINK,
+	ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_LINK_INFO,
+	ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_H_SHMEM,
+	ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_CHIP_CRASH_INFO,
+	ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_PER_CHIP_CRASH_INFO,
+};
+
+struct mlo_glb_link_info {
+	/* TLV tag and len; tag equals ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_LINK_INFO */
+	u32 tlv_header;
+
+	/**
+	 * link_info
+	 *
+	 * [3:0]:   no_of_links
+	 * [19:4]:  valid_link_bmap
+	 * [31:20]: reserved
+	 */
+	u32 link_info;
+	/*  This TLV is followed by array of mlo_glb_link:
+	 *  mlo_glb_link will have multiple instances equal to num of hw links
+	 *  received by no_of_link
+	 *      mlo_glb_link glb_link_info[];
+	 */
+};
+
+/* Definition of the complete REO snapshot info */
+struct mlo_glb_rx_reo_snapshot_info {
+	/* TLV tag and len; tag equals ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_RX_REO_SNAPSHOT_INFO */
+	u32 tlv_header;
+
+	/**
+	 * link_info
+	 *
+	 * [3:0]:   no_of_links
+	 * [19:4]:  valid_link_bmap
+	 * [31:20]: reserved
+	 */
+	u32 link_info;
+
+	/**
+	 * snapshot_ver_info
+	 *
+	 * [2:0]:  hw_forwarded snapshot version
+	 * [5:3]:  fw_forwarded snapshot version
+	 * [8:6]:  fw_consumed snapshot version
+	 * [31:9]: reserved
+	 */
+	u32 snapshot_ver_info;
+	u32 reserved_alignment_padding;
+
+	/*  This TLV is followed by array of mlo_glb_rx_reo_per_link_snapshot_info:
+	 *  mlo_glb_rx_reo_per_link_snapshot_info will have multiple instances
+	 *  equal to num of hw links received by no_of_link
+	 *      mlo_glb_rx_reo_per_link_snapshot_info per_link_info[];
+	 */
+};
+
+struct ath12k_host_mlo_glb_rx_reo_per_link_info {
+	u8 link_id;
+	void *fw_consumed;
+	void *fw_forwarded;
+	void *hw_forwarded;
+};
+
+/* REO snapshot structure */
+struct mgmt_rx_reo_snapshot {
+	/* TLV tag and len; tag equals ATH12K_MLO_SHMEM_TLV_STRUCT_MGMT_RX_REO_SNAPSHOT */
+	u32 tlv_header;
+	u32 reserved_alignment_padding;
+	/**
+	 * mgmt_rx_reo_snapshot_low
+	 *
+	 * [0]:     valid
+	 * [16:1]:  mgmt_pkt_ctr
+	 * [31:17]: global_timestamp_low
+	 */
+	u32 mgmt_rx_reo_snapshot_low;
+
+	/**
+	 * mgmt_rx_reo_snapshot_high
+	 *
+	 * [16:0]:  global_timestamp_high
+	 * [31:17]: mgmt_pkt_ctr_redundant
+	 */
+	u32 mgmt_rx_reo_snapshot_high;
+
+};
+
+struct mlo_glb_rx_reo_per_link_snapshot_info {
+	/* TLV tag and len; tag equals ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_RX_REO_PER_LINK_SNAPSHOT_INFO */
+	u32 tlv_header;
+	u32 reserved_alignment_padding;
+	struct mgmt_rx_reo_snapshot fw_consumed;
+	struct mgmt_rx_reo_snapshot fw_forwarded;
+	struct mgmt_rx_reo_snapshot hw_forwarded;
+};
+
 struct mgmt_rx_event_params {
 	u32 chan_freq;
 	u32 channel;
--- a/drivers/net/wireless/ath/ath12k/qmi.h
+++ b/drivers/net/wireless/ath/ath12k/qmi.h
@@ -62,6 +62,7 @@ enum userpd_id {
 };
 
 struct ath12k_base;
+struct ath12k_host_mlo_glb_rx_reo_snapshot_info;
 
 enum ath12k_qmi_file_type {
 	ATH12K_QMI_FILE_TYPE_BDF_GOLDEN,
@@ -782,6 +783,9 @@ int ath12k_qmi_m3_dump_upload_done_ind_s
 					    u32 pdev_id, int status);
 void ath12k_qmi_free_target_mem_chunk(struct ath12k_base *ab);
 void ath12k_qmi_trigger_host_cap(struct ath12k_base *ab);
+int ath12k_qmi_mlo_global_snapshot_mem_init(struct ath12k_base *ab);
+void ath12k_free_mlo_mgmt_rx_reo_per_link_info(
+		struct ath12k_host_mlo_glb_rx_reo_snapshot_info *snapshot_info);
 
 static inline void ath12k_qmi_set_event_block(struct ath12k_qmi *qmi, bool block)
 {
