From 2609565381834b793dea7591222dbf4716d2a15a Mon Sep 17 00:00:00 2001
From: Ramasamy Kaliappan <quic_rkaliapp@quicinc.com>
Date: Sun, 26 Feb 2023 11:37:27 +0530
Subject: [PATCH] wifi: ath12k: Enable emlsr mode support in ap

Currently the emlsr feature is not supported in ap,

This enables emlsr mode in ap, the eml capabilities stored
on set station param, it parse the emlsr params from
eml capability during WMI_PEER_ASSOC_CMD and send to firmware.

Signed-off-by: Ramasamy Kaliappan <quic_rkaliapp@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |  2 +
 drivers/net/wireless/ath/ath12k/mac.c  |  2 +
 drivers/net/wireless/ath/ath12k/wmi.c  | 85 ++++++++++++++++++++++++--
 drivers/net/wireless/ath/ath12k/wmi.h  | 31 ++++++++++
 4 files changed, 115 insertions(+), 5 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -3068,6 +3068,8 @@ static void ath12k_peer_assoc_h_mlo(stru
 	ml->ml_peer_id = ahsta->ml_peer_id;
 	ml->ieee_link_id = arsta->link_id;
 	ml->num_partner_links = 0;
+	/*emlsr */
+	ml->eml_caps = sta->eml_cap;
 
 	for_each_set_bit(link_id, &sta->valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
 		if (i > ATH12K_WMI_MLO_MAX_LINKS)
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -163,6 +163,20 @@ static const struct wmi_tlv_policy wmi_t
 		= { .min_len = sizeof(struct wmi_cp_stats_event_fixed_param) },
 };
 
+static const u32 eml_trans_timeout[EMLCAP_TIMEOUT_MAX] = {
+					EMLCAP_TRANSTIMEOUT_0,
+					EMLCAP_TRANSTIMEOUT_1,
+					EMLCAP_TRANSTIMEOUT_2,
+					EMLCAP_TRANSTIMEOUT_3,
+					EMLCAP_TRANSTIMEOUT_4,
+					EMLCAP_TRANSTIMEOUT_5,
+					EMLCAP_TRANSTIMEOUT_6,
+					EMLCAP_TRANSTIMEOUT_7,
+					EMLCAP_TRANSTIMEOUT_8,
+					EMLCAP_TRANSTIMEOUT_9,
+					EMLCAP_TRANSTIMEOUT_10,
+					EMLCAP_TRANSTIMEOUT_11};
+
 static __le32 ath12k_wmi_tlv_hdr(u32 cmd, u32 len)
 {
 	return le32_encode_bits(cmd, WMI_TLV_TAG) |
@@ -2234,6 +2248,36 @@ static void ath12k_wmi_copy_peer_flags(s
 		cmd->peer_flags &= cpu_to_le32(~WMI_PEER_HT);
 }
 
+static int ath12k_wmi_get_emlsr_pad_delay(u8 emlsr_pad_delay,
+					  u16 *emlsr_pad_delay_us)
+{
+	u16 pad_delay_us[EMLSR_DELAY_MAX] = {0, 32, 64, 128, 256};
+
+	if (!emlsr_pad_delay_us)
+		return -EINVAL;
+
+	if (emlsr_pad_delay >= EMLSR_DELAY_MAX)
+		return -EINVAL;
+
+	*emlsr_pad_delay_us =  pad_delay_us[emlsr_pad_delay];
+	return 0;
+}
+
+static int ath12k_get_emlsr_tran_delay(u8 emlsr_trans_delay,
+				       u16 *emlsr_trans_delay_us)
+{
+	u16 delay_us[EMLSR_TRANS_DELAY_MAX] = {0, 16, 32, 64, 128, 256};
+
+	if (!emlsr_trans_delay_us)
+		return -EINVAL;
+
+	if (emlsr_trans_delay >= EMLSR_TRANS_DELAY_MAX)
+		return -EINVAL;
+
+	*emlsr_trans_delay_us = delay_us[emlsr_trans_delay];
+	return 0;
+}
+
 int ath12k_wmi_send_peer_assoc_cmd(struct ath12k *ar,
 				   struct peer_assoc_params *param)
 {
@@ -2251,6 +2295,7 @@ int ath12k_wmi_send_peer_assoc_cmd(struc
 	u32 peer_legacy_rates_align;
 	u32 peer_ht_rates_align;
 	int i, ret, len;
+	bool emlsr_support;
 
 	peer_legacy_rates_align = roundup(param->peer_legacy_rates.num_rates,
 					  sizeof(u32));
@@ -2386,6 +2431,8 @@ int ath12k_wmi_send_peer_assoc_cmd(struc
 	}
 
 	/* MLO params */
+	emlsr_support = FIELD_GET(IEEE80211_EML_CAP_EMLSR_SUPP, param->ml.eml_caps);
+
 	tlv = ptr;
 	tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_STRUCT) |
 		      FIELD_PREP(WMI_TLV_LEN, sizeof(*ml_params));
@@ -2404,13 +2451,35 @@ int ath12k_wmi_send_peer_assoc_cmd(struc
 			   FIELD_PREP(ATH12K_WMI_FLAG_MLO_LOGICAL_LINK_IDX_VALID,
 				      param->ml.logical_link_idx_valid) |
 			   FIELD_PREP(ATH12K_WMI_FLAG_MLO_PEER_ID_VALID,
-				      param->ml.peer_id_valid);
+				      param->ml.peer_id_valid) |
+			   FIELD_PREP(ATH12K_WMI_FLAG_MLO_EMLSR_SUPPORT,
+				      emlsr_support);
 
 	ether_addr_copy(ml_params->mld_addr.addr, param->ml.mld_addr);
 	ml_params->logical_link_idx = param->ml.logical_link_idx;
 	ml_params->ml_peer_id = param->ml.ml_peer_id;
 	ml_params->ieee_link_id = param->ml.ieee_link_id;
-	/* TODO emlsr params */
+
+	/* emlsr params */
+	if (emlsr_support) {
+		u8 timeout;
+		/*get emlsr padding delay subfield, if invalid use 0us*/
+		ath12k_wmi_get_emlsr_pad_delay(
+					FIELD_GET(IEEE80211_EML_CAP_EMLSR_PADDING_DELAY,
+						  param->ml.eml_caps),
+					&ml_params->emlsr_padding_delay_us);
+		/*get emlsr trans delay subfield value, if invalid use 0us*/
+		ath12k_get_emlsr_tran_delay(FIELD_GET(IEEE80211_EML_CAP_EMLSR_TRANSITION_DELAY,
+						      param->ml.eml_caps),
+					    &ml_params->emlsr_trans_delay_us);
+
+		timeout = FIELD_GET(IEEE80211_EML_CAP_TRANSITION_TIMEOUT,
+				    param->ml.eml_caps);
+		if (timeout < EMLCAP_TIMEOUT_MAX)
+			ml_params->emlsr_trans_timeout_us = eml_trans_timeout[timeout];
+		else
+			ath12k_warn(ar->ab, "Invalid emlsr trans timeout \n");
+	}
 
 	ptr += sizeof(*ml_params);
 
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -4075,6 +4075,23 @@ struct wmi_rate_set_arg {
 	u8 rates[WMI_MAX_SUPPORTED_RATES];
 };
 
+#define EMLSR_DELAY_MAX 5
+#define EMLSR_TRANS_DELAY_MAX 6
+#define EMLCAP_TIMEOUT_MAX 12
+#define IEEE80211_TU_TO_USEC(x)        ((x) << 10)  /* (x)X1024 */
+#define EMLCAP_TRANSTIMEOUT_0  0
+#define EMLCAP_TRANSTIMEOUT_1  (1U << 7)
+#define EMLCAP_TRANSTIMEOUT_2  (1U << 8)
+#define EMLCAP_TRANSTIMEOUT_3  (1U << 9)
+#define EMLCAP_TRANSTIMEOUT_4  IEEE80211_TU_TO_USEC(1)
+#define EMLCAP_TRANSTIMEOUT_5  IEEE80211_TU_TO_USEC((1U << 1))
+#define EMLCAP_TRANSTIMEOUT_6  IEEE80211_TU_TO_USEC((1U << 2))
+#define EMLCAP_TRANSTIMEOUT_7  IEEE80211_TU_TO_USEC((1U << 3))
+#define EMLCAP_TRANSTIMEOUT_8  IEEE80211_TU_TO_USEC((1U << 4))
+#define EMLCAP_TRANSTIMEOUT_9  IEEE80211_TU_TO_USEC((1U << 5))
+#define EMLCAP_TRANSTIMEOUT_10 IEEE80211_TU_TO_USEC((1U << 6))
+#define EMLCAP_TRANSTIMEOUT_11 IEEE80211_TU_TO_USEC((1U << 7))
+
 struct peer_assoc_mlo_params {
 	bool enabled;
 	bool assoc_link;
@@ -4087,6 +4104,7 @@ struct peer_assoc_mlo_params {
 	u32 ieee_link_id;
 	u8 num_partner_links;
 	struct wmi_ml_partner_info partner_info[ATH12K_WMI_MLO_MAX_LINKS];
+	u32 eml_caps;
 };
 
 struct peer_assoc_params {
