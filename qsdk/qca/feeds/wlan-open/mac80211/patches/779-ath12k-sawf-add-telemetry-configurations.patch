From 93307a43f24632b79706b1f7ac0a18713261f481 Mon Sep 17 00:00:00 2001
From: Mahendran P <quic_mahep@quicinc.com>
Date: Mon, 29 May 2023 10:16:32 +0530
Subject: [PATCH] ath12k: sawf: add telemetry configurations.

Add below listed telemetry configurations
        sla samples configuration
        sla thershold configuration
        sla detection configuration

sla samples configuration
These configurations helps to take samples for the sla calculation.
Four configuration parameters are provided
        Number of packets per window for moving average calculation
        Number of windows for moving average calculation
        Number of packets for sla calculation
        Number of seconds for sla calculation

sla thershold configuration
These configurations define the thershold in percentage for each
of the given configuration. If the thershold is crossed, then it
is considered as breach. For each service class id, the corresponding
parameter thershold percentages are configured.

sla detection configuration
These configurations defines the sla breach detection options and its
corresponding configurations
There are four detection options provided
        1. Sla detection based on number of packets
        2. Sla detection based on per second
        3. Sla detection based on moving average
        4. Sla detection based on number of seconds

Signed-off-by: Mahendran P <quic_mahep@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/Makefile    |   3 +-
 drivers/net/wireless/ath/ath12k/core.c      |   3 +
 drivers/net/wireless/ath/ath12k/telemetry.c | 193 ++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/telemetry.h | 111 +++++++++++
 drivers/net/wireless/ath/ath12k/vendor.c    | 182 ++++++++++++++++++
 drivers/net/wireless/ath/ath12k/vendor.h    |  48 +++++
 6 files changed, 539 insertions(+), 1 deletion(-)
 create mode 100644 drivers/net/wireless/ath/ath12k/telemetry.c
 create mode 100644 drivers/net/wireless/ath/ath12k/telemetry.h

--- a/drivers/net/wireless/ath/ath12k/Makefile
+++ b/drivers/net/wireless/ath/ath12k/Makefile
@@ -22,7 +22,8 @@ ath12k-y += core.o \
 	    pci.o \
 	    dp_mon.o \
 	    sawf.o \
-	    vendor.o
+	    vendor.o \
+	    telemetry.o
 
 ath12k-$(CPTCFG_ATH12K_DEBUGFS) += debugfs.o debugfs_htt_stats.o debugfs_sta.o
 ath12k-$(CPTCFG_NL80211_TESTMODE) += testmode.o
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -21,6 +21,7 @@
 #include "sawf.h"
 #include "ppe.h"
 #include "ahb.h"
+#include "telemetry.h"
 
 unsigned int ath12k_debug_mask;
 module_param_named(debug_mask, ath12k_debug_mask, uint, 0644);
@@ -1085,6 +1086,7 @@ static int ath12k_core_pdev_init(struct
 	}
 
 	ath12k_sawf_init(ab);
+	ath12k_telemetry_init(ab);
 
 #ifdef CPTCFG_ATH12K_PPE_DS_SUPPORT
 	ret = ath12k_dp_ppeds_start(ab);
@@ -1113,6 +1115,7 @@ static void ath12k_core_pdev_deinit(stru
 #endif
 	ath12k_spectral_deinit(ab);
 	ath12k_thermal_unregister(ab);
+	ath12k_telemetry_deinit(ab);
 	ath12k_sawf_deinit(ab);
 }
 
--- /dev/null
+++ b/drivers/net/wireless/ath/ath12k/telemetry.c
@@ -0,0 +1,184 @@
+// SPDX-License-Identifier: BSD-3-Clause-Clear
+/*
+ * Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+ */
+
+#include "core.h"
+#include "debug.h"
+#include "sawf.h"
+#include "vendor.h"
+#include "telemetry.h"
+#include <linux/module.h>
+
+
+#define MIN_THERSHOLD_PERCENTAGE 0
+#define MAX_THERSHOLD_PERCENTAGE 100
+
+static struct ath12k_telemetry_ctx *telemetry_ctx;
+
+void ath12k_telemetry_init(struct ath12k_base *ab)
+{
+	if (!ath12k_sawf_enable)
+		return;
+
+	if (telemetry_ctx)
+		return;
+
+	telemetry_ctx = kzalloc(sizeof(struct ath12k_telemetry_ctx), GFP_KERNEL);
+	if (!telemetry_ctx) {
+		ath12k_err(NULL, "telemetry context failed to initialize\n");
+		return;
+	}
+	ath12k_info(NULL, "telemetry context initialized\n");
+	return;
+}
+
+void ath12k_telemetry_deinit(struct ath12k_base *ab)
+{
+	if (!ath12k_sawf_enable)
+		return;
+
+	if (!telemetry_ctx)
+		return;
+
+	kfree(telemetry_ctx);
+	telemetry_ctx = NULL;
+	ath12k_info(NULL, "telemetry context freed\n");
+	return;
+}
+
+struct ath12k_telemetry_ctx *get_telemetry_context(void)
+{
+	if (!telemetry_ctx) {
+		ath12k_err(NULL, "telemetry context not initialized\n");
+		return NULL;
+	}
+	return telemetry_ctx;
+}
+
+int ath12k_telemetry_sawf_sla_samples_config(struct ath12k_sla_samples_cfg param)
+{
+	struct ath12k_sla_samples_cfg* telemetry_param;
+	int ret = 0;
+
+	if (param.moving_avg_pkt == 0 || param.moving_avg_win == 0 ||
+	    param.sla_num_pkt == 0 || param.sla_time_sec == 0) {
+		ath12k_err(NULL, "invalid telemetry sla samples configuration \n");
+		return -EINVAL;
+	}
+
+	telemetry_param = &telemetry_ctx->sla_samples_params;
+	telemetry_param->moving_avg_pkt = param.moving_avg_pkt;
+	telemetry_param->moving_avg_win  = param.moving_avg_win;
+	telemetry_param->sla_num_pkt = param.sla_num_pkt;
+	telemetry_param->sla_time_sec = param.sla_time_sec;
+
+	ath12k_info(NULL, "telemetry sla samples configuration done, "
+		    "movavgpkt:%d movavgwin:%d slanumpkt:%d slatimesec:%d \n",
+		    telemetry_param->moving_avg_pkt,telemetry_param->moving_avg_win,
+		    telemetry_param->sla_num_pkt, telemetry_param->sla_time_sec);
+
+	return ret;
+}
+
+int ath12k_telemetry_sawf_sla_thershold_config(struct ath12k_sla_thershold_cfg param)
+{
+	struct ath12k_sla_thershold_cfg* sla_thershold_param;
+	int ret = 0;
+
+	if (param.min_throughput_rate < MIN_THERSHOLD_PERCENTAGE ||
+	    param.min_throughput_rate > MAX_THERSHOLD_PERCENTAGE ||
+	    param.max_throughput_rate < MIN_THERSHOLD_PERCENTAGE ||
+	    param.max_throughput_rate > MAX_THERSHOLD_PERCENTAGE ||
+	    param.burst_size < MIN_THERSHOLD_PERCENTAGE ||
+	    param.burst_size > MAX_THERSHOLD_PERCENTAGE ||
+	    param.service_interval < MIN_THERSHOLD_PERCENTAGE ||
+	    param.service_interval > MAX_THERSHOLD_PERCENTAGE ||
+	    param.delay_bound < MIN_THERSHOLD_PERCENTAGE ||
+	    param.delay_bound > MAX_THERSHOLD_PERCENTAGE ||
+	    param.msdu_ttl < MIN_THERSHOLD_PERCENTAGE ||
+	    param.msdu_ttl > MAX_THERSHOLD_PERCENTAGE ||
+	    param.msdu_rate_loss < MIN_THERSHOLD_PERCENTAGE ||
+	    param.msdu_rate_loss > MAX_THERSHOLD_PERCENTAGE) {
+		ath12k_err(NULL, "invalid telemetry sla thershold configuration \n");
+		return -EINVAL;
+	}
+
+	sla_thershold_param = &telemetry_ctx->sla_thershold_params;
+	sla_thershold_param->svc_id = param.svc_id;
+	sla_thershold_param->min_throughput_rate = param.min_throughput_rate;
+	sla_thershold_param->max_throughput_rate = param.max_throughput_rate;
+	sla_thershold_param->burst_size = param.burst_size;
+	sla_thershold_param->service_interval = param.service_interval;
+	sla_thershold_param->delay_bound = param.delay_bound;
+	sla_thershold_param->msdu_ttl = param.msdu_ttl;
+	sla_thershold_param->msdu_rate_loss = param.msdu_rate_loss;
+
+	ath12k_info(NULL, "telemetry sla thershold configuration done, "
+		    "svcid: %d MinThrRate:%d MaxThrRate:%d BurstSize:%d "
+		    "serviceInt:%d \n DelayBound: %d MsduTtl:%d "
+		    "msdurateloss:%d \n", sla_thershold_param->svc_id,
+		    sla_thershold_param->min_throughput_rate,
+		    sla_thershold_param->max_throughput_rate,
+		    sla_thershold_param->burst_size,
+		    sla_thershold_param->service_interval,
+		    sla_thershold_param->delay_bound,
+		    sla_thershold_param->msdu_ttl,
+		    sla_thershold_param->msdu_rate_loss);
+	return ret;
+}
+
+int ath12k_telemetry_sawf_sla_detection_config(struct ath12k_sla_detect_cfg param)
+{
+	struct ath12k_sla_detect_cfg* telemetry_param;
+	int ret = 0;
+
+	if ((param.sla_detect == SLA_DETECT_NUM_PACKET) &&
+	    (param.min_throughput_rate || param.max_throughput_rate ||
+	     param.burst_size || param.service_interval)) {
+		ath12k_info(NULL, "unsupported sla detect config for number of packets.\n");
+		return -1;
+	}
+
+	if (((param.sla_detect == SLA_DETECT_PER_SECOND)) &&
+	    (param.burst_size || param.service_interval || param.delay_bound ||
+	     param.msdu_ttl || param.msdu_rate_loss)) {
+		ath12k_info(NULL,"unsupported sla detect config for per second.\n");
+		return -1;
+	}
+
+	if ((param.sla_detect == SLA_DETECT_MOV_AVG) &&
+	    (param.min_throughput_rate || param.max_throughput_rate ||
+	     param.burst_size || param.service_interval || param.msdu_ttl ||
+	     param.msdu_rate_loss)) {
+		ath12k_info(NULL, "unsupported sla detect config for moving average.\n");
+		return -1;
+	}
+
+	if ((param.sla_detect == SLA_DETECT_NUM_SECOND) &&
+	    (param.min_throughput_rate || param.max_throughput_rate ||
+	     param.delay_bound)) {
+		ath12k_info(NULL, "unsupported sla detect config for number of seconds.\n");
+		return -1;
+	}
+
+	telemetry_param = &telemetry_ctx->sla_detect_params;
+	telemetry_param->sla_detect = param.sla_detect;
+	telemetry_param->min_throughput_rate = param.min_throughput_rate;
+	telemetry_param->max_throughput_rate  = param.max_throughput_rate;
+	telemetry_param->burst_size = param.burst_size;
+	telemetry_param->service_interval = param.service_interval;
+	telemetry_param->delay_bound = param.delay_bound;
+	telemetry_param->msdu_ttl = param.msdu_ttl;
+	telemetry_param->msdu_rate_loss = param.msdu_rate_loss;
+
+	ath12k_info(NULL, "telemetry sla detection configuration done, detect option: %d "
+		   "MinThrRate:%d MaxThrRate:%d BurstSize:%d ServiceInt:%d \n DelayBound: %d "
+		   "MsduTtl:%d MsduRateLoss:%d \n", telemetry_param->sla_detect,
+		    telemetry_param->min_throughput_rate,
+		    telemetry_param->max_throughput_rate, telemetry_param->burst_size,
+		    telemetry_param->service_interval, telemetry_param->delay_bound,
+		    telemetry_param->msdu_ttl, telemetry_param->msdu_rate_loss);
+
+	return ret;
+}
--- /dev/null
+++ b/drivers/net/wireless/ath/ath12k/telemetry.h
@@ -0,0 +1,104 @@
+/* SPDX-License-Identifier: BSD-3-Clause-Clear */
+/*
+ * Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+ */
+
+#ifndef ATH12K_TELEMETRY_H
+#define ATH12K_TELEMETRY_H
+
+
+/**
+ * struct ath12k_sla_samples_cfg- telemetry sawf sla samples configuration
+ * @moving_avg_pkt: Number of packets per window to calculate moving average
+ * @moving_avg_win: Number of windows to calculate moving average
+ * @sla_num_pkt: Number of packets for SLA detection
+ * @sla_time_sec:  Number of seconds for SLA detection
+ */
+struct ath12k_sla_samples_cfg {
+	u32 moving_avg_pkt;
+	u32 moving_avg_win;
+	u32 sla_num_pkt;
+	u32 sla_time_sec;
+};
+
+/**
+ * struct ath12k_sla_thershold_cfg- telemetry sawf sla
+ * thershold configuration
+ * @svc_id: service class id
+ * @min_throughput_rate: min throughput thershold percentage
+ * @max_throughput_rate: max throughput thershold percentage
+ * @burst_size:  burst size thershold percentage
+ * @service_interval: service interval thershold percentage
+ * @delay_bound: delay bound thershold percentage
+ * @msdu_ttl: MSDU Time-To-Live thershold percentage
+ * @msdu_rate_loss: MSDU loss rate thershold percentage
+ */
+struct ath12k_sla_thershold_cfg {
+	u8 svc_id;
+	u32 min_throughput_rate;
+	u32 max_throughput_rate;
+	u32 burst_size;
+	u32 service_interval;
+	u32 delay_bound;
+	u32 msdu_ttl;
+	u32 msdu_rate_loss;
+};
+
+
+/**
+ * struct ath12k_sla_detect- telemetry sawf sla
+ * sla breach detection option
+ * @SLA_DETECT_NUM_PACKET: Number of packets per window
+ * @SLA_DETECT_PER_SECOND: Number of windows
+ * @SLA_DETECT_MOV_AVG: Number of packets to calculate
+ *			 moving average for SLA detection
+ * @SLA_DETECT_NUM_SECOND:  Number of seconds for SLA detection
+ */
+enum ath12k_sla_detect {
+	SLA_DETECT_NUM_PACKET,
+	SLA_DETECT_PER_SECOND,
+	SLA_DETECT_MOV_AVG,
+	SLA_DETECT_NUM_SECOND,
+	SLA_DETECT_MAX,
+};
+
+/**
+ * struct ath12k_sla_detect_cfg- telemetry sawf sla
+ * breach detection configuration
+ * @sla_detect: sla detection option
+ * @min_throughput_rate: min throughput thershold percentage
+ * @max_throughput_rate: max throughput thershold percentage
+ * @burst_size:  burst size thershold percentage
+ * @service_interval: service interval thershold percentage
+ * @delay_bound: delay bound thershold percentage
+ * @msdu_ttl: MSDU Time-To-Live thershold percentage
+ * @msdu_rate_loss: MSDU loss rate thershold percentage
+ */
+struct ath12k_sla_detect_cfg {
+	enum ath12k_sla_detect sla_detect;
+	u32 min_throughput_rate;
+	u32 max_throughput_rate;
+	u32 burst_size;
+	u32 service_interval;
+	u32 delay_bound;
+	u32 msdu_ttl;
+	u32 msdu_rate_loss;
+};
+
+/**
+ * struct ath12k_telemetry_ctx- Telemetry context
+ */
+struct ath12k_telemetry_ctx {
+	struct ath12k_sla_samples_cfg sla_samples_params;
+	struct ath12k_sla_thershold_cfg sla_thershold_params;
+	struct ath12k_sla_detect_cfg sla_detect_params;
+};
+
+void ath12k_telemetry_init(struct ath12k_base *ab);
+void ath12k_telemetry_deinit(struct ath12k_base *ab);
+struct ath12k_telemetry_ctx *get_telemetry_context(void);
+int ath12k_telemetry_sawf_sla_samples_config(struct ath12k_sla_samples_cfg param);
+int ath12k_telemetry_sawf_sla_thershold_config(struct ath12k_sla_thershold_cfg param);
+int ath12k_telemetry_sawf_sla_detection_config(struct ath12k_sla_detect_cfg param);
+
+#endif /* ATH12K_TELEMETRY_H */
--- a/drivers/net/wireless/ath/ath12k/vendor.c
+++ b/drivers/net/wireless/ath/ath12k/vendor.c
@@ -8,6 +8,7 @@
 #include "debug.h"
 #include "mac.h"
 #include "sawf.h"
+#include "telemetry.h"
 
 static const struct nla_policy
 ath12k_vendor_sawf_config_policy[QCA_WLAN_VENDOR_SAWF_ATTR_CONFIG_MAX + 1] = {
@@ -42,6 +43,39 @@ ath12k_vendor_sawf_def_qmap_rep_req_poli
 	[QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAC_ADDR] = {.type = NLA_STRING, .len = 18},
 };
 
+static const struct nla_policy
+ath12k_vendor_telemetry_sawf_sla_thershold_config_policy[QCA_WLAN_VENDOR_TELEMETRY_SLA_THERSHOLD_CFG_ATTR_CONFIG_MAX + 1] = {
+	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_SVC_ID] = {.type = NLA_U8},
+	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MIN_TP] = {.type = NLA_U32},
+	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MAX_TP] = {.type = NLA_U32},
+	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_BURST_SIZE] = {.type = NLA_U32},
+	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_INTERVAL] = {.type = NLA_U32},
+	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_DELAY_BOUND] = {.type = NLA_U32},
+	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MSDU_TTL] = {.type = NLA_U32},
+	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MSDU_RATE_LOSS] = {.type = NLA_U32},
+};
+
+
+static const struct nla_policy
+ath12k_vendor_telemetry_sawf_sla_detect_config_policy[QCA_WLAN_VENDOR_TELEMETRY_SLA_DETECT_ATTR_CONFIG_MAX + 1] = {
+	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECTION_PARAM] = {.type = NLA_U8},
+	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MIN_TP] = {.type = NLA_U32},
+	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MAX_TP] = {.type = NLA_U32},
+	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_BURST_SIZE] = {.type = NLA_U32},
+	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_INTERVAL] = {.type = NLA_U32},
+	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_DELAY_BOUND] = {.type = NLA_U32},
+	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MSDU_TTL] = {.type = NLA_U32},
+	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MSDU_RATE_LOSS] = {.type = NLA_U32},
+};
+
+static const struct nla_policy
+ath12k_vendor_telemetry_sawf_sla_samples_config_policy[QCA_WLAN_VENDOR_TELEMETRY_SLA_SAMPLES_CFG_ATTR_CONFIG_MAX + 1] = {
+	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_MOVING_AVG_PKT] = {.type = NLA_U32},
+	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_MOVING_AVG_WIN] = {.type = NLA_U32},
+	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_NUM_PKT] = {.type = NLA_U32},
+	[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_TIME_SEC] = {.type = NLA_U32},
+};
+
 static void ath12k_set_default_values(struct ath12k_sawf_svc_params *param)
 {
 	param->min_throughput_rate = SAWF_SVC_PARAM_DEFAULT_MIN_THRUPUT;
@@ -443,6 +477,133 @@ static int ath12k_vendor_sawf_def_qmap_r
 	return ret;
 }
 
+static int ath12k_vendor_telemetry_sawf_sla_samples_config(struct wiphy *wiphy,
+							   struct wireless_dev *wdev,
+							   const void *data,
+							   int data_len)
+{
+	struct nlattr *tb[QCA_WLAN_VENDOR_TELEMETRY_SLA_SAMPLES_CFG_ATTR_CONFIG_MAX + 1];
+	struct ath12k_sla_samples_cfg t_param;
+	int ret = 0;
+
+	if (!ath12k_sawf_enable) {
+		ath12k_warn(NULL, "sawf is not enabled \n");
+		return -ENOSYS;
+	}
+
+	memset(&t_param, 0, sizeof(struct ath12k_sla_samples_cfg));
+
+	ret = nla_parse(tb, QCA_WLAN_VENDOR_TELEMETRY_SLA_SAMPLES_CFG_ATTR_CONFIG_MAX,
+			data, data_len, ath12k_vendor_telemetry_sawf_sla_samples_config_policy, NULL);
+        if (ret) {
+		ath12k_warn(NULL, "invalid set telemetry sla samples config policy attribute\n");
+		return ret;
+        }
+
+	t_param.moving_avg_pkt =
+		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_MOVING_AVG_PKT]);
+	t_param.moving_avg_win =
+		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_MOVING_AVG_WIN]);
+	t_param.sla_num_pkt =
+		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_NUM_PKT]);
+	t_param.sla_time_sec =
+		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_TIME_SEC]);
+
+	ret = ath12k_telemetry_sawf_sla_samples_config(t_param);
+	return ret;
+}
+
+static int ath12k_vendor_telemetry_sawf_sla_thershold_config(struct wiphy *wiphy,
+							     struct wireless_dev *wdev,
+							     const void *data,
+							     int data_len)
+{
+	struct nlattr *tb[QCA_WLAN_VENDOR_TELEMETRY_SLA_THERSHOLD_CFG_ATTR_CONFIG_MAX + 1];
+	struct ath12k_sla_thershold_cfg t_param;
+	int ret = 0;
+
+	if (!ath12k_sawf_enable) {
+		ath12k_warn(NULL, "sawf is not enabled \n");
+		return -ENOSYS;
+	}
+
+	memset(&t_param, 0, sizeof(struct ath12k_sla_thershold_cfg));
+
+	ret = nla_parse(tb, QCA_WLAN_VENDOR_TELEMETRY_SLA_THERSHOLD_CFG_ATTR_CONFIG_MAX,
+			data, data_len, ath12k_vendor_telemetry_sawf_sla_thershold_config_policy,
+			NULL);
+	if (ret) {
+		ath12k_warn(NULL, "invalid telemetry sla thershold config policy attribute\n");
+		return ret;
+	}
+
+	t_param.svc_id =
+		nla_get_u8(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_SVC_ID]);
+	t_param.min_throughput_rate =
+		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MIN_TP]);
+	t_param.max_throughput_rate =
+		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MAX_TP]);
+	t_param.burst_size =
+		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_BURST_SIZE]);
+	t_param.service_interval =
+		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_INTERVAL]);
+	t_param.delay_bound =
+		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_DELAY_BOUND]);
+	t_param.msdu_ttl =
+		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MSDU_TTL]);
+	t_param.msdu_rate_loss =
+		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MSDU_RATE_LOSS]);
+
+	ret = ath12k_telemetry_sawf_sla_thershold_config(t_param);
+
+	return ret;
+}
+
+static int ath12k_vendor_telemetry_sawf_sla_detection_config(struct wiphy *wiphy,
+							     struct wireless_dev *wdev,
+							     const void *data,
+							     int data_len)
+{
+	struct nlattr *tb[QCA_WLAN_VENDOR_TELEMETRY_SLA_DETECT_ATTR_CONFIG_MAX + 1];
+	struct ath12k_sla_detect_cfg t_param;
+	int ret = 0;
+
+	if (!ath12k_sawf_enable) {
+		ath12k_warn(NULL, "sawf is not enabled \n");
+		return -ENOSYS;
+	}
+
+	memset(&t_param, 0, sizeof(struct ath12k_sla_detect_cfg));
+
+	ret = nla_parse(tb, QCA_WLAN_VENDOR_TELEMETRY_SLA_DETECT_ATTR_CONFIG_MAX, data, data_len,
+			ath12k_vendor_telemetry_sawf_sla_detect_config_policy, NULL);
+	if (ret) {
+		ath12k_warn(NULL, "invalid telemetry sawf sla detection  config policy attribute\n");
+		return ret;
+	}
+
+	t_param.sla_detect =
+		nla_get_u8(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECTION_PARAM]);
+	t_param.min_throughput_rate =
+		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MIN_TP]);
+	t_param.max_throughput_rate =
+		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MAX_TP]);
+	t_param.burst_size =
+		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_BURST_SIZE]);
+	t_param.service_interval =
+		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_INTERVAL]);
+	t_param.delay_bound =
+		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_DELAY_BOUND]);
+	t_param.msdu_ttl =
+		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MSDU_TTL]);
+	t_param.msdu_rate_loss =
+		nla_get_u32(tb[QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MSDU_RATE_LOSS]);
+
+	ret = ath12k_telemetry_sawf_sla_detection_config(t_param);
+
+	return ret;
+}
+
 static struct wiphy_vendor_command ath12k_vendor_commands[] = {
 	{
 		.info.vendor_id = QCA_NL80211_VENDOR_ID,
@@ -489,6 +650,27 @@ static struct wiphy_vendor_command ath12
 		.maxattr = QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAX,
 		.flags = WIPHY_VENDOR_CMD_NEED_NETDEV,
 	},
+	{
+		.info.vendor_id = QCA_NL80211_VENDOR_ID,
+		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_SLA_SAMPLES_CFG,
+		.doit = ath12k_vendor_telemetry_sawf_sla_samples_config,
+		.policy = ath12k_vendor_telemetry_sawf_sla_samples_config_policy,
+		.maxattr = QCA_WLAN_VENDOR_TELEMETRY_SLA_SAMPLES_CFG_ATTR_CONFIG_MAX,
+	},
+	{
+		.info.vendor_id = QCA_NL80211_VENDOR_ID,
+		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_SLA_THERSHOLD_CFG,
+		.doit = ath12k_vendor_telemetry_sawf_sla_thershold_config,
+		.policy = ath12k_vendor_telemetry_sawf_sla_thershold_config_policy,
+		.maxattr = QCA_WLAN_VENDOR_TELEMETRY_SLA_THERSHOLD_CFG_ATTR_CONFIG_MAX,
+	},
+	{
+		.info.vendor_id = QCA_NL80211_VENDOR_ID,
+		.info.subcmd = QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_SLA_BREACH_DETECTION_CFG,
+		.doit = ath12k_vendor_telemetry_sawf_sla_detection_config,
+		.policy = ath12k_vendor_telemetry_sawf_sla_detect_config_policy,
+		.maxattr = QCA_WLAN_VENDOR_TELEMETRY_SLA_DETECT_ATTR_CONFIG_MAX,
+	},
 };
 
 int ath12k_vendor_register(struct ath12k_hw *ah)
--- a/drivers/net/wireless/ath/ath12k/vendor.h
+++ b/drivers/net/wireless/ath/ath12k/vendor.h
@@ -17,6 +17,9 @@ enum qca_nl80211_vendor_subcmds {
 	QCA_NL80211_VENDOR_SUBCMD_SAWF_DEF_Q_MAP = 207,
 	QCA_NL80211_VENDOR_SUBCMD_SAWF_DEF_Q_UNMAP = 208,
 	QCA_NL80211_VENDOR_SUBCMD_SAWF_DEF_Q_MAP_REP = 209,
+	QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_SLA_THERSHOLD_CFG = 210,
+	QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_SLA_SAMPLES_CFG = 211,
+	QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_SLA_BREACH_DETECTION_CFG = 212,
 };
 
 enum qca_wlan_vendor_sawf_attr_config {
@@ -55,5 +58,50 @@ enum ath12k_vendor_attr_sawf_def_q_map {
 		QCN_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_AFTER_LAST - 1,
 };
 
+enum qca_wlan_vendor_attr_telemetry_sawf_sla_samples_config {
+	QCN_WLAN_VENDOR_ATTR_TELEMETRY_MOVING_AVG_PKT = 1,
+	QCN_WLAN_VENDOR_ATTR_TELEMETRY_MOVING_AVG_WIN,
+	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_NUM_PKT,
+	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_TIME_SEC,
+
+	/* keep last */
+	QCN_WLAN_VENDOR_TELEMETRY_SLA_SAMPLES_CFG_ATTR_AFTER_LAST,
+	QCA_WLAN_VENDOR_TELEMETRY_SLA_SAMPLES_CFG_ATTR_CONFIG_MAX =
+		QCN_WLAN_VENDOR_TELEMETRY_SLA_SAMPLES_CFG_ATTR_AFTER_LAST - 1,
+};
+
+enum qca_wlan_vendor_attr_telemetry_sawf_sla_detect_config {
+	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECTION_PARAM = 1,
+	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MIN_TP,
+	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MAX_TP,
+	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_BURST_SIZE,
+	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_INTERVAL,
+	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_DELAY_BOUND,
+	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MSDU_TTL,
+	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_DETECT_MSDU_RATE_LOSS,
+
+	/* keep last */
+	QCA_WLAN_VENDOR_TELEMETRY_SLA_DETECT_AFTER_LAST,
+	QCA_WLAN_VENDOR_TELEMETRY_SLA_DETECT_ATTR_CONFIG_MAX =
+	QCA_WLAN_VENDOR_TELEMETRY_SLA_DETECT_AFTER_LAST - 1,
+
+};
+
+enum qca_wlan_vendor_attr_telemetry_sawf_sla_thershold_config {
+	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_SVC_ID = 1,
+	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MIN_TP,
+	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MAX_TP,
+	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_BURST_SIZE,
+	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_INTERVAL,
+	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_DELAY_BOUND,
+	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MSDU_TTL,
+	QCN_WLAN_VENDOR_ATTR_TELEMETRY_SLA_THERSHOLD_MSDU_RATE_LOSS,
+
+	/* keep last */
+	QCA_WLAN_VENDOR_TELEMETRY_SLA_THERSHOLD_CFG_AFTER_LAST,
+	QCA_WLAN_VENDOR_TELEMETRY_SLA_THERSHOLD_CFG_ATTR_CONFIG_MAX =
+	QCA_WLAN_VENDOR_TELEMETRY_SLA_THERSHOLD_CFG_AFTER_LAST - 1,
+};
+
 int ath12k_vendor_register(struct ath12k_hw *ah);
 #endif /* QCA_VENDOR_H */
