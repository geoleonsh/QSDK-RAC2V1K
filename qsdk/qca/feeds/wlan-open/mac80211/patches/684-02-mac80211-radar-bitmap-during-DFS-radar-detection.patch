From 8402e052f7e0f2e9e4af88308077628e67aa6132 Mon Sep 17 00:00:00 2001
From: Nagarajan Maran <quic_nmaran@quicinc.com>
Date: Mon, 7 Nov 2022 02:22:24 +0530
Subject: [PATCH] mac80211: radar bitmap during DFS radar detection

Signed-off-by: Nagarajan Maran <quic_nmaran@quicinc.com>
---
 include/net/mac80211.h     |  9 +++++++++
 net/mac80211/ieee80211_i.h |  1 +
 net/mac80211/util.c        | 14 ++++++++++++++
 3 files changed, 24 insertions(+)

--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -6565,6 +6565,15 @@ void ieee80211_cqm_beacon_loss_notify(st
 void ieee80211_radar_detected(struct ieee80211_hw *hw);
 
 /**
+ * ieee80211_radar_detected_bitmap - inform that a radar was detected
+ * 	with bitmap
+ * @hw: pointer as obtained from ieee80211_alloc_hw()
+ * @radar_bitmap: denotes the bitmap of radar.
+ */
+void ieee80211_radar_detected_bitmap(struct ieee80211_hw *hw, u16 radar_bitmap);
+
+
+/**
  * ieee80211_chswitch_done - Complete channel switch process
  * @vif: &struct ieee80211_vif pointer from the add_interface callback.
  * @success: make the channel switch successful or not
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -1296,6 +1296,11 @@ struct mac80211_memory_stats {
 	atomic_t malloc_size;
 };
 
+struct channel_radar_info {
+	struct list_head list;
+	u16 radar_bitmap;
+};
+
 struct ieee80211_local {
 	/* embed the driver visible part.
 	 * don't cast (use the static inlines below), but we keep
@@ -1390,6 +1395,7 @@ struct ieee80211_local {
 	bool wowlan;
 
 	struct work_struct radar_detected_work;
+	struct list_head radar_info_list;
 
 	/* number of RX chains the hardware has */
 	u8 rx_chains;
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -4271,10 +4271,10 @@ void ieee80211_awgn_detected_work(struct
 				    local->chan_bw_interference_bitmap);
 }
 
-void ieee80211_dfs_radar_detected_work(struct work_struct *work)
+static void
+ieee80211_dfs_radar_detected_processing(struct ieee80211_local *local,
+					u16 radar_bitmap)
 {
-	struct ieee80211_local *local =
-		container_of(work, struct ieee80211_local, radar_detected_work);
 	struct cfg80211_chan_def chandef = local->hw.conf.chandef;
 	struct ieee80211_chanctx *ctx;
 	int num_chanctx = 0;
@@ -4293,6 +4293,8 @@ void ieee80211_dfs_radar_detected_work(s
 	ieee80211_dfs_cac_cancel(local);
 	wiphy_unlock(local->hw.wiphy);
 
+	chandef.radar_bitmap = radar_bitmap;
+
 	if (num_chanctx > 1)
 		/* XXX: multi-channel is not supported yet */
 		WARN_ON(1);
@@ -4300,6 +4302,26 @@ void ieee80211_dfs_radar_detected_work(s
 		cfg80211_radar_event(local->hw.wiphy, &chandef, GFP_KERNEL);
 }
 
+void ieee80211_dfs_radar_detected_work(struct work_struct *work)
+{
+	struct ieee80211_local *local =
+		container_of(work, struct ieee80211_local, radar_detected_work);
+	struct channel_radar_info *radar_info, *temp;
+	u16 radar_bitmap;
+
+	if (list_empty(&local->radar_info_list))
+		return ieee80211_dfs_radar_detected_processing(local, 0);
+
+	list_for_each_entry_safe(radar_info, temp, &local->radar_info_list, list) {
+		radar_bitmap = radar_info->radar_bitmap;
+
+		ieee80211_dfs_radar_detected_processing(local, radar_bitmap);
+
+		list_del(&radar_info->list);
+		kfree(radar_info);
+	}
+}
+
 void ieee80211_radar_detected(struct ieee80211_hw *hw)
 {
 	struct ieee80211_local *local = hw_to_local(hw);
@@ -4310,6 +4332,23 @@ void ieee80211_radar_detected(struct iee
 }
 EXPORT_SYMBOL(ieee80211_radar_detected);
 
+void ieee80211_radar_detected_bitmap(struct ieee80211_hw *hw, u16 radar_bitmap)
+{
+	struct ieee80211_local *local = hw_to_local(hw);
+	struct channel_radar_info *radar_info;
+
+	radar_info = kzalloc(sizeof(*radar_info), GFP_ATOMIC);
+	if (!radar_info)
+		return;
+
+	INIT_LIST_HEAD(&radar_info->list);
+	radar_info->radar_bitmap = radar_bitmap;
+
+	list_add_tail(&radar_info->list, &local->radar_info_list);
+	schedule_work(&local->radar_detected_work);
+}
+EXPORT_SYMBOL(ieee80211_radar_detected_bitmap);
+
 void ieee80211_awgn_detected(struct ieee80211_hw *hw, u32 chan_bw_interference_bitmap)
 {
 	struct ieee80211_local *local = hw_to_local(hw);
--- a/net/mac80211/main.c
+++ b/net/mac80211/main.c
@@ -782,6 +782,7 @@ struct ieee80211_hw *ieee80211_alloc_hw_
 	wiphy->extended_capabilities_len =
 		ARRAY_SIZE(local->ext_capa);
 
+	INIT_LIST_HEAD(&local->radar_info_list);
 	INIT_LIST_HEAD(&local->interfaces);
 	INIT_LIST_HEAD(&local->mon_list);
 
