From 56a83336e08552fe94fd72f363db12c709ee2daa Mon Sep 17 00:00:00 2001
From: "Rajat Soni(Temp)" <quic_rajson@quicinc.com>
Date: Thu, 6 Aug 2020 00:44:45 +0530
Subject: [PATCH] ath12k: Validate fixed rate settings in MU MIMO case

Fixed NSS rates are allowed only when MU MIMO is disabled,
for VHT and HE. In case of MU MIMO enable, valid rates needs
to be given for all lower NSS.

VHT cap is updated in arvif from beacon data, to have updated
configs in vdev level structure.

Signed-off-by: Lavanya Suresh <lavaks@codeaurora.org>
Signed-off-by: Rajat Soni(Temp) <quic_rajson@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |  1 +
 drivers/net/wireless/ath/ath12k/mac.c  | 57 ++++++++++++++++++++++++++
 2 files changed, 58 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -345,6 +345,7 @@ struct ath12k_vif {
 	u8 nontransmitting_vif_count;
 	bool bcca_zero_sent;
 	bool do_not_send_tmpl;
+	u32 vht_cap;
 	struct ath12k_vif_cache cache;
 #ifdef CPTCFG_ATH12K_DEBUGFS
 	struct dentry *debugfs_twt;
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -1253,7 +1253,9 @@ static void ath12k_mac_setup_bcn_tmpl_vi
 						 struct sk_buff *bcn)
 {
 	struct ieee80211_mgmt *mgmt;
+	struct ieee80211_vht_cap *vht_cap;
 	u8 *ies;
+	const u8 *vht_cap_ie;
 
 	ies = bcn->data + ieee80211_get_hdrlen_from_skb(bcn);
 	mgmt = (struct ieee80211_mgmt *)bcn->data;
@@ -1261,6 +1263,11 @@ static void ath12k_mac_setup_bcn_tmpl_vi
 
 	if (cfg80211_find_ie(WLAN_EID_RSN, ies, (skb_tail_pointer(bcn) - ies)))
 		arvif->rsnie_present = true;
+	vht_cap_ie = cfg80211_find_ie(WLAN_EID_VHT_CAPABILITY, ies, (skb_tail_pointer(bcn) - ies));
+	if (vht_cap_ie && vht_cap_ie[1] >= sizeof(*vht_cap)) {
+		vht_cap = (void *)(vht_cap_ie + 2);
+		arvif->vht_cap = vht_cap->vht_cap_info;
+	}
 
 	if (cfg80211_find_vendor_ie(WLAN_OUI_MICROSOFT,
 				    WLAN_OUI_TYPE_MICROSOFT_WPA,
@@ -9721,6 +9728,53 @@ exit:
 	return ret;
 }
 
+static bool
+ath12k_mac_check_fixed_rate_settings_for_mumimo(struct ath12k_vif *arvif, const u16 *vht_mcs_mask, const u16 *he_mcs_mask)
+{
+	struct ath12k *ar = arvif->ar;
+	struct ieee80211_he_cap_elem he_cap_elem = {0};
+	int nss_idx;
+	int he_nss;
+	int vht_nss;
+
+	vht_nss =  ath12k_mac_max_vht_nss(vht_mcs_mask);
+
+	if (vht_nss != 1) {
+		for (nss_idx = vht_nss-1; nss_idx >= 0; nss_idx--) {
+			if (vht_mcs_mask[nss_idx])
+				continue;
+
+			if (arvif->vht_cap & IEEE80211_VHT_CAP_MU_BEAMFORMER_CAPABLE) {
+				ath12k_warn(ar->ab, "vht fixed NSS rate is allowed only when MU MIMO is disabled\n");
+				return false;
+			}
+		}
+	}
+
+	if (!arvif->vif->bss_conf.he_support)
+		return true;
+
+	 he_nss =  ath12k_mac_max_he_nss(he_mcs_mask);
+
+	 if (he_nss == 1)
+		 return true;
+
+	 memcpy(&he_cap_elem, &arvif->vif->bss_conf.he_cap_elem, sizeof(he_cap_elem));
+
+	 for (nss_idx = he_nss-1; nss_idx >= 0; nss_idx--) {
+		 if (he_mcs_mask[nss_idx])
+			 continue;
+
+		 if ((he_cap_elem.phy_cap_info[2] & IEEE80211_HE_PHY_CAP2_UL_MU_FULL_MU_MIMO) ||
+		      (he_cap_elem.phy_cap_info[4] & IEEE80211_HE_PHY_CAP4_MU_BEAMFORMER)) {
+			 ath12k_warn(ar->ab, "he fixed NSS rate is allowed only when MU MIMO is disabled\n");
+			 return false;
+		 }
+	 }
+
+	 return true;
+}
+
 static int
 ath12k_mac_op_set_bitrate_mask(struct ieee80211_hw *hw,
 			       struct ieee80211_vif *vif,
@@ -9813,6 +9867,9 @@ ath12k_mac_op_set_bitrate_mask(struct ie
 	} else {
 		rate = WMI_FIXED_RATE_NONE;
 
+		if (!ath12k_mac_check_fixed_rate_settings_for_mumimo(arvif, vht_mcs_mask, he_mcs_mask))
+			return -EINVAL;
+
 		if (!ath12k_mac_validate_fixed_rate_settings(ar, band, mask))
 			ath12k_warn(ar->ab,
 				    "could not update fixed rate settings to all peers due to mcs/nss incompaitiblity\n");
