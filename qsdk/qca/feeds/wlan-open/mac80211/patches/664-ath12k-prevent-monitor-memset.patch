From ae44eeef4e8395932faa9ea8929e08220a356eb7 Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Thu, 1 Sep 2022 19:31:21 +0530
Subject: [PATCH] ath12k: improve CPU utilisation by avoiding memset

During IxLoad attack, memset is performed to clear the existing ppdu
information before processing the new ppdu information. But performing
memset on the hal_rx_mon_ppdu_info structure consumes more than 3% of total
available CPU.

Refactor the memset logic to perform memset on the consument msdu and
mpdu count. This improves CPU utilisation when stats enabled.

Without the change:

PerfTop:   12577 irqs/sec  kernel:98.0%  exact:  0.0% lost: 0/0 drop: 0/26876 [4000Hz cycles],  (all, 4 CPUs)
-------------------------------------------------------------------------------

    83.62%  [qca_nss_sfe]     [k] sfe_ipv4_find_connection_match_rcu
     3.86%  [kernel]          [k] memset
     0.59%  [ip_tables]       [k] ipt_do_table
     0.29%  [nf_conntrack]    [k] 0x0000000000001c38

With change:

PerfTop:   12664 irqs/sec  kernel:98.2%  exact:  0.0% lost: 0/0 drop: 0/54782 [4000Hz cycles],  (all, 4 CPUs)
-------------------------------------------------------------------------------

    91.60%  [qca_nss_sfe]     [k] sfe_ipv4_find_connection_match_rcu
     0.43%  [ip_tables]       [k] ipt_do_table
     0.15%  [nf_conntrack]    [k] nf_conntrack_tuple_taken
     0.14%  [ecm]             [k] ecm_db_connection_find_and_ref

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_mon.c | 66 +++++++++++++++++++++-----------
 drivers/net/wireless/ath/ath12k/hal_rx.h |  8 +++-
 2 files changed, 49 insertions(+), 25 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp_mon.c
+++ b/drivers/net/wireless/ath/ath12k/dp_mon.c
@@ -1841,12 +1841,12 @@ ath12k_dp_mon_rx_merg_msdus(struct ath12
 	if (!head_msdu)
 		goto err_merge_fail;
 
-	err_bitmap = ppdu_info->mon_mpdu[mpdu_idx].msdu_info[0].errmap;
+	err_bitmap = ppdu_info->cmn_mpdu_info.mon_mpdu[mpdu_idx].msdu_info[0].errmap;
 
 	if (err_bitmap & HAL_RX_MPDU_ERR_FCS)
 		*fcs_err = true;
 
-	decap_format = ppdu_info->mon_mpdu[mpdu_idx].msdu_info[0].decap_format;
+	decap_format = ppdu_info->cmn_mpdu_info.mon_mpdu[mpdu_idx].msdu_info[0].decap_format;
 
 	ath12k_dp_mon_fill_rx_stats(ar, ppdu_info, rxs);
 
@@ -2145,7 +2145,7 @@ static void ath12k_dp_mon_rx_deliver_msd
 	}
 
 	if (!(status->flag & RX_FLAG_ONLY_MONITOR))
-		decap = ppduinfo->mon_mpdu[mpdu_idx].msdu_info[0].decap_format;
+		decap = ppduinfo->cmn_mpdu_info.mon_mpdu[mpdu_idx].msdu_info[0].decap_format;
 	spin_lock_bh(&ar->ab->base_lock);
 	peer = ath12k_dp_rx_h_find_peer(ar->ab, msdu);
 	if (peer && peer->sta)
@@ -2299,10 +2299,10 @@ ath12k_dp_mon_parse_rx_msdu_end(u8 *tlv_
 
 	decap_format = u32_get_bits(info, RX_MSDU_END_INFO11_DECAP_FORMAT);
 
-	mpdu_idx = ppdu_info->mpdu_count;
-	msdu_idx = ppdu_info->mon_mpdu[mpdu_idx].msdu_count;
-	ppdu_info->mon_mpdu[mpdu_idx].msdu_info[msdu_idx].errmap = errmap;
-	ppdu_info->mon_mpdu[mpdu_idx].msdu_info[msdu_idx].decap_format = decap_format;
+	mpdu_idx = ppdu_info->cmn_mpdu_info.mpdu_count;
+	msdu_idx = ppdu_info->cmn_mpdu_info.mon_mpdu[mpdu_idx].msdu_count;
+	ppdu_info->cmn_mpdu_info.mon_mpdu[mpdu_idx].msdu_info[msdu_idx].errmap = errmap;
+	ppdu_info->cmn_mpdu_info.mon_mpdu[mpdu_idx].msdu_info[msdu_idx].decap_format = decap_format;
 }
 
 static void
@@ -2312,7 +2312,7 @@ ath12k_dp_mon_parse_rx_dest_tlv(struct a
 {
 	int offset;
 
-	if (ppdu_info->mpdu_count > HAL_RX_MAX_MPDU) {
+	if (ppdu_info->cmn_mpdu_info.mpdu_count > HAL_RX_MAX_MPDU) {
 		ath12k_warn(ar->ab, "MPDU count reached max limit\n");
 		return;
 	}
@@ -2327,7 +2327,7 @@ ath12k_dp_mon_parse_rx_dest_tlv(struct a
 		struct ath12k_skb_rxcb *rxcb;
 		struct dp_rxdma_ring *buf_ring;
 		struct ath12k_dp *dp = &ar->ab->dp;
-		u8 msdu_count;
+		u16 msdu_count, mpdu_count;
 
 		buf_ring = &dp->rxdma_mon_buf_ring;
 		spin_lock_bh(&buf_ring->idr_lock);
@@ -2348,7 +2348,8 @@ ath12k_dp_mon_parse_rx_dest_tlv(struct a
 
 		offset = packet_info->dma_length + ATH12K_WIFIRX_DOT11_OFFSET;
 
-		msdu_count = ppdu_info->mon_mpdu[ppdu_info->mpdu_count].msdu_count;
+		mpdu_count = ppdu_info->cmn_mpdu_info.mpdu_count;
+		msdu_count = ppdu_info->cmn_mpdu_info.mon_mpdu[mpdu_count].msdu_count;
 		if (ath12k_dp_pkt_set_pktlen(msdu, offset) ||
 		    msdu_count > HAL_RX_MAX_MSDU) {
 			dev_kfree_skb_any(msdu);
@@ -2356,20 +2357,22 @@ ath12k_dp_mon_parse_rx_dest_tlv(struct a
 		}
 
 		if (!msdu_count)
-			ppdu_info->mon_mpdu[ppdu_info->mpdu_count].head_msdu = msdu;
+			ppdu_info->cmn_mpdu_info.mon_mpdu[mpdu_count].head_msdu = msdu;
 		else
-			ppdu_info->mon_mpdu[ppdu_info->mpdu_count].tail_msdu->next = msdu;
+			ppdu_info->cmn_mpdu_info.mon_mpdu[mpdu_count].tail_msdu->next = msdu;
 
-		ppdu_info->mon_mpdu[ppdu_info->mpdu_count].tail_msdu = msdu;
-		ppdu_info->mon_mpdu[ppdu_info->mpdu_count].msdu_count++;
+		ppdu_info->cmn_mpdu_info.mon_mpdu[mpdu_count].tail_msdu = msdu;
+		ppdu_info->cmn_mpdu_info.mon_mpdu[mpdu_count].msdu_count++;
 
 		ath12k_dp_mon_buf_replenish(ar->ab, buf_ring, 1);
 		break;
 	}
 	case HAL_RX_MON_STATUS_MPDU_END: {
-		if (ppdu_info->mon_mpdu[ppdu_info->mpdu_count].msdu_count)
-			ppdu_info->mon_mpdu[ppdu_info->mpdu_count].tail_msdu->next = NULL;
-		ppdu_info->mpdu_count++;
+		u16 mpdu_count = ppdu_info->cmn_mpdu_info.mpdu_count;
+
+		if (ppdu_info->cmn_mpdu_info.mon_mpdu[mpdu_count].msdu_count)
+			ppdu_info->cmn_mpdu_info.mon_mpdu[mpdu_count].tail_msdu->next = NULL;
+		ppdu_info->cmn_mpdu_info.mpdu_count++;
 		break;
 	}
 	case HAL_RX_MON_STATUS_MSDU_END:
@@ -2449,8 +2452,8 @@ ath12k_dp_mon_rx_parse_mon_status(struct
 	if (hal_status != HAL_RX_MON_STATUS_PPDU_DONE)
 		return hal_status;
 
-	for (i = 0; i < ppdu_info->mpdu_count; i++) {
-		mon_mpdu = &ppdu_info->mon_mpdu[i];
+	for (i = 0; i < ppdu_info->cmn_mpdu_info.mpdu_count; i++) {
+		mon_mpdu = &ppdu_info->cmn_mpdu_info.mon_mpdu[i];
 		if (!mon_mpdu)
 			continue;
 
@@ -3564,6 +3567,23 @@ ath12k_dp_mon_rx_update_peer_mu_stats(st
 		ath12k_dp_mon_rx_update_user_stats(ar, ppdu_info, i);
 }
 
+static inline void
+ath12k_dp_mon_rx_memset_ppdu_info(struct hal_rx_mon_ppdu_info *ppdu_info)
+{
+	int i, len;
+
+	len = (sizeof(struct hal_rx_mon_ppdu_info) -
+	       sizeof(struct hal_rx_mon_cmn_mpdu_info));
+
+	memset(ppdu_info, 0, len);
+	for (i = 0; i < ppdu_info->cmn_mpdu_info.mpdu_count; i++) {
+		ppdu_info->cmn_mpdu_info.mon_mpdu[i].msdu_count = 0;
+		ppdu_info->cmn_mpdu_info.mon_mpdu[i].head_msdu = NULL;
+		ppdu_info->cmn_mpdu_info.mon_mpdu[i].tail_msdu = NULL;
+	}
+	ppdu_info->cmn_mpdu_info.mpdu_count = 0;
+}
+
 int ath12k_dp_mon_srng_process(struct ath12k *ar, int mac_id, int *budget,
 			       bool flag, struct napi_struct *napi)
 {
@@ -3652,7 +3672,7 @@ move_next:
 		return 0;
 
 	if (!ppdu_info->ppdu_continuation)
-		memset(ppdu_info, 0, sizeof(*ppdu_info));
+		ath12k_dp_mon_rx_memset_ppdu_info(ppdu_info);
 
 	while ((skb = __skb_dequeue(&skb_list))) {
 		if (flag == ATH12K_DP_RX_MONITOR_MODE)
@@ -3697,7 +3717,7 @@ next_skb:
 		rcu_read_unlock();
 free_skb:
 		dev_kfree_skb_any(skb);
-		memset(ppdu_info, 0, sizeof(*ppdu_info));
+		ath12k_dp_mon_rx_memset_ppdu_info(ppdu_info);
 		ppdu_info->peer_id = HAL_INVALID_PEERID;
 	}
 
@@ -3801,7 +3821,7 @@ move_next:
 		return 0;
 
 	if (!ppdu_info->ppdu_continuation)
-		memset(ppdu_info, 0, sizeof(struct hal_rx_mon_ppdu_info));
+		ath12k_dp_mon_rx_memset_ppdu_info(ppdu_info);
 
 	while ((skb = __skb_dequeue(&skb_list))) {
 
@@ -3846,7 +3866,7 @@ next_skb:
 		rcu_read_unlock();
 free_skb:
 		dev_kfree_skb_any(skb);
-		memset(ppdu_info, 0, sizeof(*ppdu_info));
+		ath12k_dp_mon_rx_memset_ppdu_info(ppdu_info);
 		ppdu_info->peer_id = HAL_INVALID_PEERID;
 	}
 
--- a/drivers/net/wireless/ath/ath12k/hal_rx.h
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.h
@@ -181,6 +181,11 @@ struct hal_rx_u_sig_info {
 	u8 num_eht_sig_sym;
 };
 
+struct hal_rx_mon_cmn_mpdu_info {
+	struct mon_mpdu_data mon_mpdu[HAL_RX_MAX_MPDU];
+	u16 mpdu_count;
+};
+
 #define EHT_MAX_USER_INFO	4
 
 struct hal_rx_mon_ppdu_info {
@@ -268,8 +273,6 @@ struct hal_rx_mon_ppdu_info {
 	bool is_ampdu;
 	u8 medium_prot_type;
 	bool ppdu_continuation;
-	struct mon_mpdu_data mon_mpdu[HAL_RX_MAX_MPDU];
-	u16 mpdu_count;
 	struct hal_rx_tlv_aggr_info tlv_aggr;
 	u16 usig_flags;
 	u16 eht_flags;
@@ -282,6 +285,7 @@ struct hal_rx_mon_ppdu_info {
 	u32 eht_data[6];
 	u32 eht_user_info[EHT_MAX_USER_INFO];
 	struct hal_rx_u_sig_info u_sig_info;
+	struct hal_rx_mon_cmn_mpdu_info cmn_mpdu_info;
 };
 
 #define HAL_RX_PPDU_START_INFO0_PPDU_ID		GENMASK(15, 0)
