From fe31b34a75c991249b448ca36c54015582daed5c Mon Sep 17 00:00:00 2001
From: Nagarajan Maran <quic_nmaran@quicinc.com>
Date: Mon, 7 Nov 2022 18:51:52 +0530
Subject: [PATCH] ath12k: Add WMI support for SAWF

Add Service class configure and disable WMI support.

Signed-off-by: Nagarajan Maran <quic_nmaran@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/wmi.c     | 150 ++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/wmi.h     | 150 ++++++++++++++++++++++
 3 files changed, 376 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -14,6 +14,7 @@ struct ath12k_base;
 struct ath12k;
 struct ath12k_fw_stats;
 struct ath12k_reg_tpc_power_info;
+struct ath12k_sawf_svc_params;
 
 #define PSOC_HOST_MAX_NUM_SS (8)
 
@@ -254,6 +255,7 @@ enum wmi_cmd_group {
 	WMI_GRP_MOTION_DET     = 0x3f,
 	WMI_GRP_SPATIAL_REUSE  = 0x40,
 	WMI_GRP_MLO	       = 0x48,
+	WMI_GRP_SAWF           = 0x49,
 };
 
 #define WMI_CMD_GRP(grp_id) (((grp_id) << 12) | 0x1)
@@ -686,6 +688,12 @@ enum wmi_tlv_cmd_id {
 	WMI_MLO_READY_CMDID,
 	WMI_MLO_TEARDOWN_CMDID,
 	WMI_MLO_PEER_TID_TO_LINK_MAP_CMDID,
+	/** Service Aware WiFi (SAWF) **/
+	/** configure or reconfigure the parameters for a service class **/
+	WMI_SAWF_SERVICE_CLASS_CFG_CMDID = WMI_TLV_CMD(WMI_GRP_SAWF),
+	/** disable a service class **/
+	WMI_SAWF_SERVICE_CLASS_DISABLE_CMDID,
+
 };
 
 enum wmi_tlv_event_id {
@@ -2027,6 +2035,8 @@ enum wmi_tlv_tag {
 	WMI_TAG_TPC_STATS_RATES_ARRAY,
 	WMI_TAG_TPC_STATS_CTL_PWR_TABLE_EVENT,
 	WMI_TAG_BCN_TMPL_ML_PARAMS_CMD = 0x3E6,
+	WMI_TAG_SAWF_SERVICE_CLASS_CFG_CMD_FIXED_PARAM = 0x40A,
+	WMI_TAG_SAWF_SERVICE_CLASS_DISABLE_CMD_FIXED_PARAM = 0x40B,
 	WMI_TAG_BCN_TMPL_ML_INFO_CMD = 0x436,
 	WMI_TAG_CTRL_PATH_CMD_FIXED_PARAM = 0x442,
 	WMI_TAG_CTRL_PATH_EVENT_FIXED_PARAM,
@@ -6840,6 +6850,95 @@ struct wmi_twt_resume_dialog_params_cmd
 	u32 next_twt_size;
 } __packed;
 
+struct wmi_sawf_svc_cfg_cmd_fixed_param {
+	u32 tlv_header; /* TLV tag and len */
+			/* Tag equals WMI_TAG_SAWF_SERVICE_CLASS_CFG_CMD_FIXED_PARAM */
+	u32 svc_class_id; /* which service class is being configured */
+	/*-----
+	 * The below fields specify the values for the parameters of the
+	 * service class being configured.
+	 * Each such service class parameter has a default value specified in the
+	 * above WMI_SAWF_SVC_CLASS_PARAM_DEFAULTS enum.
+	 * This default value shall be specified for service classes where
+	 * the parameter in question is not applicable.
+	 * For example, for service classes that have no minimum throughput
+	 * requirement, the min_thruput_kbps field should be set to
+	 * WMI_SAWF_SVC_CLASS_PARAM_DEFAULT_MIN_THRUPUT, i.e. 0.
+	 *-----
+	 */
+	/* min_thruput_kbps:
+	 * How much throughput should be "guaranteed" for each MSDU queue
+	 * belonging to this service class.
+	 * Units are kilobits per second.
+	 */
+	u32 min_thruput_kbps;
+	/* max_thruput_kbps:
+	 * What upper limit on throughput shall be applied to MSDU queues beloning
+	 * to this service class, if other peer-TIDs are not meeting their QoS
+	 * service goals.
+	 * Units are kilobits per second.
+	 */
+	u32 max_thruput_kbps;
+	/* burst_size_bytes:
+	 * How much data (i.e. how many MSDUs) should be pulled from a
+	 * MSDU queue belonging to this service class to be formed into MPDUs
+	 * and enqueued for transmission.
+	 * Similarly, how long should a tx op be for MPDUs containing MSDUs from
+	 * this service class, to ensure that the necessary amount of data gets
+	 * delivered to the peer.
+	 * Units are bytes.
+	 */
+	u32 burst_size_bytes;
+	/* svc_interval_ms:
+	 * How frequently MSDUs belonging to this service class should be
+	 * formed into MPDUs and enqueued for transmission.
+	 * The svc_interval_ms parameter is expected to be <= the delay_bound_ms
+	 * parameter.
+	 * Units are milliseconds.
+	 */
+	u32 svc_interval_ms;
+	/* delay_bound_ms:
+	 * How promptly the MSDUs belonging to this service class need to be
+	 * delivered to the recipient peer.
+	 * Units are milliseconds.
+	 */
+	u32 delay_bound_ms;
+	/* time_to_live_ms:
+	 * How long MSDUs belonging to this service class remain valid.
+	 * If the MSDU has not been successfully transmitted before this
+	 * time-to-live time has elapsed, the MSDU should be discarded.
+	 * The time_to_live_ms parameter is expected to be >= the delay_bound_ms
+	 * parameter.
+	 * Units are milliseconds.
+	 */
+	u32 time_to_live_ms;
+	/* priority:
+	 * What degree of precedence shall the WLAN FW's tx scheduler use
+	 * when considering whether to transmit MPDUs generated from MSDUs
+	 * belonging to this service class.
+	 */
+	u32 priority;
+	/* tid:
+	 * Which WLAN TID shall be used for delivering traffic of this
+	 * service class.
+	 */
+	u32 tid;
+	/* msdu_loss_rate_ppm:
+	 * This parameter indicates the acceptable rate of MSDU loss.
+	 * Units are parts per million.
+	 * E.g. if it is acceptable for 1 MSDU of every 10000 to be lost,
+	 * the msdu_loss_rate_ppm value would be 100,
+	 * since 100 / 1000000 = 1 / 10000.
+	 */
+	u32 msdu_loss_rate_ppm;
+} __packed;
+
+struct wmi_sawf_svc_disable_cmd_fixed_param {
+	u32 tlv_header; /* TLV tag and len*/
+			/* Tag equals WMI_TAG_SAWF_SERVICE_CLASS_DISABLE_CMD_FIXED_PARAM*/
+	u32 svc_class_id; /* which service class is being disabled */
+} __packed;
+
 /**
  * WMI arrays of length WMI_MGMT_FRAME_SUBTYPE_MAX use the
  * IEEE802.11 standard's enumeration of mgmt frame subtypes:
@@ -8212,6 +8311,9 @@ int ath12k_wmi_pdev_multiple_vdev_restar
 int ath12k_wmi_vdev_adfs_ch_cfg_cmd_send(struct ath12k *ar,u32 vdev_id,
                                         struct cfg80211_chan_def *chandef);
 int ath12k_wmi_vdev_adfs_ocac_abort_cmd_send(struct ath12k *ar,u32 vdev_id);
+int ath12k_wmi_svc_config_send(struct ath12k *ar,
+			       struct ath12k_sawf_svc_params *param);
+int ath12k_wmi_svc_send_disable(struct ath12k *ar, u32 svc_id);
 int ath12k_wmi_mgmt_rx_reo_filter_config(struct ath12k *ar,
 					 struct ath12k_mgmt_rx_reo_filter *filter);
 int
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -13935,3 +13935,88 @@ int ath12k_wmi_vdev_adfs_ocac_abort_cmd_
 	}
 	return ret;
 }
+
+int ath12k_wmi_svc_config_send(struct ath12k *ar, struct ath12k_sawf_svc_params *param)
+{
+	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct wmi_sawf_svc_cfg_cmd_fixed_param *cmd;
+	struct sk_buff *skb;
+	int len, ret;
+
+	len = sizeof(*cmd);
+	skb = ath12k_wmi_alloc_skb(wmi->wmi_ab, len);
+	if (!skb)
+		return -ENOMEM;
+
+	cmd = (struct wmi_sawf_svc_cfg_cmd_fixed_param *)skb->data;
+	cmd->tlv_header = ath12k_wmi_tlv_cmd_hdr(WMI_TAG_SAWF_SERVICE_CLASS_CFG_CMD_FIXED_PARAM,
+						 sizeof(*cmd));
+
+	/* Valid svc_id advertized to user is in the range of 1 to 128.
+	 * However, firmware is maintaining svc_id range from 0 to 127.
+	 * So sending svc_id - 1, to address this firmware limitation.
+	 */
+	cmd->svc_class_id = cpu_to_le32(param->svc_id - 1);
+	cmd->min_thruput_kbps = cpu_to_le32(param->min_throughput_rate);
+	cmd->max_thruput_kbps = cpu_to_le32(param->max_throughput_rate);
+	cmd->burst_size_bytes = cpu_to_le32(param->burst_size);
+	cmd->svc_interval_ms = cpu_to_le32(param->service_interval);
+	cmd->delay_bound_ms = cpu_to_le32(param->delay_bound);
+	cmd->time_to_live_ms = cpu_to_le32(param->msdu_ttl);
+	cmd->priority = cpu_to_le32(param->priority);
+	cmd->tid = cpu_to_le32(param->tid);
+	cmd->msdu_loss_rate_ppm = cpu_to_le32(param->msdu_rate_loss);
+
+	ath12k_dbg(ar->ab, ATH12K_DBG_WMI,
+		   "Service class configure: svc_id: %u, min_throughput: %u, "
+		   "max_throughput: %u, burst_size: %u, svc_interval: %u, "
+		   "delay_bound: %u, TTL: %u, priority: %u, tid: %u, msdu_loss_rate: %u",
+		   cmd->svc_class_id, cmd->min_thruput_kbps, cmd->max_thruput_kbps,
+		   cmd->burst_size_bytes, cmd->svc_interval_ms, cmd->delay_bound_ms,
+		   cmd->time_to_live_ms, cmd->priority, cmd->tid,
+		   cmd->msdu_loss_rate_ppm);
+
+	ret = ath12k_wmi_cmd_send(wmi, skb, WMI_SAWF_SERVICE_CLASS_CFG_CMDID);
+	if (ret) {
+		ath12k_err(ar->ab,
+			    "failed to config/reconfig the service class param\n");
+		dev_kfree_skb(skb);
+	}
+
+	return ret;
+}
+
+int ath12k_wmi_svc_send_disable(struct ath12k *ar, u32 svc_id)
+{
+	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct wmi_sawf_svc_disable_cmd_fixed_param *cmd;
+	struct sk_buff *skb;
+	int len, ret;
+
+	len = sizeof(*cmd);
+	skb = ath12k_wmi_alloc_skb(wmi->wmi_ab, len);
+	if (!skb)
+		return -ENOMEM;
+
+	cmd = (struct wmi_sawf_svc_disable_cmd_fixed_param *)skb->data;
+	cmd->tlv_header = ath12k_wmi_tlv_cmd_hdr(WMI_TAG_SAWF_SERVICE_CLASS_DISABLE_CMD_FIXED_PARAM,
+						 sizeof(*cmd));
+
+	/* Valid svc_id advertized to user is in the range of 1 to 128.
+	 * However, firmware is maintaining svc_id range from 0 to 127.
+	 * So sending svc_id - 1, to address this firmware limitation.
+	 */
+	cmd->svc_class_id = cpu_to_le32(svc_id - 1);
+
+	ath12k_dbg(ar->ab, ATH12K_DBG_WMI, "Service class disable: svc_id: %u",
+		   cmd->svc_class_id);
+
+	ret = ath12k_wmi_cmd_send(wmi, skb, WMI_SAWF_SERVICE_CLASS_DISABLE_CMDID);
+	if (ret) {
+		ath12k_err(ar->ab,
+			    "failed to disable service class: %u\n", svc_id);
+		dev_kfree_skb(skb);
+	}
+
+	return ret;
+}
