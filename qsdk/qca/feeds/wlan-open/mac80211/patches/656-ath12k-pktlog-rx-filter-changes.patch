From 00ecf04070d891115f5c1c878750b52ccb2c94a8 Mon Sep 17 00:00:00 2001
From: Karthik M <quic_karm@quicinc.com>
Date: Mon, 1 Aug 2022 16:38:47 +0530
Subject: [PATCH] ath12k pktlog rx filter changes and code restructuring

Change pktlog rx filter setup to ath12k_dp_mon_rx_process_stats function
and restructured the code.

Signed-off-by: Karthik M <quic_karm@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h    |   2 +-
 drivers/net/wireless/ath/ath12k/debugfs.c |  68 +++++---
 drivers/net/wireless/ath/ath12k/debugfs.h |   2 +-
 drivers/net/wireless/ath/ath12k/dp_mon.c  |  48 +++---
 drivers/net/wireless/ath/ath12k/dp_rx.c   |   2 +-
 drivers/net/wireless/ath/ath12k/pktlog.c  | 190 ++++++++++++----------
 drivers/net/wireless/ath/ath12k/pktlog.h  |  16 +-
 drivers/net/wireless/ath/ath12k/wmi.c     |   4 +-
 8 files changed, 188 insertions(+), 144 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -590,12 +590,16 @@ struct ath12k_debug {
 	u8 pktlog_peer_addr[ETH_ALEN];
 #ifdef CPTCFG_ATH12K_PKTLOG
 	struct dentry *debugfs_pktlog;
-	struct ath_pktlog pktlog;
+	struct ath12k_pktlog pktlog;
 	bool is_pkt_logging;
 #endif
 	u32 rx_filter;
 };
 
+int ath12k_pktlog_rx_filter_setting(struct ath12k *ar,
+                                    struct htt_tx_ring_tlv_filter
+                                    *tlv_filter);
+
 struct ath12k_per_peer_tx_stats {
 	u32 succ_bytes;
 	u32 retry_bytes;
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -951,6 +951,25 @@ void ath12k_debugfs_fw_stats_init(struct
 	init_completion(&ar->debug.fw_stats_complete);
 }
 
+int ath12k_pktlog_rx_filter_setting(struct ath12k *ar,
+                                    struct htt_tx_ring_tlv_filter
+                                    *tlv_filter)
+{
+	int ret, i;
+	u32 ring_id;
+	for (i = 0; i < ar->ab->hw_params->num_rxmda_per_pdev; i++) {
+	    ring_id = ar->dp.rxdma_mon_dst_ring[i].ring_id;
+	    ret = ath12k_dp_tx_htt_rx_filter_setup(ar->ab, ring_id,
+	                                           ar->dp.mac_id + i,
+	                                           HAL_RXDMA_MONITOR_DST,
+	                                           DP_RXDMA_REFILL_RING_SIZE,
+	                                           &tlv_filter);
+		if(ret)
+			break;
+	}
+	return ret;
+}
+
 static int ath12k_pktlog_enable_hybrid_mode(struct ath12k *ar, u32 filter,
 					    u32 mode)
 {
@@ -1006,8 +1025,7 @@ static ssize_t ath12k_write_pktlog_filte
 	struct ath12k *ar = file->private_data;
 	struct ath12k_base *ab = ar->ab;
 	struct htt_rx_ring_tlv_filter tlv_filter = {0};
-	struct htt_tx_ring_tlv_filter tx_tlv_filter = {0};
-	u32 rx_filter = 0, filter, mode, ring_id;
+	u32 rx_filter = 0, filter, mode;
 	u8 buf[128] = {0};
 	int ret, hybrid_enable, rx_buf_sz;
 	ssize_t rc;
@@ -1036,7 +1054,7 @@ static ssize_t ath12k_write_pktlog_filte
 
 	if ((filter & ATH12K_PKTLOG_RX) && hybrid_enable) {
 		ret = -EINVAL;
-		ath12k_warn(ar->ab,
+		ath12k_warn(ab,
 			    "Invalid configuration. Hybrid mode is only applicable when tx or lite pktlog is used");
 		goto out;
 	}
@@ -1048,36 +1066,33 @@ static ssize_t ath12k_write_pktlog_filte
 		filter |= ATH12K_PKTLOG_HYBRID;
 	ret = ath12k_wmi_pdev_pktlog_enable(ar, filter);
 	if (ret) {
-		ath12k_warn(ar->ab,
+		ath12k_warn(ab,
 			    "failed to enable pktlog filter %x: %d\n",
 			     ar->debug.pktlog_filter, ret);
 		goto out;
 	}
 
-	/* Clear Tx filter */
-	ring_id = ab->dp.tx_mon_buf_ring.refill_buf_ring.ring_id;
-	ret = ath12k_dp_tx_htt_tx_filter_setup(ab, ring_id, 0,
-					       HAL_TX_MONITOR_BUF, 0,
-					       &tx_tlv_filter);
-	if (ret) {
-		ath12k_warn(ab, "failed to set tx filter for monitor buf %d\n", ret);
-		goto out;
-	}
+	/*
+	 * TODO : Filter setting needs to be revisited after enabling TX monitor
+	 */
 
 	/* Clear rx filter set for monitor mode and rx status */
 	tlv_filter.offset_valid = false;
-	ring_id = ab->dp.rxdma_mon_buf_ring.refill_buf_ring.ring_id;
-	ret = ath12k_dp_tx_htt_rx_filter_setup(ab, ring_id, 0,
-					       HAL_RXDMA_MONITOR_BUF,
-					       rx_buf_sz, &tlv_filter);
+
+	ret = ath12k_pktlog_rx_filter_setting(ar, &tlv_filter);
 	if (ret) {
-		ath12k_warn(ab, "failed to set rx filter for monitor status ring %d\n",
-			    ret);
+		ath12k_warn(ab, "failed to clear rx filter for monitor dest ring %d\n",
+		            ret);
 		goto out;
 	}
 
 	if (filter & ATH12K_PKTLOG_HYBRID) {
 		ret = ath12k_pktlog_enable_hybrid_mode(ar, filter, mode);
+		if (ret) {
+			ath12k_warn(ab, "failed to enable pktlog in hybrid mode\n");
+		} else {
+			ret = count;
+		}
 		goto out;
 	}
 
@@ -1096,12 +1111,12 @@ static ssize_t ath12k_write_pktlog_filte
 			    HTT_RX_FILTER_TLV_FLAGS_MPDU_END |
 			    HTT_RX_FILTER_TLV_FLAGS_PACKET_HEADER |
 			    HTT_RX_FILTER_TLV_FLAGS_ATTENTION;
-		rx_buf_sz = DP_RX_BUFFER_SIZE;
+		rx_buf_sz = DP_RXDMA_REFILL_RING_SIZE;
 	} else if (mode == ATH12K_PKTLOG_MODE_LITE) {
 		ret = ath12k_dp_tx_htt_h2t_ppdu_stats_req(ar,
 							  HTT_PPDU_STATS_TAG_PKTLOG);
 		if (ret) {
-			ath12k_err(ar->ab, "failed to enable pktlog lite: %d\n", ret);
+			ath12k_err(ab, "failed to enable pktlog lite: %d\n", ret);
 			goto out;
 		}
 
@@ -1115,7 +1130,7 @@ static ssize_t ath12k_write_pktlog_filte
 		ret = ath12k_dp_tx_htt_h2t_ppdu_stats_req(ar,
 							  HTT_PPDU_STATS_TAG_DEFAULT);
 		if (ret) {
-			ath12k_err(ar->ab, "failed to send htt ppdu stats req: %d\n",
+			ath12k_err(ab, "failed to send htt ppdu stats req: %d\n",
 				   ret);
 			goto out;
 		}
@@ -1130,12 +1145,10 @@ static ssize_t ath12k_write_pktlog_filte
 					       HTT_RX_FP_DATA_FILTER_FLASG3;
 	}
 
-	ret = ath12k_dp_tx_htt_rx_filter_setup(ab, ring_id, 0,
-					       HAL_RXDMA_MONITOR_BUF,
-					       rx_buf_sz, &tlv_filter);
+	ret = ath12k_pktlog_rx_filter_setting(ar, &tlv_filter);
 	if (ret) {
-		ath12k_warn(ab, "failed to set rx filter for monitor status ring %d\n",
-			    ret);
+		ath12k_warn(ab, "failed to set rx filter for monitor dest ring %d\n",
+		            ret);
 		goto out;
 	}
 
--- a/drivers/net/wireless/ath/ath12k/debugfs.h
+++ b/drivers/net/wireless/ath/ath12k/debugfs.h
@@ -73,7 +73,7 @@ struct debug_htt_stats_req {
 	u8 buf[];
 };
 
-struct ath_pktlog_hdr {
+struct ath12k_pktlog_hdr {
 	u16 flags;
 	u16 missed_cnt;
 	u16 log_type;
--- a/drivers/net/wireless/ath/ath12k/dp_mon.c
+++ b/drivers/net/wireless/ath/ath12k/dp_mon.c
@@ -3582,9 +3582,8 @@ int ath12k_dp_mon_srng_process(struct at
 	struct ath12k_peer *peer = NULL;
 	struct ath12k_sta *arsta = NULL;
 	u64 cookie;
-	u32 hal_status, end_reason, rx_buf_sz, ppdu_id;
+	u32 hal_status, end_reason, ppdu_id;
 	int num_buffs_reaped = 0, srng_id, buf_id;
-	u16 log_type = 0;
 
 	__skb_queue_head_init(&skb_list);
 
@@ -3598,14 +3597,6 @@ int ath12k_dp_mon_srng_process(struct at
 		buf_ring = &dp->tx_mon_buf_ring;
 	}
 
-	if (ath12k_debugfs_is_pktlog_lite_mode_enabled(ar)) {
-		log_type = ATH12K_PKTLOG_TYPE_LITE_RX;
-		rx_buf_sz = DP_RX_BUFFER_SIZE_LITE;
-	} else if (ath12k_debugfs_is_pktlog_rx_stats_enabled(ar)) {
-		log_type = ATH12K_PKTLOG_TYPE_RX_STATBUF;
-		rx_buf_sz = DP_RX_BUFFER_SIZE;
-	}
-
 	srng = &ab->hal.srng_list[mon_dst_ring->ring_id];
 	spin_lock_bh(&srng->lock);
 	ath12k_hal_srng_access_begin(ab, srng);
@@ -3664,13 +3655,6 @@ move_next:
 		memset(ppdu_info, 0, sizeof(*ppdu_info));
 
 	while ((skb = __skb_dequeue(&skb_list))) {
-		if (log_type) {
-			trace_ath12k_htt_rxdesc(ar, skb->data,
-						log_type, rx_buf_sz);
-			ath12k_rx_stats_buf_pktlog_process(ar, skb->data,
-			                                   log_type, rx_buf_sz);
-		}
-
 		if (flag == ATH12K_DP_RX_MONITOR_MODE)
 			hal_status =
 				ath12k_dp_mon_rx_parse_mon_status(ar, ppdu_info, mac_id,
@@ -3708,13 +3692,6 @@ move_next:
 			ath12k_dp_mon_rx_update_peer_mu_stats(ar, ppdu_info);
 		}
 
-		if (ath12k_debugfs_is_pktlog_peer_valid(ar, peer->addr)) {
-			trace_ath12k_htt_rxdesc(ar, skb->data,
-						log_type, rx_buf_sz);
-			ath12k_rx_stats_buf_pktlog_process(ar, skb->data,
-			                                   log_type, rx_buf_sz);
-		}
-
 next_skb:
 		spin_unlock_bh(&ab->base_lock);
 		rcu_read_unlock();
@@ -3746,7 +3723,8 @@ int ath12k_dp_mon_rx_process_stats(struc
 	struct sk_buff_head skb_list;
 	u64 cookie;
 	int num_buffs_reaped = 0, srng_id, buf_id;
-	u32 hal_status, end_reason;
+	u32 hal_status, rx_buf_sz, end_reason;
+	u16 log_type = 0;
 
 	__skb_queue_head_init(&skb_list);
 
@@ -3754,11 +3732,25 @@ int ath12k_dp_mon_rx_process_stats(struc
 	mon_dst_ring = &pdev_dp->rxdma_mon_dst_ring[srng_id];
 	buf_ring = &dp->rxdma_mon_buf_ring;
 
+	if (ath12k_debugfs_is_pktlog_lite_mode_enabled(ar)) {
+		log_type = ATH12K_PKTLOG_TYPE_LITE_RX;
+		rx_buf_sz = DP_RX_BUFFER_SIZE_LITE;
+	} else if (ath12k_debugfs_is_pktlog_rx_stats_enabled(ar)) {
+		log_type = ATH12K_PKTLOG_TYPE_RX_STATBUF;
+		rx_buf_sz = DP_RX_BUFFER_SIZE;
+	}
+
 	srng = &ab->hal.srng_list[mon_dst_ring->ring_id];
 	spin_lock_bh(&srng->lock);
 	ath12k_hal_srng_access_begin(ab, srng);
 
 	while (likely(*budget)) {
+		if (log_type) {
+			trace_ath12k_htt_rxdesc(ar, skb->data, log_type,
+			                        rx_buf_sz);
+			ath12k_rx_stats_buf_pktlog_process(ar, skb->data, log_type,
+			                                   rx_buf_sz);
+		}
 		mon_dst_desc = (struct hal_mon_dest_desc *)
 				ath12k_hal_srng_dst_peek(ab, srng);
 		if (unlikely(!mon_dst_desc))
@@ -3843,6 +3835,12 @@ move_next:
 			ath12k_dp_mon_rx_update_peer_mu_stats(ar, ppdu_info);
  		}
 
+		if (ath12k_debugfs_is_pktlog_peer_valid(ar, peer->addr)) {
+			trace_ath12k_htt_rxdesc(ar, skb->data, log_type, rx_buf_sz);
+			ath12k_rx_stats_buf_pktlog_process(ar, skb->data, log_type,
+			                                   rx_buf_sz);
+		}
+
 next_skb:
 		spin_unlock_bh(&ab->base_lock);
 		rcu_read_unlock();
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -1741,7 +1741,7 @@ exit:
 static void ath12k_htt_pktlog(struct ath12k_base *ab, struct sk_buff *skb)
 {
 	struct htt_pktlog_msg *data = (struct htt_pktlog_msg *)skb->data;
-	struct ath_pktlog_hdr *hdr = (struct ath_pktlog_hdr *)data;
+	struct ath12k_pktlog_hdr *hdr = (struct ath12k_pktlog_hdr *)data;
 	struct ath12k *ar;
 	u8 pdev_id;
 
--- a/drivers/net/wireless/ath/ath12k/pktlog.c
+++ b/drivers/net/wireless/ath/ath12k/pktlog.c
@@ -11,7 +11,8 @@
 #include "debug.h"
 
 /* Convert a kernel virtual address to a kernel logical address */
-static struct page *pktlog_virt_to_logical(void *addr) {
+static struct page *pktlog_virt_to_logical(void *addr)
+{
 	struct page *page;
 	unsigned long vpage = 0UL;
 
@@ -20,10 +21,12 @@ static struct page *pktlog_virt_to_logic
 		vpage = (unsigned long)page_address(page);
 		vpage |= ((unsigned long)addr & (PAGE_SIZE - 1));
 	}
+
 	return virt_to_page((void *)vpage);
 }
 
-static void ath_pktlog_release(struct ath_pktlog *pktlog) {
+static void ath12k_pktlog_release(struct ath12k_pktlog *pktlog)
+{
 	unsigned long page_cnt, vaddr;
 	struct page *page;
 
@@ -43,11 +46,12 @@ static void ath_pktlog_release(struct at
 	pktlog->buf = NULL;
 }
 
-static int ath_alloc_pktlog_buf(struct ath12k *ar) {
+static int ath12k_alloc_pktlog_buf(struct ath12k *ar)
+{
 	u32 page_cnt;
 	unsigned long vaddr;
 	struct page *page;
-	struct ath_pktlog *pktlog = &ar->debug.pktlog;
+	struct ath12k_pktlog *pktlog = &ar->debug.pktlog;
 
 	if (pktlog->buf_size == 0)
 		return -EINVAL;
@@ -59,7 +63,7 @@ static int ath_alloc_pktlog_buf(struct a
 	if (!pktlog->buf)
 		return -ENOMEM;
 
-	pktlog->buf = (struct ath_pktlog_buf *)
+	pktlog->buf = (struct ath12k_pktlog_buf *)
 				     (((unsigned long)
 				      (pktlog->buf)
 				     + PAGE_SIZE - 1) & PAGE_MASK);
@@ -74,8 +78,9 @@ static int ath_alloc_pktlog_buf(struct a
 	return 0;
 }
 
-static void ath_init_pktlog_buf(struct ath12k *ar, struct ath_pktlog
-*pktlog) {
+static void ath12k_init_pktlog_buf(struct ath12k *ar, struct ath12k_pktlog
+                                   *pktlog)
+{
 	if (!ar->ab->pktlog_defs_checksum) {
 		pktlog->buf->bufhdr.magic_num = PKTLOG_MAGIC_NUM;
 		pktlog->buf->bufhdr.version = CUR_PKTLOG_VER;
@@ -93,14 +98,14 @@ static void ath_init_pktlog_buf(struct a
 	pktlog->buf->wr_offset = 0;
 }
 
-static inline void ath_pktlog_mov_rd_idx(struct ath_pktlog *pl_info,
-					 int32_t *rd_offset)
+static inline void ath12k_pktlog_mov_rd_idx(struct ath12k_pktlog *pl_info,
+                                            int32_t *rd_offset)
 {
 	int32_t boundary;
-	struct ath_pktlog_buf *log_buf = pl_info->buf;
-	struct ath_pktlog_hdr *log_hdr;
+	struct ath12k_pktlog_buf *log_buf = pl_info->buf;
+	struct ath12k_pktlog_hdr *log_hdr;
 
-	log_hdr = (struct ath_pktlog_hdr *)(log_buf->log_data + *rd_offset);
+	log_hdr = (struct ath12k_pktlog_hdr *)(log_buf->log_data + *rd_offset);
 	boundary = *rd_offset;
 	boundary += pl_info->hdr_size;
 	boundary += log_hdr->size;
@@ -114,9 +119,10 @@ static inline void ath_pktlog_mov_rd_idx
 		*rd_offset = 0;
 }
 
-static char *ath_pktlog_getbuf(struct ath_pktlog *pl_info,
-			       struct ath_pktlog_hdr_arg *hdr_arg) {
-	struct ath_pktlog_buf *log_buf;
+static char *ath12k_pktlog_getbuf(struct ath12k_pktlog *pl_info,
+                                  struct ath12k_pktlog_hdr_arg *hdr_arg)
+{
+	struct ath12k_pktlog_buf *log_buf;
 	int32_t cur_wr_offset, buf_size;
 	char *log_ptr;
 
@@ -130,7 +136,7 @@ static char *ath_pktlog_getbuf(struct at
 		if ((cur_wr_offset <= log_buf->rd_offset) &&
 		    (cur_wr_offset + pl_info->hdr_size) >
 		     log_buf->rd_offset)
-			ath_pktlog_mov_rd_idx(pl_info, &log_buf->rd_offset);
+			ath12k_pktlog_mov_rd_idx(pl_info, &log_buf->rd_offset);
 	} else {
 		log_buf->rd_offset = cur_wr_offset;
 	}
@@ -143,13 +149,13 @@ static char *ath_pktlog_getbuf(struct at
 	if ((buf_size - cur_wr_offset) < hdr_arg->payload_size) {
 		while ((cur_wr_offset <= log_buf->rd_offset) &&
 		       (log_buf->rd_offset < buf_size))
-			  ath_pktlog_mov_rd_idx(pl_info, &log_buf->rd_offset);
+			  ath12k_pktlog_mov_rd_idx(pl_info, &log_buf->rd_offset);
 		cur_wr_offset = 0;
 	}
 
 	while ((cur_wr_offset <= log_buf->rd_offset) &&
 	       ((cur_wr_offset + hdr_arg->payload_size) > log_buf->rd_offset))
-			  ath_pktlog_mov_rd_idx(pl_info, &log_buf->rd_offset);
+			  ath12k_pktlog_mov_rd_idx(pl_info, &log_buf->rd_offset);
 
 	log_ptr = &log_buf->log_data[cur_wr_offset];
 	cur_wr_offset += hdr_arg->payload_size;
@@ -162,7 +168,8 @@ static char *ath_pktlog_getbuf(struct at
 	return log_ptr;
 }
 
-static  vm_fault_t pktlog_pgfault(struct vm_fault *vmf) {
+static  vm_fault_t pktlog_pgfault(struct vm_fault *vmf)
+{
 	struct vm_area_struct *vma = vmf->vma;
 	unsigned long address = vmf->address;
 
@@ -174,6 +181,7 @@ static  vm_fault_t pktlog_pgfault(struct
 
 	get_page(virt_to_page(address));
 	vmf->page = virt_to_page(address);
+
 	return 0;
 }
 
@@ -181,8 +189,9 @@ static const struct vm_operations_struct
 	.fault = pktlog_pgfault
 };
 
-static int ath_pktlog_mmap(struct file *file, struct vm_area_struct
-*vma) {
+static int ath12k_pktlog_mmap(struct file *file, struct vm_area_struct
+                              *vma)
+{
 	struct ath12k *ar = file->private_data;
 
 	/* entire buffer should be mapped */
@@ -200,8 +209,8 @@ static int ath_pktlog_mmap(struct file *
 	return 0;
 }
 
-static ssize_t ath_pktlog_read(struct file *file, char __user *userbuf,
-			       size_t count, loff_t *ppos)
+static ssize_t ath12k_pktlog_read(struct file *file, char __user *userbuf,
+                                  size_t count, loff_t *ppos)
 {
 	size_t bufhdr_size;
 	size_t nbytes = 0, ret_val = 0;
@@ -209,8 +218,8 @@ static ssize_t ath_pktlog_read(struct fi
 	int start_offset, end_offset;
 	int fold_offset, ppos_data, cur_rd_offset;
 	struct ath12k *ar = file->private_data;
-	struct ath_pktlog *info = &ar->debug.pktlog;
-	struct ath_pktlog_buf *log_buf = info->buf;
+	struct ath12k_pktlog *info = &ar->debug.pktlog;
+	struct ath12k_pktlog_buf *log_buf = info->buf;
 
 	if (!log_buf)
 		return 0;
@@ -218,7 +227,7 @@ static ssize_t ath_pktlog_read(struct fi
 	bufhdr_size = sizeof(log_buf->bufhdr);
 
 	if (!info->fw_version_record || info->invalid_decode_info) {
-		bufhdr_size -= sizeof(struct ath_pktlog_decode_info);
+		bufhdr_size -= sizeof(struct ath12k_pktlog_decode_info);
 	}
 
 	/* copy valid log entries from circular buffer into user space */
@@ -248,16 +257,16 @@ static ssize_t ath_pktlog_read(struct fi
 	/* Find the last offset and fold-offset if the buffer is folded */
 	do {
 		int log_data_offset;
-		struct ath_pktlog_hdr *log_hdr;
+		struct ath12k_pktlog_hdr *log_hdr;
 
-		log_hdr = (struct ath_pktlog_hdr *)(log_buf->log_data + cur_rd_offset);
+		log_hdr = (struct ath12k_pktlog_hdr *)(log_buf->log_data + cur_rd_offset);
 		log_data_offset = cur_rd_offset + info->hdr_size;
 
 		if ((fold_offset == -1) &&
 		    ((info->buf_size - log_data_offset) <= log_hdr->size))
 			fold_offset = log_data_offset - 1;
 
-		ath_pktlog_mov_rd_idx(info, &cur_rd_offset);
+		ath12k_pktlog_mov_rd_idx(info, &cur_rd_offset);
 
 		if ((fold_offset == -1) && (cur_rd_offset == 0) &&
 		    (cur_rd_offset != log_buf->wr_offset))
@@ -321,16 +330,17 @@ out:
 }
 
 static const struct file_operations fops_pktlog_dump = {
-	.read = ath_pktlog_read,
-	.mmap = ath_pktlog_mmap,
+	.read = ath12k_pktlog_read,
+	.mmap = ath12k_pktlog_mmap,
 	.open = simple_open
 };
 
-static ssize_t write_pktlog_start(struct file *file, const char __user *ubuf,
-				  size_t count, loff_t *ppos)
+static ssize_t ath12k_write_pktlog_start(struct file *file, const char __user *ubuf,
+                                         size_t count, loff_t *ppos)
 {
 	struct ath12k *ar = file->private_data;
-	struct ath_pktlog *pktlog = &ar->debug.pktlog;
+	struct ath12k_pktlog *pktlog = &ar->debug.pktlog;
+	struct htt_rx_ring_tlv_filter tlv_filter = {0};
 	u32 start_pktlog;
 	int err;
 
@@ -344,44 +354,58 @@ static ssize_t write_pktlog_start(struct
 	}
 	if (start_pktlog) {
 		if (pktlog->buf)
-			ath_pktlog_release(pktlog);
+			ath12k_pktlog_release(pktlog);
 
-		err = ath_alloc_pktlog_buf(ar);
+		err = ath12k_alloc_pktlog_buf(ar);
 		if (err != 0)
 			return err;
 
-		ath_init_pktlog_buf(ar, pktlog);
+		ath12k_init_pktlog_buf(ar, pktlog);
 		ar->debug.is_pkt_logging = 1;
 	} else {
 		ar->debug.is_pkt_logging = 0;
+		err = ath12k_pktlog_rx_filter_setting(ar, &tlv_filter);
+		if (err) {
+			pr_err("failed to reset the rx filter of pktlog : %d\n", err);
+			return err;
+		}
+		tlv_filter = ath12k_mac_mon_status_filter_default;
+		err = ath12k_pktlog_rx_filter_setting(ar, &tlv_filter);
+		if (err) {
+			pr_err("failed to disable rx filter of pktlog : %d\n", err);
+			return err;
+		}
 		err = ath12k_wmi_pdev_pktlog_disable(ar);
-		pr_err("failed to enable pktlog hybrid: %d\n", err);
-		if (err)
+		if (err) {
+			pr_err("failed to disable pktlog : %d\n", err);
 			return err;
+		}
 	}
 
 	return count;
 }
 
-static ssize_t read_pktlog_start(struct file *file, char __user *ubuf,
-				 size_t count, loff_t *ppos)
+static ssize_t ath12k_read_pktlog_start(struct file *file, char __user *ubuf,
+                                        size_t count, loff_t *ppos)
 {
 	char buf[32];
 	struct ath12k *ar = file->private_data;
 	int len = 0;
 
 	len = scnprintf(buf, sizeof(buf) - len, "%d\n",
-			ar->debug.is_pkt_logging);
-	return simple_read_from_buffer(ubuf, count, ppos, buf, len); }
+					ar->debug.is_pkt_logging);
+
+	return simple_read_from_buffer(ubuf, count, ppos, buf, len);
+}
 
 static const struct file_operations fops_pktlog_start = {
-	.read = read_pktlog_start,
-	.write = write_pktlog_start,
+	.read = ath12k_read_pktlog_start,
+	.write = ath12k_write_pktlog_start,
 	.open = simple_open
 };
 
-static ssize_t pktlog_size_write(struct file *file, const char __user *ubuf,
-				 size_t count, loff_t *ppos)
+static ssize_t ath12k_pktlog_size_write(struct file *file, const char __user *ubuf,
+                                        size_t count, loff_t *ppos)
 {
 	struct ath12k *ar = file->private_data;
 	u32 pktlog_size;
@@ -402,8 +426,8 @@ static ssize_t pktlog_size_write(struct
 	return count;
 }
 
-static ssize_t pktlog_size_read(struct file *file, char __user *ubuf,
-				size_t count, loff_t *ppos)
+static ssize_t ath12k_pktlog_size_read(struct file *file, char __user *ubuf,
+                                       size_t count, loff_t *ppos)
 {
 	char buf[32];
 	struct ath12k *ar = file->private_data;
@@ -411,26 +435,31 @@ static ssize_t pktlog_size_read(struct f
 
 	len = scnprintf(buf, sizeof(buf) - len, "%uL\n",
 			ar->debug.pktlog.buf_size);
-	return simple_read_from_buffer(ubuf, count, ppos, buf, len); }
+
+	return simple_read_from_buffer(ubuf, count, ppos, buf, len);
+}
 
 static const struct file_operations fops_pktlog_size = {
-	.read = pktlog_size_read,
-	.write = pktlog_size_write,
+	.read = ath12k_pktlog_size_read,
+	.write = ath12k_pktlog_size_write,
 	.open = simple_open
 };
 
-static void ath_pktlog_init(struct ath12k *ar) {
-	struct ath_pktlog *pktlog = &ar->debug.pktlog;
+static void ath12k_pktlog_init(struct ath12k *ar)
+{
+	struct ath12k_pktlog *pktlog = &ar->debug.pktlog;
 
 	spin_lock_init(&pktlog->lock);
 	pktlog->buf_size = ATH_DEBUGFS_PKTLOG_SIZE_DEFAULT;
 	pktlog->buf = NULL;
 
-	pktlog->hdr_size = sizeof(struct ath_pktlog_hdr);
+	pktlog->hdr_size = sizeof(struct ath12k_pktlog_hdr);
 	pktlog->hdr_size_field_offset =
-		   offsetof(struct ath_pktlog_hdr, size); }
+		   offsetof(struct ath12k_pktlog_hdr, size);
+}
 
-void ath12k_init_pktlog(struct ath12k *ar) {
+void ath12k_init_pktlog(struct ath12k *ar)
+{
 	ar->debug.debugfs_pktlog = debugfs_create_dir("pktlog",
 						      ar->debug.debugfs_pdev);
 	debugfs_create_file("start", S_IRUGO | S_IWUSR,
@@ -439,20 +468,21 @@ void ath12k_init_pktlog(struct ath12k *a
 			    ar->debug.debugfs_pktlog, ar, &fops_pktlog_size);
 	debugfs_create_file("dump", S_IRUGO,
 			    ar->debug.debugfs_pktlog, ar, &fops_pktlog_dump);
-	ath_pktlog_init(ar);
+
+	ath12k_pktlog_init(ar);
 }
 
-void ath12k_deinit_pktlog(struct ath12k *ar) {
-	struct ath_pktlog *pktlog = &ar->debug.pktlog;
+void ath12k_deinit_pktlog(struct ath12k *ar)
+{
+	struct ath12k_pktlog *pktlog = &ar->debug.pktlog;
 
 	if (pktlog->buf)
-		ath_pktlog_release(pktlog);
+		ath12k_pktlog_release(pktlog);
 }
 
-static int ath_pktlog_pull_hdr(struct ath_pktlog_hdr_arg *arg,
-			       u8 *data)
+static int ath12k_pktlog_pull_hdr(struct ath12k_pktlog_hdr_arg *arg, u8 *data)
 {
-	struct ath_pktlog_hdr *hdr = (struct ath_pktlog_hdr *)data;
+	struct ath12k_pktlog_hdr *hdr = (struct ath12k_pktlog_hdr *)data;
 
 	hdr->flags = __le16_to_cpu(hdr->flags);
 	hdr->missed_cnt = __le16_to_cpu(hdr->missed_cnt);
@@ -469,35 +499,39 @@ static int ath_pktlog_pull_hdr(struct at
 	return 0;
 }
 
-static void ath_pktlog_write_buf(struct ath_pktlog *pl_info,
-				 struct ath_pktlog_hdr_arg *hdr_arg) {
+static void ath12k_pktlog_write_buf(struct ath12k_pktlog *pl_info,
+                                    struct ath12k_pktlog_hdr_arg *hdr_arg) {
 	char *log_data;
 
-	log_data = ath_pktlog_getbuf(pl_info, hdr_arg);
+	log_data = ath12k_pktlog_getbuf(pl_info, hdr_arg);
 	if (!log_data)
 		return;
 
-	memcpy(log_data, hdr_arg->payload, hdr_arg->payload_size); }
+	memcpy(log_data, hdr_arg->payload, hdr_arg->payload_size);
+}
 
-void ath12k_htt_pktlog_process(struct ath12k *ar, u8 *data) {
-	struct ath_pktlog *pl_info = &ar->debug.pktlog;
-	struct ath_pktlog_hdr_arg hdr_arg;
+void ath12k_htt_pktlog_process(struct ath12k *ar, u8 *data)
+{
+	struct ath12k_pktlog *pl_info = &ar->debug.pktlog;
+	struct ath12k_pktlog_hdr_arg hdr_arg;
 	int ret;
 
 	if  (!ar->debug.is_pkt_logging)
 		return;
 
-	ret = ath_pktlog_pull_hdr(&hdr_arg, data);
+	ret = ath12k_pktlog_pull_hdr(&hdr_arg, data);
 	if (ret)
 		return;
 
-	ath_pktlog_write_buf(pl_info, &hdr_arg); }
+	ath12k_pktlog_write_buf(pl_info, &hdr_arg);
+}
 
-void ath12k_htt_ppdu_pktlog_process(struct ath12k *ar, u8 *data, u32
-len) {
-	struct ath_pktlog *pl_info = &ar->debug.pktlog;
-	struct ath_pktlog_hdr hdr;
-	struct ath_pktlog_hdr_arg hdr_arg;
+void ath12k_htt_ppdu_pktlog_process(struct ath12k *ar, u8 *data,
+                                    u32 len)
+{
+	struct ath12k_pktlog *pl_info = &ar->debug.pktlog;
+	struct ath12k_pktlog_hdr hdr;
+	struct ath12k_pktlog_hdr_arg hdr_arg;
 
 	if  (!ar->debug.is_pkt_logging)
 		return;
@@ -514,13 +548,15 @@ len) {
 	hdr_arg.payload = (u8 *)data;
 	hdr_arg.pktlog_hdr = (u8 *)&hdr;
 
-	ath_pktlog_write_buf(pl_info, &hdr_arg); }
+	ath12k_pktlog_write_buf(pl_info, &hdr_arg);
+}
 
 void ath12k_rx_stats_buf_pktlog_process(struct ath12k *ar, u8 *data,
-u16 log_type, u32 len) {
-	struct ath_pktlog *pl_info = &ar->debug.pktlog;
-	struct ath_pktlog_hdr hdr;
-	struct ath_pktlog_hdr_arg hdr_arg;
+                                        u16 log_type, u32 len)
+{
+	struct ath12k_pktlog *pl_info = &ar->debug.pktlog;
+	struct ath12k_pktlog_hdr hdr;
+	struct ath12k_pktlog_hdr_arg hdr_arg;
 
 	if  (!ar->debug.is_pkt_logging)
 		return;
@@ -537,6 +573,5 @@ u16 log_type, u32 len) {
 	hdr_arg.payload = data;
 	hdr_arg.pktlog_hdr = (u8 *)&hdr;
 
-	ath_pktlog_write_buf(pl_info, &hdr_arg);
+	ath12k_pktlog_write_buf(pl_info, &hdr_arg);
 }
-
--- a/drivers/net/wireless/ath/ath12k/pktlog.h
+++ b/drivers/net/wireless/ath/ath12k/pktlog.h
@@ -29,27 +29,27 @@ enum {
 	PKTLOG_FLG_FRM_TYPE_UNKNOWN_S
 };
 
-struct ath_pktlog_hdr_arg {
+struct ath12k_pktlog_hdr_arg {
 	u16 log_type;
 	u8 *payload;
 	u16 payload_size;
 	u8 *pktlog_hdr;
 };
 
-struct ath_pl_fw_info {
+struct ath12k_pl_fw_info {
 	u32 pdev_id;
 	u8 software_image[40];
 	u8 chip_info[40];
 	u32 pktlog_defs_json_version;
 } __packed;
 
-struct ath_pktlog_decode_info {
+struct ath12k_pktlog_decode_info {
         u8 software_image[40];
         u8 chip_info[40];
         u32 pktlog_defs_json_version;
 };
 
-struct ath_pktlog_bufhdr {
+struct ath12k_pktlog_bufhdr {
 	u32 magic_num;  /* Used by post processing scripts */
 	u32 version;    /* Set to CUR_PKTLOG_VER */
 	u8 software_image[40];
@@ -57,15 +57,15 @@ struct ath_pktlog_bufhdr {
 	u32 pktlog_defs_json_version;
 };
 
-struct ath_pktlog_buf {
-	struct ath_pktlog_bufhdr bufhdr;
+struct ath12k_pktlog_buf {
+	struct ath12k_pktlog_bufhdr bufhdr;
 	int rd_offset;
 	int wr_offset;
 	char log_data[0];
 };
 
-struct ath_pktlog {
-	struct ath_pktlog_buf *buf;
+struct ath12k_pktlog {
+	struct ath12k_pktlog_buf *buf;
 	u32 filter;
 	u32 buf_size;           /* Size of buffer in bytes */
 	spinlock_t lock;
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -8101,8 +8101,8 @@ ath12k_wmi_pktlog_decode_info(struct ath
 	struct ath12k *ar;
         const void **tb;
 	int ret;
-	struct ath_pktlog *pktlog;
-	struct ath_pl_fw_info *pktlog_info;
+	struct ath12k_pktlog *pktlog;
+	struct ath12k_pl_fw_info *pktlog_info;
 
 	if (!test_bit(WMI_TLV_SERVICE_PKTLOG_DECODE_INFO_SUPPORT, ab->wmi_ab.svc_map)) {
                 ath12k_warn(ab, "firmware doesn't support pktlog decode info support\n");
