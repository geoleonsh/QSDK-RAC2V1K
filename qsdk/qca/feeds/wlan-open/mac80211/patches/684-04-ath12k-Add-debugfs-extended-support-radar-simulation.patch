From f4057b3056b851ac030d31dc1d9b868d96047465 Mon Sep 17 00:00:00 2001
From: Harshitha Prem <quic_hprem@quicinc.com>
Date: Mon, 21 Nov 2022 10:40:02 +0530
Subject: [PATCH] ath12k: Add debugfs extended support for radar simulation

Add support for simulating dfs with additional parameters
using the same radar simluation debugfs command

echo <segment> <chrip> <offset> <agile> >
/sys/kernel/debug/ieee80211/phyX/ath12k/dfs_simulate_radar

Signed-off-by: Nagarajan Maran <quic_nmaran@quicinc.com>
Signed-off-by: Harshitha Prem <quic_hprem@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debugfs.c | 62 ++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/wmi.c     |  4 +-
 drivers/net/wireless/ath/ath12k/wmi.h     |  2 +-
 3 files changed, 64 insertions(+), 4 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -1487,14 +1487,74 @@ static const struct file_operations fops
 	.open = simple_open
 };
 
+#define SEGMENT_ID  GENMASK(1,0)
+#define CHRIP_ID    BIT(2)
+#define OFFSET      GENMASK(10,3)
+#define DETECTOR_ID GENMASK(12,11)
+
 static ssize_t ath12k_write_simulate_radar(struct file *file,
 					   const char __user *user_buf,
 					   size_t count, loff_t *ppos)
 {
 	struct ath12k *ar = file->private_data;
 	int ret;
+	u32 radar_params;
+	u8 agile = 0, segment = 0, chirp = 0;
+	int offset = 0;
+	int len;
+	char buf[64], *token, *sptr;
+
+	len = min(count, sizeof(buf) - 1);
+	if (copy_from_user(buf, user_buf, len)) {
+		return -EFAULT;
+	}
+
+	/* For backward compatibility */
+	if (len <= 2)
+		goto send_cmd;
+
+	buf[len] = '\0';
+	sptr = buf;
+	token = strsep(&sptr, " ");
+	if (!token)
+		return -EINVAL;
+
+	if (kstrtou8(token, 16, &segment))
+		return -EINVAL;
+
+	token = strsep(&sptr, " ");
+	if (!token)
+		return -EINVAL;
+
+	if (kstrtou8(token, 16, &chirp))
+		return -EINVAL;
+
+	token = strsep(&sptr, " ");
+	if (!token)
+		return -EINVAL;
+
+	if (kstrtoint(token, 10, &offset))
+		return -EINVAL;
+
+	token = strsep(&sptr, " ");
+	if (!token)
+		return -EINVAL;
+
+	if (kstrtou8(token, 16, &agile))
+		return -EINVAL;
+
+	if ((segment > 1) || (chirp > 1) || (agile > 2))
+		return -EINVAL;
+
+	if (agile && ar->agile_chandef.chan == NULL)
+		return -EINVAL;
+send_cmd:
+	radar_params = u32_encode_bits(segment, SEGMENT_ID) |
+		       u32_encode_bits(chirp, CHRIP_ID) |
+		       u32_encode_bits(offset, OFFSET) |
+		       u32_encode_bits(agile, DETECTOR_ID);
 
-	ret = ath12k_wmi_simulate_radar(ar);
+	ret = ath12k_wmi_simulate_radar(ar,radar_params);
 	if (ret)
 		return ret;
 
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -9709,7 +9709,7 @@ ath12k_wmi_send_unit_test_cmd(struct ath
 	return ret;
 }
 
-int ath12k_wmi_simulate_radar(struct ath12k *ar)
+int ath12k_wmi_simulate_radar(struct ath12k *ar, u32 radar_params)
 {
 	struct ath12k_link_vif *arvif;
 	struct ath12k_vif *ahvif;
@@ -9730,11 +9730,10 @@ int ath12k_wmi_simulate_radar(struct ath
 
 	dfs_args[DFS_TEST_CMDID] = 0;
 	dfs_args[DFS_TEST_PDEV_ID] = ar->pdev->pdev_id;
-	/* Currently we could pass segment_id(b0 - b1), chirp(b2)
-	 * freq offset (b3 - b10) to unit test. For simulation
-	 * purpose this can be set to 0 which is valid.
+	/* Currently we pass segment_id(b0 - b1), chirp(b2)
+	 * freq offset (b3 - b10), detector_id(b11 - b12) to unit test.
 	 */
-	dfs_args[DFS_TEST_RADAR_PARAM] = 0;
+	dfs_args[DFS_TEST_RADAR_PARAM] = radar_params;
 
 	wmi_ut.vdev_id = cpu_to_le32(arvif->vdev_id);
 	wmi_ut.module_id = cpu_to_le32(DFS_UNIT_TEST_MODULE);
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -6458,7 +6458,7 @@ size_t ath12k_wmi_fw_stats_num_vdevs(str
 void ath12k_wmi_fw_stats_fill(struct ath12k *ar,
 			      struct ath12k_fw_stats *fw_stats, u32 stats_id,
 			      char *buf);
-int ath12k_wmi_simulate_radar(struct ath12k *ar);
+int ath12k_wmi_simulate_radar(struct ath12k *ar, u32 radar_params);
 int ath12k_wmi_simulate_awgn(struct ath12k *ar, u32 chan_bw_interference_bitmap);
 int ath12k_wmi_send_twt_enable_cmd(struct ath12k *ar, u32 pdev_id);
 int ath12k_wmi_send_twt_disable_cmd(struct ath12k *ar, u32 pdev_id);
