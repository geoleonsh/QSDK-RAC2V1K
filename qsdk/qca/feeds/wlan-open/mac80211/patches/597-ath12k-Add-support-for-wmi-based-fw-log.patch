From dce582aeb227909010b8bbea83182f7fffa84768 Mon Sep 17 00:00:00 2001
From: Dinesh Karthikeyan <quic_dinek@quicinc.com>
Date: Thu, 10 Mar 2022 15:16:28 +0530
Subject: [PATCH] ath12k:Add support for wmi based fw log

The driver enables support for passing firmware log from using
QMI messages during bootup. Add QMI message structure and
elements to handle QMI messages. Add the QMI function to enable
FW log support using QMI elements.

Add the diag event handler and handle firmware logs as WMI_DIAG
event. Add mapping function to map the dev id of hw from driver
with the corressponding hw revision in the cnssdiag tool to avoid
mismatch between them while enabling fw logs.

Signed-off-by: Dinesh Karthikeyan <quic_dinek@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c       |  4 ++
 drivers/net/wireless/ath/ath12k/core.h       |  4 +-
 drivers/net/wireless/ath/ath12k/qmi.c        | 90 ++++++++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/qmi.h        | 13 ++++
 drivers/net/wireless/ath/ath12k/testmode.c   | 34 +++++++++++
 drivers/net/wireless/ath/ath12k/testmode.h   |  6 +-
 drivers/net/wireless/ath/ath12k/testmode_i.h |  1 +
 drivers/net/wireless/ath/ath12k/wmi.c        | 27 +++++++++
 8 files changed, 177 insertions(+), 2 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -707,6 +707,10 @@ int ath12k_core_qmi_firmware_ready(struc
 
 	ath12k_config_qdss(ab);
 
+	ret = ath12k_enable_fwlog(ab);
+	if (ret < 0)
+		ath12k_err(ab, "failed to enable fwlog: %d\n", ret);
+
 	mutex_unlock(&ab->core_lock);
 
 	return 0;
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -118,10 +118,12 @@ struct ath12k_skb_rxcb {
 };
 
 enum ath12k_hw_rev {
-	ATH12K_HW_QCN9274_HW10,
+	ATH12K_HW_QCN9274_HW10 = 0,
 	ATH12K_HW_WCN7850_HW20
 };
 
+#define ATH12K_DIAG_HW_ID_OFFSET 16
+
 enum ath12k_firmware_mode {
 	/* the default mode, standard 802.11 functionality */
 	ATH12K_FIRMWARE_MODE_NORMAL,
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -2201,6 +2201,50 @@ static struct qmi_elem_info qmi_wlanfw_c
 	},
 };
 
+struct qmi_elem_info wlfw_ini_req_msg_v01_ei[] = {
+	{
+		.data_type      = QMI_OPT_FLAG,
+		.elem_len       = 1,
+		.elem_size      = sizeof(u8),
+		.array_type     = NO_ARRAY,
+		.tlv_type       = 0x10,
+		.offset         = offsetof(struct wlfw_ini_req_msg_v01,
+					   enablefwlog_valid),
+	},
+	{
+		.data_type      = QMI_UNSIGNED_1_BYTE,
+		.elem_len       = 1,
+		.elem_size      = sizeof(u8),
+		.array_type     = NO_ARRAY,
+		.tlv_type       = 0x10,
+		.offset         = offsetof(struct wlfw_ini_req_msg_v01,
+					   enablefwlog),
+	},
+	{
+		.data_type      = QMI_EOTI,
+		.array_type     = NO_ARRAY,
+		.tlv_type       = QMI_COMMON_TLV_TYPE,
+	},
+};
+
+struct qmi_elem_info wlfw_ini_resp_msg_v01_ei[] = {
+	{
+		.data_type      = QMI_STRUCT,
+		.elem_len       = 1,
+		.elem_size      = sizeof(struct qmi_response_type_v01),
+		.array_type     = NO_ARRAY,
+		.tlv_type       = 0x02,
+		.offset         = offsetof(struct wlfw_ini_resp_msg_v01,
+					   resp),
+		.ei_array       = qmi_response_type_v01_ei,
+	},
+	{
+		.data_type      = QMI_EOTI,
+		.array_type     = NO_ARRAY,
+		.tlv_type       = QMI_COMMON_TLV_TYPE,
+	},
+};
+
 static int ath12k_qmi_send_qdss_trace_config_download_req(struct ath12k_base *ab,
 							  const u8 *buffer,
 							  unsigned int buffer_len)
@@ -3848,6 +3892,52 @@ free_event_data:
 	kfree(event_data);
 }
 
+int ath12k_enable_fwlog(struct ath12k_base *ab)
+{
+	struct wlfw_ini_req_msg_v01 *req;
+	struct wlfw_ini_resp_msg_v01 resp = {};
+	struct qmi_txn txn = {};
+	int ret = 0;
+
+	req = kzalloc(sizeof(*req), GFP_KERNEL);
+	if (!req)
+		return -ENOMEM;
+
+	req->enablefwlog_valid = 1;
+	req->enablefwlog = 1;
+
+	ret = qmi_txn_init(&ab->qmi.handle, &txn, wlfw_ini_resp_msg_v01_ei, &resp);
+	if (ret < 0)
+		goto out;
+
+	ret = qmi_send_request(&ab->qmi.handle, NULL, &txn,
+			       QMI_WLFW_INI_REQ_V01,
+			       WLFW_INI_REQ_MSG_V01_MAX_MSG_LEN,
+			       wlfw_ini_req_msg_v01_ei, req);
+
+	if (ret < 0) {
+		ath12k_warn(ab, "Failed to send init request for enabling fwlog = %d\n",
+			    ret);
+		qmi_txn_cancel(&txn);
+		goto out;
+	}
+
+	ret = qmi_txn_wait(&txn, msecs_to_jiffies(ATH12K_QMI_WLANFW_TIMEOUT_MS));
+	if (ret < 0) {
+		ath12k_warn(ab, "fwlog enable wait for resp failed: %d\n", ret);
+		goto out;
+	}
+
+	if (resp.resp.result != QMI_RESULT_SUCCESS_V01) {
+		ath12k_warn(ab, "fwlog enable request failed, result: %d, err: %d\n",
+			    resp.resp.result, resp.resp.error);
+		ret = -EINVAL;
+	}
+out:
+	kfree(req);
+	return ret;
+}
+
 static const struct qmi_msg_handler ath12k_qmi_msg_handlers[] = {
 	{
 		.type = QMI_INDICATION,
--- a/drivers/net/wireless/ath/ath12k/qmi.h
+++ b/drivers/net/wireless/ath/ath12k/qmi.h
@@ -645,6 +645,18 @@ struct ath12k_qmi_event_qdss_trace_save_
 	struct qdss_trace_mem_seg mem_seg[QDSS_TRACE_SEG_LEN_MAX];
 };
 
+#define QMI_WLFW_INI_REQ_V01 0x002F
+#define WLFW_INI_REQ_MSG_V01_MAX_MSG_LEN 4
+
+struct wlfw_ini_req_msg_v01 {
+	u8 enablefwlog_valid;
+	u8 enablefwlog;
+};
+
+struct wlfw_ini_resp_msg_v01 {
+	struct qmi_response_type_v01 resp;
+};
+
 int ath12k_qmi_firmware_start(struct ath12k_base *ab,
 			      u32 mode);
 void ath12k_qmi_firmware_stop(struct ath12k_base *ab);
@@ -655,4 +667,5 @@ int ath12k_qmi_init_service(struct ath12
 
 int ath12k_send_qdss_trace_mode_req(struct ath12k_base *ab,
 				    enum qmi_wlanfw_qdss_trace_mode_enum_v01 mode);
+int ath12k_enable_fwlog(struct ath12k_base *ab);
 #endif
--- a/drivers/net/wireless/ath/ath12k/testmode.c
+++ b/drivers/net/wireless/ath/ath12k/testmode.c
@@ -19,8 +19,45 @@ static const struct nla_policy ath12k_tm
 	[ATH12K_TM_ATTR_WMI_CMDID]	= { .type = NLA_U32 },
 	[ATH12K_TM_ATTR_VERSION_MAJOR]	= { .type = NLA_U32 },
 	[ATH12K_TM_ATTR_VERSION_MINOR]	= { .type = NLA_U32 },
+	[ATH12K_TM_ATTR_FWLOG]		= { .type = NLA_BINARY,
+					    .len = 2048 },
 };
 
+void ath12k_fwlog_write(struct ath12k_base *ab, u8 *data, int len)
+{
+	struct sk_buff *nl_skb;
+	int ret, i;
+	struct ath12k *ar = NULL;
+	struct ath12k_pdev *pdev;
+
+	for (i = 0; i < ab->num_radios; i++) {
+		pdev = &ab->pdevs[i];
+		if (pdev && pdev->ar)  {
+			ar = pdev->ar;
+			break;
+		}
+	}
+
+	if (!ar)
+		return;
+
+	nl_skb = cfg80211_testmode_alloc_event_skb(ar->hw->wiphy, len, GFP_ATOMIC);
+
+	if (!nl_skb) {
+		ath12k_warn(ab,  "failed to allocate skb for fwlog event\n");
+		return;
+	}
+
+	ret = nla_put(nl_skb, ATH12K_TM_ATTR_FWLOG, len, data);
+	if (ret) {
+		ath12k_warn(ab, "failed to put fwlog wmi event to nl: %d\n", ret);
+		kfree_skb(nl_skb);
+		return;
+	}
+
+	cfg80211_testmode_event(nl_skb, GFP_ATOMIC);
+}
+
 /* Returns true if callee consumes the skb and the skb should be discarded.
  * Returns false if skb is not used. Does not sleep.
  */
--- a/drivers/net/wireless/ath/ath12k/testmode.h
+++ b/drivers/net/wireless/ath/ath12k/testmode.h
@@ -11,7 +11,7 @@
 bool ath12k_tm_event_wmi(struct ath12k *ar, u32 cmd_id, struct sk_buff *skb);
 int ath12k_tm_cmd(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		  void *data, int len);
-
+void ath12k_fwlog_write(struct ath12k_base *ab, u8 *data, int len);
 #else
 
 static inline bool ath12k_tm_event_wmi(struct ath12k *ar, u32 cmd_id,
@@ -27,4 +27,8 @@ static inline int ath12k_tm_cmd(struct i
 	return 0;
 }
 
+static void ath12k_fwlog_write(struct ath12k_base *ab, u8 *data, int len)
+{
+
+}
 #endif
--- a/drivers/net/wireless/ath/ath12k/testmode_i.h
+++ b/drivers/net/wireless/ath/ath12k/testmode_i.h
@@ -24,6 +24,7 @@ enum ath12k_tm_attr {
 	ATH12K_TM_ATTR_VERSION_MAJOR		= 4,
 	ATH12K_TM_ATTR_VERSION_MINOR		= 5,
 	ATH12K_TM_ATTR_WMI_OP_VERSION		= 6,
+	ATH12K_TM_ATTR_FWLOG                    = 7,
 
 	/* keep last */
 	__ATH12K_TM_ATTR_AFTER_LAST,
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -19,6 +19,7 @@
 #include "mac.h"
 #include "hw.h"
 #include "peer.h"
+#include "testmode.h"
 
 struct wmi_tlv_policy {
 	size_t min_len;
@@ -7273,6 +7274,29 @@ static void ath12k_wmi_event_wow_wakeup_
 	complete(&ab->wow.wakeup_completed);
 }
 
+static void ath12k_wmi_diag_event(struct ath12k_base *ab, struct sk_buff *skb)
+{
+	const struct wmi_tlv *tlv;
+	u16 tlv_tag, tlv_len;
+	u32 *dev_id;
+	u8 *data;
+
+	tlv = (struct wmi_tlv *)skb->data;
+	tlv_tag = FIELD_GET(WMI_TLV_TAG, tlv->header);
+	tlv_len = FIELD_GET(WMI_TLV_LEN, tlv->header);
+
+	if (tlv_tag == WMI_TAG_ARRAY_BYTE) {
+		data = skb->data + sizeof(struct wmi_tlv);
+		dev_id = (uint32_t *)data;
+		*dev_id = ab->hw_params->hw_rev + ATH12K_DIAG_HW_ID_OFFSET;
+	} else {
+		ath12k_warn(ab, "WMI Diag Event missing required tlv\n");
+		return;
+	}
+
+	ath12k_fwlog_write(ab, data, tlv_len);
+}
+
 static void ath12k_wmi_tlv_op_rx(struct ath12k_base *ab, struct sk_buff *skb)
 {
 	struct wmi_cmd_hdr *cmd_hdr;
@@ -7383,6 +7407,9 @@ static void ath12k_wmi_tlv_op_rx(struct
 	case WMI_WOW_WAKEUP_HOST_EVENTID:
 		ath12k_wmi_event_wow_wakeup_host(ab, skb);
 		break;
+	case WMI_DIAG_EVENTID:
+		ath12k_wmi_diag_event(ab, skb);
+		break;
 	/* TODO: Add remaining events */
 	default:
 		ath12k_dbg(ab, ATH12K_DBG_WMI, "Unknown eventid: 0x%x\n", id);
