From c03f25d5c796633918371dbf24974e5496756b4c Mon Sep 17 00:00:00 2001
From: Ramasamy Kaliappan <quic_rkaliapp@quicinc.com>
Date: Sun, 26 Feb 2023 11:25:39 +0530
Subject: [PATCH] mac80211: Enable emlsr mode support in ap.

This enables emlsr mode support in ap, add to read eml
capabilities on set station param in
mac80211/cfg80211, it store in the link sta
and sent to target driver.

Signed-off-by: Ramasamy Kaliappan <quic_rkaliapp@quicinc.com>
---
 include/net/cfg80211.h |  2 ++
 include/net/mac80211.h |  3 +++
 net/mac80211/cfg.c     |  4 ++++
 net/wireless/nl80211.c | 27 +++++++++++++++++++++++++++
 4 files changed, 36 insertions(+)

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -1612,6 +1612,8 @@ struct sta_txpwr {
  * @he_6ghz_capa: HE 6 GHz Band capabilities of station
  * @eht_capa: EHT capabilities of station
  * @eht_capa_len: the length of the EHT capabilities
+ * @eml_cap: EML capabilities of station
+ * @mld_oper: MLD capabilites and operation field of station
  */
 struct link_station_parameters {
 	const u8 *mld_mac;
@@ -1633,6 +1635,8 @@ struct link_station_parameters {
 	u8 eht_capa_len;
 	const struct ieee80211_240mhz_vendor_oper *eht_240mhz_capa;
 	u8 eht_240mhz_len;
+	u16 eml_cap;
+	u16 mld_oper;
 };
 
 /**
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -2344,6 +2344,8 @@ struct ieee80211_link_sta {
  *	would be assigned to link[link_id] where link_id is the id assigned
  *	by the AP.
  * @valid_links: bitmap of valid links, or 0 for non-MLO
+ * @eml_cap: EML capabilities of station
+ * @mld_cap_op: MLD capabilites and operation field of station
  */
 struct ieee80211_sta {
 	u8 addr[ETH_ALEN];
@@ -2386,6 +2388,9 @@ struct ieee80211_sta {
 	struct ieee80211_link_sta deflink;
 	struct ieee80211_link_sta __rcu *link[IEEE80211_MLD_MAX_NUM_LINKS];
 
+	u16 eml_cap;
+	u16 mld_cap_op;
+
 	/* must be last */
 	u8 drv_priv[] __aligned(sizeof(void *));
 };
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -1939,6 +1939,7 @@ static int sta_apply_parameters(struct i
 
 	mask = params->sta_flags_mask;
 	set = params->sta_flags_set;
+	sta->sta.eml_cap = params->link_sta_params.eml_cap;
 
 	if (ieee80211_vif_is_mesh(&sdata->vif)) {
 		/*
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -860,6 +860,8 @@ static const struct nla_policy nl80211_p
 	[NL80211_ATTR_RU_PUNCT_BITMAP] = { .type = NLA_U16 },
 	[NL80211_ATTR_AP_PS] = NLA_POLICY_MAX(NLA_U8, 1),
 	[NL80211_ATTR_RADAR_BITMAP] = { .type = NLA_U16 },
+	[NL80211_ATTR_EML_CAPABILITY] = { .type = NLA_U16 },
+	[NL80211_ATTR_MLD_CAPA_AND_OPS] = { .type = NLA_U16 },
 #if LINUX_VERSION_IS_GEQ(5,10,0)
 	[NL80211_ATTR_EHT_240MHZ_CAPABILITY] =
 			NLA_POLICY_RANGE(NLA_BINARY,
@@ -7744,6 +7746,13 @@ static int nl80211_set_station(struct sk
 	if (err)
 		return err;
 
+	if (info->attrs[NL80211_ATTR_EML_CAPABILITY])
+		params.link_sta_params.eml_cap =
+			nla_get_u16(info->attrs[NL80211_ATTR_EML_CAPABILITY]);
+
+	if (info->attrs[NL80211_ATTR_MLD_CAPA_AND_OPS])
+		params.link_sta_params.mld_oper =
+			nla_data(info->attrs[NL80211_ATTR_MLD_CAPA_AND_OPS]);
 	/* Include parameters for TDLS peer (will check later) */
 	err = nl80211_set_station_tdls(info, &params);
 	if (err)
