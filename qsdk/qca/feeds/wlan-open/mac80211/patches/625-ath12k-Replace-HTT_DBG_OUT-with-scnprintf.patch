From 768e2231da63fa6ca8fed17df63b306e8300d8b9 Mon Sep 17 00:00:00 2001
From: Dinesh Karthikeyan <quic_dinek@quicinc.com>
Date: Wed, 30 Mar 2022 11:59:20 +0530
Subject: [PATCH] ath12k: Replace HTT_DBG_OUT with scnprintf

Replace the macro HTT_DBG_OUT with the original
function. The macro only uses scnprintf and
has no additional functionality. Add new line
characters to scnprintf for better display.

Replace the masking and shifting method to get
stats value. Get stats value by using xx_get_bits
instead of FIELD_GET.

Signed-off-by: Dinesh Karthikeyan <quic_dinek@quicinc.com>
---
 .../net/wireless/ath/ath12k/debugfs_htt_stats.c    | 2039 ++++++++++----------
 .../net/wireless/ath/ath12k/debugfs_htt_stats.h    |   52 +
 drivers/net/wireless/ath/ath12k/dp.h               |    7 +
 3 files changed, 1083 insertions(+), 1015 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.c
@@ -11,14 +11,14 @@
 #include "debug.h"
 #include "debugfs_htt_stats.h"
 
-#define HTT_DBG_OUT(buf, len, fmt, ...) \
-			scnprintf(buf, len, fmt "\n", ##__VA_ARGS__)
-
 #define HTT_MAX_STRING_LEN 256
 #define HTT_MAX_PRINT_CHAR_PER_ELEM 15
 
 #define HTT_TLV_HDR_LEN 4
 
+#define HTT_DBG_OUT(buf, len, fmt, ...) \
+			scnprintf(buf, len, fmt "\n", ##__VA_ARGS__)
+
 #define ARRAY_TO_STRING(out, arr, len)							\
 	do {										\
 		int index = 0; u8 i;							\
@@ -44,7 +44,7 @@ static inline void htt_print_stats_strin
 
 	tag_len = tag_len >> 2;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_STATS_STRING_TLV:");
+	len += scnprintf(buf + len, buf_len - len, "HTT_STATS_STRING_TLV:\n");
 
 	for (i = 0; i < tag_len; i++) {
 		index += scnprintf(&data[index],
@@ -54,7 +54,7 @@ static inline void htt_print_stats_strin
 			break;
 	}
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "data = %s\n", data);
+	len += scnprintf(buf + len, buf_len - len, "data = %s\n", data);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -71,107 +71,108 @@ static inline void htt_print_tx_pdev_sta
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__word);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_CMN_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
-			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_queued = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_CMN_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			 u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+	len += scnprintf(buf + len, buf_len - len, "hw_queued = %u\n",
 			   htt_stats_buf->hw_queued);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_reaped = %u",
+	len += scnprintf(buf + len, buf_len - len, "hw_reaped = %u\n",
 			   htt_stats_buf->hw_reaped);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "underrun = %u",
+	len += scnprintf(buf + len, buf_len - len, "underrun = %u\n",
 			   htt_stats_buf->underrun);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_paused = %u",
+	len += scnprintf(buf + len, buf_len - len, "hw_paused = %u\n",
 			   htt_stats_buf->hw_paused);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_flush = %u",
+	len += scnprintf(buf + len, buf_len - len, "hw_flush = %u\n",
 			   htt_stats_buf->hw_flush);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_filt = %u",
+	len += scnprintf(buf + len, buf_len - len, "hw_filt = %u\n",
 			   htt_stats_buf->hw_filt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_abort = %u",
+	len += scnprintf(buf + len, buf_len - len, "tx_abort = %u\n",
 			   htt_stats_buf->tx_abort);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_requeued = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdu_requeued = %u\n",
 			   htt_stats_buf->mpdu_requed);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_xretry = %u",
+	len += scnprintf(buf + len, buf_len - len, "tx_xretry = %u\n",
 			   htt_stats_buf->tx_xretry);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "data_rc = %u",
+	len += scnprintf(buf + len, buf_len - len, "data_rc = %u\n",
 			   htt_stats_buf->data_rc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_dropped_xretry = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdu_dropped_xretry = %u\n",
 			   htt_stats_buf->mpdu_dropped_xretry);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "illegal_rate_phy_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "illegal_rate_phy_err = %u\n",
 			   htt_stats_buf->illgl_rate_phy_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "cont_xretry = %u",
+	len += scnprintf(buf + len, buf_len - len, "cont_xretry = %u\n",
 			   htt_stats_buf->cont_xretry);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_timeout = %u",
+	len += scnprintf(buf + len, buf_len - len, "tx_timeout = %u\n",
 			   htt_stats_buf->tx_timeout);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "pdev_resets = %u",
+	len += scnprintf(buf + len, buf_len - len, "pdev_resets = %u\n",
 			   htt_stats_buf->pdev_resets);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "phy_underrun = %u",
+	len += scnprintf(buf + len, buf_len - len, "phy_underrun = %u\n",
 			   htt_stats_buf->phy_underrun);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "txop_ovf = %u",
+	len += scnprintf(buf + len, buf_len - len, "txop_ovf = %u\n",
 			   htt_stats_buf->txop_ovf);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_posted = %u",
+	len += scnprintf(buf + len, buf_len - len, "seq_posted = %u\n",
 			   htt_stats_buf->seq_posted);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_failed_queueing = %u",
+	len += scnprintf(buf + len, buf_len - len, "seq_failed_queueing = %u\n",
 			   htt_stats_buf->seq_failed_queueing);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_completed = %u",
+	len += scnprintf(buf + len, buf_len - len, "seq_completed = %u\n",
 			   htt_stats_buf->seq_completed);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_restarted = %u",
+	len += scnprintf(buf + len, buf_len - len, "seq_restarted = %u\n",
 			   htt_stats_buf->seq_restarted);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_seq_posted = %u",
+	len += scnprintf(buf + len, buf_len - len, "mu_seq_posted = %u\n",
 			   htt_stats_buf->mu_seq_posted);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_switch_hw_paused = %u",
+	len += scnprintf(buf + len, buf_len - len, "seq_switch_hw_paused = %u\n",
 			   htt_stats_buf->seq_switch_hw_paused);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "next_seq_posted_dsr = %u",
+	len += scnprintf(buf + len, buf_len - len, "next_seq_posted_dsr = %u\n",
 			   htt_stats_buf->next_seq_posted_dsr);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_posted_isr = %u",
+	len += scnprintf(buf + len, buf_len - len, "seq_posted_isr = %u\n",
 			   htt_stats_buf->seq_posted_isr);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "seq_ctrl_cached = %u",
+	len += scnprintf(buf + len, buf_len - len, "seq_ctrl_cached = %u\n",
 			   htt_stats_buf->seq_ctrl_cached);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_count_tqm = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdu_count_tqm = %u\n",
 			   htt_stats_buf->mpdu_count_tqm);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "msdu_count_tqm = %u",
+	len += scnprintf(buf + len, buf_len - len, "msdu_count_tqm = %u\n",
 			   htt_stats_buf->msdu_count_tqm);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_removed_tqm = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdu_removed_tqm = %u\n",
 			   htt_stats_buf->mpdu_removed_tqm);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "msdu_removed_tqm = %u",
+	len += scnprintf(buf + len, buf_len - len, "msdu_removed_tqm = %u\n",
 			   htt_stats_buf->msdu_removed_tqm);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_sw_flush = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdus_sw_flush = %u\n",
 			   htt_stats_buf->mpdus_sw_flush);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_hw_filter = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdus_hw_filter = %u\n",
 			   htt_stats_buf->mpdus_hw_filter);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_truncated = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdus_truncated = %u\n",
 			   htt_stats_buf->mpdus_truncated);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_ack_failed = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdus_ack_failed = %u\n",
 			   htt_stats_buf->mpdus_ack_failed);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_expired = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdus_expired = %u\n",
 			   htt_stats_buf->mpdus_expired);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_seq_hw_retry = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdus_seq_hw_retry = %u\n",
 			   htt_stats_buf->mpdus_seq_hw_retry);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ack_tlv_proc = %u",
+	len += scnprintf(buf + len, buf_len - len, "ack_tlv_proc = %u\n",
 			   htt_stats_buf->ack_tlv_proc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "coex_abort_mpdu_cnt_valid = %u",
+	len += scnprintf(buf + len, buf_len - len, "coex_abort_mpdu_cnt_valid = %u\n",
 			   htt_stats_buf->coex_abort_mpdu_cnt_valid);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "coex_abort_mpdu_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "coex_abort_mpdu_cnt = %u\n",
 			   htt_stats_buf->coex_abort_mpdu_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_total_ppdus_tried_ota = %u",
+	len += scnprintf(buf + len, buf_len - len, "num_total_ppdus_tried_ota = %u\n",
 			   htt_stats_buf->num_total_ppdus_tried_ota);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_data_ppdus_tried_ota = %u",
+	len += scnprintf(buf + len, buf_len - len, "num_data_ppdus_tried_ota = %u\n",
 			   htt_stats_buf->num_data_ppdus_tried_ota);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_ctrl_mgmt_enqued = %u",
+	len += scnprintf(buf + len, buf_len - len, "local_ctrl_mgmt_enqued = %u\n",
 			   htt_stats_buf->local_ctrl_mgmt_enqued);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_ctrl_mgmt_freed = %u",
+	len += scnprintf(buf + len, buf_len - len, "local_ctrl_mgmt_freed = %u\n",
 			   htt_stats_buf->local_ctrl_mgmt_freed);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_data_enqued = %u",
+	len += scnprintf(buf + len, buf_len - len, "local_data_enqued = %u\n",
 			   htt_stats_buf->local_data_enqued);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_data_freed = %u",
+	len += scnprintf(buf + len, buf_len - len, "local_data_freed = %u\n",
 			   htt_stats_buf->local_data_freed);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_tried = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdu_tried = %u\n",
 			   htt_stats_buf->mpdu_tried);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "isr_wait_seq_posted = %u",
+	len += scnprintf(buf + len, buf_len - len, "isr_wait_seq_posted = %u\n",
 			   htt_stats_buf->isr_wait_seq_posted);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_active_dur_us_low = %u",
+	len += scnprintf(buf + len, buf_len - len, "tx_active_dur_us_low = %u\n",
 			   htt_stats_buf->tx_active_dur_us_low);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_active_dur_us_high = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "tx_active_dur_us_high = %u\n",
 			   htt_stats_buf->tx_active_dur_us_high);
 
 	if (len >= buf_len)
@@ -194,7 +195,7 @@ htt_print_tx_pdev_stats_urrn_tlv_v(const
 	char urrn_stats[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_TX_PDEV_MAX_URRN_STATS);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_URRN_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_URRN_TLV_V:\n");
 
 	ARRAY_TO_STRING(urrn_stats, htt_stats_buf->urrn_stats, num_elems);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "urrn_stats = %s\n", urrn_stats);
@@ -219,7 +220,7 @@ htt_print_tx_pdev_stats_flush_tlv_v(cons
 	char flush_errs[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_TX_PDEV_MAX_FLUSH_REASON_STATS);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_FLUSH_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_FLUSH_TLV_V:\n");
 
 	ARRAY_TO_STRING(flush_errs, htt_stats_buf->flush_errs, num_elems);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "flush_errs = %s\n", flush_errs);
@@ -244,7 +245,7 @@ htt_print_tx_pdev_stats_sifs_tlv_v(const
 	char sifs_status[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_TX_PDEV_MAX_SIFS_BURST_STATS);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_SIFS_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_SIFS_TLV_V:\n");
 
 	ARRAY_TO_STRING(sifs_status, htt_stats_buf->sifs_status, num_elems);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "sifs_status = %s\n",
@@ -270,7 +271,7 @@ htt_print_tx_pdev_stats_phy_err_tlv_v(co
 	char phy_errs[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_TX_PDEV_MAX_PHY_ERR_STATS);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_PHY_ERR_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_PHY_ERR_TLV_V:\n");
 
 	ARRAY_TO_STRING(phy_errs, htt_stats_buf->phy_errs, num_elems);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "phy_errs = %s\n", phy_errs);
@@ -295,8 +296,8 @@ htt_print_tx_pdev_stats_sifs_hist_tlv_v(
 	char sifs_hist_status[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_TX_PDEV_MAX_SIFS_BURST_HIST_STATS);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_PDEV_STATS_SIFS_HIST_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_TX_PDEV_STATS_SIFS_HIST_TLV_V:\n");
 
 	ARRAY_TO_STRING(sifs_hist_status, htt_stats_buf->sifs_hist_status, num_elems);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "sifs_hist_status = %s\n",
@@ -319,22 +320,22 @@ htt_print_tx_pdev_stats_tx_ppdu_stats_tl
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_PDEV_STATS_TX_PPDU_STATS_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_TX_PDEV_STATS_TX_PPDU_STATS_TLV_V:\n");
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_data_ppdus_legacy_su = %u",
+	len += scnprintf(buf + len, buf_len - len, "num_data_ppdus_legacy_su = %u\n",
 			   htt_stats_buf->num_data_ppdus_legacy_su);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_data_ppdus_ac_su = %u",
+	len += scnprintf(buf + len, buf_len - len, "num_data_ppdus_ac_su = %u\n",
 			   htt_stats_buf->num_data_ppdus_ac_su);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_data_ppdus_ax_su = %u",
+	len += scnprintf(buf + len, buf_len - len, "num_data_ppdus_ax_su = %u\n",
 			   htt_stats_buf->num_data_ppdus_ax_su);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_data_ppdus_ac_su_txbf = %u",
+	len += scnprintf(buf + len, buf_len - len, "num_data_ppdus_ac_su_txbf = %u\n",
 			   htt_stats_buf->num_data_ppdus_ac_su_txbf);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_data_ppdus_ax_su_txbf = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "num_data_ppdus_ax_su_txbf = %u\n",
 			   htt_stats_buf->num_data_ppdus_ax_su_txbf);
 
 	if (len >= buf_len)
@@ -358,9 +359,9 @@ htt_print_tx_pdev_stats_tried_mpdu_cnt_h
 	u32  num_elements = ((tag_len - sizeof(htt_stats_buf->hist_bin_size)) >> 2);
 	u32  required_buffer_size = HTT_MAX_PRINT_CHAR_PER_ELEM * num_elements;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_PDEV_STATS_TRIED_MPDU_CNT_HIST_TLV_V:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "TRIED_MPDU_CNT_HIST_BIN_SIZE : %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_TX_PDEV_STATS_TRIED_MPDU_CNT_HIST_TLV_V:\n");
+	len += scnprintf(buf + len, buf_len - len, "TRIED_MPDU_CNT_HIST_BIN_SIZE : %u\n",
 			   htt_stats_buf->hist_bin_size);
 
 	if (required_buffer_size < HTT_MAX_STRING_LEN) {
@@ -391,13 +392,13 @@ static inline void htt_print_hw_stats_in
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 	char hw_intr_name[HTT_STATS_MAX_HW_INTR_NAME_LEN + 1] = {0};
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_HW_STATS_INTR_MISC_TLV:");
+	len += scnprintf(buf + len, buf_len - len, "HTT_HW_STATS_INTR_MISC_TLV:\n");
 	memcpy(hw_intr_name, &(htt_stats_buf->hw_intr_name[0]),
 	       HTT_STATS_MAX_HW_INTR_NAME_LEN);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_intr_name = %s ", hw_intr_name);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mask = %u",
+	len += scnprintf(buf + len, buf_len - len, "hw_intr_name = %s\n", hw_intr_name);
+	len += scnprintf(buf + len, buf_len - len, "mask = %u\n",
 			   htt_stats_buf->mask);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "count = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "count = %u\n",
 			   htt_stats_buf->count);
 
 	if (len >= buf_len)
@@ -418,12 +419,12 @@ htt_print_hw_stats_wd_timeout_tlv(const
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 	char hw_module_name[HTT_STATS_MAX_HW_MODULE_NAME_LEN + 1] = {0};
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_HW_STATS_WD_TIMEOUT_TLV:");
+	len += scnprintf(buf + len, buf_len - len, "HTT_HW_STATS_WD_TIMEOUT_TLV:\n");
 	memcpy(hw_module_name, &(htt_stats_buf->hw_module_name[0]),
 	       HTT_STATS_MAX_HW_MODULE_NAME_LEN);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_module_name = %s ",
+	len += scnprintf(buf + len, buf_len - len, "hw_module_name = %s\n",
 			   hw_module_name);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "count = %u",
+	len += scnprintf(buf + len, buf_len - len, "count = %u\n",
 			   htt_stats_buf->count);
 
 	if (len >= buf_len)
@@ -441,29 +442,30 @@ static inline void htt_print_hw_stats_pd
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__word);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_HW_STATS_PDEV_ERRS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
-			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_abort = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_HW_STATS_PDEV_ERRS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+	len += scnprintf(buf + len, buf_len - len, "tx_abort = %u\n",
 			   htt_stats_buf->tx_abort);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_abort_fail_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "tx_abort_fail_count = %u\n",
 			   htt_stats_buf->tx_abort_fail_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_abort = %u",
+	len += scnprintf(buf + len, buf_len - len, "rx_abort = %u\n",
 			   htt_stats_buf->rx_abort);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_abort_fail_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "rx_abort_fail_count = %u\n",
 			   htt_stats_buf->rx_abort_fail_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "warm_reset = %u",
+	len += scnprintf(buf + len, buf_len - len, "warm_reset = %u\n",
 			   htt_stats_buf->warm_reset);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "cold_reset = %u",
+	len += scnprintf(buf + len, buf_len - len, "cold_reset = %u\n",
 			   htt_stats_buf->cold_reset);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_flush = %u",
+	len += scnprintf(buf + len, buf_len - len, "tx_flush = %u\n",
 			   htt_stats_buf->tx_flush);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_glb_reset = %u",
+	len += scnprintf(buf + len, buf_len - len, "tx_glb_reset = %u\n",
 			   htt_stats_buf->tx_glb_reset);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_txq_reset = %u",
+	len += scnprintf(buf + len, buf_len - len, "tx_txq_reset = %u\n",
 			   htt_stats_buf->tx_txq_reset);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_timeout_reset = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "rx_timeout_reset = %u\n",
 			   htt_stats_buf->rx_timeout_reset);
 
 	if (len >= buf_len)
@@ -481,35 +483,34 @@ static inline void htt_print_msdu_flow_s
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 drop_rule = __le32_to_cpu(htt_stats_buf->tx_flow_no__tid_num__drop_rule);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_MSDU_FLOW_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_update_timestamp = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_MSDU_FLOW_STATS_TLV:");
+	len += scnprintf(buf + len, buf_len - len, "last_update_timestamp = %u\n",
 			   htt_stats_buf->last_update_timestamp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_add_timestamp = %u",
+	len += scnprintf(buf + len, buf_len - len, "last_add_timestamp = %u\n",
 			   htt_stats_buf->last_add_timestamp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_remove_timestamp = %u",
+	len += scnprintf(buf + len, buf_len - len, "last_remove_timestamp = %u\n",
 			   htt_stats_buf->last_remove_timestamp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "total_processed_msdu_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "total_processed_msdu_count = %u\n",
 			   htt_stats_buf->total_processed_msdu_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "cur_msdu_count_in_flowq = %u",
+	len += scnprintf(buf + len, buf_len - len, "cur_msdu_count_in_flowq = %u\n",
 			   htt_stats_buf->cur_msdu_count_in_flowq);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sw_peer_id = %u",
+	len += scnprintf(buf + len, buf_len - len, "sw_peer_id = %u\n",
 			   htt_stats_buf->sw_peer_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_flow_no = %u",
-			   htt_stats_buf->tx_flow_no__tid_num__drop_rule & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_num = %u",
-			   (htt_stats_buf->tx_flow_no__tid_num__drop_rule & 0xF0000) >>
-			   16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "drop_rule = %u",
-			   (htt_stats_buf->tx_flow_no__tid_num__drop_rule & 0x100000) >>
-			   20);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_cycle_enqueue_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "tx_flow_no = %u\n",
+			 u32_get_bits(drop_rule, HTT_MSDU_FLOW_STATS_TX_FLOW_NO));
+	len += scnprintf(buf + len, buf_len - len, "tid_num = %u\n",
+			 u32_get_bits(drop_rule, HTT_MSDU_FLOW_STATS_TID_NUM));
+	len += scnprintf(buf + len, buf_len - len, "drop_rule = %u\n",
+			 u32_get_bits(drop_rule, HTT_MSDU_FLOW_STATS_DROP_RULE));
+	len += scnprintf(buf + len, buf_len - len, "last_cycle_enqueue_count = %u\n",
 			   htt_stats_buf->last_cycle_enqueue_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_cycle_dequeue_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "last_cycle_dequeue_count = %u\n",
 			   htt_stats_buf->last_cycle_dequeue_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_cycle_drop_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "last_cycle_drop_count = %u\n",
 			   htt_stats_buf->last_cycle_drop_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "current_drop_th = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "current_drop_th = %u\n",
 			   htt_stats_buf->current_drop_th);
 
 	if (len >= buf_len)
@@ -528,38 +529,39 @@ static inline void htt_print_tx_tid_stat
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 	char tid_name[MAX_HTT_TID_NAME + 1] = {0};
+	u32 tid_num = __le32_to_cpu(htt_stats_buf->sw_peer_id__tid_num);
+	u32 num_ppdu = __le32_to_cpu(htt_stats_buf->num_sched_pending__num_ppdu_in_hwq);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TID_STATS_TLV:");
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_TID_STATS_TLV:\n");
 	memcpy(tid_name, &(htt_stats_buf->tid_name[0]), MAX_HTT_TID_NAME);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_name = %s ", tid_name);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sw_peer_id = %u",
-			   htt_stats_buf->sw_peer_id__tid_num & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_num = %u",
-			   (htt_stats_buf->sw_peer_id__tid_num & 0xFFFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_sched_pending = %u",
-			   htt_stats_buf->num_sched_pending__num_ppdu_in_hwq & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_ppdu_in_hwq = %u",
-			   (htt_stats_buf->num_sched_pending__num_ppdu_in_hwq &
-			   0xFF00) >> 8);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_flags = 0x%x",
+	len += scnprintf(buf + len, buf_len - len, "tid_name = %s\n", tid_name);
+	len += scnprintf(buf + len, buf_len - len, "sw_peer_id = %u\n",
+			 u32_get_bits(tid_num, HTT_TX_TID_STATS_SW_PEER_ID));
+	len += scnprintf(buf + len, buf_len - len, "tid_num = %u\n",
+			 u32_get_bits(tid_num, HTT_TX_TID_STATS_TID_NUM));
+	len += scnprintf(buf + len, buf_len - len, "num_sched_pending = %u\n",
+			 u32_get_bits(tid_num, HTT_TX_TID_STATS_NUM_SCHED_PENDING));
+	len += scnprintf(buf + len, buf_len - len, "num_ppdu_in_hwq = %u\n",
+			 u32_get_bits(num_ppdu, HTT_TX_TID_STATS_NUM_PPDU_IN_HWQ));
+	len += scnprintf(buf + len, buf_len - len, "tid_flags = 0x%x\n",
 			   htt_stats_buf->tid_flags);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_queued = %u",
+	len += scnprintf(buf + len, buf_len - len, "hw_queued = %u\n",
 			   htt_stats_buf->hw_queued);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hw_reaped = %u",
+	len += scnprintf(buf + len, buf_len - len, "hw_reaped = %u\n",
 			   htt_stats_buf->hw_reaped);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdus_hw_filter = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdus_hw_filter = %u\n",
 			   htt_stats_buf->mpdus_hw_filter);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qdepth_bytes = %u",
+	len += scnprintf(buf + len, buf_len - len, "qdepth_bytes = %u\n",
 			   htt_stats_buf->qdepth_bytes);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qdepth_num_msdu = %u",
+	len += scnprintf(buf + len, buf_len - len, "qdepth_num_msdu = %u\n",
 			   htt_stats_buf->qdepth_num_msdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qdepth_num_mpdu = %u",
+	len += scnprintf(buf + len, buf_len - len, "qdepth_num_mpdu = %u\n",
 			   htt_stats_buf->qdepth_num_mpdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_scheduled_tsmp = %u",
+	len += scnprintf(buf + len, buf_len - len, "last_scheduled_tsmp = %u\n",
 			   htt_stats_buf->last_scheduled_tsmp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "pause_module_id = %u",
+	len += scnprintf(buf + len, buf_len - len, "pause_module_id = %u\n",
 			   htt_stats_buf->pause_module_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "block_module_id = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "block_module_id = %u\n",
 			   htt_stats_buf->block_module_id);
 
 	if (len >= buf_len)
@@ -578,42 +580,43 @@ static inline void htt_print_tx_tid_stat
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 	char tid_name[MAX_HTT_TID_NAME + 1] = {0};
+	u32 tid_num = __le32_to_cpu(htt_stats_buf->sw_peer_id__tid_num);
+	u32 num_ppdu = __le32_to_cpu(htt_stats_buf->num_sched_pending__num_ppdu_in_hwq);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TID_STATS_V1_TLV:");
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_TID_STATS_V1_TLV:\n");
 	memcpy(tid_name, &(htt_stats_buf->tid_name[0]), MAX_HTT_TID_NAME);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_name = %s ", tid_name);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sw_peer_id = %u",
-			   htt_stats_buf->sw_peer_id__tid_num & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_num = %u",
-			   (htt_stats_buf->sw_peer_id__tid_num & 0xFFFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_sched_pending = %u",
-			   htt_stats_buf->num_sched_pending__num_ppdu_in_hwq & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_ppdu_in_hwq = %u",
-			   (htt_stats_buf->num_sched_pending__num_ppdu_in_hwq &
-			   0xFF00) >> 8);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_flags = 0x%x",
+	len += scnprintf(buf + len, buf_len - len, "tid_name = %s\n", tid_name);
+	len += scnprintf(buf + len, buf_len - len, "sw_peer_id = %u\n",
+			 u32_get_bits(tid_num, HTT_TX_TID_STATS_V1_SW_PEER_ID));
+	len += scnprintf(buf + len, buf_len - len, "tid_num = %u\n",
+			 u32_get_bits(tid_num, HTT_TX_TID_STATS_V1_TID_NUM));
+	len += scnprintf(buf + len, buf_len - len, "num_sched_pending = %u\n",
+			 u32_get_bits(num_ppdu, HTT_TX_TID_STATS_V1_NUM_SCHED_PENDING));
+	len += scnprintf(buf + len, buf_len - len, "num_ppdu_in_hwq = %u\n",
+			 u32_get_bits(num_ppdu, HTT_TX_TID_STATS_V1_NUM_PPDU_IN_HWQ));
+	len += scnprintf(buf + len, buf_len - len, "tid_flags = 0x%x\n",
 			   htt_stats_buf->tid_flags);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "max_qdepth_bytes = %u",
+	len += scnprintf(buf + len, buf_len - len, "max_qdepth_bytes = %u\n",
 			   htt_stats_buf->max_qdepth_bytes);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "max_qdepth_n_msdus = %u",
+	len += scnprintf(buf + len, buf_len - len, "max_qdepth_n_msdus = %u\n",
 			   htt_stats_buf->max_qdepth_n_msdus);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rsvd = %u",
+	len += scnprintf(buf + len, buf_len - len, "rsvd = %u\n",
 			   htt_stats_buf->rsvd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qdepth_bytes = %u",
+	len += scnprintf(buf + len, buf_len - len, "qdepth_bytes = %u\n",
 			   htt_stats_buf->qdepth_bytes);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qdepth_num_msdu = %u",
+	len += scnprintf(buf + len, buf_len - len, "qdepth_num_msdu = %u\n",
 			   htt_stats_buf->qdepth_num_msdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qdepth_num_mpdu = %u",
+	len += scnprintf(buf + len, buf_len - len, "qdepth_num_mpdu = %u\n",
 			   htt_stats_buf->qdepth_num_mpdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_scheduled_tsmp = %u",
+	len += scnprintf(buf + len, buf_len - len, "last_scheduled_tsmp = %u\n",
 			   htt_stats_buf->last_scheduled_tsmp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "pause_module_id = %u",
+	len += scnprintf(buf + len, buf_len - len, "pause_module_id = %u\n",
 			   htt_stats_buf->pause_module_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "block_module_id = %u",
+	len += scnprintf(buf + len, buf_len - len, "block_module_id = %u\n",
 			   htt_stats_buf->block_module_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "allow_n_flags = 0x%x",
+	len += scnprintf(buf + len, buf_len - len, "allow_n_flags = 0x%x\n",
 			   htt_stats_buf->allow_n_flags);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sendn_frms_allowed = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "sendn_frms_allowed = %u\n",
 			   htt_stats_buf->sendn_frms_allowed);
 
 	if (len >= buf_len)
@@ -632,21 +635,22 @@ static inline void htt_print_rx_tid_stat
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 	char tid_name[MAX_HTT_TID_NAME + 1] = {0};
+	u32 tid_num = __le32_to_cpu(htt_stats_buf->sw_peer_id__tid_num);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_TID_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sw_peer_id = %u",
-			   htt_stats_buf->sw_peer_id__tid_num & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_num = %u",
-			   (htt_stats_buf->sw_peer_id__tid_num & 0xFFFF0000) >> 16);
+	len += scnprintf(buf + len, buf_len - len, "HTT_RX_TID_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "sw_peer_id = %u\n",
+			 u32_get_bits(tid_num, HTT_RX_TID_STATS_SW_PEER_ID));
+	len += scnprintf(buf + len, buf_len - len, "tid_num = %u\n",
+			 u32_get_bits(tid_num, HTT_RX_TID_STATS_TID_NUM));
 	memcpy(tid_name, &(htt_stats_buf->tid_name[0]), MAX_HTT_TID_NAME);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tid_name = %s ", tid_name);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "dup_in_reorder = %u",
+	len += scnprintf(buf + len, buf_len - len, "tid_name = %s\n", tid_name);
+	len += scnprintf(buf + len, buf_len - len, "dup_in_reorder = %u\n",
 			   htt_stats_buf->dup_in_reorder);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "dup_past_outside_window = %u",
+	len += scnprintf(buf + len, buf_len - len, "dup_past_outside_window = %u\n",
 			   htt_stats_buf->dup_past_outside_window);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "dup_past_within_window = %u",
+	len += scnprintf(buf + len, buf_len - len, "dup_past_within_window = %u\n",
 			   htt_stats_buf->dup_past_within_window);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rxdesc_err_decrypt = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "rxdesc_err_decrypt = %u\n",
 			   htt_stats_buf->rxdesc_err_decrypt);
 
 	if (len >= buf_len)
@@ -666,7 +670,7 @@ static inline void htt_print_counter_tlv
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 	char counter_name[HTT_MAX_STRING_LEN] = {0};
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_COUNTER_TLV:");
+	len += scnprintf(buf + len, buf_len - len, "HTT_COUNTER_TLV:\n");
 
 	ARRAY_TO_STRING(counter_name,
 			htt_stats_buf->counter_name,
@@ -691,34 +695,34 @@ static inline void htt_print_peer_stats_
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_PEER_STATS_CMN_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ppdu_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_PEER_STATS_CMN_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "ppdu_cnt = %u\n",
 			   htt_stats_buf->ppdu_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdu_cnt = %u\n",
 			   htt_stats_buf->mpdu_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "msdu_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "msdu_cnt = %u\n",
 			   htt_stats_buf->msdu_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "pause_bitmap = %u",
+	len += scnprintf(buf + len, buf_len - len, "pause_bitmap = %u\n",
 			   htt_stats_buf->pause_bitmap);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "block_bitmap = %u",
+	len += scnprintf(buf + len, buf_len - len, "block_bitmap = %u\n",
 			   htt_stats_buf->block_bitmap);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_rssi = %d",
+	len += scnprintf(buf + len, buf_len - len, "last_rssi = %d\n",
 			   htt_stats_buf->rssi);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "enqueued_count = %llu",
+	len += scnprintf(buf + len, buf_len - len, "enqueued_count = %llu\n",
 			   htt_stats_buf->peer_enqueued_count_low |
 			   ((u64)htt_stats_buf->peer_enqueued_count_high << 32));
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "dequeued_count = %llu",
+	len += scnprintf(buf + len, buf_len - len, "dequeued_count = %llu\n",
 			   htt_stats_buf->peer_dequeued_count_low |
 			   ((u64)htt_stats_buf->peer_dequeued_count_high << 32));
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "dropped_count = %llu",
+	len += scnprintf(buf + len, buf_len - len, "dropped_count = %llu\n",
 			   htt_stats_buf->peer_dropped_count_low |
 			   ((u64)htt_stats_buf->peer_dropped_count_high << 32));
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "transmitted_ppdu_bytes = %llu",
+	len += scnprintf(buf + len, buf_len - len, "transmitted_ppdu_bytes = %llu\n",
 			   htt_stats_buf->ppdu_transmitted_bytes_low |
 			   ((u64)htt_stats_buf->ppdu_transmitted_bytes_high << 32));
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ttl_removed_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "ttl_removed_count = %u\n",
 			   htt_stats_buf->peer_ttl_removed_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "inactive_time = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "inactive_time = %u\n",
 			   htt_stats_buf->inactive_time);
 
 	if (len >= buf_len)
@@ -736,29 +740,32 @@ static inline void htt_print_peer_detail
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 ast_idx = __le32_to_cpu(htt_stats_buf->vdev_pdev_ast_idx);
+	u32 mac_addr = __le32_to_cpu(htt_stats_buf->mac_addr.mac_addr_l32);
+	u32 mac_addr_16 = __le32_to_cpu(htt_stats_buf->mac_addr.mac_addr_h16);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_PEER_DETAILS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "peer_type = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_PEER_DETAILS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "peer_type = %u\n",
 			   htt_stats_buf->peer_type);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sw_peer_id = %u",
+	len += scnprintf(buf + len, buf_len - len, "sw_peer_id = %u\n",
 			   htt_stats_buf->sw_peer_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "vdev_id = %u",
-			   htt_stats_buf->vdev_pdev_ast_idx & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "pdev_id = %u",
-			   (htt_stats_buf->vdev_pdev_ast_idx & 0xFF00) >> 8);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ast_idx = %u",
-			   (htt_stats_buf->vdev_pdev_ast_idx & 0xFFFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "mac_addr = %02x:%02x:%02x:%02x:%02x:%02x",
-			   htt_stats_buf->mac_addr.mac_addr_l32 & 0xFF,
-			   (htt_stats_buf->mac_addr.mac_addr_l32 & 0xFF00) >> 8,
-			   (htt_stats_buf->mac_addr.mac_addr_l32 & 0xFF0000) >> 16,
-			   (htt_stats_buf->mac_addr.mac_addr_l32 & 0xFF000000) >> 24,
-			   (htt_stats_buf->mac_addr.mac_addr_h16 & 0xFF),
-			   (htt_stats_buf->mac_addr.mac_addr_h16 & 0xFF00) >> 8);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "peer_flags = 0x%x",
+	len += scnprintf(buf + len, buf_len - len, "vdev_id = %u\n",
+			 u32_get_bits(ast_idx, HTT_PEER_DETAILS_VDEV_ID));
+	len += scnprintf(buf + len, buf_len - len, "pdev_id = %u\n",
+			 u32_get_bits(ast_idx, HTT_PEER_DETAILS_PDEV_ID));
+	len += scnprintf(buf + len, buf_len - len, "ast_idx = %u\n",
+			 u32_get_bits(ast_idx, HTT_PEER_DETAILS_AST_IDX));
+	len += scnprintf(buf + len, buf_len - len,
+			 "mac_addr = %02x:%02x:%02x:%02x:%02x:%02x",
+			 u32_get_bits(mac_addr, HTT_MAC_ADDR_L32_0),
+			 u32_get_bits(mac_addr, HTT_MAC_ADDR_L32_1),
+			 u32_get_bits(mac_addr, HTT_MAC_ADDR_L32_2),
+			 u32_get_bits(mac_addr, HTT_MAC_ADDR_L32_3),
+			 u32_get_bits(mac_addr_16, HTT_MAC_ADDR_H16_0),
+			 u32_get_bits(mac_addr_16, HTT_MAC_ADDR_H16_1));
+	len += scnprintf(buf + len, buf_len - len, "peer_flags = 0x%x\n",
 			   htt_stats_buf->peer_flags);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qpeer_flags = 0x%x\n",
+	len += scnprintf(buf + len, buf_len - len, "qpeer_flags = 0x%x\n",
 			   htt_stats_buf->qpeer_flags);
 
 	if (len >= buf_len)
@@ -963,12 +970,12 @@ htt_print_tx_hwq_mu_mimo_sch_stats_tlv(c
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_HWQ_MU_MIMO_SCH_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_sch_posted = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_HWQ_MU_MIMO_SCH_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mu_mimo_sch_posted = %u\n",
 			   htt_stats_buf->mu_mimo_sch_posted);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_sch_failed = %u",
+	len += scnprintf(buf + len, buf_len - len, "mu_mimo_sch_failed = %u\n",
 			   htt_stats_buf->mu_mimo_sch_failed);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_ppdu_posted = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "mu_mimo_ppdu_posted = %u\n",
 			   htt_stats_buf->mu_mimo_ppdu_posted);
 
 	if (len >= buf_len)
@@ -988,21 +995,21 @@ htt_print_tx_hwq_mu_mimo_mpdu_stats_tlv(
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_HWQ_MU_MIMO_MPDU_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_mpdus_queued_usr = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_TX_HWQ_MU_MIMO_MPDU_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mu_mimo_mpdus_queued_usr = %u\n",
 			   htt_stats_buf->mu_mimo_mpdus_queued_usr);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_mpdus_tried_usr = %u",
+	len += scnprintf(buf + len, buf_len - len, "mu_mimo_mpdus_tried_usr = %u\n",
 			   htt_stats_buf->mu_mimo_mpdus_tried_usr);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_mpdus_failed_usr = %u",
+	len += scnprintf(buf + len, buf_len - len, "mu_mimo_mpdus_failed_usr = %u\n",
 			   htt_stats_buf->mu_mimo_mpdus_failed_usr);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_mpdus_requeued_usr = %u",
+	len += scnprintf(buf + len, buf_len - len, "mu_mimo_mpdus_requeued_usr = %u\n",
 			   htt_stats_buf->mu_mimo_mpdus_requeued_usr);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_err_no_ba_usr = %u",
+	len += scnprintf(buf + len, buf_len - len, "mu_mimo_err_no_ba_usr = %u\n",
 			   htt_stats_buf->mu_mimo_err_no_ba_usr);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_mpdu_underrun_usr = %u",
+	len += scnprintf(buf + len, buf_len - len, "mu_mimo_mpdu_underrun_usr = %u\n",
 			   htt_stats_buf->mu_mimo_mpdu_underrun_usr);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_ampdu_underrun_usr = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "mu_mimo_ampdu_underrun_usr = %u\n",
 			   htt_stats_buf->mu_mimo_ampdu_underrun_usr);
 
 	if (len >= buf_len)
@@ -1021,12 +1028,13 @@ htt_print_tx_hwq_mu_mimo_cmn_stats_tlv(c
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__hwq_id__word);
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_HWQ_MU_MIMO_CMN_STATS_TLV:\n");
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_HWQ_MU_MIMO_CMN_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
-			   htt_stats_buf->mac_id__hwq_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwq_id = %u\n",
-			   (htt_stats_buf->mac_id__hwq_id__word & 0xFF00) >> 8);
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			 u32_get_bits(mac_id_word, HTT_TX_HWQ_STATS_MAC_ID));
+	len += scnprintf(buf + len, buf_len - len, "hwq_id = %u\n\n",
+			 u32_get_bits(mac_id_word, HTT_TX_HWQ_STATS_HWQ_ID));
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -1043,52 +1051,53 @@ htt_print_tx_hwq_stats_cmn_tlv(const voi
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__hwq_id__word);
 
 	/* TODO: HKDBG */
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_HWQ_STATS_CMN_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
-			   htt_stats_buf->mac_id__hwq_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwq_id = %u",
-			   (htt_stats_buf->mac_id__hwq_id__word & 0xFF00) >> 8);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "xretry = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_HWQ_STATS_CMN_TLV:");
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			 u32_get_bits(mac_id_word, HTT_TX_HWQ_STATS_MAC_ID));
+	len += scnprintf(buf + len, buf_len - len, "hwq_id = %u\n",
+			 u32_get_bits(mac_id_word, HTT_TX_HWQ_STATS_HWQ_ID));
+	len += scnprintf(buf + len, buf_len - len, "xretry = %u\n",
 			   htt_stats_buf->xretry);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "underrun_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "underrun_cnt = %u\n",
 			   htt_stats_buf->underrun_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "flush_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "flush_cnt = %u\n",
 			   htt_stats_buf->flush_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "filt_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "filt_cnt = %u\n",
 			   htt_stats_buf->filt_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "null_mpdu_bmap = %u",
+	len += scnprintf(buf + len, buf_len - len, "null_mpdu_bmap = %u\n",
 			   htt_stats_buf->null_mpdu_bmap);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "user_ack_failure = %u",
+	len += scnprintf(buf + len, buf_len - len, "user_ack_failure = %u\n",
 			   htt_stats_buf->user_ack_failure);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ack_tlv_proc = %u",
+	len += scnprintf(buf + len, buf_len - len, "ack_tlv_proc = %u\n",
 			   htt_stats_buf->ack_tlv_proc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_id_proc = %u",
+	len += scnprintf(buf + len, buf_len - len, "sched_id_proc = %u\n",
 			   htt_stats_buf->sched_id_proc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "null_mpdu_tx_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "null_mpdu_tx_count = %u\n",
 			   htt_stats_buf->null_mpdu_tx_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_bmap_not_recvd = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdu_bmap_not_recvd = %u\n",
 			   htt_stats_buf->mpdu_bmap_not_recvd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_bar = %u",
+	len += scnprintf(buf + len, buf_len - len, "num_bar = %u\n",
 			   htt_stats_buf->num_bar);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rts = %u",
+	len += scnprintf(buf + len, buf_len - len, "rts = %u\n",
 			   htt_stats_buf->rts);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "cts2self = %u",
+	len += scnprintf(buf + len, buf_len - len, "cts2self = %u\n",
 			   htt_stats_buf->cts2self);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qos_null = %u",
+	len += scnprintf(buf + len, buf_len - len, "qos_null = %u\n",
 			   htt_stats_buf->qos_null);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_tried_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdu_tried_cnt = %u\n",
 			   htt_stats_buf->mpdu_tried_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_queued_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdu_queued_cnt = %u\n",
 			   htt_stats_buf->mpdu_queued_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_ack_fail_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdu_ack_fail_cnt = %u\n",
 			   htt_stats_buf->mpdu_ack_fail_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_filt_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdu_filt_cnt = %u\n",
 			   htt_stats_buf->mpdu_filt_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "false_mpdu_ack_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "false_mpdu_ack_count = %u\n",
 			   htt_stats_buf->false_mpdu_ack_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "txq_timeout = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "txq_timeout = %u\n",
 			   htt_stats_buf->txq_timeout);
 
 	if (len >= buf_len)
@@ -1111,9 +1120,9 @@ htt_print_tx_hwq_difs_latency_stats_tlv_
 	u16 data_len = min_t(u16, (tag_len >> 2), HTT_TX_HWQ_MAX_DIFS_LATENCY_BINS);
 	char difs_latency_hist[HTT_MAX_STRING_LEN] = {0};
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
+	len += scnprintf(buf + len, buf_len - len,
 			   "HTT_TX_HWQ_DIFS_LATENCY_STATS_TLV_V:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hist_intvl = %u",
+	len += scnprintf(buf + len, buf_len - len, "hist_intvl = %u",
 			htt_stats_buf->hist_intvl);
 
 	ARRAY_TO_STRING(difs_latency_hist, htt_stats_buf->difs_latency_hist,
@@ -1134,7 +1143,7 @@ htt_print_tx_hwq_cmd_result_stats_tlv_v(
 					u16 tag_len,
 					struct debug_htt_stats_req *stats_req)
 {
-	const struct htt_tx_hwq_cmd_result_stats_tlv_v *htt_stats_buf = tag_buf;
+	//const struct htt_tx_hwq_cmd_result_stats_tlv_v *htt_stats_buf = tag_buf;
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
@@ -1143,10 +1152,8 @@ htt_print_tx_hwq_cmd_result_stats_tlv_v(
 
 	data_len = min_t(u16, (tag_len >> 2), HTT_TX_HWQ_MAX_CMD_RESULT_STATS);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_HWQ_CMD_RESULT_STATS_TLV_V:");
-
-	ARRAY_TO_STRING(cmd_result, htt_stats_buf->cmd_result, data_len);
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_TX_HWQ_CMD_RESULT_STATS_TLV_V:\n");
 
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "cmd_result = %s\n", cmd_result);
 
@@ -1172,7 +1179,7 @@ htt_print_tx_hwq_cmd_stall_stats_tlv_v(c
 
 	num_elems = min_t(u16, (tag_len >> 2), HTT_TX_HWQ_MAX_CMD_STALL_STATS);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_HWQ_CMD_STALL_STATS_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_HWQ_CMD_STALL_STATS_TLV_V:\n");
 
 	ARRAY_TO_STRING(cmd_stall_status, htt_stats_buf->cmd_stall_status, num_elems);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "cmd_stall_status = %s\n",
@@ -1200,8 +1207,8 @@ htt_print_tx_hwq_fes_result_stats_tlv_v(
 
 	num_elems = min_t(u16, (tag_len >> 2), HTT_TX_HWQ_MAX_FES_RESULT_STATS);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_HWQ_FES_RESULT_STATS_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_TX_HWQ_FES_RESULT_STATS_TLV_V:\n");
 
 	ARRAY_TO_STRING(fes_result, htt_stats_buf->fes_result, num_elems);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "fes_result = %s\n", fes_result);
@@ -1228,9 +1235,9 @@ htt_print_tx_hwq_tried_mpdu_cnt_hist_tlv
 			    sizeof(htt_stats_buf->hist_bin_size)) >> 2);
 	u32  required_buffer_size = HTT_MAX_PRINT_CHAR_PER_ELEM * num_elements;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_HWQ_TRIED_MPDU_CNT_HIST_TLV_V:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "TRIED_MPDU_CNT_HIST_BIN_SIZE : %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_TX_HWQ_TRIED_MPDU_CNT_HIST_TLV_V:\n");
+	len += scnprintf(buf + len, buf_len - len, "TRIED_MPDU_CNT_HIST_BIN_SIZE : %u\n",
 			   htt_stats_buf->hist_bin_size);
 
 	if (required_buffer_size < HTT_MAX_STRING_LEN) {
@@ -1266,8 +1273,8 @@ htt_print_tx_hwq_txop_used_cnt_hist_tlv_
 	u32 num_elements = tag_len >> 2;
 	u32  required_buffer_size = HTT_MAX_PRINT_CHAR_PER_ELEM * num_elements;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_HWQ_TXOP_USED_CNT_HIST_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_TX_HWQ_TXOP_USED_CNT_HIST_TLV_V:\n");
 
 	if (required_buffer_size < HTT_MAX_STRING_LEN) {
 		ARRAY_TO_STRING(txop_used_cnt_hist,
@@ -1301,31 +1308,31 @@ static inline void htt_print_tx_sounding
 	const u32 *cbf_160 = htt_stats_buf->cbf_160;
 
 	if (htt_stats_buf->tx_sounding_mode == HTT_TX_AC_SOUNDING_MODE) {
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
+		len += scnprintf(buf + len, buf_len - len,
 				   "\nHTT_TX_AC_SOUNDING_STATS_TLV:\n");
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ac_cbf_20 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u ",
+		len += scnprintf(buf + len, buf_len - len,
+				   "ac_cbf_20 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
 				   cbf_20[HTT_IMPLICIT_TXBF_STEER_STATS],
 				   cbf_20[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
 				   cbf_20[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
 				   cbf_20[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
 				   cbf_20[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ac_cbf_40 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u",
+		len += scnprintf(buf + len, buf_len - len,
+				   "ac_cbf_40 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
 				   cbf_40[HTT_IMPLICIT_TXBF_STEER_STATS],
 				   cbf_40[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
 				   cbf_40[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
 				   cbf_40[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
 				   cbf_40[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ac_cbf_80 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u",
+		len += scnprintf(buf + len, buf_len - len,
+				   "ac_cbf_80 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
 				   cbf_80[HTT_IMPLICIT_TXBF_STEER_STATS],
 				   cbf_80[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
 				   cbf_80[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
 				   cbf_80[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
 				   cbf_80[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ac_cbf_160 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u",
+		len += scnprintf(buf + len, buf_len - len,
+				   "ac_cbf_160 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
 				   cbf_160[HTT_IMPLICIT_TXBF_STEER_STATS],
 				   cbf_160[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
 				   cbf_160[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
@@ -1333,8 +1340,8 @@ static inline void htt_print_tx_sounding
 				   cbf_160[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
 
 		for (i = 0; i < HTT_TX_PDEV_STATS_NUM_AC_MUMIMO_USER_STATS; i++) {
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "Sounding User %u = 20MHz: %u, 40MHz : %u, 80MHz: %u, 160MHz: %u ",
+			len += scnprintf(buf + len, buf_len - len,
+					   "Sounding User %u = 20MHz: %u, 40MHz : %u, 80MHz: %u, 160MHz: %u\n",
 					   i,
 					   htt_stats_buf->sounding[0],
 					   htt_stats_buf->sounding[1],
@@ -1342,31 +1349,31 @@ static inline void htt_print_tx_sounding
 					   htt_stats_buf->sounding[3]);
 		}
 	} else if (htt_stats_buf->tx_sounding_mode == HTT_TX_AX_SOUNDING_MODE) {
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
+		len += scnprintf(buf + len, buf_len - len,
 				   "\nHTT_TX_AX_SOUNDING_STATS_TLV:\n");
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ax_cbf_20 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u ",
+		len += scnprintf(buf + len, buf_len - len,
+				   "ax_cbf_20 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
 				   cbf_20[HTT_IMPLICIT_TXBF_STEER_STATS],
 				   cbf_20[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
 				   cbf_20[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
 				   cbf_20[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
 				   cbf_20[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ax_cbf_40 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u",
+		len += scnprintf(buf + len, buf_len - len,
+				   "ax_cbf_40 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
 				   cbf_40[HTT_IMPLICIT_TXBF_STEER_STATS],
 				   cbf_40[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
 				   cbf_40[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
 				   cbf_40[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
 				   cbf_40[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ax_cbf_80 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u",
+		len += scnprintf(buf + len, buf_len - len,
+				   "ax_cbf_80 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
 				   cbf_80[HTT_IMPLICIT_TXBF_STEER_STATS],
 				   cbf_80[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
 				   cbf_80[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
 				   cbf_80[HTT_EXPLICIT_TXBF_MU_SIFS_STEER_STATS],
 				   cbf_80[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ax_cbf_160 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u",
+		len += scnprintf(buf + len, buf_len - len,
+				   "ax_cbf_160 = IBF : %u, SU_SIFS : %u, SU_RBO : %u, MU_SIFS : %u, MU_RBO : %u\n",
 				   cbf_160[HTT_IMPLICIT_TXBF_STEER_STATS],
 				   cbf_160[HTT_EXPLICIT_TXBF_SU_SIFS_STEER_STATS],
 				   cbf_160[HTT_EXPLICIT_TXBF_SU_RBO_STEER_STATS],
@@ -1374,8 +1381,8 @@ static inline void htt_print_tx_sounding
 				   cbf_160[HTT_EXPLICIT_TXBF_MU_RBO_STEER_STATS]);
 
 		for (i = 0; i < HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS; i++) {
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "Sounding User %u = 20MHz: %u, 40MHz : %u, 80MHz: %u, 160MHz: %u ",
+			len += scnprintf(buf + len, buf_len - len,
+					   "Sounding User %u = 20MHz: %u, 40MHz : %u, 80MHz: %u, 160MHz: %u \n",
 					   i,
 					   htt_stats_buf->sounding[0],
 					   htt_stats_buf->sounding[1],
@@ -1400,31 +1407,32 @@ htt_print_tx_selfgen_cmn_stats_tlv(const
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__word);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_SELFGEN_CMN_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
-			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "su_bar = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_SELFGEN_CMN_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+	len += scnprintf(buf + len, buf_len - len, "su_bar = %u\n",
 			   htt_stats_buf->su_bar);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rts = %u",
+	len += scnprintf(buf + len, buf_len - len, "rts = %u\n",
 			   htt_stats_buf->rts);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "cts2self = %u",
+	len += scnprintf(buf + len, buf_len - len, "cts2self = %u\n",
 			   htt_stats_buf->cts2self);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qos_null = %u",
+	len += scnprintf(buf + len, buf_len - len, "qos_null = %u\n",
 			   htt_stats_buf->qos_null);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "delayed_bar_1 = %u",
+	len += scnprintf(buf + len, buf_len - len, "delayed_bar_1 = %u\n",
 			   htt_stats_buf->delayed_bar_1);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "delayed_bar_2 = %u",
+	len += scnprintf(buf + len, buf_len - len, "delayed_bar_2 = %u\n",
 			   htt_stats_buf->delayed_bar_2);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "delayed_bar_3 = %u",
+	len += scnprintf(buf + len, buf_len - len, "delayed_bar_3 = %u\n",
 			   htt_stats_buf->delayed_bar_3);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "delayed_bar_4 = %u",
+	len += scnprintf(buf + len, buf_len - len, "delayed_bar_4 = %u\n",
 			   htt_stats_buf->delayed_bar_4);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "delayed_bar_5 = %u",
+	len += scnprintf(buf + len, buf_len - len, "delayed_bar_5 = %u\n",
 			   htt_stats_buf->delayed_bar_5);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "delayed_bar_6 = %u",
+	len += scnprintf(buf + len, buf_len - len, "delayed_bar_6 = %u\n",
 			   htt_stats_buf->delayed_bar_6);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "delayed_bar_7 = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "delayed_bar_7 = %u\n",
 			   htt_stats_buf->delayed_bar_7);
 
 	if (len >= buf_len)
@@ -1444,20 +1452,20 @@ htt_print_tx_selfgen_ac_stats_tlv(const
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_SELFGEN_AC_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_su_ndpa = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_SELFGEN_AC_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "ac_su_ndpa = %u\n",
 			   htt_stats_buf->ac_su_ndpa);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_su_ndp = %u",
+	len += scnprintf(buf + len, buf_len - len, "ac_su_ndp = %u\n",
 			   htt_stats_buf->ac_su_ndp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_ndpa = %u",
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndpa = %u\n",
 			   htt_stats_buf->ac_mu_mimo_ndpa);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_ndp = %u",
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndp = %u\n",
 			   htt_stats_buf->ac_mu_mimo_ndp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_brpoll_1 = %u",
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_1 = %u\n",
 			   htt_stats_buf->ac_mu_mimo_brpoll_1);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_brpoll_2 = %u",
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_2 = %u\n",
 			   htt_stats_buf->ac_mu_mimo_brpoll_2);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_brpoll_3 = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_3 = %u\n",
 			   htt_stats_buf->ac_mu_mimo_brpoll_3);
 
 	if (len >= buf_len)
@@ -1477,36 +1485,36 @@ htt_print_tx_selfgen_ax_stats_tlv(const
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_SELFGEN_AX_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_su_ndpa = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_SELFGEN_AX_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "ax_su_ndpa = %u\n",
 			   htt_stats_buf->ax_su_ndpa);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_su_ndp = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_su_ndp = %u\n",
 			   htt_stats_buf->ax_su_ndp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_ndpa = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_ndpa = %u\n",
 			   htt_stats_buf->ax_mu_mimo_ndpa);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_ndp = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_ndp = %u\n",
 			   htt_stats_buf->ax_mu_mimo_ndp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_1 = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_1 = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brpoll_1);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_2 = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_2 = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brpoll_2);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_3 = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_3 = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brpoll_3);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_4 = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_4 = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brpoll_4);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_5 = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_5 = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brpoll_5);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_6 = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_6 = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brpoll_6);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brpoll_7 = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_7 = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brpoll_7);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_basic_trigger = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_basic_trigger = %u\n",
 			   htt_stats_buf->ax_basic_trigger);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_bsr_trigger = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_bsr_trigger = %u\n",
 			   htt_stats_buf->ax_bsr_trigger);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_bar_trigger = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_bar_trigger = %u\n",
 			   htt_stats_buf->ax_mu_bar_trigger);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_rts_trigger = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_rts_trigger = %u\n",
 			   htt_stats_buf->ax_mu_rts_trigger);
 
 	if (len >= buf_len)
@@ -1526,20 +1534,20 @@ htt_print_tx_selfgen_ac_err_stats_tlv(co
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_SELFGEN_AC_ERR_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_su_ndp_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_SELFGEN_AC_ERR_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "ac_su_ndp_err = %u\n",
 			   htt_stats_buf->ac_su_ndp_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_su_ndpa_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "ac_su_ndpa_err = %u\n",
 			   htt_stats_buf->ac_su_ndpa_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_ndpa_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndpa_err = %u\n",
 			   htt_stats_buf->ac_mu_mimo_ndpa_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_ndp_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndp_err = %u\n",
 			   htt_stats_buf->ac_mu_mimo_ndp_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_brp1_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brp1_err = %u\n",
 			   htt_stats_buf->ac_mu_mimo_brp1_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_brp2_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brp2_err = %u\n",
 			   htt_stats_buf->ac_mu_mimo_brp2_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_brp3_err = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brp3_err = %u\n",
 			   htt_stats_buf->ac_mu_mimo_brp3_err);
 
 	if (len >= buf_len)
@@ -1559,36 +1567,36 @@ htt_print_tx_selfgen_ax_err_stats_tlv(co
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_SELFGEN_AX_ERR_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_su_ndp_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_SELFGEN_AX_ERR_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "ax_su_ndp_err = %u\n",
 			   htt_stats_buf->ax_su_ndp_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_su_ndpa_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_su_ndpa_err = %u\n",
 			   htt_stats_buf->ax_su_ndpa_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_ndpa_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_ndpa_err = %u\n",
 			   htt_stats_buf->ax_mu_mimo_ndpa_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_ndp_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_ndp_err = %u\n",
 			   htt_stats_buf->ax_mu_mimo_ndp_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp1_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp1_err = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brp1_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp2_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp2_err = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brp2_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp3_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp3_err = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brp3_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp4_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp4_err = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brp4_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp5_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp5_err = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brp5_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp6_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp6_err = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brp6_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_brp7_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp7_err = %u\n",
 			   htt_stats_buf->ax_mu_mimo_brp7_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_basic_trigger_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_basic_trigger_err = %u\n",
 			   htt_stats_buf->ax_basic_trigger_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_bsr_trigger_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_bsr_trigger_err = %u\n",
 			   htt_stats_buf->ax_bsr_trigger_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_bar_trigger_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_bar_trigger_err = %u\n",
 			   htt_stats_buf->ax_mu_bar_trigger_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_rts_trigger_err = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_rts_trigger_err = %u\n",
 			   htt_stats_buf->ax_mu_rts_trigger_err);
 
 	if (len >= buf_len)
@@ -1609,34 +1617,34 @@ htt_print_tx_pdev_mu_mimo_sch_stats_tlv(
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 	u8 i;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_PDEV_MU_MIMO_SCH_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_sch_posted = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_TX_PDEV_MU_MIMO_SCH_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mu_mimo_sch_posted = %u\n",
 			   htt_stats_buf->mu_mimo_sch_posted);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_sch_failed = %u",
+	len += scnprintf(buf + len, buf_len - len, "mu_mimo_sch_failed = %u\n",
 			   htt_stats_buf->mu_mimo_sch_failed);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mu_mimo_ppdu_posted = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "mu_mimo_ppdu_posted = %u\n",
 			   htt_stats_buf->mu_mimo_ppdu_posted);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "11ac MU_MIMO SCH STATS:");
+	len += scnprintf(buf + len, buf_len - len, "11ac MU_MIMO SCH STATS:\n");
 
 	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_AC_MUMIMO_USER_STATS; i++)
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ac_mu_mimo_sch_nusers_%u = %u",
+		len += scnprintf(buf + len, buf_len - len,
+				   "ac_mu_mimo_sch_nusers_%u = %u\n",
 				   i, htt_stats_buf->ac_mu_mimo_sch_nusers[i]);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n11ax MU_MIMO SCH STATS:");
+	len += scnprintf(buf + len, buf_len - len, "\n11ax MU_MIMO SCH STATS:\n");
 
 	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS; i++)
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ax_mu_mimo_sch_nusers_%u = %u",
+		len += scnprintf(buf + len, buf_len - len,
+				   "ax_mu_mimo_sch_nusers_%u = %u\n",
 				   i, htt_stats_buf->ax_mu_mimo_sch_nusers[i]);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n11ax OFDMA SCH STATS:");
+	len += scnprintf(buf + len, buf_len - len, "\n11ax OFDMA SCH STATS:\n");
 
 	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_OFDMA_USER_STATS; i++)
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "ax_ofdma_sch_nusers_%u = %u",
+		len += scnprintf(buf + len, buf_len - len,
+				   "ax_ofdma_sch_nusers_%u = %u\n",
 				   i, htt_stats_buf->ax_ofdma_sch_nusers[i]);
 
 	if (len >= buf_len)
@@ -1658,36 +1666,36 @@ htt_print_tx_pdev_mu_mimo_mpdu_stats_tlv
 
 	if (htt_stats_buf->tx_sched_mode == HTT_STATS_TX_SCHED_MODE_MU_MIMO_AC) {
 		if (!htt_stats_buf->user_index)
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
+			len += scnprintf(buf + len, buf_len - len,
 					   "HTT_TX_PDEV_MU_MIMO_AC_MPDU_STATS:\n");
 
 		if (htt_stats_buf->user_index <
 		    HTT_TX_PDEV_STATS_NUM_AC_MUMIMO_USER_STATS) {
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ac_mu_mimo_mpdus_queued_usr_%u = %u",
+			len += scnprintf(buf + len, buf_len - len,
+					   "ac_mu_mimo_mpdus_queued_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_queued_usr);
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ac_mu_mimo_mpdus_tried_usr_%u = %u",
+			len += scnprintf(buf + len, buf_len - len,
+					   "ac_mu_mimo_mpdus_tried_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_tried_usr);
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ac_mu_mimo_mpdus_failed_usr_%u = %u",
+			len += scnprintf(buf + len, buf_len - len,
+					   "ac_mu_mimo_mpdus_failed_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_failed_usr);
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ac_mu_mimo_mpdus_requeued_usr_%u = %u",
+			len += scnprintf(buf + len, buf_len - len,
+					   "ac_mu_mimo_mpdus_requeued_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_requeued_usr);
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ac_mu_mimo_err_no_ba_usr_%u = %u",
+			len += scnprintf(buf + len, buf_len - len,
+					   "ac_mu_mimo_err_no_ba_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->err_no_ba_usr);
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ac_mu_mimo_mpdu_underrun_usr_%u = %u",
+			len += scnprintf(buf + len, buf_len - len,
+					   "ac_mu_mimo_mpdu_underrun_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdu_underrun_usr);
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
+			len += scnprintf(buf + len, buf_len - len,
 					   "ac_mu_mimo_ampdu_underrun_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->ampdu_underrun_usr);
@@ -1696,36 +1704,36 @@ htt_print_tx_pdev_mu_mimo_mpdu_stats_tlv
 
 	if (htt_stats_buf->tx_sched_mode == HTT_STATS_TX_SCHED_MODE_MU_MIMO_AX) {
 		if (!htt_stats_buf->user_index)
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
+			len += scnprintf(buf + len, buf_len - len,
 					   "HTT_TX_PDEV_MU_MIMO_AX_MPDU_STATS:\n");
 
 		if (htt_stats_buf->user_index <
 		    HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS) {
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_mimo_mpdus_queued_usr_%u = %u",
+			len += scnprintf(buf + len, buf_len - len,
+					   "ax_mu_mimo_mpdus_queued_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_queued_usr);
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_mimo_mpdus_tried_usr_%u = %u",
+			len += scnprintf(buf + len, buf_len - len,
+					   "ax_mu_mimo_mpdus_tried_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_tried_usr);
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_mimo_mpdus_failed_usr_%u = %u",
+			len += scnprintf(buf + len, buf_len - len,
+					   "ax_mu_mimo_mpdus_failed_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_failed_usr);
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_mimo_mpdus_requeued_usr_%u = %u",
+			len += scnprintf(buf + len, buf_len - len,
+					   "ax_mu_mimo_mpdus_requeued_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_requeued_usr);
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_mimo_err_no_ba_usr_%u = %u",
+			len += scnprintf(buf + len, buf_len - len,
+					   "ax_mu_mimo_err_no_ba_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->err_no_ba_usr);
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_mimo_mpdu_underrun_usr_%u = %u",
+			len += scnprintf(buf + len, buf_len - len,
+					   "ax_mu_mimo_mpdu_underrun_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdu_underrun_usr);
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
+			len += scnprintf(buf + len, buf_len - len,
 					   "ax_mu_mimo_ampdu_underrun_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->ampdu_underrun_usr);
@@ -1734,35 +1742,35 @@ htt_print_tx_pdev_mu_mimo_mpdu_stats_tlv
 
 	if (htt_stats_buf->tx_sched_mode == HTT_STATS_TX_SCHED_MODE_MU_OFDMA_AX) {
 		if (!htt_stats_buf->user_index)
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
+			len += scnprintf(buf + len, buf_len - len,
 					   "HTT_TX_PDEV_AX_MU_OFDMA_MPDU_STATS:\n");
 
 		if (htt_stats_buf->user_index < HTT_TX_PDEV_STATS_NUM_OFDMA_USER_STATS) {
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_ofdma_mpdus_queued_usr_%u = %u",
+			len += scnprintf(buf + len, buf_len - len,
+					   "ax_mu_ofdma_mpdus_queued_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_queued_usr);
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_ofdma_mpdus_tried_usr_%u = %u",
+			len += scnprintf(buf + len, buf_len - len,
+					   "ax_mu_ofdma_mpdus_tried_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_tried_usr);
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_ofdma_mpdus_failed_usr_%u = %u",
+			len += scnprintf(buf + len, buf_len - len,
+					   "ax_mu_ofdma_mpdus_failed_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_failed_usr);
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_ofdma_mpdus_requeued_usr_%u = %u",
+			len += scnprintf(buf + len, buf_len - len,
+					   "ax_mu_ofdma_mpdus_requeued_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdus_requeued_usr);
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_ofdma_err_no_ba_usr_%u = %u",
+			len += scnprintf(buf + len, buf_len - len,
+					   "ax_mu_ofdma_err_no_ba_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->err_no_ba_usr);
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
-					   "ax_mu_ofdma_mpdu_underrun_usr_%u = %u",
+			len += scnprintf(buf + len, buf_len - len,
+					   "ax_mu_ofdma_mpdu_underrun_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->mpdu_underrun_usr);
-			len += HTT_DBG_OUT(buf + len, buf_len - len,
+			len += scnprintf(buf + len, buf_len - len,
 					   "ax_mu_ofdma_ampdu_underrun_usr_%u = %u\n",
 					   htt_stats_buf->user_index,
 					   htt_stats_buf->ampdu_underrun_usr);
@@ -1789,7 +1797,7 @@ htt_print_sched_txq_cmd_posted_tlv_v(con
 	char sched_cmd_posted[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elements = min_t(u16, (tag_len >> 2), HTT_TX_PDEV_SCHED_TX_MODE_MAX);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SCHED_TXQ_CMD_POSTED_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len, "HTT_SCHED_TXQ_CMD_POSTED_TLV_V:\n");
 
 	ARRAY_TO_STRING(sched_cmd_posted, htt_stats_buf->sched_cmd_posted,
 			num_elements);
@@ -1816,7 +1824,7 @@ htt_print_sched_txq_cmd_reaped_tlv_v(con
 	char sched_cmd_reaped[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elements = min_t(u16, (tag_len >> 2), HTT_TX_PDEV_SCHED_TX_MODE_MAX);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SCHED_TXQ_CMD_REAPED_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len, "HTT_SCHED_TXQ_CMD_REAPED_TLV_V:\n");
 
 	ARRAY_TO_STRING(sched_cmd_reaped, htt_stats_buf->sched_cmd_reaped,
 			num_elements);
@@ -1845,8 +1853,8 @@ htt_print_sched_txq_sched_order_su_tlv_v
 	u32 sched_order_su_num_entries =
 		min_t(u32, (tag_len >> 2), HTT_TX_PDEV_NUM_SCHED_ORDER_LOG);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_SCHED_TXQ_SCHED_ORDER_SU_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_SCHED_TXQ_SCHED_ORDER_SU_TLV_V:\n");
 
 	ARRAY_TO_STRING(sched_order_su, htt_stats_buf->sched_order_su,
 			sched_order_su_num_entries);
@@ -1874,8 +1882,8 @@ htt_print_sched_txq_sched_ineligibility_
 	/* each entry is u32, i.e. 4 bytes */
 	u32 sched_ineligibility_num_entries = tag_len >> 2;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_SCHED_TXQ_SCHED_INELIGIBILITY_V:");
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_SCHED_TXQ_SCHED_INELIGIBILITY_V:\n");
 
 	ARRAY_TO_STRING(sched_ineligibility, htt_stats_buf->sched_ineligibility,
 			sched_ineligibility_num_entries);
@@ -1898,54 +1906,56 @@ htt_print_tx_pdev_stats_sched_per_txq_tl
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__txq_id__word);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_PDEV_STATS_SCHED_PER_TXQ_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
-			   htt_stats_buf->mac_id__txq_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "txq_id = %u",
-			   (htt_stats_buf->mac_id__txq_id__word & 0xFF00) >> 8);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_policy = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_TX_PDEV_STATS_SCHED_PER_TXQ_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			 u32_get_bits(mac_id_word,
+				      HTT_TX_PDEV_STATS_SCHED_PER_TXQ_MAC_ID));
+	len += scnprintf(buf + len, buf_len - len, "txq_id = %u\n",
+			 u32_get_bits(mac_id_word, HTT_TX_PDEV_STATS_SCHED_PER_TXQ_ID));
+	len += scnprintf(buf + len, buf_len - len, "sched_policy = %u\n",
 			   htt_stats_buf->sched_policy);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "last_sched_cmd_posted_timestamp = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "last_sched_cmd_posted_timestamp = %u\n",
 			   htt_stats_buf->last_sched_cmd_posted_timestamp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "last_sched_cmd_compl_timestamp = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "last_sched_cmd_compl_timestamp = %u\n",
 			   htt_stats_buf->last_sched_cmd_compl_timestamp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_2_tac_lwm_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "sched_2_tac_lwm_count = %u\n",
 			   htt_stats_buf->sched_2_tac_lwm_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_2_tac_ring_full = %u",
+	len += scnprintf(buf + len, buf_len - len, "sched_2_tac_ring_full = %u\n",
 			   htt_stats_buf->sched_2_tac_ring_full);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_cmd_post_failure = %u",
+	len += scnprintf(buf + len, buf_len - len, "sched_cmd_post_failure = %u\n",
 			   htt_stats_buf->sched_cmd_post_failure);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_active_tids = %u",
+	len += scnprintf(buf + len, buf_len - len, "num_active_tids = %u\n",
 			   htt_stats_buf->num_active_tids);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_ps_schedules = %u",
+	len += scnprintf(buf + len, buf_len - len, "num_ps_schedules = %u\n",
 			   htt_stats_buf->num_ps_schedules);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_cmds_pending = %u",
+	len += scnprintf(buf + len, buf_len - len, "sched_cmds_pending = %u\n",
 			   htt_stats_buf->sched_cmds_pending);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_tid_register = %u",
+	len += scnprintf(buf + len, buf_len - len, "num_tid_register = %u\n",
 			   htt_stats_buf->num_tid_register);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_tid_unregister = %u",
+	len += scnprintf(buf + len, buf_len - len, "num_tid_unregister = %u\n",
 			   htt_stats_buf->num_tid_unregister);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_qstats_queried = %u",
+	len += scnprintf(buf + len, buf_len - len, "num_qstats_queried = %u\n",
 			   htt_stats_buf->num_qstats_queried);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qstats_update_pending = %u",
+	len += scnprintf(buf + len, buf_len - len, "qstats_update_pending = %u\n",
 			   htt_stats_buf->qstats_update_pending);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_qstats_query_timestamp = %u",
+	len += scnprintf(buf + len, buf_len - len, "last_qstats_query_timestamp = %u\n",
 			   htt_stats_buf->last_qstats_query_timestamp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_tqm_cmdq_full = %u",
+	len += scnprintf(buf + len, buf_len - len, "num_tqm_cmdq_full = %u\n",
 			   htt_stats_buf->num_tqm_cmdq_full);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_de_sched_algo_trigger = %u",
+	len += scnprintf(buf + len, buf_len - len, "num_de_sched_algo_trigger = %u\n",
 			   htt_stats_buf->num_de_sched_algo_trigger);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_rt_sched_algo_trigger = %u",
+	len += scnprintf(buf + len, buf_len - len, "num_rt_sched_algo_trigger = %u\n",
 			   htt_stats_buf->num_rt_sched_algo_trigger);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_tqm_sched_algo_trigger = %u",
+	len += scnprintf(buf + len, buf_len - len, "num_tqm_sched_algo_trigger = %u\n",
 			   htt_stats_buf->num_tqm_sched_algo_trigger);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "notify_sched = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "notify_sched = %u\n",
 			   htt_stats_buf->notify_sched);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "dur_based_sendn_term = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "dur_based_sendn_term = %u\n",
 			   htt_stats_buf->dur_based_sendn_term);
 
 	if (len >= buf_len)
@@ -1963,11 +1973,12 @@ static inline void htt_print_stats_tx_sc
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__word);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_STATS_TX_SCHED_CMN_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
-			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "current_timestamp = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "HTT_STATS_TX_SCHED_CMN_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+	len += scnprintf(buf + len, buf_len - len, "current_timestamp = %u\n",
 			   htt_stats_buf->current_timestamp);
 
 	if (len >= buf_len)
@@ -1991,7 +2002,7 @@ htt_print_tx_tqm_gen_mpdu_stats_tlv_v(co
 	u16 num_elements = min_t(u16, (tag_len >> 2),
 				 HTT_TX_TQM_MAX_LIST_MPDU_END_REASON);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TQM_GEN_MPDU_STATS_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_TQM_GEN_MPDU_STATS_TLV_V:\n");
 
 	ARRAY_TO_STRING(gen_mpdu_end_reason, htt_stats_buf->gen_mpdu_end_reason,
 			num_elements);
@@ -2018,8 +2029,8 @@ htt_print_tx_tqm_list_mpdu_stats_tlv_v(c
 	char list_mpdu_end_reason[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_TX_TQM_MAX_LIST_MPDU_END_REASON);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_TQM_LIST_MPDU_STATS_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_TX_TQM_LIST_MPDU_STATS_TLV_V:\n");
 
 	ARRAY_TO_STRING(list_mpdu_end_reason, htt_stats_buf->list_mpdu_end_reason,
 			num_elems);
@@ -2046,7 +2057,7 @@ htt_print_tx_tqm_list_mpdu_cnt_tlv_v(con
 	u16 num_elems = min_t(u16, (tag_len >> 2),
 			      HTT_TX_TQM_MAX_LIST_MPDU_CNT_HISTOGRAM_BINS);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TQM_LIST_MPDU_CNT_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_TQM_LIST_MPDU_CNT_TLV_V:\n");
 
 	ARRAY_TO_STRING(list_mpdu_cnt_hist, htt_stats_buf->list_mpdu_cnt_hist,
 			num_elems);
@@ -2070,68 +2081,68 @@ htt_print_tx_tqm_pdev_stats_tlv_v(const
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TQM_PDEV_STATS_TLV_V:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "msdu_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_TQM_PDEV_STATS_TLV_V:\n");
+	len += scnprintf(buf + len, buf_len - len, "msdu_count = %u\n",
 			   htt_stats_buf->msdu_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdu_count = %u\n",
 			   htt_stats_buf->mpdu_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_msdu = %u",
+	len += scnprintf(buf + len, buf_len - len, "remove_msdu = %u\n",
 			   htt_stats_buf->remove_msdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_mpdu = %u",
+	len += scnprintf(buf + len, buf_len - len, "remove_mpdu = %u\n",
 			   htt_stats_buf->remove_mpdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_msdu_ttl = %u",
+	len += scnprintf(buf + len, buf_len - len, "remove_msdu_ttl = %u\n",
 			   htt_stats_buf->remove_msdu_ttl);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "send_bar = %u",
+	len += scnprintf(buf + len, buf_len - len, "send_bar = %u\n",
 			   htt_stats_buf->send_bar);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "bar_sync = %u",
+	len += scnprintf(buf + len, buf_len - len, "bar_sync = %u\n",
 			   htt_stats_buf->bar_sync);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "notify_mpdu = %u",
+	len += scnprintf(buf + len, buf_len - len, "notify_mpdu = %u\n",
 			   htt_stats_buf->notify_mpdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sync_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "sync_cmd = %u\n",
 			   htt_stats_buf->sync_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "write_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "write_cmd = %u\n",
 			   htt_stats_buf->write_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_trigger = %u",
+	len += scnprintf(buf + len, buf_len - len, "hwsch_trigger = %u\n",
 			   htt_stats_buf->hwsch_trigger);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ack_tlv_proc = %u",
+	len += scnprintf(buf + len, buf_len - len, "ack_tlv_proc = %u\n",
 			   htt_stats_buf->ack_tlv_proc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "gen_mpdu_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "gen_mpdu_cmd = %u\n",
 			   htt_stats_buf->gen_mpdu_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "gen_list_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "gen_list_cmd = %u\n",
 			   htt_stats_buf->gen_list_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_mpdu_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "remove_mpdu_cmd = %u\n",
 			   htt_stats_buf->remove_mpdu_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_mpdu_tried_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "remove_mpdu_tried_cmd = %u\n",
 			   htt_stats_buf->remove_mpdu_tried_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_queue_stats_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdu_queue_stats_cmd = %u\n",
 			   htt_stats_buf->mpdu_queue_stats_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_head_info_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdu_head_info_cmd = %u\n",
 			   htt_stats_buf->mpdu_head_info_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "msdu_flow_stats_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "msdu_flow_stats_cmd = %u\n",
 			   htt_stats_buf->msdu_flow_stats_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_msdu_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "remove_msdu_cmd = %u\n",
 			   htt_stats_buf->remove_msdu_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_msdu_ttl_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "remove_msdu_ttl_cmd = %u\n",
 			   htt_stats_buf->remove_msdu_ttl_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "flush_cache_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "flush_cache_cmd = %u\n",
 			   htt_stats_buf->flush_cache_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "update_mpduq_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "update_mpduq_cmd = %u\n",
 			   htt_stats_buf->update_mpduq_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "enqueue = %u",
+	len += scnprintf(buf + len, buf_len - len, "enqueue = %u\n",
 			   htt_stats_buf->enqueue);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "enqueue_notify = %u",
+	len += scnprintf(buf + len, buf_len - len, "enqueue_notify = %u\n",
 			   htt_stats_buf->enqueue_notify);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "notify_mpdu_at_head = %u",
+	len += scnprintf(buf + len, buf_len - len, "notify_mpdu_at_head = %u\n",
 			   htt_stats_buf->notify_mpdu_at_head);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "notify_mpdu_state_valid = %u",
+	len += scnprintf(buf + len, buf_len - len, "notify_mpdu_state_valid = %u\n",
 			   htt_stats_buf->notify_mpdu_state_valid);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_udp_notify1 = %u",
+	len += scnprintf(buf + len, buf_len - len, "sched_udp_notify1 = %u\n",
 			   htt_stats_buf->sched_udp_notify1);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_udp_notify2 = %u",
+	len += scnprintf(buf + len, buf_len - len, "sched_udp_notify2 = %u\n",
 			   htt_stats_buf->sched_udp_notify2);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_nonudp_notify1 = %u",
+	len += scnprintf(buf + len, buf_len - len, "sched_nonudp_notify1 = %u\n",
 			   htt_stats_buf->sched_nonudp_notify1);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sched_nonudp_notify2 = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "sched_nonudp_notify2 = %u\n",
 			   htt_stats_buf->sched_nonudp_notify2);
 
 	if (len >= buf_len)
@@ -2149,23 +2160,24 @@ static inline void htt_print_tx_tqm_cmn_
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__word);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TQM_CMN_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
-			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "max_cmdq_id = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_TQM_CMN_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+	len += scnprintf(buf + len, buf_len - len, "max_cmdq_id = %u\n",
 			   htt_stats_buf->max_cmdq_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "list_mpdu_cnt_hist_intvl = %u",
+	len += scnprintf(buf + len, buf_len - len, "list_mpdu_cnt_hist_intvl = %u\n",
 			   htt_stats_buf->list_mpdu_cnt_hist_intvl);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "add_msdu = %u",
+	len += scnprintf(buf + len, buf_len - len, "add_msdu = %u\n",
 			   htt_stats_buf->add_msdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "q_empty = %u",
+	len += scnprintf(buf + len, buf_len - len, "q_empty = %u\n",
 			   htt_stats_buf->q_empty);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "q_not_empty = %u",
+	len += scnprintf(buf + len, buf_len - len, "q_not_empty = %u\n",
 			   htt_stats_buf->q_not_empty);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "drop_notification = %u",
+	len += scnprintf(buf + len, buf_len - len, "drop_notification = %u\n",
 			   htt_stats_buf->drop_notification);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "desc_threshold = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "desc_threshold = %u\n",
 			   htt_stats_buf->desc_threshold);
 
 	if (len >= buf_len)
@@ -2184,12 +2196,12 @@ static inline void htt_print_tx_tqm_erro
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TQM_ERROR_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "q_empty_failure = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_TQM_ERROR_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "q_empty_failure = %u\n",
 			   htt_stats_buf->q_empty_failure);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "q_not_empty_failure = %u",
+	len += scnprintf(buf + len, buf_len - len, "q_not_empty_failure = %u\n",
 			   htt_stats_buf->q_not_empty_failure);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "add_msdu_failure = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "add_msdu_failure = %u\n",
 			   htt_stats_buf->add_msdu_failure);
 
 	if (len >= buf_len)
@@ -2207,33 +2219,34 @@ static inline void htt_print_tx_tqm_cmdq
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__cmdq_id__word);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_TQM_CMDQ_STATUS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
-			   htt_stats_buf->mac_id__cmdq_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "cmdq_id = %u\n",
-			   (htt_stats_buf->mac_id__cmdq_id__word & 0xFF00) >> 8);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sync_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_TQM_CMDQ_STATUS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			 u32_get_bits(mac_id_word, HTT_TX_TQM_CMDQ_STATUS_MAC_ID));
+	len += scnprintf(buf + len, buf_len - len, "cmdq_id = %u\n\n",
+			 u32_get_bits(mac_id_word, HTT_TX_TQM_CMDQ_STATUS_CMDQ_ID));
+	len += scnprintf(buf + len, buf_len - len, "sync_cmd = %u\n",
 			   htt_stats_buf->sync_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "write_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "write_cmd = %u\n",
 			   htt_stats_buf->write_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "gen_mpdu_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "gen_mpdu_cmd = %u\n",
 			   htt_stats_buf->gen_mpdu_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_queue_stats_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdu_queue_stats_cmd = %u\n",
 			   htt_stats_buf->mpdu_queue_stats_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_head_info_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdu_head_info_cmd = %u\n",
 			   htt_stats_buf->mpdu_head_info_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "msdu_flow_stats_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "msdu_flow_stats_cmd = %u\n",
 			   htt_stats_buf->msdu_flow_stats_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_mpdu_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "remove_mpdu_cmd = %u\n",
 			   htt_stats_buf->remove_mpdu_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "remove_msdu_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "remove_msdu_cmd = %u\n",
 			   htt_stats_buf->remove_msdu_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "flush_cache_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "flush_cache_cmd = %u\n",
 			   htt_stats_buf->flush_cache_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "update_mpduq_cmd = %u",
+	len += scnprintf(buf + len, buf_len - len, "update_mpduq_cmd = %u\n",
 			   htt_stats_buf->update_mpduq_cmd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "update_msduq_cmd = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "update_msduq_cmd = %u\n",
 			   htt_stats_buf->update_msduq_cmd);
 
 	if (len >= buf_len)
@@ -2253,19 +2266,19 @@ htt_print_tx_de_eapol_packets_stats_tlv(
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_DE_EAPOL_PACKETS_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "m1_packets = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_TX_DE_EAPOL_PACKETS_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "m1_packets = %u\n",
 			   htt_stats_buf->m1_packets);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "m2_packets = %u",
+	len += scnprintf(buf + len, buf_len - len, "m2_packets = %u\n",
 			   htt_stats_buf->m2_packets);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "m3_packets = %u",
+	len += scnprintf(buf + len, buf_len - len, "m3_packets = %u\n",
 			   htt_stats_buf->m3_packets);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "m4_packets = %u",
+	len += scnprintf(buf + len, buf_len - len, "m4_packets = %u\n",
 			   htt_stats_buf->m4_packets);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "g1_packets = %u",
+	len += scnprintf(buf + len, buf_len - len, "g1_packets = %u\n",
 			   htt_stats_buf->g1_packets);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "g2_packets = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "g2_packets = %u\n",
 			   htt_stats_buf->g2_packets);
 
 	if (len >= buf_len)
@@ -2285,33 +2298,33 @@ htt_print_tx_de_classify_failed_stats_tl
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_DE_CLASSIFY_FAILED_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ap_bss_peer_not_found = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_TX_DE_CLASSIFY_FAILED_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "ap_bss_peer_not_found = %u\n",
 			   htt_stats_buf->ap_bss_peer_not_found);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ap_bcast_mcast_no_peer = %u",
+	len += scnprintf(buf + len, buf_len - len, "ap_bcast_mcast_no_peer = %u\n",
 			   htt_stats_buf->ap_bcast_mcast_no_peer);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sta_delete_in_progress = %u",
+	len += scnprintf(buf + len, buf_len - len, "sta_delete_in_progress = %u\n",
 			   htt_stats_buf->sta_delete_in_progress);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ibss_no_bss_peer = %u",
+	len += scnprintf(buf + len, buf_len - len, "ibss_no_bss_peer = %u\n",
 			   htt_stats_buf->ibss_no_bss_peer);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "invalid_vdev_type = %u",
+	len += scnprintf(buf + len, buf_len - len, "invalid_vdev_type = %u\n",
 			   htt_stats_buf->invalid_vdev_type);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "invalid_ast_peer_entry = %u",
+	len += scnprintf(buf + len, buf_len - len, "invalid_ast_peer_entry = %u\n",
 			   htt_stats_buf->invalid_ast_peer_entry);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "peer_entry_invalid = %u",
+	len += scnprintf(buf + len, buf_len - len, "peer_entry_invalid = %u\n",
 			   htt_stats_buf->peer_entry_invalid);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ethertype_not_ip = %u",
+	len += scnprintf(buf + len, buf_len - len, "ethertype_not_ip = %u\n",
 			   htt_stats_buf->ethertype_not_ip);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "eapol_lookup_failed = %u",
+	len += scnprintf(buf + len, buf_len - len, "eapol_lookup_failed = %u\n",
 			   htt_stats_buf->eapol_lookup_failed);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qpeer_not_allow_data = %u",
+	len += scnprintf(buf + len, buf_len - len, "qpeer_not_allow_data = %u\n",
 			   htt_stats_buf->qpeer_not_allow_data);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_tid_override = %u",
+	len += scnprintf(buf + len, buf_len - len, "fse_tid_override = %u\n",
 			   htt_stats_buf->fse_tid_override);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ipv6_jumbogram_zero_length = %u",
+	len += scnprintf(buf + len, buf_len - len, "ipv6_jumbogram_zero_length = %u\n",
 			   htt_stats_buf->ipv6_jumbogram_zero_length);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "qos_to_non_qos_in_prog = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "qos_to_non_qos_in_prog = %u\n",
 			   htt_stats_buf->qos_to_non_qos_in_prog);
 
 	if (len >= buf_len)
@@ -2331,72 +2344,72 @@ htt_print_tx_de_classify_stats_tlv(const
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_DE_CLASSIFY_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "arp_packets = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_DE_CLASSIFY_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "arp_packets = %u\n",
 			   htt_stats_buf->arp_packets);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "igmp_packets = %u",
+	len += scnprintf(buf + len, buf_len - len, "igmp_packets = %u\n",
 			   htt_stats_buf->igmp_packets);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "dhcp_packets = %u",
+	len += scnprintf(buf + len, buf_len - len, "dhcp_packets = %u\n",
 			   htt_stats_buf->dhcp_packets);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "host_inspected = %u",
+	len += scnprintf(buf + len, buf_len - len, "host_inspected = %u\n",
 			   htt_stats_buf->host_inspected);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_included = %u",
+	len += scnprintf(buf + len, buf_len - len, "htt_included = %u\n",
 			   htt_stats_buf->htt_included);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_mcs = %u",
+	len += scnprintf(buf + len, buf_len - len, "htt_valid_mcs = %u\n",
 			   htt_stats_buf->htt_valid_mcs);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_nss = %u",
+	len += scnprintf(buf + len, buf_len - len, "htt_valid_nss = %u\n",
 			   htt_stats_buf->htt_valid_nss);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_preamble_type = %u",
+	len += scnprintf(buf + len, buf_len - len, "htt_valid_preamble_type = %u\n",
 			   htt_stats_buf->htt_valid_preamble_type);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_chainmask = %u",
+	len += scnprintf(buf + len, buf_len - len, "htt_valid_chainmask = %u\n",
 			   htt_stats_buf->htt_valid_chainmask);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_guard_interval = %u",
+	len += scnprintf(buf + len, buf_len - len, "htt_valid_guard_interval = %u\n",
 			   htt_stats_buf->htt_valid_guard_interval);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_retries = %u",
+	len += scnprintf(buf + len, buf_len - len, "htt_valid_retries = %u\n",
 			   htt_stats_buf->htt_valid_retries);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_bw_info = %u",
+	len += scnprintf(buf + len, buf_len - len, "htt_valid_bw_info = %u\n",
 			   htt_stats_buf->htt_valid_bw_info);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_power = %u",
+	len += scnprintf(buf + len, buf_len - len, "htt_valid_power = %u\n",
 			   htt_stats_buf->htt_valid_power);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_key_flags = 0x%x",
+	len += scnprintf(buf + len, buf_len - len, "htt_valid_key_flags = 0x%x\n",
 			   htt_stats_buf->htt_valid_key_flags);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_valid_no_encryption = %u",
+	len += scnprintf(buf + len, buf_len - len, "htt_valid_no_encryption = %u\n",
 			   htt_stats_buf->htt_valid_no_encryption);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_entry_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "fse_entry_count = %u\n",
 			   htt_stats_buf->fse_entry_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_priority_be = %u",
+	len += scnprintf(buf + len, buf_len - len, "fse_priority_be = %u\n",
 			   htt_stats_buf->fse_priority_be);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_priority_high = %u",
+	len += scnprintf(buf + len, buf_len - len, "fse_priority_high = %u\n",
 			   htt_stats_buf->fse_priority_high);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_priority_low = %u",
+	len += scnprintf(buf + len, buf_len - len, "fse_priority_low = %u\n",
 			   htt_stats_buf->fse_priority_low);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_traffic_ptrn_be = %u",
+	len += scnprintf(buf + len, buf_len - len, "fse_traffic_ptrn_be = %u\n",
 			   htt_stats_buf->fse_traffic_ptrn_be);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_traffic_ptrn_over_sub = %u",
+	len += scnprintf(buf + len, buf_len - len, "fse_traffic_ptrn_over_sub = %u\n",
 			   htt_stats_buf->fse_traffic_ptrn_over_sub);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_traffic_ptrn_bursty = %u",
+	len += scnprintf(buf + len, buf_len - len, "fse_traffic_ptrn_bursty = %u\n",
 			   htt_stats_buf->fse_traffic_ptrn_bursty);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_traffic_ptrn_interactive = %u",
+	len += scnprintf(buf + len, buf_len - len, "fse_traffic_ptrn_interactive = %u\n",
 			   htt_stats_buf->fse_traffic_ptrn_interactive);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_traffic_ptrn_periodic = %u",
+	len += scnprintf(buf + len, buf_len - len, "fse_traffic_ptrn_periodic = %u\n",
 			   htt_stats_buf->fse_traffic_ptrn_periodic);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_hwqueue_alloc = %u",
+	len += scnprintf(buf + len, buf_len - len, "fse_hwqueue_alloc = %u\n",
 			   htt_stats_buf->fse_hwqueue_alloc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_hwqueue_created = %u",
+	len += scnprintf(buf + len, buf_len - len, "fse_hwqueue_created = %u\n",
 			   htt_stats_buf->fse_hwqueue_created);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_hwqueue_send_to_host = %u",
+	len += scnprintf(buf + len, buf_len - len, "fse_hwqueue_send_to_host = %u\n",
 			   htt_stats_buf->fse_hwqueue_send_to_host);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mcast_entry = %u",
+	len += scnprintf(buf + len, buf_len - len, "mcast_entry = %u\n",
 			   htt_stats_buf->mcast_entry);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "bcast_entry = %u",
+	len += scnprintf(buf + len, buf_len - len, "bcast_entry = %u\n",
 			   htt_stats_buf->bcast_entry);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_update_peer_cache = %u",
+	len += scnprintf(buf + len, buf_len - len, "htt_update_peer_cache = %u\n",
 			   htt_stats_buf->htt_update_peer_cache);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "htt_learning_frame = %u",
+	len += scnprintf(buf + len, buf_len - len, "htt_learning_frame = %u\n",
 			   htt_stats_buf->htt_learning_frame);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fse_invalid_peer = %u",
+	len += scnprintf(buf + len, buf_len - len, "fse_invalid_peer = %u\n",
 			   htt_stats_buf->fse_invalid_peer);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mec_notify = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "mec_notify = %u\n",
 			   htt_stats_buf->mec_notify);
 
 	if (len >= buf_len)
@@ -2416,23 +2429,23 @@ htt_print_tx_de_classify_status_stats_tl
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_DE_CLASSIFY_STATUS_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "eok = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_TX_DE_CLASSIFY_STATUS_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "eok = %u\n",
 			   htt_stats_buf->eok);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "classify_done = %u",
+	len += scnprintf(buf + len, buf_len - len, "classify_done = %u\n",
 			   htt_stats_buf->classify_done);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "lookup_failed = %u",
+	len += scnprintf(buf + len, buf_len - len, "lookup_failed = %u\n",
 			   htt_stats_buf->lookup_failed);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "send_host_dhcp = %u",
+	len += scnprintf(buf + len, buf_len - len, "send_host_dhcp = %u\n",
 			   htt_stats_buf->send_host_dhcp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "send_host_mcast = %u",
+	len += scnprintf(buf + len, buf_len - len, "send_host_mcast = %u\n",
 			   htt_stats_buf->send_host_mcast);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "send_host_unknown_dest = %u",
+	len += scnprintf(buf + len, buf_len - len, "send_host_unknown_dest = %u\n",
 			   htt_stats_buf->send_host_unknown_dest);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "send_host = %u",
+	len += scnprintf(buf + len, buf_len - len, "send_host = %u\n",
 			   htt_stats_buf->send_host);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "status_invalid = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "status_invalid = %u\n",
 			   htt_stats_buf->status_invalid);
 
 	if (len >= buf_len)
@@ -2452,13 +2465,13 @@ htt_print_tx_de_enqueue_packets_stats_tl
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_DE_ENQUEUE_PACKETS_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "enqueued_pkts = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_TX_DE_ENQUEUE_PACKETS_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "enqueued_pkts = %u\n",
 			htt_stats_buf->enqueued_pkts);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "to_tqm = %u",
+	len += scnprintf(buf + len, buf_len - len, "to_tqm = %u\n",
 			htt_stats_buf->to_tqm);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "to_tqm_bypass = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "to_tqm_bypass = %u\n",
 			htt_stats_buf->to_tqm_bypass);
 
 	if (len >= buf_len)
@@ -2478,13 +2491,13 @@ htt_print_tx_de_enqueue_discard_stats_tl
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_DE_ENQUEUE_DISCARD_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "discarded_pkts = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_TX_DE_ENQUEUE_DISCARD_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "discarded_pkts = %u\n",
 			   htt_stats_buf->discarded_pkts);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_frames = %u",
+	len += scnprintf(buf + len, buf_len - len, "local_frames = %u\n",
 			   htt_stats_buf->local_frames);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "is_ext_msdu = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "is_ext_msdu = %u\n",
 			   htt_stats_buf->is_ext_msdu);
 
 	if (len >= buf_len)
@@ -2503,16 +2516,16 @@ static inline void htt_print_tx_de_compl
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_DE_COMPL_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tcl_dummy_frame = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_DE_COMPL_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "tcl_dummy_frame = %u\n",
 			   htt_stats_buf->tcl_dummy_frame);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tqm_dummy_frame = %u",
+	len += scnprintf(buf + len, buf_len - len, "tqm_dummy_frame = %u\n",
 			   htt_stats_buf->tqm_dummy_frame);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tqm_notify_frame = %u",
+	len += scnprintf(buf + len, buf_len - len, "tqm_notify_frame = %u\n",
 			   htt_stats_buf->tqm_notify_frame);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw2wbm_enq = %u",
+	len += scnprintf(buf + len, buf_len - len, "fw2wbm_enq = %u\n",
 			   htt_stats_buf->fw2wbm_enq);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tqm_bypass_frame = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "tqm_bypass_frame = %u\n",
 			   htt_stats_buf->tqm_bypass_frame);
 
 	if (len >= buf_len)
@@ -2566,21 +2579,22 @@ htt_print_tx_de_cmn_stats_tlv(const void
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__word);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_DE_CMN_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
-			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tcl2fw_entry_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_DE_CMN_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+	len += scnprintf(buf + len, buf_len - len, "tcl2fw_entry_count = %u\n",
 			   htt_stats_buf->tcl2fw_entry_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "not_to_fw = %u",
+	len += scnprintf(buf + len, buf_len - len, "not_to_fw = %u\n",
 			   htt_stats_buf->not_to_fw);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "invalid_pdev_vdev_peer = %u",
+	len += scnprintf(buf + len, buf_len - len, "invalid_pdev_vdev_peer = %u\n",
 			   htt_stats_buf->invalid_pdev_vdev_peer);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tcl_res_invalid_addrx = %u",
+	len += scnprintf(buf + len, buf_len - len, "tcl_res_invalid_addrx = %u\n",
 			   htt_stats_buf->tcl_res_invalid_addrx);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "wbm2fw_entry_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "wbm2fw_entry_count = %u\n",
 			   htt_stats_buf->wbm2fw_entry_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "invalid_pdev = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "invalid_pdev = %u\n",
 			   htt_stats_buf->invalid_pdev);
 
 	if (len >= buf_len)
@@ -2600,39 +2614,49 @@ static inline void htt_print_ring_if_sta
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 	char low_wm_hit_count[HTT_MAX_STRING_LEN] = {0};
 	char high_wm_hit_count[HTT_MAX_STRING_LEN] = {0};
+	u32 tail_idx = __le32_to_cpu(htt_stats_buf->num_elems__prefetch_tail_idx);
+	u32 head_idx = __le32_to_cpu(htt_stats_buf->head_idx__tail_idx);
+	u32 shadow_idx = __le32_to_cpu(htt_stats_buf->shadow_head_idx__shadow_tail_idx);
+	u32 thresh = __le32_to_cpu(htt_stats_buf->lwm_thresh__hwm_thresh);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RING_IF_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "base_addr = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_RING_IF_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "base_addr = %u\n",
 			   htt_stats_buf->base_addr);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "elem_size = %u",
+	len += scnprintf(buf + len, buf_len - len, "elem_size = %u\n",
 			   htt_stats_buf->elem_size);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_elems = %u",
-			   htt_stats_buf->num_elems__prefetch_tail_idx & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "prefetch_tail_idx = %u",
-			   (htt_stats_buf->num_elems__prefetch_tail_idx &
-			   0xFFFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "head_idx = %u",
-			   htt_stats_buf->head_idx__tail_idx & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tail_idx = %u",
-			   (htt_stats_buf->head_idx__tail_idx & 0xFFFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "shadow_head_idx = %u",
-			   htt_stats_buf->shadow_head_idx__shadow_tail_idx & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "shadow_tail_idx = %u",
-			   (htt_stats_buf->shadow_head_idx__shadow_tail_idx &
-			   0xFFFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_tail_incr = %u",
+	len += scnprintf(buf + len, buf_len - len, "num_elems = %lu\n",
+			 (unsigned long)u32_get_bits(tail_idx,
+						     HTT_RING_IF_STATS_NUM_ELEMS));
+	len += scnprintf(buf + len, buf_len - len, "prefetch_tail_idx = %lu\n",
+			 (unsigned long)u32_get_bits(tail_idx,
+						HTT_RING_IF_STATS_PREFETCH_TAIL_INDEX));
+	len += scnprintf(buf + len, buf_len - len, "head_idx = %lu\n",
+			 (unsigned long)u32_get_bits(head_idx,
+						     HTT_RING_IF_STATS_HEAD_IDX));
+	len += scnprintf(buf + len, buf_len - len, "tail_idx = %lu\n",
+			 (unsigned long)u32_get_bits(head_idx,
+						     HTT_RING_IF_STATS_TAIL_IDX));
+	len += scnprintf(buf + len, buf_len - len, "shadow_head_idx = %lu\n",
+			 (unsigned long)u32_get_bits(shadow_idx,
+						HTT_RING_IF_STATS_SHADOW_HEAD_IDX));
+	len += scnprintf(buf + len, buf_len - len, "shadow_tail_idx = %lu\n",
+			 (unsigned long)u32_get_bits(shadow_idx,
+						HTT_RING_IF_STATS_SHADOW_TAIL_IDX));
+	len += scnprintf(buf + len, buf_len - len, "num_tail_incr = %u\n",
 			   htt_stats_buf->num_tail_incr);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "lwm_thresh = %u",
-			   htt_stats_buf->lwm_thresh__hwm_thresh & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwm_thresh = %u",
-			   (htt_stats_buf->lwm_thresh__hwm_thresh & 0xFFFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "overrun_hit_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "lwm_thresh = %lu\n",
+			 (unsigned long)u32_get_bits(thresh,
+						HTT_RING_IF_STATS_LWM_THRESH));
+	len += scnprintf(buf + len, buf_len - len, "hwm_thresh = %lu\n",
+			 (unsigned long)u32_get_bits(thresh,
+						HTT_RING_IF_STATS_HWM_THRESH));
+	len += scnprintf(buf + len, buf_len - len, "overrun_hit_count = %u\n",
 			   htt_stats_buf->overrun_hit_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "underrun_hit_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "underrun_hit_count = %u\n",
 			   htt_stats_buf->underrun_hit_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "prod_blockwait_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "prod_blockwait_count = %u\n",
 			   htt_stats_buf->prod_blockwait_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "cons_blockwait_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "cons_blockwait_count = %u\n",
 			   htt_stats_buf->cons_blockwait_count);
 
 	ARRAY_TO_STRING(low_wm_hit_count, htt_stats_buf->low_wm_hit_count,
@@ -2660,11 +2684,12 @@ static inline void htt_print_ring_if_cmn
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__word);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RING_IF_CMN_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
-			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_records = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "HTT_RING_IF_CMN_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			 u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+	len += scnprintf(buf + len, buf_len - len, "num_records = %u\n",
 			   htt_stats_buf->num_records);
 
 	if (len >= buf_len)
@@ -2686,7 +2711,7 @@ static inline void htt_print_sfm_client_
 	char dwords_used_by_user_n[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = tag_len >> 2;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SFM_CLIENT_USER_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len, "HTT_SFM_CLIENT_USER_TLV_V:\n");
 
 	ARRAY_TO_STRING(dwords_used_by_user_n,
 			htt_stats_buf->dwords_used_by_user_n,
@@ -2710,20 +2735,20 @@ static inline void htt_print_sfm_client_
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SFM_CLIENT_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "client_id = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_SFM_CLIENT_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "client_id = %u\n",
 			   htt_stats_buf->client_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "buf_min = %u",
+	len += scnprintf(buf + len, buf_len - len, "buf_min = %u\n",
 			   htt_stats_buf->buf_min);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "buf_max = %u",
+	len += scnprintf(buf + len, buf_len - len, "buf_max = %u\n",
 			   htt_stats_buf->buf_max);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "buf_busy = %u",
+	len += scnprintf(buf + len, buf_len - len, "buf_busy = %u\n",
 			   htt_stats_buf->buf_busy);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "buf_alloc = %u",
+	len += scnprintf(buf + len, buf_len - len, "buf_alloc = %u\n",
 			   htt_stats_buf->buf_alloc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "buf_avail = %u",
+	len += scnprintf(buf + len, buf_len - len, "buf_avail = %u\n",
 			   htt_stats_buf->buf_avail);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_users = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "num_users = %u\n",
 			   htt_stats_buf->num_users);
 
 	if (len >= buf_len)
@@ -2741,17 +2766,18 @@ static inline void htt_print_sfm_cmn_tlv
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__word);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SFM_CMN_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
-			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "buf_total = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_SFM_CMN_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+	len += scnprintf(buf + len, buf_len - len, "buf_total = %u\n",
 			   htt_stats_buf->buf_total);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mem_empty = %u",
+	len += scnprintf(buf + len, buf_len - len, "mem_empty = %u\n",
 			   htt_stats_buf->mem_empty);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "deallocate_bufs = %u",
+	len += scnprintf(buf + len, buf_len - len, "deallocate_bufs = %u\n",
 			   htt_stats_buf->deallocate_bufs);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_records = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "num_records = %u\n",
 			   htt_stats_buf->num_records);
 
 	if (len >= buf_len)
@@ -2769,43 +2795,45 @@ static inline void htt_print_sring_stats
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
-
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SRING_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
-			   htt_stats_buf->mac_id__ring_id__arena__ep & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ring_id = %u",
-			   (htt_stats_buf->mac_id__ring_id__arena__ep & 0xFF00) >> 8);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "arena = %u",
-			   (htt_stats_buf->mac_id__ring_id__arena__ep & 0xFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ep = %u",
-			   (htt_stats_buf->mac_id__ring_id__arena__ep & 0x1000000) >> 24);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "base_addr_lsb = 0x%x",
+	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__ring_id__arena__ep);
+	u32 avail_words = __le32_to_cpu(htt_stats_buf->num_avail_words__num_valid_words);
+	u32 head_tail_ptr = __le32_to_cpu(htt_stats_buf->head_ptr__tail_ptr);
+	u32 sring_stat = __le32_to_cpu(htt_stats_buf->consumer_empty__producer_full);
+	u32 tail_ptr = __le32_to_cpu(htt_stats_buf->prefetch_count__internal_tail_ptr);
+
+	len += scnprintf(buf + len, buf_len - len, "HTT_SRING_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			 u32_get_bits(mac_id_word, HTT_SRING_STATS_MAC_ID));
+	len += scnprintf(buf + len, buf_len - len, "ring_id = %u\n",
+			 u32_get_bits(mac_id_word, HTT_SRING_STATS_RING_ID));
+	len += scnprintf(buf + len, buf_len - len, "arena = %u\n",
+			 u32_get_bits(mac_id_word, HTT_SRING_STATS_ARENA));
+	len += scnprintf(buf + len, buf_len - len, "ep = %u\n",
+			 u32_get_bits(mac_id_word, HTT_SRING_STATS_EP));
+	len += scnprintf(buf + len, buf_len - len, "base_addr_lsb = 0x%x\n",
 			   htt_stats_buf->base_addr_lsb);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "base_addr_msb = 0x%x",
+	len += scnprintf(buf + len, buf_len - len, "base_addr_msb = 0x%x\n",
 			   htt_stats_buf->base_addr_msb);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ring_size = %u",
+	len += scnprintf(buf + len, buf_len - len, "ring_size = %u\n",
 			   htt_stats_buf->ring_size);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "elem_size = %u",
+	len += scnprintf(buf + len, buf_len - len, "elem_size = %u\n",
 			   htt_stats_buf->elem_size);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_avail_words = %u",
-			   htt_stats_buf->num_avail_words__num_valid_words & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_valid_words = %u",
-			   (htt_stats_buf->num_avail_words__num_valid_words &
-			   0xFFFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "head_ptr = %u",
-			   htt_stats_buf->head_ptr__tail_ptr & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tail_ptr = %u",
-			   (htt_stats_buf->head_ptr__tail_ptr & 0xFFFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "consumer_empty = %u",
-			   htt_stats_buf->consumer_empty__producer_full & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "producer_full = %u",
-			   (htt_stats_buf->consumer_empty__producer_full &
-			   0xFFFF0000) >> 16);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "prefetch_count = %u",
-			   htt_stats_buf->prefetch_count__internal_tail_ptr & 0xFFFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "internal_tail_ptr = %u\n",
-			   (htt_stats_buf->prefetch_count__internal_tail_ptr &
-			   0xFFFF0000) >> 16);
+	len += scnprintf(buf + len, buf_len - len, "num_avail_words = %u\n",
+			 u32_get_bits(avail_words, HTT_SRING_STATS_NUM_AVAIL_WORDS));
+	len += scnprintf(buf + len, buf_len - len, "num_valid_words = %u\n",
+			 u32_get_bits(avail_words, HTT_SRING_STATS_NUM_VALID_WORDS));
+	len += scnprintf(buf + len, buf_len - len, "head_ptr = %u\n",
+			 u32_get_bits(head_tail_ptr, HTT_SRING_STATS_HEAD_PTR));
+	len += scnprintf(buf + len, buf_len - len, "tail_ptr = %u\n",
+			 u32_get_bits(head_tail_ptr, HTT_SRING_STATS_TAIL_PTR));
+	len += scnprintf(buf + len, buf_len - len, "consumer_empty = %u\n",
+			 u32_get_bits(sring_stat, HTT_SRING_STATS_CONSUMER_EMPTY));
+	len += scnprintf(buf + len, buf_len - len, "producer_full = %u\n",
+			 u32_get_bits(head_tail_ptr, HTT_SRING_STATS_PRODUCER_FULL));
+	len += scnprintf(buf + len, buf_len - len, "prefetch_count = %u\n",
+			 u32_get_bits(tail_ptr, HTT_SRING_STATS_PREFETCH_COUNT));
+	len += scnprintf(buf + len, buf_len - len, "internal_tail_ptr = %u\n\n",
+			 u32_get_bits(tail_ptr, HTT_SRING_STATS_INTERNAL_TAIL_PTR));
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -2823,8 +2851,8 @@ static inline void htt_print_sring_cmn_t
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_SRING_CMN_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_records = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "HTT_SRING_CMN_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "num_records = %u\n",
 			   htt_stats_buf->num_records);
 
 	if (len >= buf_len)
@@ -2846,6 +2874,7 @@ static inline void htt_print_tx_pdev_rat
 	char str_buf[HTT_MAX_STRING_LEN] = {0};
 	char *tx_gi[HTT_TX_PEER_STATS_NUM_GI_COUNTERS] = {NULL};
 	u32 tx_bw[HTT_TX_PDEV_STATS_NUM_BW_COUNTERS + 1] = { 0 };
+	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__word);
 
 	for (j = 0; j < HTT_TX_PEER_STATS_NUM_GI_COUNTERS; j++) {
 		tx_gi[j] = kmalloc(HTT_MAX_STRING_LEN, GFP_ATOMIC);
@@ -2853,34 +2882,34 @@ static inline void htt_print_tx_pdev_rat
 			goto fail;
 	}
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_TX_PDEV_RATE_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
-			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tx_ldpc = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_TX_PDEV_RATE_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+	len += scnprintf(buf + len, buf_len - len, "tx_ldpc = %u\n",
 			   htt_stats_buf->tx_ldpc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ac_mu_mimo_tx_ldpc = %u",
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_tx_ldpc = %u\n",
 			   htt_stats_buf->ac_mu_mimo_tx_ldpc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ax_mu_mimo_tx_ldpc = %u",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_tx_ldpc = %u\n",
 			   htt_stats_buf->ax_mu_mimo_tx_ldpc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ofdma_tx_ldpc = %u",
+	len += scnprintf(buf + len, buf_len - len, "ofdma_tx_ldpc = %u\n",
 			   htt_stats_buf->ofdma_tx_ldpc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rts_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "rts_cnt = %u\n",
 			   htt_stats_buf->rts_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rts_success = %u",
+	len += scnprintf(buf + len, buf_len - len, "rts_success = %u\n",
 			   htt_stats_buf->rts_success);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ack_rssi = %u",
+	len += scnprintf(buf + len, buf_len - len, "ack_rssi = %u\n",
 			   htt_stats_buf->ack_rssi);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "Legacy CCK Rates: 1 Mbps: %u, 2 Mbps: %u, 5.5 Mbps: %u, 11 Mbps: %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "Legacy CCK Rates: 1 Mbps: %u, 2 Mbps: %u, 5.5 Mbps: %u, 11 Mbps: %u\n",
 			   htt_stats_buf->tx_legacy_cck_rate[0],
 			   htt_stats_buf->tx_legacy_cck_rate[1],
 			   htt_stats_buf->tx_legacy_cck_rate[2],
 			   htt_stats_buf->tx_legacy_cck_rate[3]);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
+	len += scnprintf(buf + len, buf_len - len,
 			   "Legacy OFDM Rates: 6 Mbps: %u, 9 Mbps: %u, 12 Mbps: %u, 18 Mbps: %u\n"
-			   "                   24 Mbps: %u, 36 Mbps: %u, 48 Mbps: %u, 54 Mbps: %u",
+			   "                   24 Mbps: %u, 36 Mbps: %u, 48 Mbps: %u, 54 Mbps: %u\n",
 			   htt_stats_buf->tx_legacy_ofdm_rate[0],
 			   htt_stats_buf->tx_legacy_ofdm_rate[1],
 			   htt_stats_buf->tx_legacy_ofdm_rate[2],
@@ -3040,6 +3069,7 @@ static inline void htt_print_rx_pdev_rat
 	char *rx_gi[HTT_RX_PDEV_STATS_NUM_GI_COUNTERS] = {NULL};
 	char str_buf[HTT_MAX_STRING_LEN] = {0};
 	char *rx_pilot_evm_db[HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS] = {NULL};
+	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__word);
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++) {
 		rssi_chain[j] = kmalloc(HTT_MAX_STRING_LEN, GFP_ATOMIC);
@@ -3059,22 +3089,22 @@ static inline void htt_print_rx_pdev_rat
 			goto fail;
 	}
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_PDEV_RATE_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
-			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "nsts = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_RX_PDEV_RATE_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+	len += scnprintf(buf + len, buf_len - len, "nsts = %u\n",
 			   htt_stats_buf->nsts);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_ldpc = %u",
+	len += scnprintf(buf + len, buf_len - len, "rx_ldpc = %u\n",
 			   htt_stats_buf->rx_ldpc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rts_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "rts_cnt = %u\n",
 			   htt_stats_buf->rts_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rssi_mgmt = %u",
+	len += scnprintf(buf + len, buf_len - len, "rssi_mgmt = %u\n",
 			   htt_stats_buf->rssi_mgmt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rssi_data = %u",
+	len += scnprintf(buf + len, buf_len - len, "rssi_data = %u\n",
 			   htt_stats_buf->rssi_data);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rssi_comb = %u",
+	len += scnprintf(buf + len, buf_len - len, "rssi_comb = %u\n",
 			   htt_stats_buf->rssi_comb);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rssi_in_dbm = %d",
+	len += scnprintf(buf + len, buf_len - len, "rssi_in_dbm = %d\n",
 			   htt_stats_buf->rssi_in_dbm);
 
 	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
@@ -3104,29 +3134,29 @@ static inline void htt_print_rx_pdev_rat
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_evm_nss_count = %u",
 			htt_stats_buf->nss_count);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_evm_pilot_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "rx_evm_pilot_count = %u\n",
 			htt_stats_buf->pilot_count);
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++) {
 		index = 0;
 
 		for (i = 0; i < HTT_RX_PDEV_STATS_RXEVM_MAX_PILOTS_PER_NSS; i++)
-			index += scnprintf(&rx_pilot_evm_db[j][index],
-					  HTT_MAX_STRING_LEN - index,
-					  " %u:%d,",
-					  i,
-					  htt_stats_buf->rx_pilot_evm_db[j][i]);
-		len += HTT_DBG_OUT(buf + len, buf_len - len, "pilot_evm_dB[%u] = %s ",
-				   j, rx_pilot_evm_db[j]);
+			len += scnprintf(buf + len,
+					 buf_len - len,
+					 " %u:%d,",
+					 i,
+					 htt_stats_buf->rx_pilot_evm_db[j][i]);
+		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
 
 	index = 0;
 	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
 	for (i = 0; i < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; i++)
-		index += scnprintf(&str_buf[index],
-				  HTT_MAX_STRING_LEN - index,
-				  " %u:%d,", i, htt_stats_buf->rx_pilot_evm_db_mean[i]);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "pilot_evm_dB_mean = %s ", str_buf);
+		len += scnprintf(buf + len,
+				 buf_len - len,
+				 " %u:%d,", i,
+				 htt_stats_buf->rx_pilot_evm_db_mean[i]);
+	len += scnprintf(buf + len, buf_len - len, "\n");
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++) {
 		ARRAY_TO_STRING(rssi_chain[j], htt_stats_buf->rssi_chain[j],
@@ -3147,15 +3177,15 @@ static inline void htt_print_rx_pdev_rat
 			HTT_RX_PDEV_STATS_NUM_PREAMBLE_TYPES);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_pream = %s", str_buf);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_11ax_su_ext = %u",
+	len += scnprintf(buf + len, buf_len - len, "rx_11ax_su_ext = %u\n",
 			   htt_stats_buf->rx_11ax_su_ext);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_11ac_mumimo = %u",
+	len += scnprintf(buf + len, buf_len - len, "rx_11ac_mumimo = %u\n",
 			   htt_stats_buf->rx_11ac_mumimo);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_11ax_mumimo = %u",
+	len += scnprintf(buf + len, buf_len - len, "rx_11ax_mumimo = %u\n",
 			   htt_stats_buf->rx_11ax_mumimo);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_11ax_ofdma = %u",
+	len += scnprintf(buf + len, buf_len - len, "rx_11ax_ofdma = %u\n",
 			   htt_stats_buf->rx_11ax_ofdma);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "txbf = %u",
+	len += scnprintf(buf + len, buf_len - len, "txbf = %u\n",
 			   htt_stats_buf->txbf);
 
 	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
@@ -3170,11 +3200,11 @@ static inline void htt_print_rx_pdev_rat
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_legacy_ofdm_rate = %s ",
 			   str_buf);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_active_dur_us_low = %u",
+	len += scnprintf(buf + len, buf_len - len, "rx_active_dur_us_low = %u\n",
 			   htt_stats_buf->rx_active_dur_us_low);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_active_dur_us_high = %u",
+	len += scnprintf(buf + len, buf_len - len, "rx_active_dur_us_high = %u\n",
 			htt_stats_buf->rx_active_dur_us_high);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_11ax_ul_ofdma = %u",
+	len += scnprintf(buf + len, buf_len - len, "rx_11ax_ul_ofdma = %u\n",
 			htt_stats_buf->rx_11ax_ul_ofdma);
 
 	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
@@ -3183,9 +3213,7 @@ static inline void htt_print_rx_pdev_rat
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_ofdma_rx_mcs = %s ", str_buf);
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_GI_COUNTERS; j++) {
-		ARRAY_TO_STRING(rx_gi[j], htt_stats_buf->ul_ofdma_rx_gi[j],
-				HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS);
-		len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_ofdma_rx_gi[%u] = %s ",
+		len += scnprintf(buf + len, buf_len - len, "ul_ofdma_rx_gi[%u] = %s\n",
 				   j, rx_gi[j]);
 	}
 
@@ -3199,9 +3227,9 @@ static inline void htt_print_rx_pdev_rat
 			HTT_RX_PDEV_STATS_NUM_BW_COUNTERS);
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_ofdma_rx_bw = %s ", str_buf);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_ofdma_rx_stbc = %u",
+	len += scnprintf(buf + len, buf_len - len, "ul_ofdma_rx_stbc = %u\n",
 			htt_stats_buf->ul_ofdma_rx_stbc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ul_ofdma_rx_ldpc = %u",
+	len += scnprintf(buf + len, buf_len - len, "ul_ofdma_rx_ldpc = %u\n",
 			htt_stats_buf->ul_ofdma_rx_ldpc);
 
 	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
@@ -3231,16 +3259,15 @@ static inline void htt_print_rx_pdev_rat
 		index = 0;
 		memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
 		for (i = 0; i < HTT_RX_PDEV_MAX_OFDMA_NUM_USER; i++)
-			index += scnprintf(&str_buf[index],
-					  HTT_MAX_STRING_LEN - index,
-					  " %u:%d,",
-					  i, htt_stats_buf->rx_ul_fd_rssi[j][i]);
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "rx_ul_fd_rssi: nss[%u] = %s", j, str_buf);
+			len += scnprintf(buf + len,
+					 buf_len - len,
+					 " %u:%d,",
+					 i, htt_stats_buf->rx_ul_fd_rssi[j][i]);
+		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "per_chain_rssi_pkt_type = %#x",
-			   htt_stats_buf->per_chain_rssi_pkt_type);
+	len += scnprintf(buf + len, buf_len - len, "per_chain_rssi_pkt_type = %#x\n",
+			 htt_stats_buf->per_chain_rssi_pkt_type);
 
 	for (j = 0; j < HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS; j++) {
 		index = 0;
@@ -3254,7 +3281,7 @@ static inline void htt_print_rx_pdev_rat
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
 				   "rx_per_chain_rssi_in_dbm[%u] = %s ", j, str_buf);
 	}
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
+	len += scnprintf(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -3308,33 +3335,33 @@ static inline void htt_print_rx_soc_fw_s
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_SOC_FW_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_reo_ring_data_msdu = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_RX_SOC_FW_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "fw_reo_ring_data_msdu = %u\n",
 			   htt_stats_buf->fw_reo_ring_data_msdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_to_host_data_msdu_bcmc = %u",
+	len += scnprintf(buf + len, buf_len - len, "fw_to_host_data_msdu_bcmc = %u\n",
 			   htt_stats_buf->fw_to_host_data_msdu_bcmc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_to_host_data_msdu_uc = %u",
+	len += scnprintf(buf + len, buf_len - len, "fw_to_host_data_msdu_uc = %u\n",
 			   htt_stats_buf->fw_to_host_data_msdu_uc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "ofld_remote_data_buf_recycle_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "ofld_remote_data_buf_recycle_cnt = %u\n",
 			   htt_stats_buf->ofld_remote_data_buf_recycle_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "ofld_remote_free_buf_indication_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "ofld_remote_free_buf_indication_cnt = %u\n",
 			   htt_stats_buf->ofld_remote_free_buf_indication_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "ofld_buf_to_host_data_msdu_uc = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "ofld_buf_to_host_data_msdu_uc = %u\n",
 			   htt_stats_buf->ofld_buf_to_host_data_msdu_uc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "reo_fw_ring_to_host_data_msdu_uc = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "reo_fw_ring_to_host_data_msdu_uc = %u\n",
 			   htt_stats_buf->reo_fw_ring_to_host_data_msdu_uc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "wbm_sw_ring_reap = %u",
+	len += scnprintf(buf + len, buf_len - len, "wbm_sw_ring_reap = %u\n",
 			   htt_stats_buf->wbm_sw_ring_reap);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "wbm_forward_to_host_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "wbm_forward_to_host_cnt = %u\n",
 			   htt_stats_buf->wbm_forward_to_host_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "wbm_target_recycle_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "wbm_target_recycle_cnt = %u\n",
 			   htt_stats_buf->wbm_target_recycle_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "target_refill_ring_recycle_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "target_refill_ring_recycle_cnt = %u\n",
 			   htt_stats_buf->target_refill_ring_recycle_cnt);
 
 	if (len >= buf_len)
@@ -3357,8 +3384,8 @@ htt_print_rx_soc_fw_refill_ring_empty_tl
 	char refill_ring_empty_cnt[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_RX_STATS_REFILL_MAX_RING);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_RX_SOC_FW_REFILL_RING_EMPTY_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_RX_SOC_FW_REFILL_RING_EMPTY_TLV_V:\n");
 
 	ARRAY_TO_STRING(refill_ring_empty_cnt,
 			htt_stats_buf->refill_ring_empty_cnt,
@@ -3387,8 +3414,8 @@ htt_print_rx_soc_fw_refill_ring_num_rxdm
 	char rxdma_err_cnt[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_RX_RXDMA_MAX_ERR_CODE);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_RX_SOC_FW_REFILL_RING_NUM_RXDMA_ERR_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_RX_SOC_FW_REFILL_RING_NUM_RXDMA_ERR_TLV_V:\n");
 
 	ARRAY_TO_STRING(rxdma_err_cnt,
 			htt_stats_buf->rxdma_err,
@@ -3416,8 +3443,8 @@ htt_print_rx_soc_fw_refill_ring_num_reo_
 	char reo_err_cnt[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_RX_REO_MAX_ERR_CODE);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_RX_SOC_FW_REFILL_RING_NUM_REO_ERR_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_RX_SOC_FW_REFILL_RING_NUM_REO_ERR_TLV_V:\n");
 
 	ARRAY_TO_STRING(reo_err_cnt,
 			htt_stats_buf->reo_err,
@@ -3442,26 +3469,26 @@ htt_print_rx_reo_debug_stats_tlv_v(const
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_REO_RESOURCE_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sample_id = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_RX_REO_RESOURCE_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "sample_id = %u\n",
 			   htt_stats_buf->sample_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "total_max = %u",
+	len += scnprintf(buf + len, buf_len - len, "total_max = %u\n",
 			   htt_stats_buf->total_max);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "total_avg = %u",
+	len += scnprintf(buf + len, buf_len - len, "total_avg = %u\n",
 			   htt_stats_buf->total_avg);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "total_sample = %u",
+	len += scnprintf(buf + len, buf_len - len, "total_sample = %u\n",
 			   htt_stats_buf->total_sample);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "non_zeros_avg = %u",
+	len += scnprintf(buf + len, buf_len - len, "non_zeros_avg = %u\n",
 			   htt_stats_buf->non_zeros_avg);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "non_zeros_sample = %u",
+	len += scnprintf(buf + len, buf_len - len, "non_zeros_sample = %u\n",
 			   htt_stats_buf->non_zeros_sample);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_non_zeros_max = %u",
+	len += scnprintf(buf + len, buf_len - len, "last_non_zeros_max = %u\n",
 			   htt_stats_buf->last_non_zeros_max);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_non_zeros_min %u",
+	len += scnprintf(buf + len, buf_len - len, "last_non_zeros_min %u\n",
 			   htt_stats_buf->last_non_zeros_min);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_non_zeros_avg %u",
+	len += scnprintf(buf + len, buf_len - len, "last_non_zeros_avg %u\n",
 			   htt_stats_buf->last_non_zeros_avg);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_non_zeros_sample %u\n",
+	len += scnprintf(buf + len, buf_len - len, "last_non_zeros_sample %u\n",
 			   htt_stats_buf->last_non_zeros_sample);
 
 	if (len >= buf_len)
@@ -3484,8 +3511,8 @@ htt_print_rx_soc_fw_refill_ring_num_refi
 	char refill_ring_num_refill[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_RX_STATS_REFILL_MAX_RING);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_RX_SOC_FW_REFILL_RING_NUM_REFILL_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_RX_SOC_FW_REFILL_RING_NUM_REFILL_TLV_V:\n");
 
 	ARRAY_TO_STRING(refill_ring_num_refill,
 			htt_stats_buf->refill_ring_num_refill,
@@ -3508,112 +3535,99 @@ static inline void htt_print_rx_pdev_fw_
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
-	char fw_ring_mgmt_subtype[HTT_MAX_STRING_LEN] = {0};
-	char fw_ring_ctrl_subtype[HTT_MAX_STRING_LEN] = {0};
+	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__word);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_PDEV_FW_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
-			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ppdu_recvd = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_RX_PDEV_FW_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+	len += scnprintf(buf + len, buf_len - len, "ppdu_recvd = %u\n",
 			   htt_stats_buf->ppdu_recvd);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_cnt_fcs_ok = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdu_cnt_fcs_ok = %u\n",
 			   htt_stats_buf->mpdu_cnt_fcs_ok);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mpdu_cnt_fcs_err = %u",
+	len += scnprintf(buf + len, buf_len - len, "mpdu_cnt_fcs_err = %u\n",
 			   htt_stats_buf->mpdu_cnt_fcs_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tcp_msdu_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "tcp_msdu_cnt = %u\n",
 			   htt_stats_buf->tcp_msdu_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "tcp_ack_msdu_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "tcp_ack_msdu_cnt = %u\n",
 			   htt_stats_buf->tcp_ack_msdu_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "udp_msdu_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "udp_msdu_cnt = %u\n",
 			   htt_stats_buf->udp_msdu_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "other_msdu_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "other_msdu_cnt = %u\n",
 			   htt_stats_buf->other_msdu_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_mpdu_ind = %u",
+	len += scnprintf(buf + len, buf_len - len, "fw_ring_mpdu_ind = %u\n",
 			   htt_stats_buf->fw_ring_mpdu_ind);
-
-	ARRAY_TO_STRING(fw_ring_mgmt_subtype,
-			htt_stats_buf->fw_ring_mgmt_subtype,
-			HTT_STATS_SUBTYPE_MAX);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_mgmt_subtype = %s ",
-			   fw_ring_mgmt_subtype);
-
-	ARRAY_TO_STRING(fw_ring_ctrl_subtype,
-			htt_stats_buf->fw_ring_ctrl_subtype,
-			HTT_STATS_SUBTYPE_MAX);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_ctrl_subtype = %s ",
-			   fw_ring_ctrl_subtype);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_mcast_data_msdu = %u",
+	len += scnprintf(buf + len, buf_len - len, "fw_ring_mcast_data_msdu = %u\n",
 			   htt_stats_buf->fw_ring_mcast_data_msdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_bcast_data_msdu = %u",
+	len += scnprintf(buf + len, buf_len - len, "fw_ring_bcast_data_msdu = %u\n",
 			   htt_stats_buf->fw_ring_bcast_data_msdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_ucast_data_msdu = %u",
+	len += scnprintf(buf + len, buf_len - len, "fw_ring_ucast_data_msdu = %u\n",
 			   htt_stats_buf->fw_ring_ucast_data_msdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_null_data_msdu = %u",
+	len += scnprintf(buf + len, buf_len - len, "fw_ring_null_data_msdu = %u\n",
 			   htt_stats_buf->fw_ring_null_data_msdu);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_ring_mpdu_drop = %u",
+	len += scnprintf(buf + len, buf_len - len, "fw_ring_mpdu_drop = %u\n",
 			   htt_stats_buf->fw_ring_mpdu_drop);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "ofld_local_data_ind_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "ofld_local_data_ind_cnt = %u\n",
 			   htt_stats_buf->ofld_local_data_ind_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "ofld_local_data_buf_recycle_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "ofld_local_data_buf_recycle_cnt = %u\n",
 			   htt_stats_buf->ofld_local_data_buf_recycle_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "drx_local_data_ind_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "drx_local_data_ind_cnt = %u\n",
 			   htt_stats_buf->drx_local_data_ind_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "drx_local_data_buf_recycle_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "drx_local_data_buf_recycle_cnt = %u\n",
 			   htt_stats_buf->drx_local_data_buf_recycle_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_nondata_ind_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "local_nondata_ind_cnt = %u\n",
 			   htt_stats_buf->local_nondata_ind_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "local_nondata_buf_recycle_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "local_nondata_buf_recycle_cnt = %u\n",
 			   htt_stats_buf->local_nondata_buf_recycle_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_status_buf_ring_refill_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "fw_status_buf_ring_refill_cnt = %u\n",
 			   htt_stats_buf->fw_status_buf_ring_refill_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_status_buf_ring_empty_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "fw_status_buf_ring_empty_cnt = %u\n",
 			   htt_stats_buf->fw_status_buf_ring_empty_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_pkt_buf_ring_refill_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "fw_pkt_buf_ring_refill_cnt = %u\n",
 			   htt_stats_buf->fw_pkt_buf_ring_refill_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_pkt_buf_ring_empty_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "fw_pkt_buf_ring_empty_cnt = %u\n",
 			   htt_stats_buf->fw_pkt_buf_ring_empty_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_link_buf_ring_refill_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "fw_link_buf_ring_refill_cnt = %u\n",
 			   htt_stats_buf->fw_link_buf_ring_refill_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "fw_link_buf_ring_empty_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "fw_link_buf_ring_empty_cnt = %u\n",
 			   htt_stats_buf->fw_link_buf_ring_empty_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "host_pkt_buf_ring_refill_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "host_pkt_buf_ring_refill_cnt = %u\n",
 			   htt_stats_buf->host_pkt_buf_ring_refill_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "host_pkt_buf_ring_empty_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "host_pkt_buf_ring_empty_cnt = %u\n",
 			   htt_stats_buf->host_pkt_buf_ring_empty_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_pkt_buf_ring_refill_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "mon_pkt_buf_ring_refill_cnt = %u\n",
 			   htt_stats_buf->mon_pkt_buf_ring_refill_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_pkt_buf_ring_empty_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "mon_pkt_buf_ring_empty_cnt = %u\n",
 			   htt_stats_buf->mon_pkt_buf_ring_empty_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "mon_status_buf_ring_refill_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "mon_status_buf_ring_refill_cnt = %u\n",
 			   htt_stats_buf->mon_status_buf_ring_refill_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_status_buf_ring_empty_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "mon_status_buf_ring_empty_cnt = %u\n",
 			   htt_stats_buf->mon_status_buf_ring_empty_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_desc_buf_ring_refill_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "mon_desc_buf_ring_refill_cnt = %u\n",
 			   htt_stats_buf->mon_desc_buf_ring_refill_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_desc_buf_ring_empty_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "mon_desc_buf_ring_empty_cnt = %u\n",
 			   htt_stats_buf->mon_desc_buf_ring_empty_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_dest_ring_update_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "mon_dest_ring_update_cnt = %u\n",
 			   htt_stats_buf->mon_dest_ring_update_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mon_dest_ring_full_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "mon_dest_ring_full_cnt = %u\n",
 			   htt_stats_buf->mon_dest_ring_full_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_suspend_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "rx_suspend_cnt = %u\n",
 			   htt_stats_buf->rx_suspend_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_suspend_fail_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "rx_suspend_fail_cnt = %u\n",
 			   htt_stats_buf->rx_suspend_fail_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_resume_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "rx_resume_cnt = %u\n",
 			   htt_stats_buf->rx_resume_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_resume_fail_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "rx_resume_fail_cnt = %u\n",
 			   htt_stats_buf->rx_resume_fail_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_ring_switch_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "rx_ring_switch_cnt = %u\n",
 			   htt_stats_buf->rx_ring_switch_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_ring_restore_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "rx_ring_restore_cnt = %u\n",
 			   htt_stats_buf->rx_ring_restore_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_flush_cnt = %u",
+	len += scnprintf(buf + len, buf_len - len, "rx_flush_cnt = %u\n",
 			   htt_stats_buf->rx_flush_cnt);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_recovery_reset_cnt = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "rx_recovery_reset_cnt = %u\n",
 			   htt_stats_buf->rx_recovery_reset_cnt);
 
 	if (len >= buf_len)
@@ -3634,8 +3648,8 @@ htt_print_rx_pdev_fw_ring_mpdu_err_tlv_v
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 	char fw_ring_mpdu_err[HTT_MAX_STRING_LEN] = {0};
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_RX_PDEV_FW_RING_MPDU_ERR_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_RX_PDEV_FW_RING_MPDU_ERR_TLV_V:\n");
 
 	ARRAY_TO_STRING(fw_ring_mpdu_err,
 			htt_stats_buf->fw_ring_mpdu_err,
@@ -3663,7 +3677,7 @@ htt_print_rx_pdev_fw_mpdu_drop_tlv_v(con
 	char fw_mpdu_drop[HTT_MAX_STRING_LEN] = {0};
 	u16 num_elems = min_t(u16, (tag_len >> 2), HTT_RX_STATS_FW_DROP_REASON_MAX);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_PDEV_FW_MPDU_DROP_TLV_V:");
+	len += scnprintf(buf + len, buf_len - len, "HTT_RX_PDEV_FW_MPDU_DROP_TLV_V:\n");
 
 	ARRAY_TO_STRING(fw_mpdu_drop,
 			htt_stats_buf->fw_mpdu_drop,
@@ -3687,11 +3701,12 @@ htt_print_rx_pdev_fw_stats_phy_err_tlv(c
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 	char phy_errs[HTT_MAX_STRING_LEN] = {0};
+	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__word);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_RX_PDEV_FW_STATS_PHY_ERR_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id__word = %u",
-			   htt_stats_buf->mac_id__word);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "total_phy_err_nct = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_RX_PDEV_FW_STATS_PHY_ERR_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mac_id__word = %u\n",
+			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+	len += scnprintf(buf + len, buf_len - len, "total_phy_err_nct = %u\n",
 			   htt_stats_buf->total_phy_err_cnt);
 
 	ARRAY_TO_STRING(phy_errs,
@@ -3716,19 +3731,19 @@ htt_print_pdev_cca_stats_hist_tlv(const
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "\nHTT_PDEV_CCA_STATS_HIST_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "chan_num = %u",
+	len += scnprintf(buf + len, buf_len - len, "\nHTT_PDEV_CCA_STATS_HIST_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "chan_num = %u\n",
 			   htt_stats_buf->chan_num);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_records = %u",
+	len += scnprintf(buf + len, buf_len - len, "num_records = %u\n",
 			   htt_stats_buf->num_records);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "valid_cca_counters_bitmap = 0x%x",
+	len += scnprintf(buf + len, buf_len - len, "valid_cca_counters_bitmap = 0x%x\n",
 			   htt_stats_buf->valid_cca_counters_bitmap);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "collection_interval = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "collection_interval = %u\n",
 			   htt_stats_buf->collection_interval);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_PDEV_STATS_CCA_COUNTERS_TLV:(in usec)");
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
+	len += scnprintf(buf + len, buf_len - len,
+			   "HTT_PDEV_STATS_CCA_COUNTERS_TLV:(in usec)\n");
+	len += scnprintf(buf + len, buf_len - len,
 			   "|  tx_frame|   rx_frame|   rx_clear| my_rx_frame|        cnt| med_rx_idle| med_tx_idle_global|   cca_obss|");
 
 	if (len >= buf_len)
@@ -3748,7 +3763,7 @@ htt_print_pdev_stats_cca_counters_tlv(co
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
+	len += scnprintf(buf + len, buf_len - len,
 			   "|%10u| %10u| %10u| %11u| %10u| %11u| %18u| %10u|",
 			   htt_stats_buf->tx_frame_usec,
 			   htt_stats_buf->rx_frame_usec,
@@ -3774,32 +3789,33 @@ static inline void htt_print_hw_stats_wh
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 mac_id_word = __le32_to_cpu(htt_stats_buf->mac_id__word);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_HW_STATS_WHAL_TX_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
-			   htt_stats_buf->mac_id__word & 0xFF);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "last_unpause_ppdu_id = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_HW_STATS_WHAL_TX_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			   u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+	len += scnprintf(buf + len, buf_len - len, "last_unpause_ppdu_id = %u\n",
 			   htt_stats_buf->last_unpause_ppdu_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_unpause_wait_tqm_write = %u",
+	len += scnprintf(buf + len, buf_len - len, "hwsch_unpause_wait_tqm_write = %u\n",
 			   htt_stats_buf->hwsch_unpause_wait_tqm_write);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_dummy_tlv_skipped = %u",
+	len += scnprintf(buf + len, buf_len - len, "hwsch_dummy_tlv_skipped = %u\n",
 			   htt_stats_buf->hwsch_dummy_tlv_skipped);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "hwsch_misaligned_offset_received = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "hwsch_misaligned_offset_received = %u\n",
 			   htt_stats_buf->hwsch_misaligned_offset_received);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_reset_count = %u",
+	len += scnprintf(buf + len, buf_len - len, "hwsch_reset_count = %u\n",
 			   htt_stats_buf->hwsch_reset_count);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_dev_reset_war = %u",
+	len += scnprintf(buf + len, buf_len - len, "hwsch_dev_reset_war = %u\n",
 			   htt_stats_buf->hwsch_dev_reset_war);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_delayed_pause = %u",
+	len += scnprintf(buf + len, buf_len - len, "hwsch_delayed_pause = %u\n",
 			   htt_stats_buf->hwsch_delayed_pause);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "hwsch_long_delayed_pause = %u",
+	len += scnprintf(buf + len, buf_len - len, "hwsch_long_delayed_pause = %u\n",
 			   htt_stats_buf->hwsch_long_delayed_pause);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sch_rx_ppdu_no_response = %u",
+	len += scnprintf(buf + len, buf_len - len, "sch_rx_ppdu_no_response = %u\n",
 			   htt_stats_buf->sch_rx_ppdu_no_response);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sch_selfgen_response = %u",
+	len += scnprintf(buf + len, buf_len - len, "sch_selfgen_response = %u\n",
 			   htt_stats_buf->sch_selfgen_response);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sch_rx_sifs_resp_trigger= %u\n",
+	len += scnprintf(buf + len, buf_len - len, "sch_rx_sifs_resp_trigger= %u\n",
 			   htt_stats_buf->sch_rx_sifs_resp_trigger);
 
 	if (len >= buf_len)
@@ -3819,10 +3835,10 @@ htt_print_pdev_stats_twt_sessions_tlv(co
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_PDEV_STATS_TWT_SESSIONS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "pdev_id = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_PDEV_STATS_TWT_SESSIONS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "pdev_id = %u\n",
 			   htt_stats_buf->pdev_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_sessions = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "num_sessions = %u\n",
 			   htt_stats_buf->num_sessions);
 
 	if (len >= buf_len)
@@ -3841,27 +3857,29 @@ htt_print_pdev_stats_twt_session_tlv(con
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 mac_addr = __le32_to_cpu(htt_stats_buf->peer_mac.mac_addr_l32);
+	u32 mac_addr_16 = __le32_to_cpu(htt_stats_buf->peer_mac.mac_addr_h16);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "HTT_PDEV_STATS_TWT_SESSION_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "vdev_id = %u",
+	len += scnprintf(buf + len, buf_len - len, "HTT_PDEV_STATS_TWT_SESSION_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "vdev_id = %u\n",
 			   htt_stats_buf->vdev_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "peer_mac = %02x:%02x:%02x:%02x:%02x:%02x",
-			   htt_stats_buf->peer_mac.mac_addr_l32 & 0xFF,
-			   (htt_stats_buf->peer_mac.mac_addr_l32 & 0xFF00) >> 8,
-			   (htt_stats_buf->peer_mac.mac_addr_l32 & 0xFF0000) >> 16,
-			   (htt_stats_buf->peer_mac.mac_addr_l32 & 0xFF000000) >> 24,
-			   (htt_stats_buf->peer_mac.mac_addr_h16 & 0xFF),
-			   (htt_stats_buf->peer_mac.mac_addr_h16 & 0xFF00) >> 8);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "flow_id_flags = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			 "peer_mac = %02x:%02x:%02x:%02x:%02x:%02x\n",
+			 u32_get_bits(mac_addr, HTT_MAC_ADDR_L32_0),
+			 u32_get_bits(mac_addr, HTT_MAC_ADDR_L32_1),
+			 u32_get_bits(mac_addr, HTT_MAC_ADDR_L32_2),
+			 u32_get_bits(mac_addr, HTT_MAC_ADDR_L32_3),
+			 u32_get_bits(mac_addr_16, HTT_MAC_ADDR_H16_0),
+			 u32_get_bits(mac_addr_16, HTT_MAC_ADDR_H16_1));
+	len += scnprintf(buf + len, buf_len - len, "flow_id_flags = %u\n",
 			   htt_stats_buf->flow_id_flags);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "dialog_id = %u",
+	len += scnprintf(buf + len, buf_len - len, "dialog_id = %u\n",
 			   htt_stats_buf->dialog_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "wake_dura_us = %u",
+	len += scnprintf(buf + len, buf_len - len, "wake_dura_us = %u\n",
 			   htt_stats_buf->wake_dura_us);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "wake_intvl_us = %u",
+	len += scnprintf(buf + len, buf_len - len, "wake_intvl_us = %u\n",
 			   htt_stats_buf->wake_intvl_us);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "sp_offset_us = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "sp_offset_us = %u\n",
 			   htt_stats_buf->sp_offset_us);
 
 	if (len >= buf_len)
@@ -3881,21 +3899,10 @@ htt_print_pdev_obss_pd_stats_tlv_v(const
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "OBSS Tx success PPDU = %u",
-			   htt_stats_buf->num_obss_tx_ppdu_success);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "OBSS Tx failures PPDU = %u\n",
-			   htt_stats_buf->num_obss_tx_ppdu_failure);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "Non-SRG Opportunities = %u\n",
-			   htt_stats_buf->num_non_srg_opportunities);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "Non-SRG tried PPDU = %u\n",
-			   htt_stats_buf->num_non_srg_ppdu_tried);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "Non-SRG success PPDU = %u\n",
-			   htt_stats_buf->num_non_srg_ppdu_success);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "SRG Opportunities = %u\n",
-			   htt_stats_buf->num_srg_opportunities);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "SRG tried PPDU = %u\n",
-			   htt_stats_buf->num_srg_ppdu_tried);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "SRG success PPDU = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "OBSS Tx success PPDU = %u\n",
+			 htt_stats_buf->num_obss_tx_ppdu_success);
+	len += scnprintf(buf + len, buf_len - len, "OBSS Tx failures PPDU = %u\n",
+			 htt_stats_buf->num_obss_tx_ppdu_failure);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -3917,24 +3924,24 @@ static inline void htt_print_backpressur
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "pdev_id = %u",
+	len += scnprintf(buf + len, buf_len - len, "pdev_id = %u\n",
 			   htt_stats_buf->pdev_id);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "current_head_idx = %u",
+	len += scnprintf(buf + len, buf_len - len, "current_head_idx = %u\n",
 			   htt_stats_buf->current_head_idx);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "current_tail_idx = %u",
+	len += scnprintf(buf + len, buf_len - len, "current_tail_idx = %u\n",
 			   htt_stats_buf->current_tail_idx);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "num_htt_msgs_sent = %u",
+	len += scnprintf(buf + len, buf_len - len, "num_htt_msgs_sent = %u\n",
 			   htt_stats_buf->num_htt_msgs_sent);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "backpressure_time_ms = %u",
+	len += scnprintf(buf + len, buf_len - len,
+			   "backpressure_time_ms = %u\n",
 			   htt_stats_buf->backpressure_time_ms);
 
 	for (i = 0; i < 5; i++)
-		len += HTT_DBG_OUT(buf + len, buf_len - len,
-				   "backpressure_hist_%u = %u",
+		len += scnprintf(buf + len, buf_len - len,
+				   "backpressure_hist_%u = %u\n",
 				   i + 1, htt_stats_buf->backpressure_hist[i]);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
+	len += scnprintf(buf + len, buf_len - len,
 			   "============================");
 
 	if (len >= buf_len) {
@@ -3956,28 +3963,28 @@ htt_print_tx_selfgen_be_stats_tlv(const
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_SELFGEN_BE_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "be_su_ndpa_queued = %u",
-			   htt_stats_buf->be_su_ndpa_queued);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "be_su_ndpa_tried = %u",
-			   htt_stats_buf->be_su_ndpa);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "be_su_ndp_queued = %u",
-			   htt_stats_buf->be_su_ndp_queued);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "be_su_ndp_tried = %u",
-			   htt_stats_buf->be_su_ndp);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "be_mu_mimo_ndpa_queued = %u",
-			   htt_stats_buf->be_mu_mimo_ndpa_queued);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "be_mu_mimo_ndpa_tried = %u",
-			   htt_stats_buf->be_mu_mimo_ndpa);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "be_mu_mimo_ndp_queued = %u",
-			   htt_stats_buf->be_mu_mimo_ndp_queued);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "be_mu_mimo_ndp_tried = %u",
-			   htt_stats_buf->be_mu_mimo_ndp);
+	len += scnprintf(buf + len, buf_len - len,
+			 "HTT_TX_SELFGEN_BE_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "be_su_ndpa_queued = %u\n",
+			 htt_stats_buf->be_su_ndpa_queued);
+	len += scnprintf(buf + len, buf_len - len, "be_su_ndpa_tried = %u\n",
+			 htt_stats_buf->be_su_ndpa);
+	len += scnprintf(buf + len, buf_len - len, "be_su_ndp_queued = %u\n",
+			 htt_stats_buf->be_su_ndp_queued);
+	len += scnprintf(buf + len, buf_len - len, "be_su_ndp_tried = %u\n",
+			 htt_stats_buf->be_su_ndp);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_mu_mimo_ndpa_queued = %u\n",
+			 htt_stats_buf->be_mu_mimo_ndpa_queued);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_mu_mimo_ndpa_tried = %u\n",
+			 htt_stats_buf->be_mu_mimo_ndpa);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_mu_mimo_ndp_queued = %u\n",
+			 htt_stats_buf->be_mu_mimo_ndp_queued);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_mu_mimo_ndp_tried = %u\n",
+			 htt_stats_buf->be_mu_mimo_ndp);
 
 	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
 	ARRAY_TO_STRING(str_buf, htt_stats_buf->be_mu_mimo_brpoll_queued,
@@ -3997,18 +4004,18 @@ htt_print_tx_selfgen_be_stats_tlv(const
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
 			   "be_ul_mumimo_trigger = %s ", str_buf);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "be_basic_trigger = %u",
-			htt_stats_buf->be_basic_trigger);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "be_ulmumimo_total_trigger = %u",
-			htt_stats_buf->be_ulmumimo_trigger);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "be_bsr_trigger = %u",
-			htt_stats_buf->be_bsr_trigger);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "be_mu_bar_trigger = %u",
-			htt_stats_buf->be_mu_bar_trigger);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "be_mu_rts_trigger = %u\n",
-			htt_stats_buf->be_mu_rts_trigger);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_basic_trigger = %u\n",
+			 htt_stats_buf->be_basic_trigger);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_ulmumimo_total_trigger = %u\n",
+			 htt_stats_buf->be_ulmumimo_trigger);
+	len += scnprintf(buf + len, buf_len - len, "be_bsr_trigger = %u\n",
+			 htt_stats_buf->be_bsr_trigger);
+	len += scnprintf(buf + len, buf_len - len, "be_mu_bar_trigger = %u\n",
+			 htt_stats_buf->be_mu_bar_trigger);
+	len += scnprintf(buf + len, buf_len - len, "be_mu_rts_trigger = %u\n",
+			 htt_stats_buf->be_mu_rts_trigger);
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -4028,8 +4035,8 @@ htt_print_tx_selfgen_be_sched_status_sta
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_SELFGEN_BE_SCHED_STATUS_STATS_TLV:");
+	len += scnprintf(buf + len, buf_len - len,
+			 "HTT_TX_SELFGEN_BE_SCHED_STATUS_STATS_TLV:\n");
 
 	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
 	ARRAY_TO_STRING(str_buf, htt_stats_buf->be_su_ndpa_sch_status,
@@ -4122,8 +4129,8 @@ htt_print_tx_pdev_be_ul_mu_mimo_sch_stat
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "\n11be UL MU_MIMO SCH STATS:");
+	len += scnprintf(buf + len, buf_len - len,
+			 "11be UL MU_MIMO SCH STATS:\n");
 	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_UL_MUMIMO_USER_STATS; i++) {
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
 				   "be_ul_mu_mimo_basic_sch_nusers_%u = %u", i,
@@ -4160,10 +4167,10 @@ htt_print_tx_pdev_be_rate_stats_tlv(cons
 			goto fail;
 	}
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_PDEV_BE_RATE_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "be_mu_mimo_tx_ldpc = %u",
-			   htt_stats_buf->be_mu_mimo_tx_ldpc);
+	len += scnprintf(buf + len, buf_len - len,
+			 "HTT_TX_PDEV_BE_RATE_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "be_mu_mimo_tx_ldpc = %u\n",
+			 htt_stats_buf->be_mu_mimo_tx_ldpc);
 
 	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
 	/* MCS -2 and -1 will be printed first */
@@ -4256,6 +4263,7 @@ htt_print_ul_mumimo_trig_be_stats(const
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 mac_id_word = __le32_to_cpu(htt_ul_mumimo_trig_be_stats_buf->mac_id__word);
 
 	for (i = 0; i < HTT_TX_PEER_STATS_NUM_GI_COUNTERS; i++) {
 		rx_gi[i] = kmalloc(HTT_MAX_STRING_LEN, GFP_ATOMIC);
@@ -4263,13 +4271,13 @@ htt_print_ul_mumimo_trig_be_stats(const
 			goto fail;
 	}
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_RX_PDEV_UL_MUMIMO_TRIG_BE_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %lu",
-		FIELD_GET(HTT_STATS_MAC_ID, htt_ul_mumimo_trig_be_stats_buf->mac_id__word));
+	len += scnprintf(buf + len, buf_len - len,
+			 "HTT_RX_PDEV_UL_MUMIMO_TRIG_BE_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			 u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_11be_ul_mumimo = %u",
-			htt_ul_mumimo_trig_be_stats_buf->rx_11be_ul_mumimo);
+	len += scnprintf(buf + len, buf_len - len, "rx_11be_ul_mumimo = %u\n",
+			 htt_ul_mumimo_trig_be_stats_buf->rx_11be_ul_mumimo);
 
 	/* TODO: Check if enough space is present before writing BE MCS Counters */
 	index = 0;
@@ -4317,12 +4325,12 @@ htt_print_ul_mumimo_trig_be_stats(const
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
 			   "be_ul_mumimo_rx_bw = %s ", str_buf);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "be_ul_mumimo_rx_stbc = %u",
-			   htt_ul_mumimo_trig_be_stats_buf->be_ul_mumimo_rx_stbc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "be_ul_mumimo_rx_ldpc = %u",
-			   htt_ul_mumimo_trig_be_stats_buf->be_ul_mumimo_rx_ldpc);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_ul_mumimo_rx_stbc = %u\n",
+			 htt_ul_mumimo_trig_be_stats_buf->be_ul_mumimo_rx_stbc);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_ul_mumimo_rx_ldpc = %u\n",
+			 htt_ul_mumimo_trig_be_stats_buf->be_ul_mumimo_rx_ldpc);
 
 	for (i = 0; i < HTT_RX_PDEV_STATS_ULMUMIMO_NUM_SPATIAL_STREAMS; i++) {
 		memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
@@ -4363,7 +4371,7 @@ htt_print_ul_mumimo_trig_be_stats(const
 				   "be_rx_ulmumimo_pilot_evm_dB_mean: user [%u] = %s ",
 				   i, str_buf);
 	}
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "\n");
+	len += scnprintf(buf + len, buf_len - len, "\n");
 
 	if (len >= buf_len)
 		buf[buf_len - 1] = 0;
@@ -4388,6 +4396,7 @@ htt_print_be_ul_ofdma_trigger_stats(cons
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	u32 mac_id_word = __le32_to_cpu(htt_trigger_stats_buf->mac_id__word);
 
 	for (i = 0; i < HTT_TX_PEER_STATS_NUM_GI_COUNTERS; i++) {
 		rx_gi[i] = kmalloc(HTT_MAX_STRING_LEN, GFP_ATOMIC);
@@ -4395,12 +4404,12 @@ htt_print_be_ul_ofdma_trigger_stats(cons
 			goto fail;
 	}
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_RX_PDEV_BE_UL_TRIGGER_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %lu",
-			   FIELD_GET(HTT_STATS_MAC_ID, htt_trigger_stats_buf->mac_id__word));
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "rx_11be_ul_ofdma =%u",
-			   htt_trigger_stats_buf->rx_11be_ul_ofdma);
+	len += scnprintf(buf + len, buf_len - len,
+			 "HTT_RX_PDEV_BE_UL_TRIGGER_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			 u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+	len += scnprintf(buf + len, buf_len - len, "rx_11be_ul_ofdma =%u\n",
+			 htt_trigger_stats_buf->rx_11be_ul_ofdma);
 
 	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
 	ARRAY_TO_STRING(str_buf, htt_trigger_stats_buf->be_ul_ofdma_rx_mcs,
@@ -4436,9 +4445,9 @@ htt_print_be_ul_ofdma_trigger_stats(cons
 	len += HTT_DBG_OUT(buf + len, buf_len - len, "be_ul_ofdma_rx_bw = %s ",
 			   str_buf);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "be_ul_ofdma_rx_stbc = %u",
+	len += scnprintf(buf + len, buf_len - len, "be_ul_ofdma_rx_stbc = %u\n",
 			htt_trigger_stats_buf->be_ul_ofdma_rx_stbc);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "be_ul_ofdma_rx_ldpc = %u",
+	len += scnprintf(buf + len, buf_len - len, "be_ul_ofdma_rx_ldpc = %u\n",
 			htt_trigger_stats_buf->be_ul_ofdma_rx_ldpc);
 
 	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
@@ -4504,8 +4513,8 @@ htt_print_tx_pdev_be_dl_mu_ofdma_sch_sta
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "\n11BE DL MU_OFDMA SCH STATS:");
+	len += scnprintf(buf + len, buf_len - len,
+			 "11BE DL MU_OFDMA SCH STATS:\n");
 
 	for (i = 0; i < HTT_TX_PDEV_STATS_NUM_OFDMA_USER_STATS; i++) {
 		len += HTT_DBG_OUT(buf + len, buf_len - len,
@@ -4573,13 +4582,13 @@ htt_print_tx_pdev_rate_stats_be_ofdma_tl
 			goto fail;
 	}
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_PDEV_RATE_STATS_BE_OFDMA_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "mac_id = %u",
-			htt_stats_buf->mac_id__word & 0xFF);
+	len += scnprintf(buf + len, buf_len - len,
+			 "HTT_TX_PDEV_RATE_STATS_BE_OFDMA_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
+			 htt_stats_buf->mac_id__word & 0xFF);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "be_ofdma_tx_ldpc = %u",
-			htt_stats_buf->be_ofdma_tx_ldpc);
+	len += scnprintf(buf + len, buf_len - len, "be_ofdma_tx_ldpc = %u\n",
+			 htt_stats_buf->be_ofdma_tx_ldpc);
 
 	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
 	ARRAY_TO_STRING(str_buf, htt_stats_buf->be_ofdma_tx_mcs,
@@ -4638,26 +4647,26 @@ htt_print_tx_selfgen_be_err_stats_tlv(co
 
 	const struct htt_tx_selfgen_be_err_stats_tlv *htt_stats_buf = tag_buf;
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "HTT_TX_SELFGEN_BE_ERR_STATS_TLV:");
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "be_su_ndp_err = %u",
-			   htt_stats_buf->be_su_ndp_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "be_su_ndp_flushed = %u",
-			   htt_stats_buf->be_su_ndp_flushed);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "be_su_ndpa_err = %u",
-			   htt_stats_buf->be_su_ndpa_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "be_su_ndpa_flushed = %u",
-			   htt_stats_buf->be_su_ndpa_flushed);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "be_mu_mimo_ndpa_err = %u",
-			   htt_stats_buf->be_mu_mimo_ndpa_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "be_mu_mimo_ndpa_flushed = %u",
-			   htt_stats_buf->be_mu_mimo_ndpa_flushed);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "be_mu_mimo_ndp_err = %u",
-			   htt_stats_buf->be_mu_mimo_ndp_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "be_mu_mimo_ndp_flushed = %u",
-			   htt_stats_buf->be_mu_mimo_ndp_flushed);
+	len += scnprintf(buf + len, buf_len - len,
+			 "HTT_TX_SELFGEN_BE_ERR_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "be_su_ndp_err = %u\n",
+			 htt_stats_buf->be_su_ndp_err);
+	len += scnprintf(buf + len, buf_len - len, "be_su_ndp_flushed = %u\n",
+			 htt_stats_buf->be_su_ndp_flushed);
+	len += scnprintf(buf + len, buf_len - len, "be_su_ndpa_err = %u\n",
+			 htt_stats_buf->be_su_ndpa_err);
+	len += scnprintf(buf + len, buf_len - len, "be_su_ndpa_flushed = %u\n",
+			 htt_stats_buf->be_su_ndpa_flushed);
+	len += scnprintf(buf + len, buf_len - len, "be_mu_mimo_ndpa_err = %u\n",
+			 htt_stats_buf->be_mu_mimo_ndpa_err);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_mu_mimo_ndpa_flushed = %u\n",
+			 htt_stats_buf->be_mu_mimo_ndpa_flushed);
+	len += scnprintf(buf + len, buf_len - len, "be_mu_mimo_ndp_err = %u\n",
+			 htt_stats_buf->be_mu_mimo_ndp_err);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_mu_mimo_ndp_flushed = %u\n",
+			 htt_stats_buf->be_mu_mimo_ndp_flushed);
 
 	memset(str_buf, 0x0, HTT_MAX_STRING_LEN);
 	ARRAY_TO_STRING(str_buf, htt_stats_buf->be_mu_mimo_brp_err,
@@ -4683,19 +4692,19 @@ htt_print_tx_selfgen_be_err_stats_tlv(co
 	len += HTT_DBG_OUT(buf + len, buf_len - len,
 			   "be_ul_mumimo_trigger_err = %s ", str_buf);
 
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "be_basic_trigger_err = %u",
-			   htt_stats_buf->be_basic_trigger_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "be_ulmumimo_total_trigger_err = %u",
-			   htt_stats_buf->be_ulmumimo_trigger_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len, "be_bsr_trigger_err = %u",
-			   htt_stats_buf->be_bsr_trigger_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "be_mu_bar_trigger_err = %u",
-			   htt_stats_buf->be_mu_bar_trigger_err);
-	len += HTT_DBG_OUT(buf + len, buf_len - len,
-			   "be_mu_rts_trigger_err = %u\n",
-			   htt_stats_buf->be_mu_rts_trigger_err);
+	len += scnprintf(buf + len, buf_len - len, "be_basic_trigger_err = %u\n",
+			 htt_stats_buf->be_basic_trigger_err);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_ulmumimo_total_trigger_err = %u\n",
+			 htt_stats_buf->be_ulmumimo_trigger_err);
+	len += scnprintf(buf + len, buf_len - len, "be_bsr_trigger_err = %u\n",
+			 htt_stats_buf->be_bsr_trigger_err);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_mu_bar_trigger_err = %u\n",
+			 htt_stats_buf->be_mu_bar_trigger_err);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_mu_rts_trigger_err = %u\n",
+			 htt_stats_buf->be_mu_rts_trigger_err);
 }
 
 static int ath12k_dbg_htt_ext_stats_parse(struct ath12k_base *ab,
@@ -5117,14 +5126,14 @@ void ath12k_debugfs_htt_ext_stats_handle
 	u8 pdev_id;
 
 	msg = (struct ath12k_htt_extd_stats_msg *)skb->data;
-	cookie = msg->cookie;
+	cookie = __le64_to_cpu(msg->cookie);
 
-	if (FIELD_GET(HTT_STATS_COOKIE_MSB, cookie) != HTT_STATS_MAGIC_VALUE) {
+	if (u64_get_bits(cookie, HTT_STATS_COOKIE_MSB) != HTT_STATS_MAGIC_VALUE) {
 		ath12k_warn(ab, "received invalid htt ext stats event\n");
 		return;
 	}
 
-	pdev_id = FIELD_GET(HTT_STATS_COOKIE_LSB, cookie);
+	pdev_id = u64_get_bits(cookie, HTT_STATS_COOKIE_LSB);
 	rcu_read_lock();
 	ar = ath12k_mac_get_ar_by_pdev_id(ab, pdev_id);
 	rcu_read_unlock();
@@ -5139,13 +5148,14 @@ void ath12k_debugfs_htt_ext_stats_handle
 
 	spin_lock_bh(&ar->debug.htt_stats.lock);
 
-	stats_req->done = FIELD_GET(HTT_T2H_EXT_STATS_INFO1_DONE, msg->info1);
+	stats_req->done = u32_get_bits(__le32_to_cpu(msg->info1),
+				       HTT_T2H_EXT_STATS_INFO1_DONE);
 	if (stats_req->done)
 		send_completion = true;
 
 	spin_unlock_bh(&ar->debug.htt_stats.lock);
 
-	len = FIELD_GET(HTT_T2H_EXT_STATS_INFO1_LENGTH, msg->info1);
+	len = u32_get_bits(__le32_to_cpu(msg->info1), HTT_T2H_EXT_STATS_INFO1_LENGTH);
 	ret = ath12k_dp_htt_tlv_iter(ab, msg->data, len,
 				     ath12k_dbg_htt_ext_stats_parse,
 				     stats_req);
--- a/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.h
+++ b/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.h
@@ -320,6 +320,10 @@ struct htt_hw_stats_whal_tx_tlv {
 };
 
 /* ============ PEER STATS ============ */
+#define	HTT_MSDU_FLOW_STATS_TX_FLOW_NO	GENMASK(15, 0)
+#define	HTT_MSDU_FLOW_STATS_TID_NUM	GENMASK(19, 16)
+#define	HTT_MSDU_FLOW_STATS_DROP_RULE	BIT(20)
+
 struct htt_msdu_flow_stats_tlv {
 	u32 last_update_timestamp;
 	u32 last_add_timestamp;
@@ -336,6 +340,11 @@ struct htt_msdu_flow_stats_tlv {
 
 #define MAX_HTT_TID_NAME 8
 
+#define	HTT_TX_TID_STATS_SW_PEER_ID		GENMASK(15, 0)
+#define	HTT_TX_TID_STATS_TID_NUM		GENMASK(31, 16)
+#define	HTT_TX_TID_STATS_NUM_SCHED_PENDING	GENMASK(7, 0)
+#define	HTT_TX_TID_STATS_NUM_PPDU_IN_HWQ	GENMASK(15, 8)
+
 /* Tidq stats */
 struct htt_tx_tid_stats_tlv {
 	/* Stored as little endian */
@@ -356,6 +365,11 @@ struct htt_tx_tid_stats_tlv {
 	u32 tid_tx_airtime;
 };
 
+#define	HTT_TX_TID_STATS_V1_SW_PEER_ID		GENMASK(15, 0)
+#define	HTT_TX_TID_STATS_V1_TID_NUM		GENMASK(31, 16)
+#define	HTT_TX_TID_STATS_V1_NUM_SCHED_PENDING	GENMASK(7, 0)
+#define	HTT_TX_TID_STATS_V1_NUM_PPDU_IN_HWQ	GENMASK(15, 8)
+
 /* Tidq stats */
 struct htt_tx_tid_stats_v1_tlv {
 	/* Stored as little endian */
@@ -378,6 +392,9 @@ struct htt_tx_tid_stats_v1_tlv {
 	u32 sendn_frms_allowed;
 };
 
+#define	HTT_RX_TID_STATS_SW_PEER_ID	GENMASK(15, 0)
+#define	HTT_RX_TID_STATS_TID_NUM	GENMASK(31, 16)
+
 struct htt_rx_tid_stats_tlv {
 	u32 sw_peer_id__tid_num;
 	u8 tid_name[MAX_HTT_TID_NAME];
@@ -416,6 +433,10 @@ struct htt_peer_stats_cmn_tlv {
 	u32 inactive_time;
 };
 
+#define HTT_PEER_DETAILS_VDEV_ID	GENMASK(7, 0)
+#define HTT_PEER_DETAILS_PDEV_ID	GENMASK(15, 8)
+#define HTT_PEER_DETAILS_AST_IDX	GENMASK(31, 16)
+
 struct htt_peer_details_tlv {
 	u32 peer_type;
 	u32 sw_peer_id;
@@ -540,6 +561,9 @@ struct htt_tx_hwq_mu_mimo_mpdu_stats_tlv
 	u32 mu_mimo_ampdu_underrun_usr;
 };
 
+#define	HTT_TX_HWQ_STATS_MAC_ID	GENMASK(7, 0)
+#define	HTT_TX_HWQ_STATS_HWQ_ID	GENMASK(15, 8)
+
 struct htt_tx_hwq_mu_mimo_cmn_stats_tlv {
 	u32 mac_id__hwq_id__word;
 };
@@ -822,6 +846,9 @@ struct htt_sched_txq_sched_ineligibility
 	u32 sched_ineligibility[0];
 };
 
+#define	HTT_TX_PDEV_STATS_SCHED_PER_TXQ_MAC_ID	GENMASK(7, 0)
+#define	HTT_TX_PDEV_STATS_SCHED_PER_TXQ_ID	GENMASK(15, 8)
+
 struct htt_tx_pdev_stats_sched_per_txq_tlv {
 	u32 mac_id__txq_id__word;
 	u32 sched_policy;
@@ -943,6 +970,9 @@ struct htt_tx_tqm_error_stats_tlv {
 };
 
 /* == TQM CMDQ stats == */
+#define	HTT_TX_TQM_CMDQ_STATUS_MAC_ID	GENMASK(7, 0)
+#define	HTT_TX_TQM_CMDQ_STATUS_CMDQ_ID	GENMASK(15, 8)
+
 struct htt_tx_tqm_cmdq_status_tlv {
 	u32 mac_id__cmdq_id__word;
 	u32 sync_cmd;
@@ -1088,6 +1118,15 @@ struct htt_tx_de_cmn_stats_tlv {
 #define HTT_STATS_LOW_WM_BINS      5
 #define HTT_STATS_HIGH_WM_BINS     5
 
+#define HTT_RING_IF_STATS_NUM_ELEMS		GENMASK(15, 0)
+#define	HTT_RING_IF_STATS_PREFETCH_TAIL_INDEX	GENMASK(31, 16)
+#define HTT_RING_IF_STATS_HEAD_IDX		GENMASK(15, 0)
+#define HTT_RING_IF_STATS_TAIL_IDX		GENMASK(31, 16)
+#define HTT_RING_IF_STATS_SHADOW_HEAD_IDX	GENMASK(15, 0)
+#define HTT_RING_IF_STATS_SHADOW_TAIL_IDX	GENMASK(31, 16)
+#define HTT_RING_IF_STATS_LWM_THRESH		GENMASK(15, 0)
+#define HTT_RING_IF_STATS_HWM_THRESH		GENMASK(31, 16)
+
 struct htt_ring_if_stats_tlv {
 	u32 base_addr; /* DWORD aligned base memory address of the ring */
 	u32 elem_size;
@@ -1150,6 +1189,19 @@ struct htt_sfm_cmn_tlv {
 };
 
 /* == SRNG STATS == */
+#define	HTT_SRING_STATS_MAC_ID			GENMASK(7, 0)
+#define HTT_SRING_STATS_RING_ID			GENMASK(15, 8)
+#define HTT_SRING_STATS_ARENA			GENMASK(23, 16)
+#define HTT_SRING_STATS_EP			BIT(24)
+#define HTT_SRING_STATS_NUM_AVAIL_WORDS		GENMASK(15, 0)
+#define HTT_SRING_STATS_NUM_VALID_WORDS		GENMASK(31, 16)
+#define HTT_SRING_STATS_HEAD_PTR		GENMASK(15, 0)
+#define HTT_SRING_STATS_TAIL_PTR		GENMASK(31, 16)
+#define HTT_SRING_STATS_CONSUMER_EMPTY		GENMASK(15, 0)
+#define HTT_SRING_STATS_PRODUCER_FULL		GENMASK(31, 16)
+#define HTT_SRING_STATS_PREFETCH_COUNT		GENMASK(15, 0)
+#define HTT_SRING_STATS_INTERNAL_TAIL_PTR	GENMASK(31, 16)
+
 struct htt_sring_stats_tlv {
 	u32 mac_id__ring_id__arena__ep;
 	u32 base_addr_lsb; /* DWORD aligned base memory address of the ring */
--- a/drivers/net/wireless/ath/ath12k/dp.h
+++ b/drivers/net/wireless/ath/ath12k/dp.h
@@ -1983,6 +1983,13 @@ struct ath12k_htt_extd_stats_msg {
 	u8 data[0];
 } __packed;
 
+#define	HTT_MAC_ADDR_L32_0	GENMASK(7, 0)
+#define	HTT_MAC_ADDR_L32_1	GENMASK(15, 8)
+#define	HTT_MAC_ADDR_L32_2	GENMASK(23, 16)
+#define	HTT_MAC_ADDR_L32_3	GENMASK(31, 24)
+#define	HTT_MAC_ADDR_H16_0	GENMASK(7, 0)
+#define	HTT_MAC_ADDR_H16_1	GENMASK(15, 8)
+
 struct htt_mac_addr {
 	u32 mac_addr_l32;
 	u32 mac_addr_h16;
