From 4b2287c78e790178d7e95c23c526ec1fcaf5ed41 Mon Sep 17 00:00:00 2001
From: Manish Dharanenthiran <quic_mdharane@quicinc.com>
Date: Sun, 9 Jul 2023 11:37:55 +0530
Subject: [PATCH 1/4] wifi: ath12k: Add support to parse mlo chip crash info
 TLV

Add support to parse MLO global chip crash info TLV and
per chip crash info TLV from shmem. The information parsed
will be used to identify the crash reason for corresponding
chip_id and the recovery mode used for the same.

Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c |  70 ++++++++++++
 drivers/net/wireless/ath/ath12k/core.h |  10 ++
 drivers/net/wireless/ath/ath12k/qmi.c  | 145 ++++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/wmi.h  |  69 ++++++++++++
 4 files changed, 291 insertions(+), 3 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index 2c8e974..1cbe9b4 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -1068,6 +1068,65 @@ static int ath12k_core_mgmt_rx_reordering_init(struct ath12k_base *ab)
 		ar->rx_reo_pdev_ctx.init_complete = true;
 	}
 
+	return 0;
+}
+
+static int ath12k_core_mlo_shmem_per_chip_crash_info_addresses(
+		struct ath12k_base *ab,
+		struct ath12k_host_mlo_glb_chip_crash_info *global_chip_crash_info,
+		int chip_id)
+{
+	int i;
+	struct ath12k_host_mlo_glb_per_chip_crash_info *per_chip_crash_info = NULL;
+
+	for (i = 0; i < global_chip_crash_info->no_of_chips; i++)
+	{
+		per_chip_crash_info = &global_chip_crash_info->per_chip_crash_info[i];
+
+		if (!per_chip_crash_info)
+			return -EINVAL;
+
+		if (chip_id == per_chip_crash_info->chip_id)
+			break;
+	}
+
+	if (i >= global_chip_crash_info->no_of_chips) {
+		ath12k_err(ab, "error in chip id:%d\n", chip_id);
+		return 0;
+	}
+
+	if (!per_chip_crash_info ||
+	    !per_chip_crash_info->crash_reason ||
+	    !per_chip_crash_info->recovery_mode) {
+		ath12k_err(ab, "crash_reason address is null\n");
+		return 0;
+	}
+
+	ab->crash_info_address = per_chip_crash_info->crash_reason;
+	ab->recovery_mode_address = per_chip_crash_info->recovery_mode;
+
+	return 0;
+}
+
+static int ath12k_core_mlo_shmem_crash_info_init(struct ath12k_base *ab, int index)
+{
+	struct ath12k_hw_group *ag = ab->ag;
+	struct ath12k_host_mlo_mem_arena *mlomem_arena_ctx;
+	struct ath12k_host_mlo_glb_chip_crash_info *global_chip_crash_info;
+
+	mlomem_arena_ctx = &ab->ag->mlomem_arena;
+
+	if (!(ag->mlo_mem.is_mlo_mem_avail))
+		return 0;
+
+	global_chip_crash_info = &mlomem_arena_ctx->global_chip_crash_info;
+
+	if (ath12k_core_mlo_shmem_per_chip_crash_info_addresses(ab,
+			global_chip_crash_info,
+			index) < 0) {
+		ath12k_warn(ab, "per_chip_crash_info is not set\n");
+		return -EINVAL;
+	}
 
 	return 0;
 }
@@ -1433,6 +1492,11 @@ static int ath12k_core_hw_group_start(struct ath12k_hw_group *ag)
 			goto pdev_cleanup;
 		}
 
+		ret = ath12k_core_mlo_shmem_crash_info_init(ab, i);
+		if (ret) {
+			ath12k_err(ab, "failed to parse crash info %d\n", ret);
+		}
+
 		set_bit(ATH12K_FLAG_REGISTERED, &ab->dev_flags);
 
 		mutex_unlock(&ab->core_lock);
@@ -2123,6 +2187,12 @@ static void ath12k_core_reset(struct work_struct *work)
 		ath12k_core_disable_ds_rtnl_bond_release(ab);
 	}
 #endif
+
+	ag->recovery_mode = ATH12K_MLO_RECOVERY_MODE0;
+	if (ab->recovery_mode_address) {
+		ag->recovery_mode = *ab->recovery_mode_address;
+	}
+
 	/* Sometimes the recovery will fail and then the next all recovery fail,
 	 * this is to avoid infinite recovery since it can not recovery success.
 	 */
diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index f23e133..0736948 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -327,6 +327,12 @@ struct ath12k_key_conf {
 	struct ieee80211_key_conf *key;
 };
 
+struct ath12k_recovery_cache {
+	struct ath12k_tx_conf tx_conf;
+	struct ath12k_key_conf key_conf;
+	u64 bss_conf_changed;
+};
+
 struct ath12k_vif_cache {
 	struct ath12k_tx_conf tx_conf;
 	struct ath12k_key_conf key_conf;
@@ -1267,6 +1273,7 @@ struct ath12k_hw_group {
 	bool hw_queues_stopped;
 	bool mgmt_rx_reorder;
 	unsigned long dev_flags;
+	enum ath12k_mlo_recovery_mode recovery_mode;
 	struct ath12k_hw *ah[ATH12K_GROUP_MAX_RADIO];
 	struct ath12k_base *ab[ATH12K_MAX_SOCS];
 	struct ath12k __rcu *hw_links[ATH12K_GROUP_MAX_RADIO];
@@ -1454,6 +1461,9 @@ struct ath12k_base {
 	u32 chwidth_num_peer_caps;
 	struct ath12k_dp_umac_reset dp_umac_reset;
 
+	u32 *crash_info_address;
+	u32 *recovery_mode_address;
+
 	/* must be last */
 	u8 drv_priv[0] __aligned(sizeof(void *));
 };
diff --git a/drivers/net/wireless/ath/ath12k/qmi.c b/drivers/net/wireless/ath/ath12k/qmi.c
index ff6df9d..6e598e8 100644
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -3249,6 +3249,21 @@ out:
 	return ret;
 }
 
+/**
+ * ath12k_free_mlo_glb_per_chip_crash_info() - Free MLO per_chip crash info
+ * @snapshot_info: Pointer to MLO Global crash info
+ *
+ * Return: None
+ */
+static void ath12k_free_mlo_glb_per_chip_crash_info(
+		struct ath12k_host_mlo_glb_chip_crash_info *global_chip_crash_info)
+{
+	if (global_chip_crash_info->per_chip_crash_info) {
+		kfree(global_chip_crash_info->per_chip_crash_info);
+		global_chip_crash_info->per_chip_crash_info = NULL;
+	}
+}
+
 /**
  * ath12k_free_mlo_mgmt_rx_reo_per_link_info() - Free Rx REO per-link info
  * @snapshot_info: Pointer to MGMT Rx REO snapshot info
@@ -3319,6 +3334,8 @@ static void ath12k_qmi_free_mlo_mem_chunk(struct ath12k_base *ab,
 		mlomem_arena_ctx->init_done = false;
 		ath12k_free_mlo_mgmt_rx_reo_per_link_info
 			(&mlomem_arena_ctx->rx_reo_snapshot_info);
+		ath12k_free_mlo_glb_per_chip_crash_info
+			(&mlomem_arena_ctx->global_chip_crash_info);
 	}
 	mutex_unlock(&mlomem_arena_ctx->mutex_lock);
 
@@ -3642,6 +3659,124 @@ ath12k_mgmt_rx_reo_get_num_links_from_valid_link_bitmap(u16 valid_link_bmap)
 	return num_links;
 }
 
+static int
+ath12k_mgmt_mlo_global_per_chip_crash_info_tlv(struct ath12k_base *ab,
+					u8 *data,
+					size_t remaining_len, u8 cur_chip_id,
+					struct ath12k_host_mlo_glb_per_chip_crash_info *per_chip_crash_info)
+{
+	struct mlo_glb_per_chip_crash_info *ptlv;
+	u32 tlv_len, tlv_tag;
+	u8 *crash_reason, *recovery_mode;
+
+	if (ath12k_mgmt_rx_reo_process_tlv_header(ab, data, remaining_len,
+				ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_PER_CHIP_CRASH_INFO,
+				&tlv_len, &tlv_tag) < 0) {
+		return -EPERM;
+	}
+
+	ptlv = (struct mlo_glb_per_chip_crash_info *)data;
+	per_chip_crash_info->chip_id = cur_chip_id;
+	crash_reason = (u8 *)get_field_pointer_in_tlv(ptlv, crash_reason, tlv_len);
+	recovery_mode = (u8 *)get_field_pointer_in_tlv(ptlv, recovery_mode, tlv_len);
+
+	per_chip_crash_info->crash_reason = (void *)crash_reason;
+	per_chip_crash_info->recovery_mode = (void *)recovery_mode;
+
+	return tlv_len;
+}
+
+static int
+ath12k_mgmt_mlo_global_chip_crash_info_tlv(struct ath12k_base *ab,
+				       u8 *data,
+				       size_t remaining_len,
+				       struct ath12k_host_mlo_glb_chip_crash_info *global_chip_crash_info)
+{
+	struct mlo_glb_chip_crash_info *ptlv;
+	u32 tlv_len, tlv_tag;
+	u32 chip_info;
+	u8 chip_map;
+
+	if (ath12k_mgmt_rx_reo_process_tlv_header(ab, data, remaining_len,
+			       ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_CHIP_CRASH_INFO,
+			       &tlv_len, &tlv_tag) < 0) {
+		return -EPERM;
+	}
+
+	ptlv = (struct  mlo_glb_chip_crash_info *)data;
+	chip_info = get_field_value_in_tlv(ptlv, chip_info, tlv_len);
+	global_chip_crash_info->no_of_chips =
+			MLO_SHMEM_CHIP_CRASH_INFO_PARAM_NO_OF_CHIPS_GET(chip_info);
+	chip_map = MLO_SHMEM_CHIP_CRASH_INFO_PARAM_VALID_CHIP_BMAP_GET(chip_info);
+
+	memcpy(&global_chip_crash_info->valid_chip_bmap,
+	       &chip_map,
+	       min(sizeof(global_chip_crash_info->valid_chip_bmap),
+		   sizeof(chip_map)));
+
+	/* Allocate memory to extrace per chip crash info */
+	global_chip_crash_info->per_chip_crash_info = kmalloc_array(
+						global_chip_crash_info->no_of_chips,
+						sizeof(*global_chip_crash_info->per_chip_crash_info),
+						GFP_KERNEL);
+
+	if (!global_chip_crash_info->per_chip_crash_info)
+	{
+		ath12k_warn(ab, "Couldn't allocate memory for per chip crash info!\n");
+		return -ENOBUFS;
+	}
+
+	return tlv_len;
+}
+
+static int
+ath12k_mgmt_mlo_global_chip_crash_info(struct ath12k_base *ab,
+				       u8 *data,
+				       size_t remaining_len,
+				       struct ath12k_host_mlo_glb_chip_crash_info *global_chip_crash_info)
+{
+	int parsed_bytes, len, cur_chip_id;
+	u8 chip_id, valid_chip_bmap;
+
+	len = ath12k_mgmt_mlo_global_chip_crash_info_tlv(ab, data, remaining_len,
+							global_chip_crash_info);
+	ATH12K_VALIDATE_PARSED_DATA_POINTER(len, data, remaining_len);
+	parsed_bytes = len;
+
+	if (len < 0)
+		return len;
+
+	memcpy(&valid_chip_bmap,
+	       &global_chip_crash_info->valid_chip_bmap,
+	       min(sizeof(valid_chip_bmap),
+		   sizeof(global_chip_crash_info->valid_chip_bmap)));
+
+	/* Extract per chip crash info */
+	for (chip_id = 0; chip_id < global_chip_crash_info->no_of_chips;
+	     chip_id++) {
+		cur_chip_id = find_first_bit(&valid_chip_bmap, 8);
+		__clear_bit(cur_chip_id, &valid_chip_bmap);
+
+		if (WARN_ON(cur_chip_id < 0)) {
+			/* Exit gracefully */
+			return 0;
+		}
+
+		len = ath12k_mgmt_mlo_global_per_chip_crash_info_tlv(ab, data,
+						remaining_len, cur_chip_id,
+						&global_chip_crash_info->per_chip_crash_info[chip_id]);
+		if (len < 0) {
+			WARN_ON(1);
+			return len;
+		}
+
+		ATH12K_VALIDATE_PARSED_DATA_POINTER(len, data, remaining_len);
+		parsed_bytes += len;
+	}
+
+	return parsed_bytes;
+}
+
 /**
  * ath12k_mgmt_rx_reo_extract_mlo_glb_rx_reo_snapshot_info_tlv() - extract
  * ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_RX_REO_SNAPSHOT_INFO TLV
@@ -3917,6 +4052,11 @@ static int ath12k_qmi_parse_mlo_mem_arena(struct ath12k_base *ab,
 	ATH12K_VALIDATE_PARSED_DATA_POINTER(len, data, remaining_len);
 	parsed_bytes += len;
 
+	len = ath12k_mgmt_mlo_global_chip_crash_info(ab, data, remaining_len,
+						     &mlomem_arena_ctx->global_chip_crash_info);
+	ATH12K_VALIDATE_PARSED_DATA_POINTER(len, data, remaining_len);
+	parsed_bytes += len;
+
 	return parsed_bytes;
 }
 
@@ -3927,9 +4067,6 @@ int ath12k_qmi_mlo_global_snapshot_mem_init(struct ath12k_base *ab)
 	struct target_mem_chunk *mlo_chunk;
 	int ret = 0, mlo_idx = 0;
 
-	if (!ag->mgmt_rx_reorder)
-		return 0;
-
 	if (!ag->mlo_mem.is_mlo_mem_avail)
 		return 0;
 
@@ -3957,6 +4094,8 @@ int ath12k_qmi_mlo_global_snapshot_mem_init(struct ath12k_base *ab)
 		ath12k_err(ab, "parsing of mlo shared memory failed ret %d\n", ret);
 		ath12k_free_mlo_mgmt_rx_reo_per_link_info(
 				&mlomem_arena_ctx->rx_reo_snapshot_info);
+		ath12k_free_mlo_glb_per_chip_crash_info
+			(&mlomem_arena_ctx->global_chip_crash_info);
 		mutex_unlock(&mlomem_arena_ctx->mutex_lock);
 		return ret;
 	}
diff --git a/drivers/net/wireless/ath/ath12k/wmi.h b/drivers/net/wireless/ath/ath12k/wmi.h
index e41f414..d385b90 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -5354,6 +5354,32 @@ struct wmi_pdev_update_muedca_event {
 
 #define WLAN_MGMT_TXRX_HOST_MAX_ANTENNA 4
 
+/**
+ * ath12k_host_mlo_glb_per_chip_crash_info - per chip crash
+ * information in MLO global shared memory
+ * @chip_id: MLO chip id
+ * @crash_reason: Address of the crash_reason corresponding to chip_id
+ * recovery_mode: Address of recovery mode corressponding to chip_id
+ */
+struct ath12k_host_mlo_glb_per_chip_crash_info {
+	u8 chip_id;
+	void *crash_reason;
+	void *recovery_mode;
+};
+
+/**
+ * ath12k_host_mlo_glb_chip_crash_info - chip crash information in MLO
+ * global shared memory
+ * @no_of_chips: No of partner chip to which crash information is shared
+ * @valid_chip_bmap: Valid chip bitmap
+ * @per_chip_crash_info: pointer to per chip crash information.
+ */
+struct ath12k_host_mlo_glb_chip_crash_info {
+	u8 no_of_chips;
+	u8 valid_chip_bmap;
+	struct ath12k_host_mlo_glb_per_chip_crash_info *per_chip_crash_info;
+};
+
 /**
  * ath12k_host_mlo_glb_rx_reo_snapshot_info - MGMT Rx REO information in MLO
  * global shared memory
@@ -5392,6 +5418,7 @@ struct ath12k_host_ath12k_mlo_glb_shmem_params {
 struct ath12k_host_mlo_mem_arena {
 	struct ath12k_host_ath12k_mlo_glb_shmem_params shmem_params;
 	struct ath12k_host_mlo_glb_rx_reo_snapshot_info rx_reo_snapshot_info;
+	struct ath12k_host_mlo_glb_chip_crash_info global_chip_crash_info;
 	bool init_done;
 	/* Protect the parallel initialization */
 	struct mutex mutex_lock;
@@ -5501,6 +5528,48 @@ struct mlo_glb_link_info {
 	 */
 };
 
+enum ath12k_mlo_chip_crash_reason {
+	ATH12K_MLO_SHMEM_CRASH_PARTNER_CHIPS = 1,
+};
+
+struct mlo_glb_chip_crash_info {
+	/* TLV tag and len; tag equals
+	 * MLO_SHMEM_TLV_STRUCT_MLO_GLB_CHIP_CRASH_INFO */
+	u32 tlv_header;
+
+	/**
+	 * [1:0]:  no_of_chips
+	 * [4:2]:  valid_chip_bmap
+	 * For number of chips beyond 3, extension fields are added.
+	 * [9:5]:  valid_chip_bmap_ext
+	 * [15:12]: no_of_chips_ext
+	 * [31:16]: reserved
+	 */
+	u32 chip_info;
+	/*
+	 * This TLV is followed by array of mlo_glb_per_chip_crash_info:
+	 * mlo_glb_per_chip_crash_info will have multiple instances equal to
+	 * num of partner chips received by no_of_chips
+	 * mlo_glb_per_chip_crash_info per_chip_crash_info[];
+	 */
+};
+
+struct mlo_glb_per_chip_crash_info {
+	/* TLV tag and len; tag equals MLO_SHMEM_TLV_STRUCT_MLO_GLB_PER_CHIP_CRASH_INFO */
+	u32 tlv_header;
+
+	/*
+	 * crash reason, takes value in enum ath12k_mlo_chip_crash_reason
+	 */
+	u32 crash_reason;
+
+	/*
+	 * recovery mode, takes value in enum ath12k_mlo_recovery_mode
+	 */
+	u32 recovery_mode;
+};
+
+
 /* Definition of the complete REO snapshot info */
 struct mlo_glb_rx_reo_snapshot_info {
 	/* TLV tag and len; tag equals ATH12K_MLO_SHMEM_TLV_STRUCT_MLO_GLB_RX_REO_SNAPSHOT_INFO */
-- 
2.17.1

