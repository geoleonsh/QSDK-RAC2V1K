From dd02051c119cf47ed97b061aaf289a2dcbe50ebe Mon Sep 17 00:00:00 2001
From: Venkateswara Naralasetty <vnaralas@codeaurora.org>
Date: Mon, 19 Apr 2021 11:11:06 +0530
Subject: [PATCH] ath12k: fix radar detection issue in 160mhz

Failed to detect RADAR pulses in the secondary 80mhz when the
the AP's primary 80mzh is in non-dfs region in 160mhz.

This is due to host is not setting WMI channel flags WMI_CHAN_INFO_DFS
and WMI_CHAN_INFO_DFS_FREQ2 in case of primary 80 is in non-dfs region.
HALPHY detects the RADAR pulses only when thse channel flags are set.

Fix this issue by setting WMI channel flags WMI_CHAN_INFO_DFS and
WMI_CHAN_INFO_DFS_FREQ2 based on the radar_enabled flag from channel
context.

Signed-off-by: Venkateswara Naralasetty <vnaralas@codeaurora.org>
Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 31 +++++++++++++++++----------
 1 file changed, 20 insertions(+), 11 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -7987,7 +7987,7 @@ static void ath12k_mac_op_remove_chanctx
 static int
 ath12k_mac_vdev_start_restart(struct ath12k_vif *arvif,
 			      const struct cfg80211_chan_def *chandef,
-			      bool restart)
+			      bool restart, bool radar_enabled)
 {
 	struct ath12k *ar = arvif->ar;
 	struct ath12k_base *ab = ar->ab;
@@ -8037,6 +8037,8 @@ ath12k_mac_vdev_start_restart(struct ath
 		arg.channel.chan_radar =
 			!!(chandef->chan->flags & IEEE80211_CHAN_RADAR);
 
+		arg.channel.freq2_radar = radar_enabled;
+
 		arg.channel.passive = arg.channel.chan_radar;
 
 		spin_lock_bh(&ab->base_lock);
@@ -8149,20 +8151,23 @@ err:
 }
 
 static int ath12k_mac_vdev_start(struct ath12k_vif *arvif,
-				 const struct cfg80211_chan_def *chandef)
+				 const struct cfg80211_chan_def *chandef,
+				 bool radar_enabled)
 {
-	return ath12k_mac_vdev_start_restart(arvif, chandef, false);
+	return ath12k_mac_vdev_start_restart(arvif, chandef, false,
+			radar_enabled);
 }
 
 static int ath12k_mac_vdev_restart(struct ath12k_vif *arvif,
 				   const struct cfg80211_chan_def *chandef,
-				   bool pseudo_restart)
+				   bool pseudo_restart, bool radar_enabled)
 {
 	struct ath12k_base *ab = arvif->ar->ab;
 	int ret;
 
 	if(!pseudo_restart)
-		return ath12k_mac_vdev_start_restart(arvif, chandef, true);
+		return ath12k_mac_vdev_start_restart(arvif, chandef, true,
+				radar_enabled);
 
 	ret = ath12k_mac_vdev_stop(arvif);
 	if (ret) {
@@ -8171,7 +8176,7 @@ static int ath12k_mac_vdev_restart(struc
 		return ret;
 	}
 
-	ret = ath12k_mac_vdev_start(arvif, chandef);
+	ret = ath12k_mac_vdev_start(arvif, chandef, radar_enabled);
 	if (ret) {
 		ath12k_warn(ab, "failed to start vdev %d: %d during restart\n",
 			    arvif->vdev_id, ret);
@@ -8193,22 +8198,27 @@ static int ath12k_vdev_restart_sequence(
 	struct vdev_up_params params = { 0 };
 	int ret = -EINVAL;
 
+	spin_lock_bh(&ar->data_lock);
+	old_chanctx = arvif->chanctx;
+	memcpy(&arvif->chanctx, new_ctx, sizeof(*new_ctx));
+	spin_unlock_bh(&ar->data_lock);
+
 	if (vif_down_failed_map & BIT_ULL(vdev_index))
-		ret = ath12k_mac_vdev_restart(arvif, &new_ctx->def, false);
+		ret = ath12k_mac_vdev_restart(arvif, &new_ctx->def, false,
+				new_ctx->radar_enabled);
 	else
-		ret = ath12k_mac_vdev_restart(arvif, &new_ctx->def, true);
+		ret = ath12k_mac_vdev_restart(arvif, &new_ctx->def, true,
+				new_ctx->radar_enabled);
 
 	if (ret) {
 		ath12k_warn(ar->ab, "failed to restart vdev %d: %d\n",
 			    arvif->vdev_id, ret);
+		spin_lock_bh(&ar->data_lock);
+		arvif->chanctx = old_chanctx;
+		spin_unlock_bh(&ar->data_lock);
 		return ret;
 	}
 
-	spin_lock_bh(&ar->data_lock);
-	old_chanctx = arvif->chanctx;
-	memcpy(&arvif->chanctx, new_ctx, sizeof(*new_ctx));
-	spin_unlock_bh(&ar->data_lock);
-
 	if (!arvif->is_up)
 		return -EOPNOTSUPP;
 
@@ -8442,10 +8452,9 @@ ath12k_mac_update_vif_chan(struct ath12k
 						   vifs[i].new_ctx,
 						   vif_down_failed_map, i);
 
-		if (ret) {
+		if (ret && ret != -EOPNOTSUPP) {
 			ath12k_warn(ab, "failed to bring up vdev %d: %d\n",
 				    arvif->vdev_id, ret);
-			continue;
 		}
 	}
 
@@ -8546,7 +8555,8 @@ static void ath12k_mac_op_change_chanctx
 	if (WARN_ON(changed & IEEE80211_CHANCTX_CHANGE_CHANNEL))
 		goto unlock;
 
-	if (changed & IEEE80211_CHANCTX_CHANGE_WIDTH)
+	if (changed & IEEE80211_CHANCTX_CHANGE_WIDTH ||
+			changed & IEEE80211_CHANCTX_CHANGE_RADAR)
 		ath12k_mac_update_active_vif_chan(ar, ctx);
 
 	/* TODO: Recalc radar detection */
@@ -8565,7 +8575,8 @@ static int ath12k_start_vdev_delay(struc
 	if (WARN_ON(arvif->is_started))
 		return -EBUSY;
 
-	ret = ath12k_mac_vdev_start(arvif, &arvif->chanctx.def);
+	ret = ath12k_mac_vdev_start(arvif, &arvif->chanctx.def,
+			arvif->chanctx.radar_enabled);
 	if (ret) {
 		ath12k_warn(ab, "failed to start vdev %i addr %pM on freq %d: %d\n",
 			    arvif->vdev_id, vif->addr,
@@ -9217,7 +9228,7 @@ ath12k_mac_op_assign_vif_chanctx(struct
 		goto out;
 	}
 
-	ret = ath12k_mac_vdev_start(arvif, &ctx->def);
+	ret = ath12k_mac_vdev_start(arvif, &ctx->def, ctx->radar_enabled);
 	if (ret) {
 		ath12k_warn(ab, "failed to start vdev %i addr %pM on freq %d: %d\n",
 			    arvif->vdev_id, vif->addr,
