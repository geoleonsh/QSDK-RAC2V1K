From dc3d0124fe7bea10eb39318d5bcd1bd10e9c9fff Mon Sep 17 00:00:00 2001
From: Arulanbu Balusamy <quic_abalusam@quicinc.com>
Date: Thu, 8 Jun 2023 23:36:57 +0530
Subject: [PATCH] Overflow header changes


This changes has ath12k integration with OpenWRT-ginger branch, Also
fixed the various compilation issues due to kernel upgradation from 5.x to 6.x,
some API names are changed and some unsupported API are disable in the kernel 6.x
this patch support for both the kernel versions

Signed-off-by: Arulanbu Balusamy <quic_abalusam@quicinc.com>
---
 include/linux/overflow.h | 2 ++
 1 file changed, 2 insertions(+)

Index: backports-20220822-5.4.213-ef7197996efe/include/linux/overflow.h
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/include/linux/overflow.h
+++ backports-20220822-5.4.213-ef7197996efe/include/linux/overflow.h
@@ -30,7 +30,9 @@
  * https://mail-index.netbsd.org/tech-misc/2007/02/05/0000.html -
  * credit to Christian Biere.
  */
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 #define is_signed_type(type)       (((type)(-1)) < (type)1)
+#endif
 #define __type_half_max(type) ((type)1 << (8*sizeof(type) - 1 - is_signed_type(type)))
 #define type_max(T) ((T)((__type_half_max(T) - 1) + __type_half_max(T)))
 #define type_min(T) ((T)((T)-type_max(T)-(T)1))
Index: backports-20220822-5.4.213-ef7197996efe/backport-include/linux/slab.h
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/backport-include/linux/slab.h
+++ backports-20220822-5.4.213-ef7197996efe/backport-include/linux/slab.h
@@ -4,9 +4,8 @@
 #include <linux/version.h>
 
 #if LINUX_VERSION_IS_LESS(5,9,0)
-#define kfree_sensitive(x)	kzfree(x)
+#define kfree_sensitive(x)	kzfree(x)  /* For backward compatibility */
 #endif
 
-#define kfree_sensitive(x)	kzfree(x)	/* For backward compatibility */
 
 #endif /* __BACKPORT_SLAB_H */
Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/ahb.h
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/ahb.h
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/ahb.h
@@ -7,7 +7,7 @@
 #define ATH12K_AHB_H
 
 #include <linux/remoteproc.h>
-
+#include <linux/remoteproc/qcom_rproc.h>
 #include "core.h"
 
 #define ATH12K_AHB_RECOVERY_TIMEOUT (3 * HZ)
@@ -47,24 +47,33 @@ static inline struct ath12k_ahb *ath12k_
 {
 	return (struct ath12k_ahb *)ab->drv_priv;
 }
-
-static inline int ath12k_rproc_register_subsys_notifier(const char *name,
-							struct notifier_block *nb,
-							struct notifier_block *atomic_nb)
+static inline int ath12k_rproc_register_subsys_notifier(struct ath12k_base *ab)
 {
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
 #ifdef CONFIG_REMOTEPROC
-	return rproc_register_subsys_notifier(name, nb, atomic_nb);
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
+	return rproc_register_subsys_notifier(ab_ahb->tgt_rrproc->name, &ab->ssr_nb, &ab->atomic_ssr_nb);
+#else
+	ab->ssr_handle = qcom_register_ssr_notifier(ab_ahb->tgt_rrproc->name, &ab->atomic_ssr_nb);
+	if (!ab->ssr_handle)
+		return -EINVAL;
+	return 0;
+#endif
 #else
 	return -ENODEV;
 #endif
 }
-
-static inline int ath12k_rproc_unregister_subsys_notifier(const char *name,
-							  struct notifier_block *nb,
-							  struct notifier_block *atomic_nb)
+static inline int ath12k_rproc_unregister_subsys_notifier(struct ath12k_base *ab)
 {
 #ifdef CONFIG_REMOTEPROC
-	return rproc_unregister_subsys_notifier(name, nb, atomic_nb);
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
+	return rproc_unregister_subsys_notifier(ab_ahb->tgt_rrproc->name, &ab->ssr_nb, &ab->atomic_ssr_nb);
+#else
+	if (ab->ssr_handle)
+		qcom_unregister_ssr_notifier(ab->ssr_handle, &ab->atomic_ssr_nb);
+	return 0;
+#endif
 #else
 	return -ENODEV;
 #endif
Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/core.c
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/core.c
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/core.c
@@ -1674,8 +1674,7 @@ static int ath12k_core_ssr_notifier_cb(s
 				       void *data)
 {
 	struct ath12k_base *ab = container_of(nb, struct ath12k_base, ssr_nb);
-
-	if (ab->collect_dump && (event == SUBSYS_AFTER_POWERUP)) {
+		if (ab->collect_dump && (event == ATH12K_SSR_POWERUP)) {
 		ab->collect_dump = false;
 		wake_up(&ab->ssr_dump_wq);
 		return NOTIFY_OK;
@@ -1696,9 +1695,7 @@ static int ath12k_core_atomic_ssr_notifi
 	struct device_node *rrproc_node = NULL;
 	struct platform_device *ssr_pdev = (struct platform_device *)data;
 	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
-
-
-	if (event != SUBSYS_PREPARE_FOR_FATAL_SHUTDOWN)
+	if (event != ATH12K_SSR_PREPARE_SHUTDOWN)
 		return NOTIFY_DONE;
 
 	ab->collect_dump = true;
@@ -1978,7 +1975,6 @@ static void ath12k_rproc_recovery_do_cor
 		rproc->ops->coredump(rproc);
 	}
 }
-
 static int ath12k_rproc_recovery_stop_coredump(struct ath12k_base *ab)
 {
 	int ret;
@@ -1986,7 +1982,11 @@ static int ath12k_rproc_recovery_stop_co
 
 	if (ab_ahb->tgt_rproc) {
 		ab_ahb->tgt_rproc->state = RPROC_CRASHED;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 		ret = rproc_stop(ab_ahb->tgt_rproc, true);
+#else
+		ret = rproc_shutdown(ab_ahb->tgt_rproc);
+#endif
 		if (ret < 0) {
 			ath12k_err(ab, "userpd rproc stop failed\n");
 			return ret;
@@ -1995,7 +1995,11 @@ static int ath12k_rproc_recovery_stop_co
 	}
 	if (ab_ahb->tgt_rrproc) {
 		ab_ahb->tgt_rrproc->state = RPROC_RUNNING;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 		ret = rproc_stop(ab_ahb->tgt_rrproc, true);
+#else
+		ret = rproc_shutdown(ab_ahb->tgt_rrproc);
+#endif
 		if (ret < 0) {
 			ath12k_err(ab, "rootpd rproc stop failed\n");
 			return ret;
@@ -2025,7 +2029,11 @@ static int ath12k_rproc_recovery_power_u
 			ath12k_err(ab, "request_firmware failed: %d\n", ret);
 			return ret;
 		}
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 		ret = rproc_start(rproc_rpd, firmware_p);
+#else
+		ret = rproc_boot(rproc_rpd);
+#endif
 		if (ret < 0) {
 			ath12k_err(ab, "Root pd rproc_start failed: %d\n", ret);
 			return ret;
@@ -2040,7 +2048,11 @@ static int ath12k_rproc_recovery_power_u
 						ret);
 				return ret;
 			}
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 			ret = rproc_start(rproc, firmware_p);
+#else
+			ret = rproc_boot(rproc);
+#endif
 			if (ret < 0) {
 				ath12k_err(ab, "User pd rproc_start failed: %d\n", ret);
 				return ret;
@@ -2094,6 +2106,7 @@ static void ath12k_core_disable_ds_rtnl_
 }
 #endif
 
+
 static void ath12k_core_reset(struct work_struct *work)
 {
 	struct ath12k_base *ab = container_of(work, struct ath12k_base, reset_work);
Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/dp_rx.h
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/dp_rx.h
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/dp_rx.h
@@ -9,6 +9,9 @@
 #include "core.h"
 #include "rx_desc.h"
 #include "debug.h"
+#if LINUX_VERSION_IS_GEQ(5,10,0)
+#include "crypto/hash.h"
+#endif
 
 /* different supported pkt types for routing */
 enum ath12k_routing_pkt_type {
Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/hal_rx.c
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/hal_rx.c
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/hal_rx.c
@@ -30,8 +30,12 @@ static int ath12k_hal_reo_cmd_queue_stat
 		  u32_encode_bits(sizeof(*desc), HAL_TLV_HDR_LEN);
 
 	desc = (struct hal_reo_get_queue_stats *)tlv->value;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 	memset(&desc->queue_addr_lo, 0,
 	       (sizeof(*desc) - sizeof(struct hal_reo_cmd_hdr)));
+#else
+               memset_startat(desc, 0, queue_addr_lo);
+#endif
 
 	desc->cmd.info0 &= ~HAL_REO_CMD_HDR_INFO0_STATUS_REQUIRED;
 	if (cmd->flag & HAL_REO_CMD_FLG_NEED_STATUS)
@@ -64,8 +68,12 @@ static int ath12k_hal_reo_cmd_flush_cach
 		  u32_encode_bits(sizeof(*desc), HAL_TLV_HDR_LEN);
 
 	desc = (struct hal_reo_flush_cache *)tlv->value;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 	memset(&desc->cache_addr_lo, 0,
 	       (sizeof(*desc) - sizeof(struct hal_reo_cmd_hdr)));
+#else
+               memset_startat(desc, 0, cache_addr_lo);
+#endif
 
 	desc->cmd.info0 &= ~HAL_REO_CMD_HDR_INFO0_STATUS_REQUIRED;
 	if (cmd->flag & HAL_REO_CMD_FLG_NEED_STATUS)
@@ -106,8 +114,12 @@ static int ath12k_hal_reo_cmd_update_rx_
 		  u32_encode_bits(sizeof(*desc), HAL_TLV_HDR_LEN);
 
 	desc = (struct hal_reo_update_rx_queue *)tlv->value;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 	memset(&desc->queue_addr_lo, 0,
 	       (sizeof(*desc) - sizeof(struct hal_reo_cmd_hdr)));
+#else
+               memset_startat(desc, 0, queue_addr_lo);
+#endif
 
 	desc->cmd.info0 &= ~HAL_REO_CMD_HDR_INFO0_STATUS_REQUIRED;
 	if (cmd->flag & HAL_REO_CMD_FLG_NEED_STATUS)
Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/dp_tx.c
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -311,12 +311,12 @@ int ath12k_dp_tx_direct(struct ath12k_li
 	tx_desc->mac_id = arvif->pdev_idx;
 	tx_desc->recycler_fast_xmit = 0;
 	tx_desc->timestamp = ktime_get_real();
-
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 	/* the edma driver uses this flags to optimize the cache invalidation */
 	skb->fast_recycled = 1;
 	if (skb->is_from_recycler)
 		tx_desc->recycler_fast_xmit = 1;
-
+#endif
 	skb_cb->vif = arvif->ahvif->vif;
 	skb_cb->paddr =  paddr;
 
@@ -1553,8 +1553,9 @@ int ath12k_dp_tx_completion_handler(stru
 		}
 	}
 	ath12k_hal_srng_access_umac_dst_ring_end_nolock(status_ring);
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 	dev_kfree_skb_list_fast(&free_list_head);
-
+#endif
 	return (orig_budget - budget);
 }
 
Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/mhi.c
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/mhi.c
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/mhi.c
@@ -61,7 +61,9 @@ static struct mhi_channel_config ath12k_
 		.offload_channel = false,
 		.doorbell_mode_switch = false,
 		.auto_queue = false,
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 		.auto_start = true,
+#endif
 	},
 	{
 		.num = 21,
@@ -76,7 +78,9 @@ static struct mhi_channel_config ath12k_
 		.offload_channel = false,
 		.doorbell_mode_switch = false,
 		.auto_queue = true,
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 		.auto_start = true,
+#endif
 	},
 };
 
@@ -447,7 +451,9 @@ int ath12k_mhi_register(struct ath12k_pc
 	mhi_ctrl->status_cb = ath12k_mhi_op_status_cb;
 	mhi_ctrl->read_reg = ath12k_mhi_op_read_reg;
 	mhi_ctrl->write_reg = ath12k_mhi_op_write_reg;
+#if  (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 	mhi_ctrl->dev_id = ab_pci->dev_id;
+#endif
 
 	ret = mhi_register_controller(mhi_ctrl, ab->hw_params->mhi_config);
 	if (ret) {
Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/pci.c
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/pci.c
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/pci.c
@@ -545,9 +545,13 @@ static int ath12k_pci_ext_irq_config(str
 		 * enqueue operation */
 		if (ab->hw_params->ring_mask->tx[i])
 			budget = tx_comp_budget;
-
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 		netif_napi_add(&irq_grp->napi_ndev, &irq_grp->napi,
 			       ath12k_pci_ext_grp_napi_poll, budget);
+#else
+		 netif_napi_add_weight(&irq_grp->napi_ndev, &irq_grp->napi,
+                               ath12k_pci_ext_grp_napi_poll,budget);
+#endif
 
 		if (ab->hw_params->ring_mask->tx[i] ||
 		    ab->hw_params->ring_mask->rx[i] ||
Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/dp_mon.c
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/dp_mon.c
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/dp_mon.c
@@ -925,6 +925,8 @@ ath12k_dp_mon_hal_rx_parse_ru_allocation
 						HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_3);
 		ppdu_info->eht_data[2] |= (ru_allocation2_3 << EHT_RU_ALLOCATION2_3_SHIFT);
 	        /* fallthrough */
+		fallthrough;
+
 	case HAL_EHT_BW_160:
 		num_ru_allocation_known += 2;
 		ru_allocation2_2 = u64_get_bits(__le64_to_cpu(ofdma_cmn_eb2->info0),
@@ -936,6 +938,8 @@ ath12k_dp_mon_hal_rx_parse_ru_allocation
 		ppdu_info->eht_data[2] |=
 				(ru_allocation2_1 << EHT_RU_ALLOCATION2_1_SHIFT);
 		/* fallthrough */
+		fallthrough;
+
 	case HAL_EHT_BW_80:
 		num_ru_allocation_known += 1;
 		ru_allocation1_2 = u64_get_bits(__le64_to_cpu(ofdma_cmn_eb1->info0),
@@ -943,6 +947,8 @@ ath12k_dp_mon_hal_rx_parse_ru_allocation
 		ppdu_info->eht_data[1] |=
 				(ru_allocation1_2 << EHT_RU_ALLOCATION1_2_SHIFT);
 		/* fallthrough */
+		fallthrough;
+
 	case HAL_EHT_BW_40:
 	case HAL_EHT_BW_20:
 		num_ru_allocation_known += 1;
Index: backports-20220822-5.4.213-ef7197996efe/net/wireless/nl80211.c
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/net/wireless/nl80211.c
+++ backports-20220822-5.4.213-ef7197996efe/net/wireless/nl80211.c
@@ -396,10 +396,15 @@ static const struct nla_policy nl80211_t
 	[NL80211_TXRATE_HE_LTF] = NLA_POLICY_RANGE(NLA_U8,
 						   NL80211_RATE_INFO_HE_1XLTF,
 						   NL80211_RATE_INFO_HE_4XLTF),
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
+
 	[NL80211_TXRATE_HE_UL] = {
 		.type = NLA_EXACT_LEN_WARN,
 		.len = sizeof(struct nl80211_txrate_he),
 	},
+#else
+	[NL80211_TXRATE_HE_UL] = NLA_POLICY_EXACT_LEN(sizeof(struct nl80211_txrate_he)),
+#endif
 	[NL80211_TXRATE_EHT] =
 		NLA_POLICY_EXACT_LEN(sizeof(struct nl80211_txrate_eht)),
 	[NL80211_TXRATE_EHT_GI] =  NLA_POLICY_RANGE(NLA_U8,
@@ -18179,6 +18184,7 @@ static struct genl_family nl80211_fam __
 #if LINUX_VERSION_IS_GEQ(5,10,0)
 	.small_ops = nl80211_small_ops,
 	.n_small_ops = ARRAY_SIZE(nl80211_small_ops),
+	.resv_start_op = NL80211_CMD_REMOVE_LINK_STA + 5,
 #endif
 	.mcgrps = nl80211_mcgrps,
 	.n_mcgrps = ARRAY_SIZE(nl80211_mcgrps),
Index: backports-20220822-5.4.213-ef7197996efe/net/mac80211/rx.c
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/net/mac80211/rx.c
+++ backports-20220822-5.4.213-ef7197996efe/net/mac80211/rx.c
@@ -38,8 +38,10 @@ static inline void ieee80211_rx_stats(st
 	struct pcpu_sw_netstats *tstats = this_cpu_ptr(netdev_tstats(dev));
 
 	u64_stats_update_begin(&tstats->syncp);
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 	tstats->rx_packets++;
 	tstats->rx_bytes += len;
+#endif
 	u64_stats_update_end(&tstats->syncp);
 }
 
@@ -59,7 +61,11 @@ static struct sk_buff *ieee80211_clean_s
 
 	if (present_fcs_len)
 		__pskb_trim(skb, skb->len - present_fcs_len);
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 	__pskb_pull(skb, rtap_space);
+#else
+	pskb_pull(skb, rtap_space);
+#endif
 
 	hdr = (void *)skb->data;
 	fc = hdr->frame_control;
@@ -84,7 +90,11 @@ static struct sk_buff *ieee80211_clean_s
 
 	memmove(skb->data + IEEE80211_HT_CTL_LEN, skb->data,
 		hdrlen - IEEE80211_HT_CTL_LEN);
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 	__pskb_pull(skb, IEEE80211_HT_CTL_LEN);
+#else
+	pskb_pull(skb, IEEE80211_HT_CTL_LEN);
+#endif
 
 	return skb;
 }
Index: backports-20220822-5.4.213-ef7197996efe/net/mac80211/tx.c
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/net/mac80211/tx.c
+++ backports-20220822-5.4.213-ef7197996efe/net/mac80211/tx.c
@@ -48,8 +48,10 @@ static inline void ieee80211_tx_stats(st
 	struct pcpu_sw_netstats *tstats = this_cpu_ptr(netdev_tstats(dev));
 
 	u64_stats_update_begin(&tstats->syncp);
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 	tstats->tx_packets++;
 	tstats->tx_bytes += len;
+#endif
 	u64_stats_update_end(&tstats->syncp);
 }
 /* misc utils */
@@ -4636,7 +4638,9 @@ netdev_tx_t ieee80211_subif_start_xmit(s
 #ifdef CPTCFG_MAC80211_NSS_SUPPORT
 	ieee80211_xmit_nss_fixup(skb, dev);
 #endif
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 	skb->fast_xmit = 0;
+#endif
 
 	if (likely(!is_multicast_ether_addr(eth->h_dest)))
 		goto normal;
Index: backports-20220822-5.4.213-ef7197996efe/net/mac80211/rc80211_minstrel_ht.c
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/net/mac80211/rc80211_minstrel_ht.c
+++ backports-20220822-5.4.213-ef7197996efe/net/mac80211/rc80211_minstrel_ht.c
@@ -2033,7 +2033,11 @@ static void __init init_sample_table(voi
 
 	memset(sample_table, 0xff, sizeof(sample_table));
 	for (col = 0; col < SAMPLE_COLUMNS; col++) {
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 		prandom_bytes(rnd, sizeof(rnd));
+#else
+		get_random_bytes(rnd, sizeof(rnd));
+#endif
 		for (i = 0; i < MCS_GROUP_RATES; i++) {
 			new_idx = (i + rnd[i]) % MCS_GROUP_RATES;
 			while (sample_table[col][new_idx] != 0xff)
Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/hal_rx.h
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/hal_rx.h
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/hal_rx.h
@@ -672,7 +672,7 @@ struct hal_eht_sig_ofdma_cmn_eb1 {
 	__le64 info0;
 } __packed;
 
-#define HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_1		GENMASK_ULL(0, 8)
+#define HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_1		GENMASK_ULL(8, 0)
 #define HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_2		GENMASK_ULL(17, 9)
 #define HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_3		GENMASK_ULL(26, 18)
 #define HAL_RX_EHT_SIG_OFDMA_EB2_RU_ALLOC_2_4		GENMASK_ULL(35, 27)
Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/core.h
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/core.h
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/core.h
@@ -63,6 +63,14 @@ extern unsigned int ath12k_frame_mode;
 #define ATH12K_MAX_MLO_PEERS		256
 #define ATH12K_MLO_PEER_ID_INVALID	0xFFFF
 
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
+#define ATH12K_SSR_POWERUP SUBSYS_AFTER_POWERUP
+#define ATH12K_SSR_PREPARE_SHUTDOWN SUBSYS_PREPARE_FOR_FATAL_SHUTDOWN
+#else
+#define ATH12K_SSR_POWERUP QCOM_SSR_AFTER_POWERUP
+#define ATH12K_SSR_PREPARE_SHUTDOWN QCOM_SSR_NOTIFY_CRASH
+#endif
+
 enum ath12k_supported_bw {
 	ATH12K_BW_20	= 0,
 	ATH12K_BW_40	= 1,
@@ -1389,6 +1397,7 @@ struct ath12k_base {
 	bool collect_dump;
 	struct notifier_block ssr_nb;
 	struct notifier_block atomic_ssr_nb;
+    void *ssr_handle;
 	struct completion reconfigure_complete;
 	unsigned long reset_fail_timeout;
         /* continuous recovery fail count */
Index: backports-20220822-5.4.213-ef7197996efe/net/mac80211/debugfs_netdev.c
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/net/mac80211/debugfs_netdev.c
+++ backports-20220822-5.4.213-ef7197996efe/net/mac80211/debugfs_netdev.c
@@ -320,7 +320,7 @@ static ssize_t ieee80211_if_parse_smps(s
 }
 IEEE80211_IF_FILE_RW(smps);
 
-int ieee80211_if_fmt_bmiss_threshold(const struct ieee80211_sub_if_data *sdata,
+static ssize_t ieee80211_if_fmt_bmiss_threshold(const struct ieee80211_sub_if_data *sdata,
 				     char *buf, int buflen)
 {
 	return snprintf(buf, buflen, "%u\n", sdata->vif.bss_conf.bmiss_threshold);
Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/ahb.c
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/ahb.c
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/ahb.c
@@ -506,9 +506,13 @@ static int ath12k_ahb_config_ext_irq(str
 		irq_grp->ab = ab;
 		irq_grp->grp_id = i;
 		init_dummy_netdev(&irq_grp->napi_ndev);
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0))
 		netif_napi_add(&irq_grp->napi_ndev, &irq_grp->napi,
 			       ath12k_ahb_ext_grp_napi_poll, NAPI_POLL_WEIGHT);
-
+#else
+		 netif_napi_add_weight(&irq_grp->napi_ndev, &irq_grp->napi,
+                               ath12k_ahb_ext_grp_napi_poll, NAPI_POLL_WEIGHT);
+#endif
 		for (j = 0; j < ATH12K_EXT_IRQ_NUM_MAX; j++) {
 			if (ab->hw_params->ring_mask->tx[i]  &&
 					(j <= ATH12K_MAX_TCL_RING_NUM) &&
@@ -635,20 +639,12 @@ static int ath12k_ahb_map_service_to_pip
 
 static int ath12k_ahb_ssr_notifier_reg(struct ath12k_base *ab)
 {
-	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
-
-	return ath12k_rproc_register_subsys_notifier(ab_ahb->tgt_rrproc->name,
-						     &ab->ssr_nb,
-						     &ab->atomic_ssr_nb);
+	return ath12k_rproc_register_subsys_notifier(ab);
 }
 
 static int ath12k_ahb_ssr_notifier_unreg(struct ath12k_base *ab)
 {
-	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
-
-	return ath12k_rproc_unregister_subsys_notifier(ab_ahb->tgt_rrproc->name,
-						       &ab->ssr_nb,
-						       &ab->atomic_ssr_nb);
+	return ath12k_rproc_unregister_subsys_notifier(ab);
 }
 
 static const struct ath12k_hif_ops ath12k_ahb_hif_ops_ipq5332 = {
