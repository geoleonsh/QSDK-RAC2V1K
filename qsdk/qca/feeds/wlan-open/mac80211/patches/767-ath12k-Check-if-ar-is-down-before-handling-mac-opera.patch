From 63a86b3cf7b466bd5fdc2bbeb63592c7681b448f Mon Sep 17 00:00:00 2001
From: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Date: Mon, 24 Apr 2023 16:47:24 -0700
Subject: [PATCH] ath12k: Check if ar is down before handling mac operations

Usually when the chip goes for a crash, upper layers might
not be aware of it. Hence, we need to handle scenarios when
the upper layers require some actions to be done and the chip
is down.

Check for FLUSH flags and then decide whether the ar context
has to be handled or not

Signed-off-by: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 397efdb..86ffe13 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -4303,6 +4303,9 @@ static void ath12k_mac_bss_info_changed(struct ath12k *ar,
 
 	lockdep_assert_held(&ar->conf_mutex);
 
+	if (unlikely(test_bit(ATH12K_FLAG_CRASH_FLUSH, &ar->ab->dev_flags)))
+		return;
+
 	if (changed & BSS_CHANGED_BEACON_INT) {
 		arvif->beacon_interval = info->beacon_int;
 
@@ -5105,6 +5108,11 @@ static int ath12k_mac_op_hw_scan(struct ieee80211_hw *hw,
 		return -EINVAL;
 	}
 
+	if (unlikely(test_bit(ATH12K_FLAG_CRASH_FLUSH, &ar->ab->dev_flags))) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ESHUTDOWN;
+	}
+
 	link_id = ath12k_mac_find_link_id_by_freq(vif, ar,
 						  hw_req->req.channels[0]->center_freq);
 
@@ -6858,6 +6866,9 @@ static int ath12k_mac_handle_link_sta_state(struct ieee80211_hw *hw,
 		return -EINVAL;
 	}
 
+	if (unlikely(test_bit(ATH12K_FLAG_CRASH_FLUSH, &ar->ab->dev_flags)))
+		return -ESHUTDOWN;
+
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
 
 	/* cancel must be done outside the ar mutex to avoid deadlock */
@@ -10164,6 +10175,9 @@ static int ath12k_mac_ampdu_action(struct ieee80211_hw *hw,
 		return -EPERM;
 	}
 
+	if (unlikely(test_bit(ATH12K_FLAG_CRASH_FLUSH, &ar->ab->dev_flags)))
+		return -ESHUTDOWN;
+
 	mutex_lock(&ar->conf_mutex);
 
 	switch (params->action) {
@@ -12190,6 +12204,9 @@ ath12k_mac_op_unassign_vif_chanctx(struct ieee80211_hw *hw,
 
 	mutex_lock(&ar->conf_mutex);
 
+	if (unlikely(test_bit(ATH12K_FLAG_CRASH_FLUSH, &ar->ab->dev_flags)))
+		goto out;
+
 	ath12k_dbg(ab, ATH12K_DBG_MAC,
 		   "mac chanctx unassign ptr %pK vdev_id %i\n",
 		   ctx, arvif->vdev_id);
-- 
2.7.4

