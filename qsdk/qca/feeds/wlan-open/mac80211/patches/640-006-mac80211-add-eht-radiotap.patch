From f76abd98383dbd350f4e41b400beaaff2130254a Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Sun, 3 Jul 2022 19:31:44 +0530
Subject: [PATCH] mac80211: add EHT radiotap header construction logic

Driver advertises U_SIG and EHT info in the flag under rx_status
structure. Based on this flag, corresponding EHT and U_SIG
information are added in the radiotap header.

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 include/net/ieee80211_radiotap.h | 160 +++++++++++++++++++++++++++++++++++++++
 include/net/mac80211.h           |   9 +++
 net/mac80211/rx.c                |  88 +++++++++++++++++++++
 3 files changed, 257 insertions(+)

--- a/include/net/ieee80211_radiotap.h
+++ b/include/net/ieee80211_radiotap.h
@@ -89,6 +89,11 @@ enum ieee80211_radiotap_presence {
 	IEEE80211_RADIOTAP_EXT = 31
 };
 
+enum ieee80211_radiotap_presence_ext {
+	IEEE80211_RADIOTAP_USIG_INFO	= 1,
+	IEEE80211_RADIOTAP_EHT_INFO	= 2,
+};
+
 /* for IEEE80211_RADIOTAP_FLAGS */
 enum ieee80211_radiotap_flags {
 	IEEE80211_RADIOTAP_F_CFP = 0x01,
@@ -360,6 +365,161 @@ enum ieee80211_radiotap_zero_len_psdu_ty
 	IEEE80211_RADIOTAP_ZERO_LEN_PSDU_VENDOR			= 0xff,
 };
 
+enum ieee80211_radiotap_usig_common {
+	IEEE80211_RADIOTAP_USIG_CMN_PHY_VERSION			= 0x00000001,
+	IEEE80211_RADIOTAP_USIG_CMN_BW_KNOWN			= 0x00000002,
+	IEEE80211_RADIOTAP_USIG_CMN_UL_DL_KNOWN			= 0x00000004,
+	IEEE80211_RADIOTAP_USIG_CMN_BSS_COLOR_KNOWN		= 0x00000008,
+	IEEE80211_RADIOTAP_USIG_CMN_TXOP_KNOWN			= 0x00000010,
+	IEEE80211_RADIOTAP_USIG_CMN_BAD_CRC			= 0x00000020,
+	IEEE80211_RADIOTAP_USIG_CMN_PHY_VERSION_ID		= 0x00007000,
+	IEEE80211_RADIOTAP_USIG_CMN_BW				= 0x00038000,
+	IEEE80211_RADIOTAP_USIG_CMN_UL_DL			= 0x00040000,
+	IEEE80211_RADIOTAP_USIG_CMN_BSS_COLOR			= 0x01f80000,
+	IEEE80211_RADIOTAP_USIG_CMN_TXOP			= 0xfe000000,
+};
+
+enum ieee80211_radiotap_usig_eht_mu_ppdu {
+	IEEE80211_RADIOTAP_USIG_EHT_MU_DISREGARD		= 0x0000001f,
+	IEEE80211_RADIOTAP_USIG_EHT_MU_DISREGARD_VALIDATE	= 0x00000020,
+	IEEE80211_RADIOTAP_USIG_EHT_MU_PPDU_TYPE_COMP_MODE	= 0x000000c0,
+	IEEE80211_RADIOTAP_USIG_EHT_MU_PPDU_COMP_VALIDATE	= 0x00000100,
+	IEEE80211_RADIOTAP_USIG_EHT_MU_PUNCTURED_CHAN_INFO	= 0x00003e00,
+	IEEE80211_RADIOTAP_USIG_EHT_MU_PUNCTURED_CHAN_VALIDATE	= 0x00004000,
+	IEEE80211_RADIOTAP_USIG_EHT_MU_MCS			= 0x00018000,
+	IEEE80211_RADIOTAP_USIG_EHT_MU_NUM_SYMBOLS		= 0x003e0000,
+	IEEE80211_RADIOTAP_USIG_EHT_MU_CRC			= 0x03c00000,
+	IEEE80211_RADIOTAP_USIG_EHT_MU_TAIL			= 0xfc000000,
+};
+
+enum ieee80211_radiotap_usig_eht_tb_ppdu {
+	IEEE80211_RADIOTAP_USIG_EHT_TB_DISREGARD		= 0x0000003f,
+	IEEE80211_RADIOTAP_USIG_EHT_TB_PPDU_TYPE_COMP_MODE	= 0x000000c0,
+	IEEE80211_RADIOTAP_USIG_EHT_TB_VALIDATE			= 0x00000100,
+	IEEE80211_RADIOTAP_USIG_EHT_TB_SPATIAL_REUSE1		= 0x00001e00,
+	IEEE80211_RADIOTAP_USIG_EHT_TB_SPATIAL_REUSE2		= 0x0001e000,
+	IEEE80211_RADIOTAP_USIG_EHT_TB_DISREGARD1		= 0x003e0000,
+	IEEE80211_RADIOTAP_USIG_EHT_TB_CRC			= 0x03c00000,
+	IEEE80211_RADIOTAP_USIG_EHT_TB_TAIL			= 0xfc000000,
+};
+
+struct ieee80211_radiotap_usig {
+	__le32 usig_cmn;
+	__le32 eht_mu_ppdu;
+	__le32 eht_tb_ppdu;
+};
+
+enum ieee80211_radiotap_eht_known {
+	IEEE80211_RADIOTAP_EHT_SPATIAL_REUSE_KNOWN	= 0x00000002,
+	IEEE80211_RADIOTAP_EHT_GUARD_INTERVAL_KNOWN	= 0x00000004,
+	IEEE80211_RADIOTAP_EHT_LTF_KNOWN		= 0x00000008,
+	IEEE80211_RADIOTAP_EHT_EHT_LTF_KNOWN		= 0x00000010,
+	IEEE80211_RADIOTAP_EHT_LDPC_EXTRA_SYM_SEG_KNOWN	= 0x00000020,
+	IEEE80211_RADIOTAP_EHT_PRE_FEC_PAD_FACTOR_KNOWN	= 0x00000040,
+	IEEE80211_RADIOTAP_EHT_PE_DISAMBIGUITY_KNOWN	= 0x00000080,
+	IEEE80211_RADIOTAP_EHT_DISREGARD_KNOWN		= 0x00000100,
+	IEEE80211_RADIOTAP_EHT_SOUNDING_DISREGARD_KNOWN	= 0x00000200,
+	IEEE80211_RADIOTAP_EHT_CRC1_KNOWN		= 0x00002000,
+	IEEE80211_RADIOTAP_EHT_TAIL1_KNOWN		= 0x00004000,
+	IEEE80211_RADIOTAP_EHT_CRC2_KNOWN		= 0x00008000,
+	IEEE80211_RADIOTAP_EHT_TAIL2_KNOWN		= 0x00010000,
+	IEEE80211_RADIOTAP_EHT_NSS_KNOWN		= 0x00020000,
+	IEEE80211_RADIOTAP_EHT_BEAMFORMED_KNOWN		= 0x00040000,
+	IEEE80211_RADIOTAP_EHT_NUM_NON_OFDMA_USR_KNOWN	= 0x00080000,
+	IEEE80211_RADIOTAP_EHT_USR_ENC_BLK_CRC_KNOWN	= 0x00100000,
+	IEEE80211_RADIOTAP_EHT_USR_ENC_BLK_TAIL_KNOWN	= 0x00200000,
+	IEEE80211_RADIOTAP_EHT_RU_SIZE_KNOWN		= 0x00400000,
+	IEEE80211_RADIOTAP_EHT_RU_INDEX_KNOWN		= 0x00800000,
+	IEEE80211_RADIOTAP_EHT_RU_ALLOCATION		= 0x01000000,
+	IEEE80211_RADIOTAP_EHT_PRI80_CHAN_POS_KNOWN	= 0x02000000,
+};
+
+enum ieee80211_radiotap_eht_data0 {
+	IEEE80211_RADIOTAP_EHT_DATA0_SPATIAL_REUSE		= 0x00000078,
+	IEEE80211_RADIOTAP_EHT_DATA0_GI				= 0x00000180,
+	IEEE80211_RADIOTAP_EHT_DATA0_LTF			= 0x00000600,
+	IEEE80211_RADIOTAP_EHT_DATA0_EHT_LTF			= 0x00003800,
+	IEEE80211_RADIOTAP_EHT_DATA0_LDPC_EXTRA_SYM_SEG		= 0x00004000,
+	IEEE80211_RADIOTAP_EHT_DATA0_PRE_FEC_PAD_FACTOR		= 0x00018000,
+	IEEE80211_RADIOTAP_EHT_DATA0_PE_DISAMBIGUITY		= 0x00020000,
+	IEEE80211_RADIOTAP_EHT_DATA0_DISREGARD_EHT_SOUND	= 0x000c0000,
+	IEEE80211_RADIOTAP_EHT_DATA0_DISREGARD_NON_EHT_SOUND	= 0x003c0000,
+	IEEE80211_RADIOTAP_EHT_DATA0_CRC1			= 0x03c00000,
+	IEEE80211_RADIOTAP_EHT_DATA0_TAIL1			= 0xfc000000,
+};
+
+enum ieee80211_radiotap_eht_data1 {
+	IEEE80211_RADIOTAP_EHT_DATA1_RU_SIZE			= 0x0000001f,
+		IEEE80211_RADIOTAP_EHT_DATA1_RU_SIZE_26			= 0,
+		IEEE80211_RADIOTAP_EHT_DATA1_RU_SIZE_52			= 1,
+		IEEE80211_RADIOTAP_EHT_DATA1_RU_SIZE_106		= 2,
+		IEEE80211_RADIOTAP_EHT_DATA1_RU_SIZE_242		= 3,
+		IEEE80211_RADIOTAP_EHT_DATA1_RU_SIZE_484		= 4,
+		IEEE80211_RADIOTAP_EHT_DATA1_RU_SIZE_996		= 5,
+		IEEE80211_RADIOTAP_EHT_DATA1_RU_SIZE_2x996		= 6,
+		IEEE80211_RADIOTAP_EHT_DATA1_RU_SIZE_4x996		= 7,
+		IEEE80211_RADIOTAP_EHT_DATA1_RU_SIZE_52P26		= 8,
+		IEEE80211_RADIOTAP_EHT_DATA1_RU_SIZE_106P26		= 9,
+		IEEE80211_RADIOTAP_EHT_DATA1_RU_SIZE_484P242		= 10,
+		IEEE80211_RADIOTAP_EHT_DATA1_RU_SIZE_996P484		= 11,
+		IEEE80211_RADIOTAP_EHT_DATA1_RU_SIZE_996P484P242	= 12,
+		IEEE80211_RADIOTAP_EHT_DATA1_RU_SIZE_2x996P484		= 13,
+		IEEE80211_RADIOTAP_EHT_DATA1_RU_SIZE_3x996		= 14,
+		IEEE80211_RADIOTAP_EHT_DATA1_RU_SIZE_3x996P484		= 15,
+
+	IEEE80211_RADIOTAP_EHT_DATA1_RU_INDEX			= 0x00001fe0,
+	IEEE80211_RADIOTAP_EHT_DATA1_RU_ALLOCATION1		= 0x003fe000,
+	IEEE80211_RADIOTAP_EHT_DATA1_RU_PRIMARY_80MHZ_CHAN_POS	= 0xc0000000,
+};
+
+enum ieee80211_radiotap_eht_data2_to_data6 {
+	IEEE80211_RADIOTAP_EHT_DATA2_6_RU_ALLOCATION_X		= 0x000001ff,
+	IEEE80211_RADIOTAP_EHT_DATA2_6_RU_ALLOCATION_X_KNOWN	= 0x00000200,
+	IEEE80211_RADIOTAP_EHT_DATA2_6_RU_ALLOCATION_XP1	= 0x0007fc00,
+	IEEE80211_RADIOTAP_EHT_DATA2_6_RU_ALLOCATION_XP1_KNOWN	= 0x00080000,
+	IEEE80211_RADIOTAP_EHT_DATA2_6_RU_ALLOCATION_XP2	= 0x1ff00000,
+	IEEE80211_RADIOTAP_EHT_DATA2_6_RU_ALLOCATION_XP2_KNOWN	= 0x20000000,
+};
+
+enum ieee80211_radiotap_eht_data7 {
+	IEEE80211_RADIOTAP_EHT_DATA7_CRC2			= 0x0000000f,
+	IEEE80211_RADIOTAP_EHT_DATA7_TAIL2			= 0x000003f0,
+	IEEE80211_RADIOTAP_EHT_DATA7_NSS			= 0x0000f000,
+	IEEE80211_RADIOTAP_EHT_DATA7_BEAMFORMED			= 0x00010000,
+	IEEE80211_RADIOTAP_EHT_DATA7_NUM_NON_OFDMA_USERS	= 0x000e0000,
+	IEEE80211_RADIOTAP_EHT_DATA7_USR_ENC_BLK_CRC		= 0x00f00000,
+	IEEE80211_RADIOTAP_EHT_DATA7_USR_ENC_BLK_TAIL		= 0x3f000000,
+};
+
+enum ieee80211_radiotap_eht_data8 {
+	IEEE80211_RADIOTAP_EHT_DATA8_RU_ALLOCATION_PS160	= 0x00000001,
+	IEEE80211_RADIOTAP_EHT_DATA8_RU_ALLOCATION_TB_FORMAT1	= 0x00000002,
+	IEEE80211_RADIOTAP_EHT_DATA8_RU_ALLOCATION_TB_FORMAT2	= 0x000001fc,
+};
+
+enum ieee80211_radiotap_eht_user_info {
+	IEEE80211_RADIOTAP_EHT_USER_INFO_STA_ID_KNOWN		= 0x00000001,
+	IEEE80211_RADIOTAP_EHT_USER_INFO_MCS_KNOWN		= 0x00000002,
+	IEEE80211_RADIOTAP_EHT_USER_INFO_CODING_KNOWN		= 0x00000004,
+	IEEE80211_RADIOTAP_EHT_USER_INFO_RSVD_KNOWN		= 0x00000008,
+	IEEE80211_RADIOTAP_EHT_USER_INFO_NSS_KNOWN		= 0x00000010,
+	IEEE80211_RADIOTAP_EHT_USER_INFO_BEAMFORMING_KNOWN	= 0x00000020,
+	IEEE80211_RADIOTAP_EHT_USER_INFO_SPATIAL_CONFIG_KNOWN	= 0x00000040,
+	IEEE80211_RADIOTAP_EHT_USER_INFO_DATA_CAPTURE		= 0x00000080,
+	IEEE80211_RADIOTAP_EHT_USER_INFO_STA_ID			= 0x0007ff00,
+	IEEE80211_RADIOTAP_EHT_USER_INFO_CODING			= 0x00080000,
+	IEEE80211_RADIOTAP_EHT_USER_INFO_MCS			= 0x00f00000,
+	IEEE80211_RADIOTAP_EHT_USER_INFO_NSS			= 0x0f000000,
+	IEEE80211_RADIOTAP_EHT_USER_INFO_BEAMFORMING		= 0x20000000,
+	IEEE80211_RADIOTAP_EHT_USER_INFO_SPATIAL_CONFIG		= 0x3f000000,
+};
+
+struct ieee80211_radiotap_eht {
+	__le32 known;
+	__le32 data[9];
+	__le32 user_info[];
+};
+
 /**
  * ieee80211_get_radiotap_len - get radiotap header length
  */
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -1389,7 +1389,11 @@ ieee80211_tx_info_clear_status(struct ie
  *	known the frame shouldn't be reported.
  * @RX_FLAG_8023: the frame has an 802.3 header (decap offload performed by
  *	hardware or driver)
+ * @RX_FLAG_USIG_HEADER: Universal field carries information necessary to
+ *	interpret EHT PPDUs.
+ * @RX_FLAG_EHT_HEADER: EHT radiotap data is present.
  */
+
 enum mac80211_rx_flags {
 	RX_FLAG_MMIC_ERROR		= BIT(0),
 	RX_FLAG_DECRYPTED		= BIT(1),
@@ -1421,6 +1425,8 @@ enum mac80211_rx_flags {
 	RX_FLAG_RADIOTAP_LSIG		= BIT(27),
 	RX_FLAG_NO_PSDU			= BIT(28),
 	RX_FLAG_8023			= BIT(29),
+	RX_FLAG_USIG_HEADER		= BIT(30),
+	RX_FLAG_EHT_HEADER		= BIT(31),
 };
 
 /**
@@ -1486,6 +1492,7 @@ enum mac80211_rx_encoding {
  *	HT or VHT is used (%RX_FLAG_HT/%RX_FLAG_VHT)
  * @nss: number of streams (VHT and HE only)
  * @flag: %RX_FLAG_\*
+ * @ext_flag: %RX_FLAG_\*
  * @encoding: &enum mac80211_rx_encoding
  * @bw: &enum rate_info_bw
  * @enc_flags: uses bits from &enum mac80211_rx_encoding_flags
@@ -1520,6 +1527,7 @@ struct ieee80211_rx_status {
 	u8 ampdu_delimiter_crc;
 	u8 zero_length_psdu_type;
 	u8 eht_ru;
+	u8 eht_num_user;
 };
 
 static inline u32
--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -124,6 +124,12 @@ ieee80211_rx_radiotap_hdrlen(struct ieee
 	/* always present fields */
 	len = sizeof(struct ieee80211_radiotap_header) + 8;
 
+	/* EHT present fields */
+	if ((status->flag & RX_FLAG_EHT_HEADER) ||
+	    (status->flag & RX_FLAG_USIG_HEADER)) {
+		len += 4;
+	}
+
 	/* allocate extra bitmaps */
 	if (status->chains)
 		len += 4 * hweight8(status->chains);
@@ -186,6 +192,20 @@ ieee80211_rx_radiotap_hdrlen(struct ieee
 		BUILD_BUG_ON(sizeof(struct ieee80211_radiotap_lsig) != 4);
 	}
 
+	if (status->flag & RX_FLAG_USIG_HEADER &&
+	    status->encoding == RX_ENC_EHT) {
+		len = ALIGN(len, 4);
+		len += 12;
+		BUILD_BUG_ON(sizeof(struct ieee80211_radiotap_usig) != 12);
+	}
+
+	if (status->flag & RX_FLAG_EHT_HEADER &&
+	    status->encoding == RX_ENC_EHT) {
+		len = ALIGN(len, 4);
+		len += 40;
+		len += status->eht_num_user * 4;
+	}
+
 	if (status->chains) {
 		/* antenna and antenna signal fields */
 		len += 2 * hweight8(status->chains);
@@ -208,6 +228,15 @@ ieee80211_rx_radiotap_hdrlen(struct ieee
 		if (status->flag & RX_FLAG_RADIOTAP_LSIG)
 			vendor_data_offset +=
 				sizeof(struct ieee80211_radiotap_lsig);
+		if (status->flag & RX_FLAG_USIG_HEADER)
+			vendor_data_offset +=
+				sizeof(struct ieee80211_radiotap_usig);
+		if (status->flag & RX_FLAG_EHT_HEADER) {
+			vendor_data_offset +=
+				sizeof(struct ieee80211_radiotap_eht);
+			vendor_data_offset +=
+				status->eht_num_user * sizeof(u32);
+		}
 
 		rtap = (void *)&skb->data[vendor_data_offset];
 
@@ -315,6 +344,14 @@ ieee80211_add_rx_radiotap_header(struct
 	struct ieee80211_radiotap_he he = {};
 	struct ieee80211_radiotap_he_mu he_mu = {};
 	struct ieee80211_radiotap_lsig lsig = {};
+	struct ieee80211_radiotap_usig usig = {};
+	struct ieee80211_radiotap_eht eht = {};
+	u32 *user_info;
+	bool rhdr_ext = false;
+
+	if ((status->flag & RX_FLAG_USIG_HEADER) ||
+	    (status->flag & RX_FLAG_EHT_HEADER))
+		rhdr_ext = true;
 
 	if (status->flag & RX_FLAG_RADIOTAP_HE) {
 		he = *(struct ieee80211_radiotap_he *)skb->data;
@@ -338,6 +375,20 @@ ieee80211_add_rx_radiotap_header(struct
 		skb_pull(skb, sizeof(rtap) + rtap.len + rtap.pad);
 	}
 
+	if (status->flag & RX_FLAG_USIG_HEADER) {
+		usig = *(struct ieee80211_radiotap_usig *)skb->data;
+		skb_pull(skb, sizeof(usig));
+		WARN_ON_ONCE(status->encoding != RX_ENC_EHT);
+	}
+
+	if (status->flag & RX_FLAG_EHT_HEADER) {
+		eht = *(struct ieee80211_radiotap_eht *)skb->data;
+		skb_pull(skb, sizeof(eht));
+		user_info = (u32 *)skb->data;
+		skb_pull(skb, status->eht_num_user * sizeof(u32));
+		WARN_ON_ONCE(status->encoding != RX_ENC_EHT);
+	}
+
 	mpdulen = skb->len;
 	if (!(has_fcs && ieee80211_hw_check(&local->hw, RX_INCLUDES_FCS)))
 		mpdulen += FCS_LEN;
@@ -373,6 +424,19 @@ ieee80211_add_rx_radiotap_header(struct
 		it_present_val = rtap.present;
 	}
 
+	if (rhdr_ext) {
+		it_present_val |= BIT(IEEE80211_RADIOTAP_EXT);
+		put_unaligned_le32(it_present_val, it_present);
+		it_present_val = 0;
+		it_present++;
+		/* IEEE80211_RADIOTAP_USIG */
+		if (status->flag & RX_FLAG_USIG_HEADER)
+			it_present_val |= BIT(IEEE80211_RADIOTAP_USIG_INFO);
+		/* IEEE80211_RADIOTAP_EHT */
+		if (status->flag & RX_FLAG_EHT_HEADER)
+			it_present_val |= BIT(IEEE80211_RADIOTAP_EHT_INFO);
+	}
+
 	put_unaligned_le32(it_present_val, it_present);
 
 	/* This references through an offset into it_optional[] rather
@@ -713,6 +777,22 @@ ieee80211_add_rx_radiotap_header(struct
 			*pos++ = 0;
 		/* data (and possible padding) already follows */
 	}
+
+	if (status->flag & RX_FLAG_USIG_HEADER) {
+		while ((pos - (u8 *)rthdr) & 1)
+			pos++;
+		memcpy(pos, &usig, sizeof(usig));
+		pos += sizeof(usig);
+	}
+
+	if (status->flag & RX_FLAG_EHT_HEADER) {
+		while ((pos - (u8 *)rthdr) & 1)
+			pos++;
+		memcpy(pos, &eht, sizeof(eht));
+		pos += sizeof(eht);
+		memcpy(pos, user_info, (status->eht_num_user * sizeof(u32)));
+		pos += status->eht_num_user * sizeof(u32);
+	}
 }
 
 static struct sk_buff *
@@ -804,6 +884,14 @@ ieee80211_rx_monitor(struct ieee80211_lo
 		rtap_space += sizeof(*rtap) + rtap->len + rtap->pad;
 	}
 
+	if (status->flag & RX_FLAG_USIG_HEADER)
+		rtap_space += sizeof(struct ieee80211_radiotap_usig);
+
+	if (status->flag & RX_FLAG_EHT_HEADER) {
+		rtap_space += sizeof(struct ieee80211_radiotap_eht);
+		rtap_space += (status->eht_num_user * sizeof(u32));
+	}
+
 	min_head_len = rtap_space;
 
 	/*
