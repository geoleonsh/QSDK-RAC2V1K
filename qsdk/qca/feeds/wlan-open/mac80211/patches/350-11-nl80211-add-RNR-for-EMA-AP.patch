From 65272c7d9482a8d6490abacf629ee6ae71e2ce83 Mon Sep 17 00:00:00 2001
From: Aloka Dixit <quic_alokad@quicinc.com>
Date: Fri, 23 Oct 2020 17:02:06 -0700
Subject: [PATCH 11/14] nl80211: add RNR for EMA AP

Store the reduced neighbor report (RNR) elements provided by application.
RNR is split into multiple elements, each corresponding to one
multiple BSSID element in the kernel. Both are added to create
EMA (Enhanced multi-BSSID advertisements) beacons.
Application is responsible of creating blocks such that if a
non-transmitted profile is included in multiple BSSID element then
it is excluded from the RNR of the same beacon.
RNR block for each EMA may also include entries common for all beacons
such as co-located APs.
Offsets are not used if EMA is not enabled.

Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
---
 include/net/cfg80211.h       | 21 +++++++++++++++
 include/uapi/linux/nl80211.h | 13 ++++++++++
 net/wireless/nl80211.c       | 50 ++++++++++++++++++++++++++++++++++++
 3 files changed, 84 insertions(+)

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -1203,6 +1203,25 @@ struct cfg80211_mbssid_elems {
 };
 
 /**
+ * struct cfg80211_rnr_elems - Reduced neighbor report (RNR) elements
+ * @ies: array of extra information element(s) to add into Beacon frames for
+ *	RNR or %NULL.
+ *	This is used only when EMA (Enhanced multi-BSSID advertisements) feature
+ *	is enabled and profile periodicity is more than 1.
+ *
+ * @elem: Array of RNR element(s) to be added into Beacon frames.
+ * @elem.data: Data for RNR elements.
+ * @elem.len: Length of data.
+ */
+struct cfg80211_rnr_elems {
+	u8 cnt;
+	struct {
+		const u8 *data;
+		size_t len;
+	} elem[];
+};
+
+/**
  * struct cfg80211_beacon_data - beacon data
  * @link_id: the link ID for the AP MLD link sending this beacon
  * @head: head portion of beacon (before TIM IE)
@@ -1222,6 +1241,7 @@ struct cfg80211_mbssid_elems {
  * @probe_resp_len: length of probe response template (@probe_resp)
  * @probe_resp: probe response template (AP mode only)
  * @mbssid_ies: multiple BSSID elements
+ * @rnr_ies: reduced neighbor report elements
  * @ftm_responder: enable FTM responder functionality; -1 for no change
  *	(which also implies no change in LCI/civic location data)
  * @lci: Measurement Report element content, starting with Measurement Token
@@ -1245,6 +1265,7 @@ struct cfg80211_beacon_data {
 	const u8 *lci;
 	const u8 *civicloc;
 	struct cfg80211_mbssid_elems *mbssid_ies;
+	struct cfg80211_rnr_elems *rnr_ies;
 	s8 ftm_responder;
 	u8 bss_color_info;
 
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@ -2761,6 +2761,17 @@ enum nl80211_commands {
  * 	%NL80211_CMD_JOIN_MESH from user-space.
  * @NL80211_ATTR_AWGN_INTERFERENCE_BITMAP: u32 attribute specifying the
  *	interference bitmap of operating bandwidth for %NL80211_CMD_AWGN_DETECT
+ *
+ * @NL80211_ATTR_EMA_RNR_ELEMS: Nested attribute for reduced neighbor elements.
+ *	This attribute can be used only when NL80211_MBSSID_CONFIG_ATTR_EMA flag
+ *	is enabled. RNR is split into multiple groups, each group excludes the
+ *	profiles already included in MBSSID group (%NL80211_ATTR_MBSSID_ELEMS)
+ *	at the same index. Each EMA beacon will be generated by adding MBSSID
+ *	and RNR groups at the same index.
+ *	The last additional RNR group, if present, points to information
+ *	for co-located APs and neighbor APs in ESS to be added in all
+ *	EMA beacons.
+ *
  * @NUM_NL80211_ATTR: total number of nl80211_attrs available
  * @NL80211_ATTR_MAX: highest attribute number currently defined
  * @__NL80211_ATTR_AFTER_LAST: internal use
@@ -3301,6 +3312,8 @@ enum nl80211_attrs {
 
 	NL80211_ATTR_6G_REG_POWER_MODE,
 
+	NL80211_ATTR_EMA_RNR_ELEMS,
+
 	/* add attributes here, update the policy in nl80211.c */
 
 	__NL80211_ATTR_AFTER_LAST,
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -837,6 +837,7 @@ static const struct nla_policy nl80211_p
 					NLA_POLICY_MAX(NLA_U8, NL80211_MGMT_RTS_CTS_DISABLE),
 	[NL80211_ATTR_AWGN_INTERFERENCE_BITMAP] = { .type = NLA_U32 },
 	[NL80211_ATTR_6G_REG_POWER_MODE] = NLA_POLICY_RANGE(NLA_U8, 0, 2),
+	[NL80211_ATTR_EMA_RNR_ELEMS] = { .type = NLA_NESTED },
 };
 
 /* policy for the key attributes */
@@ -5399,6 +5400,30 @@ static int nl80211_parse_he_bss_color(st
 	return 0;
 }
 
+static struct cfg80211_rnr_elems *
+nl80211_parse_rnr_elems(struct wiphy *wiphy, struct nlattr *attrs)
+{
+	struct nlattr *nl_elems;
+	struct cfg80211_rnr_elems *elems;
+	int rem_elems;
+	u8 i = 0, num_elems = 0;
+
+	nla_for_each_nested(nl_elems, attrs, rem_elems)
+		num_elems++;
+
+	elems = kzalloc(struct_size(elems, elem, num_elems), GFP_KERNEL);
+	if (!elems)
+		return ERR_PTR(-ENOMEM);
+
+	nla_for_each_nested(nl_elems, attrs, rem_elems) {
+		elems->elem[i].data = nla_data(nl_elems);
+		elems->elem[i].len = nla_len(nl_elems);
+		i++;
+	}
+	elems->cnt = num_elems;
+	return elems;
+}
+
 static int nl80211_parse_beacon(struct cfg80211_registered_device *rdev,
 				struct nlattr *attrs[],
 				struct cfg80211_beacon_data *bcn)
@@ -5498,6 +5523,20 @@ static int nl80211_parse_beacon(struct c
 			return PTR_ERR(mbssid);
 
 		bcn->mbssid_ies = mbssid;
+
+		if (bcn->mbssid_ies && attrs[NL80211_ATTR_EMA_RNR_ELEMS]) {
+			struct cfg80211_rnr_elems *rnr =
+				nl80211_parse_rnr_elems(&rdev->wiphy,
+						attrs[NL80211_ATTR_EMA_RNR_ELEMS]);
+
+			if (IS_ERR(rnr))
+				return PTR_ERR(rnr);
+
+			bcn->rnr_ies = rnr;
+			if (bcn->rnr_ies &&
+			    bcn->rnr_ies->cnt < bcn->mbssid_ies->cnt)
+				return -EINVAL;
+		}
 	}
 
 	if (attrs[NL80211_ATTR_HE_BSS_COLOR])
@@ -6008,6 +6047,11 @@ static int nl80211_start_ap(struct sk_bu
 							0);
 		if (err)
 			goto out_unlock;
+
+		if (!params->mbssid_config.ema && params->beacon.rnr_ies) {
+			err = -EINVAL;
+			goto out_unlock;
+		}
 	}
 
 	err = nl80211_calculate_ap_params(params);
@@ -6049,6 +6093,7 @@ out:
 	    params->mbssid_config.tx_wdev->netdev &&
 	    params->mbssid_config.tx_wdev->netdev != dev)
 		dev_put(params->mbssid_config.tx_wdev->netdev);
+	kfree(params->beacon.rnr_ies);
 	kfree(params);
 
 	return err;
@@ -6083,6 +6128,7 @@ static int nl80211_set_beacon(struct sk_
 
 out:
 	kfree(params.mbssid_ies);
+	kfree(params.rnr_ies);
 	return err;
 }
 
@@ -10095,6 +10141,8 @@ skip_beacons:
 free:
 	kfree(params.beacon_after.mbssid_ies);
 	kfree(params.beacon_csa.mbssid_ies);
+	kfree(params.beacon_after.rnr_ies);
+	kfree(params.beacon_csa.rnr_ies);
 	kfree(csa_attrs);
 	return err;
 }
@@ -15883,6 +15931,8 @@ static int nl80211_color_change(struct s
 out:
 	kfree(params.beacon_next.mbssid_ies);
 	kfree(params.beacon_color_change.mbssid_ies);
+	kfree(params.beacon_next.rnr_ies);
+	kfree(params.beacon_color_change.rnr_ies);
 	kfree(tb);
 	return err;
 }
