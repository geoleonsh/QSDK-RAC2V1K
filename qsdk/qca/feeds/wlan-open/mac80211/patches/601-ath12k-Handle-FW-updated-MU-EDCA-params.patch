From b2963b8b1a6aa07fd173cfa5d6915e65b8a5729e Mon Sep 17 00:00:00 2001
From: Muna Sinada <quic_msinada@quicinc.com>
Date: Wed, 8 Jul 2020 06:38:20 -0700
Subject: [PATCH 2/2] ath12k: Handle FW updated MU-EDCA params

Firmware updated MU-EDCA parameters are received through
WMI_MUEDCA_PARAMS_CONFIG event every time firmware checks its
clients and updates its MU-EDCA values. ATH12k driver parses and
retrieves the updated parameters from the event and passes it to
mac80211, where the end goal is to pass the updated parameters to
user space in order for management frames to be updated.

Signed-off-by: Muna Sinada <quic_msinada@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/wmi.c | 78 +++++++++++++++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/wmi.h | 16 +++++++
 2 files changed, 94 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -133,6 +133,8 @@ static const struct wmi_tlv_policy wmi_t
 		.min_len = sizeof(struct wmi_probe_resp_tx_status_event) },
 	[WMI_TAG_VDEV_DELETE_RESP_EVENT] = {
 		.min_len = sizeof(struct wmi_vdev_delete_resp_event) },
+	[WMI_TAG_MUEDCA_PARAMS_CONFIG_EVENT] = {
+		.min_len = sizeof(struct wmi_pdev_update_muedca_event) },
 };
 
 static void ath12k_init_wmi_config_qcn9274(struct ath12k_base *ab,
@@ -7308,6 +7310,79 @@ static void ath12k_wmi_diag_event(struct
 	ath12k_fwlog_write(ab, data, tlv_len);
 }
 
+#define make_min_max(max,min) (u32_encode_bits(max, 0xf0) | u32_encode_bits(min, 0xf))
+
+static void
+ath12k_wmi_pdev_update_muedca_params_status_event(struct ath12k_base *ab,
+						  struct sk_buff *skb)
+{
+	const void **tb;
+	const struct wmi_pdev_update_muedca_event *ev;
+	struct ieee80211_mu_edca_param_set *params;
+	struct ath12k *ar;
+	int ret;
+
+	tb = ath12k_wmi_tlv_parse_alloc(ab, skb->data, skb->len, GFP_ATOMIC);
+	if (IS_ERR(tb)) {
+		ret = PTR_ERR(tb);
+		ath12k_warn(ab, "failed to parse tlv: %d\n", ret);
+		return;
+	}
+
+	ev = tb[WMI_TAG_MUEDCA_PARAMS_CONFIG_EVENT];
+	if (!ev) {
+		ath12k_warn(ab, "failed to fetch pdev update muedca params ev");
+		goto mem_free;
+	}
+
+	ath12k_dbg(ab, ATH12K_DBG_WMI,
+		   "Update MU-EDCA parameters for pdev:%d\n", ev->pdev_id);
+
+	rcu_read_lock();
+	ar = ath12k_mac_get_ar_by_pdev_id(ab, ev->pdev_id);
+	if (!ar) {
+		ath12k_warn(ab, "MU-EDCA parameter change in invalid pdev %d\n",
+			    ev->pdev_id);
+		goto unlock;
+	}
+
+	params = kzalloc(sizeof(*params), GFP_ATOMIC);
+	if (!params) {
+		ath12k_warn(ab,
+			    "Failed to allocate memory for updated MU-EDCA Parameters");
+		goto unlock;
+	}
+
+	params->ac_be.aifsn = ev->aifsn[WMI_AC_BE];
+	params->ac_be.ecw_min_max = make_min_max(ev->ecwmax[WMI_AC_BE],
+						 ev->ecwmin[WMI_AC_BE]);
+	params->ac_be.mu_edca_timer = ev->muedca_expiration_time[WMI_AC_BE];
+
+	params->ac_bk.aifsn = ev->aifsn[WMI_AC_BK];
+	params->ac_bk.ecw_min_max = make_min_max(ev->ecwmax[WMI_AC_BK],
+						 ev->ecwmin[WMI_AC_BK]);
+	params->ac_bk.mu_edca_timer = ev->muedca_expiration_time[WMI_AC_BK];
+
+	params->ac_vi.aifsn = ev->aifsn[WMI_AC_VI];
+	params->ac_vi.ecw_min_max = make_min_max(ev->ecwmax[WMI_AC_VI],
+						 ev->ecwmin[WMI_AC_VI]);
+	params->ac_vi.mu_edca_timer = ev->muedca_expiration_time[WMI_AC_VI];
+
+	params->ac_vo.aifsn = ev->aifsn[WMI_AC_VO];
+	params->ac_vo.ecw_min_max = make_min_max(ev->ecwmax[WMI_AC_VO],
+						 ev->ecwmin[WMI_AC_VO]);
+	params->ac_vo.mu_edca_timer = ev->muedca_expiration_time[WMI_AC_VO];
+
+	cfg80211_update_muedca_params_event(ar->hw->wiphy, params, GFP_ATOMIC);
+
+	kfree(params);
+
+unlock:
+	rcu_read_unlock();
+mem_free:
+	kfree(tb);
+}
+
 static void ath12k_wmi_tlv_op_rx(struct ath12k_base *ab, struct sk_buff *skb)
 {
 	struct wmi_cmd_hdr *cmd_hdr;
@@ -7421,6 +7496,9 @@ static void ath12k_wmi_tlv_op_rx(struct
 	case WMI_DIAG_EVENTID:
 		ath12k_wmi_diag_event(ab, skb);
 		break;
+	case WMI_MUEDCA_PARAMS_CONFIG_EVENTID:
+		ath12k_wmi_pdev_update_muedca_params_status_event(ab, skb);
+		break;
 	/* TODO: Add remaining events */
 	default:
 		ath12k_dbg(ab, ATH12K_DBG_WMI, "Unknown eventid: 0x%x\n", id);
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -730,6 +730,7 @@ enum wmi_tlv_event_id {
 	WMI_READ_DATA_FROM_FLASH_EVENTID,
 	WMI_REPORT_RX_AGGR_FAILURE_EVENTID,
 	WMI_PKGID_EVENTID,
+	WMI_MUEDCA_PARAMS_CONFIG_EVENTID = 0x1d01e,
 	WMI_GPIO_INPUT_EVENTID = WMI_TLV_CMD(WMI_GRP_GPIO),
 	WMI_UPLOADH_EVENTID,
 	WMI_CAPTUREH_EVENTID,
@@ -1844,6 +1845,7 @@ enum wmi_tlv_tag {
 	/* TODO add all the missing cmds */
 	WMI_TAG_PDEV_PEER_PKTLOG_FILTER_CMD = 0x301,
 	WMI_TAG_PDEV_PEER_PKTLOG_FILTER_INFO,
+	WMI_TAG_MUEDCA_PARAMS_CONFIG_EVENT = 0x32a,
 	WMI_TAG_SERVICE_READY_EXT2_EVENT = 0x334,
 	WMI_TAG_FILS_DISCOVERY_TMPL_CMD = 0x344,
 	WMI_TAG_MAC_PHY_CAPABILITIES_EXT = 0x36F,
@@ -4661,6 +4663,20 @@ struct wmi_pdev_temperature_event {
 	u32 pdev_id;
 } __packed;
 
+#define WMI_AC_BE				0
+#define WMI_AC_BK				1
+#define WMI_AC_VI				2
+#define WMI_AC_VO				3
+#define WMI_AC_MAX				4
+
+struct wmi_pdev_update_muedca_event {
+	u32 pdev_id;
+	u32 aifsn[WMI_AC_MAX];
+	u32 ecwmin[WMI_AC_MAX];
+	u32 ecwmax[WMI_AC_MAX];
+	u32 muedca_expiration_time[WMI_AC_MAX];
+} __packed;
+
 #define WMI_RX_STATUS_OK			0x00
 #define WMI_RX_STATUS_ERR_CRC			0x01
 #define WMI_RX_STATUS_ERR_DECRYPT		0x08
