From a73228fd24f9305bda2663475a206eff9ba4d8c4 Mon Sep 17 00:00:00 2001
From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Date: Wed, 10 Aug 2022 13:07:14 -0700
Subject: [PATCH 04/12] ath12k: Remove mod operator overhead for dst ring
 access

This helps in improving performance. Currently unprofiled.

Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp.h    |  2 --
 drivers/net/wireless/ath/ath12k/dp_tx.c | 29 +++++++------------------
 drivers/net/wireless/ath/ath12k/hal.c   | 10 +++++----
 3 files changed, 14 insertions(+), 27 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp.h
+++ b/drivers/net/wireless/ath/ath12k/dp.h
@@ -40,8 +40,6 @@ struct dp_rxdma_ring {
 	int bufs_max;
 };
 
-#define ATH12K_TX_COMPL_NEXT(x)	(((x) + 1) % DP_TX_COMP_RING_SIZE)
-
 struct dp_tx_ring {
 	u8 tcl_data_ring_id;
 	struct dp_srng tcl_data_ring;
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -772,10 +772,11 @@ void ath12k_dp_tx_completion_handler(str
 	struct sk_buff *msdu;
 	struct hal_tx_status ts = { 0 };
 	struct dp_tx_ring *tx_ring = &dp->tx_ring[ring_id];
-	u32 *desc;
+	u32 *desc, desc_id;
 	u8 mac_id;
 	u64 desc_va;
-	int valid_entries;
+	int valid_entries, count = 0, i = 0;
+	struct hal_wbm_completion_ring_tx *tx_status;
 
 	spin_lock_bh(&status_ring->lock);
 
@@ -790,32 +791,21 @@ void ath12k_dp_tx_completion_handler(str
 
 	ath12k_hal_srng_dst_invalidate_entry(ab, status_ring, valid_entries);
 
-	while ((ATH12K_TX_COMPL_NEXT(tx_ring->tx_status_head) !=
-		tx_ring->tx_status_tail) &&
-	       (desc = ath12k_hal_srng_dst_get_next_cache_entry(ab, status_ring))) {
-		memcpy(&tx_ring->tx_status[tx_ring->tx_status_head],
+	while ((desc = ath12k_hal_srng_dst_get_next_cache_entry(ab, status_ring))) {
+		memcpy(&tx_ring->tx_status[count],
 		       desc, sizeof(struct hal_wbm_release_ring));
-		tx_ring->tx_status_head =
-			ATH12K_TX_COMPL_NEXT(tx_ring->tx_status_head);
-	}
+		count++;
 
-	if (ath12k_hal_srng_dst_peek(ab, status_ring) &&
-	    (ATH12K_TX_COMPL_NEXT(tx_ring->tx_status_head) == tx_ring->tx_status_tail)) {
-		/* TODO: Process pending tx_status messages when kfifo_is_full() */
-		ath12k_warn(ab, "Unable to process some of the tx_status ring desc because status_fifo is full\n");
+		if (count == DP_TX_COMP_RING_SIZE)
+			break;
 	}
 
 	ath12k_hal_srng_access_end(ab, status_ring);
 
 	spin_unlock_bh(&status_ring->lock);
 
-	while (ATH12K_TX_COMPL_NEXT(tx_ring->tx_status_tail) != tx_ring->tx_status_head) {
-		struct hal_wbm_completion_ring_tx *tx_status;
-		u32 desc_id;
-
-		tx_ring->tx_status_tail =
-			ATH12K_TX_COMPL_NEXT(tx_ring->tx_status_tail);
-		tx_status = &tx_ring->tx_status[tx_ring->tx_status_tail];
+	while (count--) {
+		tx_status = &tx_ring->tx_status[i++];
 		ath12k_dp_tx_status_parse(ab, tx_status, &ts);
 
 		if (u32_get_bits(tx_status->info0, HAL_WBM_COMPL_TX_INFO0_CC_DONE)) {
--- a/drivers/net/wireless/ath/ath12k/hal.c
+++ b/drivers/net/wireless/ath/ath12k/hal.c
@@ -1596,8 +1596,7 @@ u32 *ath12k_hal_srng_dst_get_next_entry(
 
 	desc = srng->ring_base_vaddr + srng->u.dst_ring.tp;
 
-	srng->u.dst_ring.tp = (srng->u.dst_ring.tp + srng->entry_size) %
-			       srng->ring_size;
+	srng->u.dst_ring.tp = (srng->u.dst_ring.tp + srng->entry_size);
 
 	/* wrap around to start of ring*/
 	if (srng->u.dst_ring.tp == srng->ring_size)
@@ -1621,8 +1620,11 @@ u32 *ath12k_hal_srng_dst_get_next_cache_
 
 	desc = srng->ring_base_vaddr + srng->u.dst_ring.tp;
 
-	srng->u.dst_ring.tp = (srng->u.dst_ring.tp + srng->entry_size) %
-			       srng->ring_size;
+	srng->u.dst_ring.tp = (srng->u.dst_ring.tp + srng->entry_size);
+
+	/* wrap around to start of ring*/
+	if (srng->u.dst_ring.tp == srng->ring_size)
+		srng->u.dst_ring.tp = 0;
 
 	/* Try to prefetch the next descriptor in the ring */
 	if (srng->u.dst_ring.tp != srng->u.dst_ring.cached_hp) {
