From 5e89d784fb35bc3f2cda4831fbe87163781c0ed8 Mon Sep 17 00:00:00 2001
From: Gunaal R <quic_gunar@quicinc.com>
Date: Wed, 17 May 2023 15:21:01 +0530
Subject: [PATCH] ath12k: Add support to bring in debug levels

Currently there is no debug level logging mechanism present in the
driver, so when enabling debug mask all the debug logs are displayed.
Add support to bring in debug levels for every debug mask, which
only gives the log of specific level which requires and add
debug mask to view the log of mac delete id, type, subtype, map.

Working Mechanism:

By comparing the leftmost bit with the debug level(level0 = 0,
level1 = 1, level2 = 2), the logs of corresponding level are
shown, which enables specific logs to be shown while avoiding an
overflow of unwanted logs.

Signed-off-by: Gunaal R <quic_gunar@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debug.c |  51 ++++++----
 drivers/net/wireless/ath/ath12k/debug.h | 126 +++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/mac.c   |  11 ++-
 drivers/net/wireless/ath/ath12k/wmi.c   |  16 +--
 4 files changed, 171 insertions(+), 33 deletions(-)

Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/debug.c
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/debug.c
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/debug.c
@@ -62,26 +62,33 @@ void ath12k_warn(struct ath12k_base *ab,
 #ifdef CPTCFG_ATH12K_DEBUG
 
 void __ath12k_dbg(struct ath12k_base *ab, enum ath12k_debug_mask mask,
-		  const char *fmt, ...)
+                  const char *fmt, ...)
 {
-	struct va_format vaf;
-	va_list args;
-
-	va_start(args, fmt);
-
-	vaf.fmt = fmt;
-	vaf.va = &args;
-
-	if (ath12k_debug_mask & mask) {
-		if (ab)
-			dev_dbg(ab->dev, "%pV", &vaf);
-		else
-			pr_devel("ath12k: %pV", &vaf);
+#define LEVEL_MASK GENMASK(31,28)
+#define debug_mask GENMASK(27,0)
+        u32 local_mask_level = mask & LEVEL_MASK;
+        u32 global_mask_level = ath12k_debug_mask & LEVEL_MASK;
+        struct va_format vaf;
+        va_list args;
+
+        va_start(args, fmt);
+
+        vaf.fmt = fmt;
+        vaf.va = &args;
+
+	if ((mask & debug_mask) & ath12k_debug_mask) {
+		if (((local_mask_level) && (global_mask_level >= local_mask_level)) ||
+		    (!global_mask_level && (local_mask_level == ATH12K_DBG_L0))) {
+			if (ab)
+                        	dev_dbg(ab->dev, "%pV", &vaf);
+                	else
+                        	pr_devel("ath12k: %pV", &vaf);
+		}
 	}
 
-	/* TODO: trace log */
+        /* TODO: trace log */
 
-	va_end(args);
+        va_end(args);
 }
 
 void ath12k_dbg_dump(struct ath12k_base *ab,
Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/debug.h
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/debug.h
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/debug.h
@@ -31,11 +31,18 @@ enum ath12k_debug_mask {
 	ATH12K_DBG_PEER		= 0x00020000,
 
 	/* keep last*/
-	ATH12K_DBG_SAWF		= 0x40000000,
-	ATH12K_DBG_PPE          = 0x80000000,
+	ATH12K_DBG_SAWF		= 0x00040000,
+	ATH12K_DBG_PPE          = 0x00080000,
 	ATH12K_DBG_ANY		= 0xffffffff,
 };
 
+enum ath12k_debug_mask_level {
+	ATH12K_DBG_L0		= 0x00000000,
+        ATH12K_DBG_L1		= 0x10000000,
+        ATH12K_DBG_L2		= 0x20000000,
+        ATH12K_DBG_L3		= 0x30000000,
+};
+
 __printf(2, 3) void ath12k_info(struct ath12k_base *ab, const char *fmt, ...);
 __printf(2, 3) void ath12k_err(struct ath12k_base *ab, const char *fmt, ...);
 __printf(2, 3) void ath12k_warn(struct ath12k_base *ab, const char *fmt, ...);
@@ -76,6 +83,8 @@ static inline void ath12k_err_dump(struc
 }
 #endif /* CPTCFG_ATH12K_DEBUG */
 
+#define ATH12K_DBG_SET(mask, level) ATH12K_DBG_##mask | ATH12K_DBG_##level
+
 #define ath12k_dbg(ar, dbg_mask, fmt, ...)			\
 do {								\
 	typeof(dbg_mask) mask = (dbg_mask);			\
Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/mac.c
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/mac.c
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/mac.c
@@ -4776,6 +4776,7 @@ static void ath12k_mac_op_bss_info_chang
 
 static int ath12k_mac_vdev_delete(struct ath12k *ar, struct ath12k_link_vif *arvif)
 {
+	struct ath12k_vif *ahvif = arvif->ahvif;
 	unsigned long time_left;
 	int ret = 0;
 
@@ -4814,6 +4815,9 @@ static int ath12k_mac_vdev_delete(struct
 	arvif->ahvif->num_vdev_created--;
 	arvif->is_created = false;
 
+	ath12k_dbg(ar->ab, ATH12K_DBG_SET(MAC, L1), "mac vdev delete id %d type %d subtype %d map %llx\n",
+		   arvif->vdev_id, ahvif->vdev_type, ahvif->vdev_subtype,
+		   ar->ab->free_vdev_map);
 clean_up:
 #ifdef CPTCFG_ATH12K_BONDED_DS_SUPPORT
 	if (arvif->link_id != ATH12K_DEFAULT_SCAN_LINK && arvif->ndev_pvt)
@@ -10133,7 +10137,7 @@ static int ath12k_mac_vdev_create(struct
 		break;
 	}
 
-	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "mac vdev create id %d type %d subtype %d map %llx\n",
+	ath12k_dbg(ar->ab, ATH12K_DBG_SET(MAC, L1), "mac vdev create id %d type %d subtype %d map %llx\n",
 		   arvif->vdev_id, ahvif->vdev_type, ahvif->vdev_subtype,
 		   ab->free_vdev_map);
 
@@ -12830,7 +12834,7 @@ ath12k_mac_op_unassign_vif_chanctx(struc
 	if (unlikely(test_bit(ATH12K_FLAG_CRASH_FLUSH, &ar->ab->dev_flags)))
 		goto out;
 
-	ath12k_dbg(ab, ATH12K_DBG_MAC,
+	ath12k_dbg(ab, ATH12K_DBG_SET(MAC, L2),
 		   "mac chanctx unassign ptr %pK vdev_id %i\n",
 		   ctx, arvif->vdev_id);
 
@@ -13027,7 +13031,7 @@ static void ath12k_mac_flush(struct ath1
 		return;
 	}
 
-	ath12k_dbg(ab, ATH12K_DBG_MAC,
+	ath12k_dbg(ab, ATH12K_DBG_SET(MAC, L3),
 		   "mac tx flush pending mgmt %d data %d\n",
 		   atomic_read(&ar->num_pending_mgmt_tx),
 		   atomic_read(&ar->dp.num_tx_pending));
Index: backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/wmi.c
===================================================================
--- backports-20220822-5.4.213-ef7197996efe.orig/drivers/net/wireless/ath/ath12k/wmi.c
+++ backports-20220822-5.4.213-ef7197996efe/drivers/net/wireless/ath/ath12k/wmi.c
@@ -1100,7 +1100,7 @@ int ath12k_wmi_vdev_stop(struct ath12k *
 		dev_kfree_skb(skb);
 	}
 
-	ath12k_dbg(ar->ab, ATH12K_DBG_WMI, "WMI vdev stop id 0x%x\n", vdev_id);
+	ath12k_dbg(ar->ab, ATH12K_DBG_SET(WMI, L1), "WMI vdev stop id 0x%x\n", vdev_id);
 
 	return ret;
 }
@@ -1129,7 +1129,7 @@ int ath12k_wmi_vdev_down(struct ath12k *
 		dev_kfree_skb(skb);
 	}
 
-	ath12k_dbg(ar->ab, ATH12K_DBG_WMI, "WMI vdev down id 0x%x\n", vdev_id);
+	ath12k_dbg(ar->ab, ATH12K_DBG_SET(WMI, L1), "WMI vdev down id 0x%x\n", vdev_id);
 
 	return ret;
 }
@@ -1746,7 +1746,7 @@ int ath12k_wmi_pdev_set_param(struct ath
 		dev_kfree_skb(skb);
 	}
 
-	ath12k_dbg(ar->ab, ATH12K_DBG_WMI,
+	ath12k_dbg(ar->ab, ATH12K_DBG_SET(WMI, L2),
 		   "WMI pdev set param %d pdev id %d value %d\n",
 		   param_id, pdev_id, param_value);
 
@@ -3441,7 +3441,7 @@ int ath12k_wmi_send_wmm_update_cmd_tlv(s
 		wmm_param->acm = wmi_wmm_arg->acm;
 		wmm_param->no_ack = wmi_wmm_arg->no_ack;
 
-		ath12k_dbg(ar->ab, ATH12K_DBG_WMI,
+		ath12k_dbg(ar->ab, ATH12K_DBG_SET(WMI, L3),
 			   "wmi wmm set ac %d aifs %d cwmin %d cwmax %d txop %d acm %d no_ack %d\n",
 			   ac, wmm_param->aifs, wmm_param->cwmin,
 			   wmm_param->cwmax, wmm_param->txoplimit,
