From 6e3cbb6861a690649bf194d9227e7b5bef096cdc Mon Sep 17 00:00:00 2001
From: Nagarajan Maran <quic_nmaran@quicinc.com>
Date: Wed, 15 Feb 2023 10:52:06 +0530
Subject: [PATCH] ath11k: Higher RAM support for third party platforms.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Currently our 11ax WiFi hardware has the capability of
accessing upto (2^40) GB of RAM. However, our software both driver
and firmware are designed to access up to a highest of 4GB RAM
since RAM hasnâ€™t exceeded 4GB capacity in our devices.

This change addresses the issue of directly accessing greater than
4GB RAM from our WiFi chipset on third party platforms.

Signed-off-by: Nagarajan Maran <quic_nmaran@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/ce.h  |  4 ++--
 drivers/net/wireless/ath/ath11k/dp.c  |  2 +-
 drivers/net/wireless/ath/ath11k/hal.c | 10 ++++++++++
 drivers/net/wireless/ath/ath11k/mhi.c |  2 +-
 drivers/net/wireless/ath/ath11k/pci.c |  2 +-
 5 files changed, 15 insertions(+), 5 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/ce.h
+++ b/drivers/net/wireless/ath/ath11k/ce.h
@@ -141,7 +141,7 @@ struct ath11k_ce_ring {
 	/* Host address space */
 	void *base_addr_owner_space_unaligned;
 	/* CE address space */
-	u32 base_addr_ce_space_unaligned;
+	dma_addr_t base_addr_ce_space_unaligned;
 
 	/* Actual start of descriptors.
 	 * Aligned to descriptor-size boundary.
@@ -151,7 +151,7 @@ struct ath11k_ce_ring {
 	void *base_addr_owner_space;
 
 	/* CE address space */
-	u32 base_addr_ce_space;
+	dma_addr_t base_addr_ce_space;
 
 	/* HAL ring id */
 	u32 hal_ring_id;
--- a/drivers/net/wireless/ath/ath11k/dp.c
+++ b/drivers/net/wireless/ath/ath11k/dp.c
@@ -742,7 +742,7 @@ int ath11k_dp_link_desc_setup(struct ath
 	u32 tot_mem_sz;
 	u32 n_link_desc_bank, last_bank_sz;
 	u32 entry_sz, align_bytes, n_entries;
-	u32 paddr;
+	dma_addr_t paddr;
 	u32 *desc;
 	int i, ret;
 
--- a/drivers/net/wireless/ath/ath11k/hal.c
+++ b/drivers/net/wireless/ath/ath11k/hal.c
@@ -1002,6 +1002,16 @@ void ath11k_hal_setup_link_idle_list(str
 			   FIELD_PREP(BUFFER_ADDR_INFO0_ADDR,
 				      sbuf[0].paddr));
 
+       ath11k_hif_write32(ab,
+                           HAL_SEQ_WCSS_UMAC_WBM_REG +
+                           HAL_WBM_SCATTERED_DESC_PTR_HEAD_INFO_IX1,
+                           FIELD_PREP(
+                                HAL_WBM_SCATTERED_DESC_MSB_BASE_ADDR_39_32,
+                                ((u64)sbuf[0].paddr >>
+                                 HAL_ADDR_MSB_REG_SHIFT)) |
+                           FIELD_PREP(HAL_WBM_SCATTERED_DESC_HEAD_P_OFFSET_IX1,
+                                      (end_offset >> 2)));
+
 	ath11k_hif_write32(ab,
 			   HAL_SEQ_WCSS_UMAC_WBM_REG +
 			   HAL_WBM_SCATTERED_DESC_PTR_TAIL_INFO_IX0,
--- a/drivers/net/wireless/ath/ath11k/mhi.c
+++ b/drivers/net/wireless/ath/ath11k/mhi.c
@@ -18,6 +18,11 @@
 
 #define MHI_TIMEOUT_DEFAULT_MS	90000
 #define RDDM_DUMP_SIZE	0x420000
+#ifdef CONFIG_64BIT
+#define MAX_RAM_ADDR 0xFFFFFFFFFFFFFFFF
+#else
+#define MAX_RAM_ADDR 0xFFFFFFFF
+#endif
 
 static struct mhi_channel_config ath11k_mhi_channels_qca6390[] = {
 	{
@@ -428,7 +433,7 @@ int ath11k_mhi_register(struct ath11k_pc
 			return ret;
 	} else {
 		mhi_ctrl->iova_start = 0;
-		mhi_ctrl->iova_stop = 0xFFFFFFFF;
+		mhi_ctrl->iova_stop = MAX_RAM_ADDR;
 	}
 
 	ath11k_info(ab, "mhi_ctrl start addr %llx end addr %llx\n",
--- a/drivers/net/wireless/ath/ath11k/pci.c
+++ b/drivers/net/wireless/ath/ath11k/pci.c
@@ -18,7 +18,8 @@
 #include "qmi.h"
 
 #define ATH11K_PCI_BAR_NUM		0
-#define ATH11K_PCI_DMA_MASK		32
+/* Target can access upto (2^40) GB of RAM directly */
+#define ATH11K_PCI_DMA_MASK		40
 
 #define TCSR_SOC_HW_VERSION		0x0224
 #define TCSR_SOC_HW_VERSION_MAJOR_MASK	GENMASK(11, 8)
