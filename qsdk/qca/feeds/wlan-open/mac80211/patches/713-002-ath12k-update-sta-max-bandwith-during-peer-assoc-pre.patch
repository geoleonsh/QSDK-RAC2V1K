From 3292a654af69d9d8f050a88f995746a8a3218518 Mon Sep 17 00:00:00 2001
From: Manish Dharanenthiran <quic_mdharane@quicinc.com>
Date: Tue, 7 Feb 2023 16:27:17 +0530
Subject: [PATCH 2/2] ath12k: update sta max bandwith during peer assoc prepare

Before sending peer_assoc command to firmware, nss & mcs
rates will be updated based on station bandwidth which
is minimum of AP maximum bandwidth or STA bandwidth's
maxmimu capability. During BW upgrade scenario, host will
send only channel_width and phy mode to firmware. Since,
during assoc, nss & mcs rates are cap'd to AP maximum
bandwidth, firmware will not have proper nss & mcs rates
to support that station which leads to firmware assert.

Fix this by calculating STA mcs & nss rates based on
minimum of STA maximum capability width and AP max supported
bandwidth, instead of current channel def width.

With this change, firmware will have proper mcs & nss rates
during bandwidth upgrade scenario.

Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -1852,6 +1852,94 @@ static void ath12k_peer_assoc_h_crypto(s
 	/* TODO: safe_mode_enabled (bypass 4-way handshake) flag req? */
 }
 
+static enum ieee80211_sta_rx_bandwidth
+ath12k_get_radio_max_bw_caps(struct ath12k *ar,
+			     enum nl80211_band band,
+			     enum ieee80211_sta_rx_bandwidth sta_bw,
+			     enum nl80211_iftype iftype)
+{
+	struct ieee80211_supported_band *sband;
+	struct ieee80211_sband_iftype_data *iftype_data;
+	const struct ieee80211_sta_eht_cap *eht_cap;
+	const struct ieee80211_sta_he_cap *he_cap;
+	int i, idx = 0;
+
+	sband = &ar->mac.sbands[band];
+	iftype_data = ar->mac.iftype[band];
+
+	if (!sband || !iftype_data) {
+		WARN_ONCE(1, "Invalid band specified :%d\n", band);
+		return sta_bw;
+	}
+
+	for (i = 0; i < NUM_NL80211_IFTYPES && i != iftype; i++) {
+		switch(i) {
+		case NL80211_IFTYPE_STATION:
+		case NL80211_IFTYPE_AP:
+		case NL80211_IFTYPE_MESH_POINT:
+			idx++;
+			break;
+		default:
+			break;
+		}
+	}
+
+	eht_cap = &iftype_data[idx].eht_cap;
+	he_cap = &iftype_data[idx].he_cap;
+
+	if (!eht_cap || !he_cap)
+		return sta_bw;
+
+	/* EHT Caps */
+	if (band != NL80211_BAND_2GHZ && eht_cap->has_eht &&
+	    (eht_cap->eht_cap_elem.phy_cap_info[0] &
+	     IEEE80211_EHT_PHY_CAP0_320MHZ_IN_6GHZ))
+		return IEEE80211_STA_RX_BW_320;
+
+	/* HE Caps */
+	switch (band) {
+	case NL80211_BAND_5GHZ:
+	case NL80211_BAND_6GHZ:
+		if (he_cap->has_he) {
+			if (he_cap->he_cap_elem.phy_cap_info[0] &
+			    (IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_160MHZ_IN_5G |
+			    IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_80PLUS80_MHZ_IN_5G)) {
+				return IEEE80211_STA_RX_BW_160;
+			} else if (he_cap->he_cap_elem.phy_cap_info[0] &
+				   IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_40MHZ_80MHZ_IN_5G) {
+				return IEEE80211_STA_RX_BW_80;
+			}
+		}
+		break;
+	case NL80211_BAND_2GHZ:
+		if (he_cap->has_he &&
+		    (he_cap->he_cap_elem.phy_cap_info[0] &
+		     IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_40MHZ_IN_2G))
+			return IEEE80211_STA_RX_BW_40;
+		break;
+	default:
+		break;
+	}
+
+	if (sband->vht_cap.vht_supported) {
+		switch (sband->vht_cap.cap &
+			IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_MASK) {
+		case IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_160MHZ:
+		case IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_160_80PLUS80MHZ:
+			return IEEE80211_STA_RX_BW_160;
+		default:
+			return sta_bw;
+		}
+	}
+
+	/* Keep Last */
+	if (sband->ht_cap.ht_supported &&
+	    (sband->ht_cap.cap & IEEE80211_HT_CAP_SUP_WIDTH_20_40))
+		return IEEE80211_STA_RX_BW_40;
+
+	return sta_bw;
+}
+
 static void ath12k_peer_assoc_h_rates(struct ath12k *ar,
 				      struct ath12k_link_vif *arvif,
 				      struct ath12k_link_sta *arsta,
@@ -2379,6 +2467,7 @@ static void ath12k_peer_assoc_h_he(struc
 	struct ieee80211_bss_conf* link_conf;
 	struct ieee80211_link_sta *link_sta;
 	u32 peer_he_ops;
+	enum ieee80211_sta_rx_bandwidth radio_max_bw_caps;
 
 	link_conf = ath12k_get_link_bss_conf(arvif);
 
@@ -2407,6 +2496,8 @@ static void ath12k_peer_assoc_h_he(struc
 
 	band = def.chan->band;
 	he_mcs_mask = arvif->bitrate_mask.control[band].he_mcs;
+	radio_max_bw_caps = ath12k_get_radio_max_bw_caps(ar, band, link_sta->bandwidth,
+						 vif->type);
 
 	if (ath12k_peer_assoc_h_he_masked(he_mcs_mask))
 		return;
@@ -2537,7 +2628,7 @@ static void ath12k_peer_assoc_h_he(struc
 		he_mcs_mask[link_sta->rx_nss - 1] = he_mcs_mask[he_nss - 1];
 	}
 
-	switch (link_sta->bandwidth) {
+	switch (min(link_sta->sta_max_bandwidth, radio_max_bw_caps)) {
 	case IEEE80211_STA_RX_BW_160:
 		if (he_cap->he_cap_elem.phy_cap_info[0] &
 		    IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_80PLUS80_MHZ_IN_5G) {
@@ -2836,6 +2927,7 @@ static void ath12k_peer_assoc_h_eht(stru
 	u32 peer_eht_ops;
 	struct ieee80211_sta_eht_cap *own_eht_cap;
 	struct ieee80211_eht_mcs_nss_supp *own_eht_mcs_nss_supp;
+	enum ieee80211_sta_rx_bandwidth radio_max_bw_caps;
 
 	link_conf = ath12k_get_link_bss_conf(arvif);
 
@@ -2866,6 +2958,9 @@ static void ath12k_peer_assoc_h_eht(stru
 	band = def.chan->band;
 	eht_mcs_mask = arvif->bitrate_mask.control[band].eht_mcs;
 
+	radio_max_bw_caps = ath12k_get_radio_max_bw_caps(ar, band, link_sta->bandwidth,
+						 vif->type);
+
 	own_eht_cap = &ar->mac.sbands[band].iftype_data->eht_cap;
 	own_eht_mcs_nss_supp = &own_eht_cap->eht_mcs_nss_supp;
 
@@ -2913,7 +3008,7 @@ static void ath12k_peer_assoc_h_eht(stru
 		eht_mcs_mask[link_sta->rx_nss - 1] = eht_mcs_mask[eht_nss - 1];
 	}
 
-	switch (link_sta->bandwidth) {
+	switch (min(link_sta->sta_max_bandwidth, radio_max_bw_caps)) {
 	case IEEE80211_STA_RX_BW_320:
 		mcs_nss_supp_bw = &mcs_nss->bw._320;
 		mcs_idx = WMI_EHTCAP_TXRX_MCS_NSS_IDX_320;
@@ -2983,8 +3078,8 @@ static void ath12k_peer_assoc_h_eht(stru
 		arg->ru_punct_bitmap = ~link_sta->ru_punct_bitmap;
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
-		   "mac he peer %pM nss %d mcs cnt %d ru_punct_bitmap 0x%x\n",
-		   arsta->addr, arg->peer_nss, arg->peer_he_mcs_count, arg->ru_punct_bitmap);
+		   "mac eht peer %pM nss %d mcs cnt %d ru_punct_bitmap 0x%x\n",
+		   arsta->addr, arg->peer_nss, arg->peer_eht_mcs_count, arg->ru_punct_bitmap);
 }
 
 static void ath12k_peer_assoc_h_smps(struct ath12k_link_sta *arsta,
