From 056e45ac613ba044c7ed7b01158e8b04e824d287 Mon Sep 17 00:00:00 2001
From: Aaradhana Sahu <quic_aarasahu@quicinc.com>
Date: Mon, 12 Dec 2022 09:53:13 +0530
Subject: [PATCH] ath12k: enable MLO dump collection

Currently, we are collecting dump for one chip but with multi-link
operation there is a chance to receive rddm mhi callback for more
than one chip, in this condition struct ath12k_coredump_segment_info
overwrite data for each chip to avoid this we create new struct
ath12k_coredump_info which maintain number of dumped chip and
their segment information.

Signed-off-by: Rajat Soni <quic_rajson@quicinc.com>
Signed-off-by: Aaradhana Sahu <quic_aarasahu@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/coredump.c | 36 ++++++++++++++++------
 drivers/net/wireless/ath/ath12k/coredump.h |  5 +++
 2 files changed, 31 insertions(+), 10 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/coredump.c
+++ b/drivers/net/wireless/ath/ath12k/coredump.c
@@ -16,8 +16,8 @@
 #include "mhi.h"
 #include "debug.h"
 
-struct ath12k_coredump_segment_info ath12k_coredump_seg_info;
-EXPORT_SYMBOL(ath12k_coredump_seg_info);
+struct ath12k_coredump_info ath12k_coredump_ram_info;
+EXPORT_SYMBOL(ath12k_coredump_ram_info);
 
 static void *ath12k_coredump_find_segment(loff_t user_offset,
 					  struct ath12k_dump_segment *segment,
@@ -185,6 +185,8 @@ void ath12k_coredump_download_rddm(struc
 	int i, rem_seg_cnt = 0, len, num_seg, seg_sz, qdss_seg_cnt = 1;
 	int skip_count = 0;
 	enum ath12k_fw_crash_dump_type mem_type;
+	struct ath12k_coredump_segment_info *chip_seg;
+	int dump_count;
 
 	ath12k_mhi_coredump(mhi_ctrl, false);
 
@@ -277,18 +279,32 @@ void ath12k_coredump_download_rddm(struc
 
 	num_seg = num_seg - skip_count;
 	if(!ab->fw_recovery_support) {
-		ath12k_coredump_seg_info.chip_id = ar_pci->dev_id;
-		ath12k_coredump_seg_info.qrtr_id = ar_pci->ab->qmi.service_ins_id;
-		ath12k_coredump_seg_info.bus_id = pci_domain_nr(ar_pci->pdev->bus);
-		ath12k_coredump_seg_info.num_seg = num_seg;
-		ath12k_coredump_seg_info.seg = segment;
-
-		BUG_ON(1);
+		dump_count = ath12k_coredump_ram_info.num_chip;
+		if (dump_count >= ATH12K_MAX_SOCS) {
+			ath12k_err(ab, "invalid chip number %d\n", dump_count);
+			return;
+		} else {
+			chip_seg = &ath12k_coredump_ram_info.chip_seg_info[dump_count];
+			chip_seg->chip_id = ar_pci->dev_id;
+			chip_seg->qrtr_id = ar_pci->ab->qmi.service_ins_id;
+			chip_seg->bus_id = pci_domain_nr(ar_pci->pdev->bus);
+			chip_seg->num_seg = num_seg;
+			chip_seg->seg = segment;
+			ath12k_coredump_ram_info.num_chip++;
+
+			if (ath12k_coredump_ram_info.num_chip >= ab->ag->num_started)
+				BUG_ON(1);
+			else
+				ath12k_info(ab,
+					    "%d chip dump collected and waiting for partner chips\n",
+					    ath12k_coredump_ram_info.num_chip);
+		}
 	} else {
+		/* TODO dump collection for MLO when fw_recovery set */
 		ath12k_coredump_build_inline(ab, segment, num_seg);
+		vfree(segment);
 	}
 
-	vfree(segment);
 }
 
 void ath12k_coredump_qdss_dump(struct ath12k_base *ab,
--- a/drivers/net/wireless/ath/ath12k/coredump.h
+++ b/drivers/net/wireless/ath/ath12k/coredump.h
@@ -76,6 +76,11 @@ struct ath12k_coredump_segment_info {
 	 u8 bus_id;
 };
 
+struct ath12k_coredump_info {
+	u32 num_chip;
+	struct ath12k_coredump_segment_info chip_seg_info[ATH12K_MAX_SOCS];
+};
+
 #ifdef CONFIG_WANT_DEV_COREDUMP
 void ath12k_coredump_download_rddm(struct ath12k_base *ab);
 void ath12k_coredump_build_inline(struct ath12k_base *ab,
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -1507,10 +1507,12 @@ static void ath12k_core_reset(struct wor
 	/* prepare coredump */
 	ath12k_coredump_download_rddm(ab);
 
-	ath12k_hif_power_down(ab);
-	ath12k_hif_power_up(ab);
+	if (ab->fw_recovery_support) {
+		ath12k_hif_power_down(ab);
+		ath12k_hif_power_up(ab);
 
-	ath12k_dbg(ab, ATH12K_DBG_BOOT, "reset started\n");
+		ath12k_dbg(ab, ATH12K_DBG_BOOT, "reset started\n");
+	}
 }
 
 int ath12k_core_pre_init(struct ath12k_base *ab)
