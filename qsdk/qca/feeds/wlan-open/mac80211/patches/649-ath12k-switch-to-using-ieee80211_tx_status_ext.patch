From 9977972a9f81959410d31fabd3e64f085d6e028a Mon Sep 17 00:00:00 2001
From: Sachin Kedare <quic_skedare@quicinc.com>
Date: Tue, 12 Jul 2022 14:51:14 +0530
Subject: [PATCH] ath12k: switch to using ieee80211_tx_status_ext()

This allows us to pass HE rates down into the stack

Signed-off-by: Sachin Kedare <quic_skedare@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_tx.c | 33 +++++++++++++++++++++----
 1 file changed, 28 insertions(+), 5 deletions(-)

Index: backports-20220404-5.4.164-f40abb4788/drivers/net/wireless/ath/ath12k/dp_tx.c
===================================================================
--- backports-20220404-5.4.164-f40abb4788.orig/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ backports-20220404-5.4.164-f40abb4788/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -584,9 +584,15 @@ static void ath12k_dp_tx_complete_msdu(s
 				       struct sk_buff *msdu,
 				       struct hal_tx_status *ts)
 {
+	struct ieee80211_tx_status status = { 0 };
+
 	struct ath12k_base *ab = ar->ab;
 	struct ieee80211_tx_info *info;
 	struct ath12k_skb_cb *skb_cb;
+	struct ath12k_peer *peer;
+	struct ath12k_sta *arsta;
+	struct rate_info rate;
+
 
 	if (WARN_ON_ONCE(ts->buf_rel_source != HAL_WBM_REL_SRC_MODULE_TQM)) {
 		/* Must not happen */
@@ -653,12 +659,27 @@ static void ath12k_dp_tx_complete_msdu(s
 		ath12k_dp_tx_cache_peer_stats(ar, msdu, ts);
 	}
 
-	/* NOTE: Tx rate status reporting. Tx completion status does not have
-	 * necessary information (for example nss) to build the tx rate.
-	 * Might end up reporting it out-of-band from HTT stats.
-	 */
+	spin_lock_bh(&ab->base_lock);
+	peer = ath12k_peer_find_by_id(ab, ts->peer_id);
+	if (!peer || !peer->sta) {
+		 ath12k_dbg(ab, ATH12K_DBG_DATA,
+				 "dp_tx: failed to find the peer with peer_id %d\n",
+				 ts->peer_id);
+		 spin_unlock_bh(&ab->base_lock);
+		 dev_kfree_skb_any(msdu);
+		 goto exit;
+	}
+
+	arsta = (struct ath12k_sta *)peer->sta->drv_priv;
+	status.sta = peer->sta;
+	status.skb = msdu;
+	status.info = info;
+	rate = arsta->last_txrate;
+	status.rates = &rate;
+	spin_unlock_bh(&ab->base_lock);
+
+	ieee80211_tx_status_ext(ar->hw, &status);
 
-	ieee80211_tx_status(ar->hw, msdu);
 
 exit:
 	rcu_read_unlock();
