From 8baaf8d3f05f1c2bac31db7b820ed927cd306637 Mon Sep 17 00:00:00 2001
From: Hari Chandrakanthan <quic_haric@quicinc.com>
Date: Sun, 15 Jan 2023 21:39:59 +0530
Subject: [PATCH] ath12k : add awgn support for 320 MHz in 6 GHz band

Add support for awgn handling of 320 MHz bw in 6 GHz band.

Signed-off-by: Hari Chandrakanthan <quic_haric@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/wmi.c |  9 +++++++
 drivers/net/wireless/ath/ath12k/wmi.h | 45 ++++++++++++++++++++++-------------
 2 files changed, 38 insertions(+), 16 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/wmi.c b/drivers/net/wireless/ath/ath12k/wmi.c
index 42c27eb..fe3a0f4 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -8612,6 +8612,14 @@ bool ath12k_wmi_validate_dcs_awgn_info(struct ath12k *ar, struct wmi_dcs_awgn_in
                         return false;
                 }
                 break;
+	case WMI_HOST_CHAN_WIDTH_320:
+		if (awgn_info->chan_bw_interference_bitmap > WMI_DCS_SEG_SEC160) {
+			ath12k_dbg(ar->ab, ATH12K_DBG_WMI,
+				   "dcs interference event received with wrong chan width bmap %d for 320MHz",
+				   awgn_info->chan_bw_interference_bitmap);
+			return false;
+		}
+		break;
         default:
                 ath12k_dbg(ar->ab, ATH12K_DBG_WMI,
                            "dcs interference event received with unknown channel width %d",
@@ -8620,6 +8628,7 @@ bool ath12k_wmi_validate_dcs_awgn_info(struct ath12k *ar, struct wmi_dcs_awgn_in
         }
         return true;
 }
+
 static void
 ath12k_wmi_dcs_awgn_interference_event(struct ath12k_base *ab,
                                        struct sk_buff *skb)
diff --git a/drivers/net/wireless/ath/ath12k/wmi.h b/drivers/net/wireless/ath/ath12k/wmi.h
index f134e37..05ffd96 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -5066,27 +5066,40 @@ struct wmi_dcs_interference_ev {
 } __packed;
 
 enum wmi_host_channel_width {
-        WMI_HOST_CHAN_WIDTH_20    = 0,
-        WMI_HOST_CHAN_WIDTH_40    = 1,
-        WMI_HOST_CHAN_WIDTH_80    = 2,
-        WMI_HOST_CHAN_WIDTH_160   = 3,
-        WMI_HOST_CHAN_WIDTH_80P80 = 4,
-	WMI_HOST_CHAN_WIDTH_320   = 7,
+	WMI_HOST_CHAN_WIDTH_20      = 0,
+	WMI_HOST_CHAN_WIDTH_40      = 1,
+	WMI_HOST_CHAN_WIDTH_80      = 2,
+	WMI_HOST_CHAN_WIDTH_160     = 3,
+	WMI_HOST_CHAN_WIDTH_80P80   = 4,
+	WMI_HOST_CHAN_WIDTH_5       = 5,
+	WMI_HOST_CHAN_WIDTH_10      = 6,
+	WMI_HOST_CHAN_WIDTH_165     = 7,
+	WMI_HOST_CHAN_WIDTH_160P160 = 8,
+	WMI_HOST_CHAN_WIDTH_320     = 9,
 	/*keep last */
 	WMI_HOST_CHAN_WIDTH_MAX	  = 0xF,
 };
 
 enum wmi_dcs_interference_chan_segment {
-        WMI_DCS_SEG_PRI20             =  0x1,
-        WMI_DCS_SEG_SEC20             =  0x2,
-        WMI_DCS_SEG_SEC40_LOWER       =  0x4,
-        WMI_DCS_SEG_SEC40_UPPER       =  0x8,
-        WMI_DCS_SEG_SEC40             =  0xC,
-        WMI_DCS_SEG_SEC80_LOWER       = 0x10,
-        WMI_DCS_SEG_SEC80_LOWER_UPPER = 0x20,
-        WMI_DCS_SEG_SEC80_UPPER_LOWER = 0x40,
-        WMI_DCS_SEG_SEC80_UPPER       = 0x80,
-        WMI_DCS_SEG_SEC80             = 0xF0,
+	WMI_DCS_SEG_PRI20                 = 0x1,
+	WMI_DCS_SEG_SEC20                 = 0x2,
+	WMI_DCS_SEG_SEC40_LOW             = 0x4,
+	WMI_DCS_SEG_SEC40_UP              = 0x8,
+	WMI_DCS_SEG_SEC40                 = 0xC,
+	WMI_DCS_SEG_SEC80_LOW             = 0x10,
+	WMI_DCS_SEG_SEC80_LOW_UP          = 0x20,
+	WMI_DCS_SEG_SEC80_UP_LOW          = 0x40,
+	WMI_DCS_SEG_SEC80_UP              = 0x80,
+	WMI_DCS_SEG_SEC80                 = 0xF0,
+	WMI_DCS_SEG_SEC160_LOW            = 0x0100,
+	WMI_DCS_SEG_SEC160_LOW_UP         = 0x0200,
+	WMI_DCS_SEG_SEC160_LOW_UP_UP      = 0x0400,
+	WMI_DCS_SEG_SEC160_LOW_UP_UP_UP   = 0x0800,
+	WMI_DCS_SEG_SEC160_UP_LOW_LOW_LOW = 0x1000,
+	WMI_DCS_SEG_SEC160_UP_LOW_LOW     = 0x2000,
+	WMI_DCS_SEG_SEC160_UP_LOW         = 0x4000,
+	WMI_DCS_SEG_SEC160_UP             = 0x8000,
+	WMI_DCS_SEG_SEC160                = 0xFF00,
 };
 
 struct wmi_pdev_temperature_event {
-- 
2.7.4

