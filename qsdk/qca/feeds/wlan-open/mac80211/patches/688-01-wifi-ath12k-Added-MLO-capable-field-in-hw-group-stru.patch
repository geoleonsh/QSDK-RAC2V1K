From 01c7dffa2e0c11659e099312fd58c7da60022b0d Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Mon, 21 Nov 2022 14:59:57 +0530
Subject: [PATCH] wifi: ath12k: Added MLO capable field in hw group structure

MLO capability field is required to enable MLO setup. This capable
is disabled implicitly when the total links in the hw group is
not more than one.

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c |  5 +++--
 drivers/net/wireless/ath/ath12k/core.h |  2 +-
 drivers/net/wireless/ath/ath12k/mac.c  |  7 +++----
 drivers/net/wireless/ath/ath12k/qmi.c  | 19 ++++++++++++++++---
 4 files changed, 23 insertions(+), 10 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -129,6 +129,7 @@ ath12k_core_hw_group_alloc(u8 id, u8 max
 
 	ag->id = id;
 	ag->num_chip = max_chip;
+	ag->mlo_capable = !!ath12k_mlo_capable;
 	list_add(&ag->list, &ath12k_hw_groups);
 	mutex_init(&ag->mutex_lock);
 
@@ -151,12 +152,12 @@ static struct ath12k_hw_group *ath12k_co
 	 * within the soc, all links are combined into a single wiphy.
 	 */
 	mlo = of_parse_phandle(dev->of_node, "qcom,wsi", 0);
-	if (!mlo) {
-		group_id = ATH12K_INVALID_GRP_ID;
-	} else {
+	if (mlo && ath12k_mlo_capable) {
 		ret = of_property_read_u32(mlo, "id", &group_id);
 		if (ret)
 			group_id = ATH12K_INVALID_GRP_ID;
+	} else {
+		group_id = ATH12K_INVALID_GRP_ID;
 	}
 
 again:
@@ -987,7 +988,7 @@ static int ath12k_core_mlo_teardown(stru
 	int ret;
 	int i;
 
-	if (ag->id == ATH12K_INVALID_GRP_ID)
+	if (!ag->mlo_capable)
 		return 0;
 
 	for (i = ag->num_hw - 1; i >= 0; i--) {
@@ -1010,7 +1011,7 @@ static int ath12k_core_mlo_setup(struct
 	int ret;
 	int i;
 
-	if (ag->id == ATH12K_INVALID_GRP_ID)
+	if (!ag->mlo_capable)
 		return 0;
 
 	for (i = 0; i < ag->num_hw; i++) {
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -40,7 +40,6 @@
 #define	ATH12K_RX_RATE_TABLE_11AX_NUM	576
 
 extern unsigned int ath12k_frame_mode;
-extern unsigned int ath12k_mlo_capable;
 
 #define ATH12K_MON_TIMER_INTERVAL  10
 #define ATH12K_RESET_TIMEOUT_HZ			(20 * HZ)
@@ -1031,6 +1030,7 @@ struct ath12k_hw_group {
 	u8 num_probed;
 	u8 num_started;
 	u8 num_hw;
+	bool mlo_capable;
 	unsigned long dev_flags;
 	struct ath12k_hw *ah[ATH12K_GROUP_MAX_RADIO];
 	struct ath12k_base *ab[ATH12K_MAX_SOCS];
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -13066,11 +13066,10 @@ int ath12k_mac_allocate(struct ath12k_hw
 	for (i = 0; i < ag->num_chip; i++)
 		total_radio += ag->ab[i]->num_radios;
 
-	/* All pdev get combined and register as single wiphy in the non-invalid
-	 * group where also multi-link is enabled. where as in other group,
-	 * each pdev get register separately.
+	/* All pdev get combined and register as single wiphy if MLO capable
+	 * is enabled. where as in other group, each pdev get register separately.
 	 */
-	if (ag->id != ATH12K_INVALID_GRP_ID && ath12k_mlo_capable)
+	if (ag->mlo_capable)
 		num_radios = total_radio;
 	else
 		num_radios = 1;
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -2835,14 +2835,25 @@ static int ath12k_qmi_fill_mlo_host_caps
 
 	mutex_lock(&ag->mutex_lock);
 
-	if (ag->id == ATH12K_INVALID_GRP_ID || !ab->qmi.num_radios) {
-		ath12k_dbg(ab, ATH12K_DBG_QMI, "Skip MLO cap send for chip id %d\n",
+	if (!ag->mlo_capable) {
+		ath12k_dbg(ab, ATH12K_DBG_QMI, "Skip MLO cap send for chip id %d since it's not MLO capable\n",
 			   ab->chip_id);
 		mutex_unlock(&ag->mutex_lock);
 		return 0;
 	}
 
+	if (ag->id == ATH12K_INVALID_GRP_ID || !ab->qmi.num_radios) {
+		ag->mlo_capable = false;
+
+		ath12k_dbg(ab, ATH12K_DBG_QMI, "Skip MLO cap send for chip id %d due to group_id %d qmi num_radio %d\n",
+			   ab->chip_id, ag->id, ab->qmi.num_radios);
+		mutex_unlock(&ag->mutex_lock);
+		return 0;
+	}
+
 	if (ab->chip_id == ATH12K_INVALID_CHIP_ID) {
+		ath12k_err(ab, "failed to send MLO cap send due to Invalid chip id\n");
+
 		ret = -EINVAL;
 		goto out;
 	}
@@ -2874,8 +2885,7 @@ static int ath12k_qmi_fill_mlo_host_caps
 
 		info->chip_id = partner_ab->chip_id;
 
-		/* TODO: Need to get the phy count */
-		info->num_local_links = partner_ab->hw_params->num_local_link;
+		info->num_local_links = partner_ab->qmi.num_radios;
 
 		ath12k_dbg(ab, ATH12K_DBG_QMI, "MLO chip id %d num_link %d\n",
 			    partner_ab->chip_id, info->num_local_links);
@@ -2891,6 +2901,10 @@ static int ath12k_qmi_fill_mlo_host_caps
 		}
 	}
 
+	/* Disable MLO capable if there is no Multi-link in a group */
+	if (link_id <= 1)
+		ag->mlo_capable = false;
+
 	req->mlo_chip_info_valid = true;
 
 	ath12k_dbg(ab, ATH12K_DBG_QMI, "MLO host cap chosen\n");
@@ -2920,6 +2934,7 @@ chip_cleanup:
 	req->mlo_capable = 0;
 	req->mlo_capable_valid = 0;
 
+	ag->mlo_capable = false;
 out:
 	mutex_unlock(&ag->mutex_lock);
 
@@ -3029,11 +3044,15 @@ static int ath12k_qmi_phy_cap_send(struc
 	if (ret < 0)
 		goto out;
 
-	if (resp.resp.result != QMI_RESULT_SUCCESS_V01)
+	if (resp.resp.result != QMI_RESULT_SUCCESS_V01) {
+		ret = -EOPNOTSUPP;
 		goto out;
+	}
 
-	if (!resp.num_phy_valid)
+	if (!resp.num_phy_valid) {
+		ret = -ENODATA;
 		goto out;
+	}
 
 	ab->qmi.num_radios = resp.num_phy;
 
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -1627,6 +1627,7 @@ int ath12k_dp_alloc(struct ath12k_base *
 	u32 n_link_desc = 0;
 	int ret;
 	int i;
+	u8 chip_id;
 
 	dp->ab = ab;
 
@@ -1635,7 +1636,8 @@ int ath12k_dp_alloc(struct ath12k_base *
 	spin_lock_init(&dp->reo_cmd_lock);
 
 	dp->reo_cmd_cache_flush_count = 0;
-	dp->idle_link_rbm_id = HAL_RX_BUF_RBM_WBM_CHIP0_IDLE_DESC_LIST + ab->chip_id;
+	chip_id = (ab->ag->mlo_capable) ? ab->chip_id : 0;
+	dp->idle_link_rbm_id = HAL_RX_BUF_RBM_WBM_CHIP0_IDLE_DESC_LIST + chip_id;
 
 	ret = ath12k_wbm_idle_ring_setup(ab, &n_link_desc);
 	if (ret) {
