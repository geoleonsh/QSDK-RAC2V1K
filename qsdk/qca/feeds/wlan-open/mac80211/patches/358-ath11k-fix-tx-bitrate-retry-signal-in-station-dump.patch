From 7a29b2630ed3c71959b924674a0b39911140e7e1 Mon Sep 17 00:00:00 2001
From: Sowmiya Sree Elavalagan <quic_ssreeela@quicinc.com>
Date: Mon, 10 Oct 2022 22:43:46 +0530
Subject: [PATCH] ath11k: Fix rssi and retry count in station dump and skip tx bitrate update
 for mgmt frames

Fix signal and signal average in station dump by using real
noise floor and appropriate bandwidth offset. In this way
signal strength in station matches the rssi_in_dbm in htt stats
Tx bitrate in station dump was dropping to legacy rate
randomly, this is because the tx rate was updated for
management packet as well. Skip tx bitrate update for
management packets based on the tid.
Tx retries in station dump is showing 0 always.
Fixed it by getting the retry count in tx completion path
from tx descriptors. And updated this to station info in
sta_statistics mac ops.

Signed-off-by: Sowmiya Sree Elavalagan <quic_ssreeela@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/core.h  |   2 +
 drivers/net/wireless/ath/ath11k/dp_rx.c | 154 ++++++++++++------------
 drivers/net/wireless/ath/ath11k/mac.c   |  30 +++--
 drivers/net/wireless/ath/ath11k/wmi.c   |   6 +-
 4 files changed, 106 insertions(+), 86 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -680,6 +680,7 @@ struct ath11k_sta {
 	u8 rssi_comb;
 	struct ewma_avg_rssi avg_rssi;
 	s8 rssi_beacon;
+	u32 tx_retry_count;
 	s8 chain_signal[IEEE80211_MAX_CHAINS];
 	struct ath11k_htt_tx_stats *tx_stats;
 	struct ath11k_rx_peer_stats *rx_stats;
@@ -720,6 +721,7 @@ struct ath11k_sta {
 	/*bytes count for bit error rate computation*/
 	u32 ber_succ_bytes;
 	u32 ber_fail_bytes;
+	u32 last_tx_pkt_bw;
 	struct work_struct tid_config_wk;
 	struct ath11k_tid_qos_config tid_cfg[ATH11K_TID_MAX];
 #ifdef CPTCFG_ATH11K_CFR
@@ -923,6 +925,7 @@ struct ath11k {
 	u32 txpower_scale;
 	u32 power_scale;
 	u32 chan_tx_pwr;
+	s32 chan_noise_floor;
 	u32 num_stations;
 	u32 max_num_stations;
 	/* To synchronize concurrent synchronous mac80211 callback operations,
--- a/drivers/net/wireless/ath/ath11k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath11k/dp_rx.c
@@ -1607,91 +1607,92 @@ ath11k_update_per_peer_tx_stats(struct a
 	ru_start = user_rate->ru_start;
 	ru_tone = user_rate->ru_end;
 
-	/* Note: If host configured fixed rates and in some other special
-	 * cases, the broadcast/management frames are sent in different rates.
-	 * Firmware rate's control to be skipped for this?
+	/* PPDU stats reported for mgmt packet doesn't have valid tx bytes.
+	 * So skip peer stats update for mgmt packets.
 	 */
 
-	if (flags == WMI_RATE_PREAMBLE_HE && mcs > ATH11K_HE_MCS_MAX) {
-		ath11k_warn(ab, "Invalid HE mcs %d peer stats",  mcs);
-		return;
-	}
+	if (tid < HTT_PPDU_STATS_NON_QOS_TID) {
+		/* Note: If host configured fixed rates and in some other special
+		 * cases, the broadcast/management frames are sent in different rates.
+		 * Firmware rate's control to be skipped for this?
+		 */
 
-	if (flags == WMI_RATE_PREAMBLE_VHT && mcs > ATH11K_VHT_MCS_MAX) {
-		ath11k_warn(ab, "Invalid VHT mcs %d peer stats",  mcs);
-		return;
-	}
+		if (flags == WMI_RATE_PREAMBLE_HE && mcs > ATH11K_HE_MCS_MAX) {
+			ath11k_warn(ab, "Invalid HE mcs %d peer stats",  mcs);
+			return;
+		}
 
-	if (flags == WMI_RATE_PREAMBLE_HT && (mcs > ATH11K_HT_MCS_MAX || nss < 1)) {
-		ath11k_warn(ab, "Invalid HT mcs %d nss %d peer stats",
-			    mcs, nss);
-		return;
-	}
+		if (flags == WMI_RATE_PREAMBLE_VHT && mcs > ATH11K_VHT_MCS_MAX) {
+			ath11k_warn(ab, "Invalid VHT mcs %d peer stats",  mcs);
+			return;
+		}
 
-	if (flags == WMI_RATE_PREAMBLE_CCK || flags == WMI_RATE_PREAMBLE_OFDM) {
-		ret = ath11k_mac_hw_ratecode_to_legacy_rate(mcs,
-							    flags,
-							    &rate_idx,
-							    &rate);
-		if (ret < 0)
+		if (flags == WMI_RATE_PREAMBLE_HT && (mcs > ATH11K_HT_MCS_MAX || nss < 1)) {
+			ath11k_warn(ab, "Invalid HT mcs %d nss %d peer stats",
+				    mcs, nss);
 			return;
-	}
+		}
 
-	rcu_read_lock();
-	spin_lock_bh(&ab->base_lock);
-	peer = ath11k_peer_find_by_id(ab, usr_stats->peer_id);
+		if (flags == WMI_RATE_PREAMBLE_CCK || flags == WMI_RATE_PREAMBLE_OFDM) {
+			ret = ath11k_mac_hw_ratecode_to_legacy_rate(mcs,
+								    flags,
+								    &rate_idx,
+								    &rate);
+			if (ret < 0)
+				return;
+		}
 
-	if (!peer || !peer->sta) {
-		spin_unlock_bh(&ab->base_lock);
-		rcu_read_unlock();
-		return;
-	}
+		rcu_read_lock();
+		spin_lock_bh(&ab->base_lock);
+		peer = ath11k_peer_find_by_id(ab, usr_stats->peer_id);
+
+		if (!peer || !peer->sta) {
+			spin_unlock_bh(&ab->base_lock);
+			rcu_read_unlock();
+			return;
+		}
 
-	sta = peer->sta;
-	arsta = (struct ath11k_sta *)sta->drv_priv;
+		sta = peer->sta;
+		arsta = (struct ath11k_sta *)sta->drv_priv;
 
-	memset(&arsta->txrate, 0, sizeof(arsta->txrate));
+		memset(&arsta->txrate, 0, sizeof(arsta->txrate));
 
-	switch (flags) {
-	case WMI_RATE_PREAMBLE_OFDM:
-		arsta->txrate.legacy = rate;
-		break;
-	case WMI_RATE_PREAMBLE_CCK:
-		arsta->txrate.legacy = rate;
-		break;
-	case WMI_RATE_PREAMBLE_HT:
-		arsta->txrate.mcs = mcs + 8 * (nss - 1);
-		arsta->txrate.flags = RATE_INFO_FLAGS_MCS;
-		if (sgi)
-			arsta->txrate.flags |= RATE_INFO_FLAGS_SHORT_GI;
-		break;
-	case WMI_RATE_PREAMBLE_VHT:
-		arsta->txrate.mcs = mcs;
-		arsta->txrate.flags = RATE_INFO_FLAGS_VHT_MCS;
-		if (sgi)
-			arsta->txrate.flags |= RATE_INFO_FLAGS_SHORT_GI;
-		break;
-	case WMI_RATE_PREAMBLE_HE:
-		arsta->txrate.mcs = mcs;
-		arsta->txrate.flags = RATE_INFO_FLAGS_HE_MCS;
-		arsta->txrate.he_dcm = dcm;
-		arsta->txrate.he_gi = ath11k_mac_he_gi_to_nl80211_he_gi(sgi);
-		arsta->txrate.he_ru_alloc = ath11k_mac_phy_he_ru_to_nl80211_he_ru_alloc
-						((user_rate->ru_end -
-						 user_rate->ru_start) + 1);
-		break;
-	}
+		switch (flags) {
+		case WMI_RATE_PREAMBLE_OFDM:
+			arsta->txrate.legacy = rate;
+			break;
+		case WMI_RATE_PREAMBLE_CCK:
+			arsta->txrate.legacy = rate;
+			break;
+		case WMI_RATE_PREAMBLE_HT:
+			arsta->txrate.mcs = mcs + 8 * (nss - 1);
+			arsta->txrate.flags = RATE_INFO_FLAGS_MCS;
+			if (sgi)
+				arsta->txrate.flags |= RATE_INFO_FLAGS_SHORT_GI;
+			break;
+		case WMI_RATE_PREAMBLE_VHT:
+			arsta->txrate.mcs = mcs;
+			arsta->txrate.flags = RATE_INFO_FLAGS_VHT_MCS;
+			if (sgi)
+				arsta->txrate.flags |= RATE_INFO_FLAGS_SHORT_GI;
+			break;
+		case WMI_RATE_PREAMBLE_HE:
+			arsta->txrate.mcs = mcs;
+			arsta->txrate.flags = RATE_INFO_FLAGS_HE_MCS;
+			arsta->txrate.he_dcm = dcm;
+			arsta->txrate.he_gi = ath11k_mac_he_gi_to_nl80211_he_gi(sgi);
+			arsta->txrate.he_ru_alloc = ath11k_mac_phy_he_ru_to_nl80211_he_ru_alloc
+							((user_rate->ru_end -
+							 user_rate->ru_start) + 1);
+			break;
+		}
 
-	arsta->txrate.nss = nss;
+		arsta->txrate.nss = nss;
 
-	arsta->txrate.bw = ath11k_mac_bw_to_mac80211_bw(bw);
-	arsta->tx_duration += tx_duration;
-	memcpy(&arsta->last_txrate, &arsta->txrate, sizeof(struct rate_info));
+		arsta->txrate.bw = ath11k_mac_bw_to_mac80211_bw(bw);
+		arsta->tx_duration += tx_duration;
+		memcpy(&arsta->last_txrate, &arsta->txrate, sizeof(struct rate_info));
 
-	/* PPDU stats reported for mgmt packet doesn't have valid tx bytes.
-	 * So skip peer stats update for mgmt packets.
-	 */
-	if (tid < HTT_PPDU_STATS_NON_QOS_TID) {
 		memset(peer_stats, 0, sizeof(*peer_stats));
 		peer_stats->succ_pkts = succ_pkts;
 		peer_stats->succ_bytes = succ_bytes;
@@ -1719,12 +1720,12 @@ ath11k_update_per_peer_tx_stats(struct a
 
 		if (unlikely(ath11k_debugfs_is_extd_tx_stats_enabled(ar)))
 			ath11k_debugfs_sta_add_tx_stats(arsta, peer_stats, rate_idx);
+
+		spin_unlock_bh(&ab->base_lock);
+		rcu_read_unlock();
 	}
 
 	usr_stats->rate_stats_updated = true;
-
-	spin_unlock_bh(&ab->base_lock);
-	rcu_read_unlock();
 }
 
 static void ath11k_htt_update_ppdu_stats(struct ath11k *ar,
@@ -3509,13 +3510,16 @@ static void ath11k_dp_rx_update_peer_su_
 {
 	struct ath11k_rx_peer_stats *rx_stats = arsta->rx_stats;
 	u32 num_msdu;
+	u32 bw_offset;
 	int i;
 
 	if (!rx_stats)
 		return;
 
+	arsta->last_tx_pkt_bw = ppdu_info->bw;
+	bw_offset = arsta->last_tx_pkt_bw * 3;
 	arsta->rssi_comb = ppdu_info->rssi_comb;
-	ewma_avg_rssi_add(&arsta->avg_rssi, ppdu_info->rssi_comb);
+	ewma_avg_rssi_add(&arsta->avg_rssi, ppdu_info->rssi_comb + bw_offset);
 
 	if (!ath11k_debugfs_is_extd_rx_stats_enabled(ar))
 		return;
--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -11471,6 +11471,7 @@ static void ath11k_mac_op_sta_statistics
 	struct ath11k *ar = arsta->arvif->ar;
 	struct ath11k_vif *arvif = ath11k_vif_to_arvif(vif);
 	s8 signal;
+	u32 bw_offset = 0;
 	bool db2dbm = test_bit(WMI_TLV_SERVICE_HW_DB2DBM_CONVERSION_SUPPORT,
 			       ar->ab->wmi_ab.svc_map);
 
@@ -11480,6 +11481,11 @@ static void ath11k_mac_op_sta_statistics
 	sinfo->tx_duration = arsta->tx_duration;
 	sinfo->filled |= BIT_ULL(NL80211_STA_INFO_TX_DURATION);
 
+	if (arsta->tx_retry_count) {
+		sinfo->tx_retries = arsta->tx_retry_count;
+		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_TX_RETRIES);
+	}
+
 	if (arsta->txrate.legacy || arsta->txrate.nss) {
 		if (arsta->txrate.legacy) {
 			sinfo->txrate.legacy = arsta->txrate.legacy;
@@ -11505,25 +11511,35 @@ static void ath11k_mac_op_sta_statistics
 		ath11k_mac_put_chain_rssi(sinfo, arsta, "fw stats", true);
 	}
 
-	signal = arsta->rssi_comb;
-	if (!signal &&
+	if (arsta->rssi_comb) {
+		bw_offset = arsta->last_tx_pkt_bw * 3;
+		signal = arsta->rssi_comb + ar->chan_noise_floor + bw_offset;
+		sinfo->signal = signal;
+		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_SIGNAL);
+	} else if (!signal &&
 	    arsta->arvif->vdev_type == WMI_VDEV_TYPE_STA &&
 	    ar->ab->hw_params.supports_rssi_stats &&
 	    !(ath11k_debugfs_get_fw_stats(ar, ar->pdev->pdev_id, 0,
-					WMI_REQUEST_VDEV_STAT)))
+					WMI_REQUEST_VDEV_STAT))) {
 		signal = arsta->rssi_beacon;
 
+		if (signal) {
+			sinfo->signal = db2dbm ? signal : signal + ATH11K_DEFAULT_NOISE_FLOOR;
+			sinfo->filled |= BIT_ULL(NL80211_STA_INFO_SIGNAL);
+		}
+	}
+
 	ath11k_dbg(ar->ab, ATH11K_DBG_MAC,
 		   "mac sta statistics db2dbm %u rssi comb %d rssi beacon %d\n",
 		   db2dbm, arsta->rssi_comb, arsta->rssi_beacon);
 
-	if (signal) {
-		sinfo->signal = db2dbm ? signal : signal + ATH11K_DEFAULT_NOISE_FLOOR;
-		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_SIGNAL);
+	if (ar->chan_noise_floor) {
+		sinfo->signal_avg = ewma_avg_rssi_read(&arsta->avg_rssi) +
+				    ar->chan_noise_floor;
+	} else {
+		sinfo->signal_avg = ewma_avg_rssi_read(&arsta->avg_rssi) +
+				    ATH11K_DEFAULT_NOISE_FLOOR;
 	}
-
-	sinfo->signal_avg = ewma_avg_rssi_read(&arsta->avg_rssi) +
-		ATH11K_DEFAULT_NOISE_FLOOR;
 	sinfo->filled |= BIT_ULL(NL80211_STA_INFO_SIGNAL_AVG);
 
 	if (arvif->ar->ab->nss.enabled)
--- a/drivers/net/wireless/ath/ath11k/wmi.c
+++ b/drivers/net/wireless/ath/ath11k/wmi.c
@@ -7077,10 +7077,12 @@ static int ath11k_pull_wds_addr_ev(struc
 	return 0;
 }
 
-static void ath11k_wmi_pull_pdev_stats_base(const struct wmi_pdev_stats_base *src,
+static void ath11k_wmi_pull_pdev_stats_base(struct ath11k *ar,
+					    const struct wmi_pdev_stats_base *src,
 					    struct ath11k_fw_stats_pdev *dst)
 {
 	dst->ch_noise_floor = src->chan_nf;
+	ar->chan_noise_floor = src->chan_nf;
 	dst->tx_frame_count = src->tx_frame_count;
 	dst->rx_frame_count = src->rx_frame_count;
 	dst->rx_clear_count = src->rx_clear_count;
@@ -7304,7 +7306,7 @@ static int ath11k_wmi_tlv_fw_stats_data_
 		if (!dst)
 			continue;
 
-		ath11k_wmi_pull_pdev_stats_base(&src->base, dst);
+		ath11k_wmi_pull_pdev_stats_base(ar, &src->base, dst);
 		ath11k_wmi_pull_pdev_stats_tx(&src->tx, dst);
 		ath11k_wmi_pull_pdev_stats_rx(&src->rx, dst);
 		list_add_tail(&dst->list, &stats->pdevs);
--- a/drivers/net/wireless/ath/ath11k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath11k/dp_tx.c
@@ -795,6 +795,7 @@ static void ath11k_dp_tx_complete_msdu(s
 	struct hal_tx_status ts = { 0 };
 	enum hal_wbm_htt_tx_comp_status wbm_status;
 	enum hal_wbm_tqm_rel_reason rel_status;
+	u32 bw_offset;
 	u8 flags = 0;
 
 	if (unlikely(WARN_ON_ONCE(buf_rel_source != HAL_WBM_REL_SRC_MODULE_TQM))) {
@@ -851,15 +852,6 @@ static void ath11k_dp_tx_complete_msdu(s
 	/* skip tx rate update from ieee80211_status*/
 	info->status.rates[0].idx = -1;
 
-	if (ts.status == HAL_WBM_TQM_REL_REASON_FRAME_ACKED &&
-	    !(info->flags & IEEE80211_TX_CTL_NO_ACK) &&
-	    !(flags & ATH11K_SKB_F_NOACK_TID)) {
-		info->flags |= IEEE80211_TX_STAT_ACK;
-		info->status.ack_signal = ATH11K_DEFAULT_NOISE_FLOOR +
-					  ts.ack_rssi;
-		info->status.flags |= IEEE80211_TX_STATUS_ACK_SIGNAL_VALID;
-	}
-
 	if (ts.status == HAL_WBM_TQM_REL_REASON_CMD_REMOVE_TX &&
 	    (info->flags & IEEE80211_TX_CTL_NO_ACK) &&
 	    (flags & ATH11K_SKB_F_NOACK_TID))
@@ -911,6 +903,17 @@ static void ath11k_dp_tx_complete_msdu(s
 	status.rates = &status_rate;
 	status.n_rates = 1;
 
+	arsta->tx_retry_count += ts.try_cnt > 1 ? (ts.try_cnt - 1) : 0;
+
+	if (ts.status == HAL_WBM_TQM_REL_REASON_FRAME_ACKED &&
+	    !(info->flags & IEEE80211_TX_CTL_NO_ACK) &&
+	    !(flags & ATH11K_SKB_F_NOACK_TID)) {
+	    	info->flags |= IEEE80211_TX_STAT_ACK;
+	    	bw_offset = arsta->last_tx_pkt_bw * ATH11K_TX_PKTS_BW_OFFSET;
+	    	info->status.ack_signal = ts.ack_rssi + ar->chan_noise_floor + bw_offset;
+	    	info->status.flags |= IEEE80211_TX_STATUS_ACK_SIGNAL_VALID;
+	}
+
 	if (ts.status != HAL_WBM_TQM_REL_REASON_FRAME_ACKED) {
 		arsta->fail_pkts += 1;
 		arsta->per_fail_pkts += 1;
--- a/drivers/net/wireless/ath/ath11k/dp_tx.h
+++ b/drivers/net/wireless/ath/ath11k/dp_tx.h
@@ -12,6 +12,7 @@
 #define ATH11K_NUM_PKTS_THRSHLD_FOR_PER  50
 #define ATH11K_GET_PERCENTAGE(value, total_value) (((value)*100)/(total_value))
 #define ATH11K_NUM_BYTES_THRSHLD_FOR_BER 25000
+#define ATH11K_TX_PKTS_BW_OFFSET	3
 
 struct ath11k_dp_htt_wbm_tx_status {
 	u32 msdu_id;
