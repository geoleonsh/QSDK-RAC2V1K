From 5ea22f07b7cac4ac9776151476fa8906ce7b10a8 Mon Sep 17 00:00:00 2001
From: Ganesh Babu Jothiram <quic_gjothira@quicinc.com>
Date: Mon, 3 Apr 2023 02:12:30 +0530
Subject: [PATCH] iw: add support for default msduq map

Below is the command for default msduq map.
    - iw dev <devname> defqmap map <service_id> <peer_macaddr>

Below is the command for default msduq unmap and reports.
    - iw dev <devname> defqmap unmap <service_id> <peer_macaddr>

Below is the command for default msduq map reports.
    - iw dev <devname> defqmap report <peer_macaddr>o

The above commands will map/unmap the specificed service class ID to use
default MSDUQ of TID.
The TID value is obtaied from the service class parameter.

Signed-off-by: Ganesh Babu Jothiram <quic_gjothira@quicinc.com>
---
 defqmap.c | 154 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 iw.h      |  13 +++++
 2 files changed, 167 insertions(+)
 create mode 100644 defqmap.c

diff --git a/defqmap.c b/defqmap.c
new file mode 100644
index 0000000..d8964b3
--- /dev/null
+++ b/defqmap.c
@@ -0,0 +1,145 @@
+/*
+ * Copyright (c) 2023, Qualcomm Innovation Center, Inc. All rights reserved.
+
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#include <errno.h>
+#include <string.h>
+#include <stdio.h>
+#include <math.h>
+
+#include <netlink/genl/genl.h>
+#include <netlink/genl/family.h>
+#include <netlink/genl/ctrl.h>
+#include <netlink/msg.h>
+#include <netlink/attr.h>
+
+#include <arpa/inet.h>
+
+#include "nl80211.h"
+#include "iw.h"
+#define MAC_ADDR_LEN	18
+#define SAWF_SVC_ID_INVALID 0xFF
+#define MAX_RANGE(type) (pow(2, 8 * sizeof(type)) - 1)
+#define OUI_QCA 0x001374
+
+SECTION(defqmap);
+
+static int handle_default_q_map_req(struct nl80211_state *state,
+				struct nl_msg *msg, int argc, char **argv,
+				enum id_input id)
+{
+	struct nlattr *defqmap_attr;
+	char *end;
+	unsigned long value;
+	char macaddr[MAC_ADDR_LEN] = {0};
+
+	if (argc < 2 || argc > 2 || (argc%2) != 0)
+		goto err;
+
+	nla_put_u32(msg, NL80211_ATTR_VENDOR_ID, OUI_QCA);
+	nla_put_u32(msg, NL80211_ATTR_VENDOR_SUBCMD,
+			QCA_NL80211_VENDOR_SUBCMD_SAWF_DEF_Q_MAP);
+
+	defqmap_attr = nla_nest_start(msg, NL80211_ATTR_VENDOR_DATA);
+	if (!defqmap_attr)
+		return -ENOBUFS;
+
+	errno = 0;
+	value = strtoul(argv[0], &end, 10);
+	if (*end != '\0' || value > MAX_RANGE(uint8_t) || errno == ERANGE)
+		goto err;
+
+	strlcpy(macaddr, argv[1], MAC_ADDR_LEN);
+
+	nla_put_u8(msg, QCA_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_SVC_ID, value);
+	nla_put(msg, QCA_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAC_ADDR, MAC_ADDR_LEN, macaddr);
+
+	nla_nest_end(msg, defqmap_attr);
+	return 0;
+err:
+	return -EINVAL;
+}
+
+COMMAND(defqmap, map, "<service_id> <macaddr>", NL80211_CMD_VENDOR, 0, CIB_NETDEV, handle_default_q_map_req, ".");
+
+static int handle_default_q_unmap_req(struct nl80211_state *state,
+				struct nl_msg *msg, int argc, char **argv,
+				enum id_input id)
+{
+	struct nlattr *defqmap_attr;
+	char *end;
+	unsigned long value;
+	char macaddr[MAC_ADDR_LEN] = {0};
+
+	if (argc < 2 || argc > 2 || (argc%2) != 0)
+		goto err;
+
+	nla_put_u32(msg, NL80211_ATTR_VENDOR_ID, OUI_QCA);
+	nla_put_u32(msg, NL80211_ATTR_VENDOR_SUBCMD,
+			QCA_NL80211_VENDOR_SUBCMD_SAWF_DEF_Q_UNMAP);
+
+	defqmap_attr = nla_nest_start(msg, NL80211_ATTR_VENDOR_DATA);
+	if (!defqmap_attr)
+		return -ENOBUFS;
+
+	errno = 0;
+	value = strtoul(argv[0], &end, 10);
+	if (*end != '\0' || value > MAX_RANGE(uint8_t) || errno == ERANGE)
+		goto err;
+
+	strlcpy(macaddr, argv[1], MAC_ADDR_LEN);
+
+	nla_put_u8(msg, QCA_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_SVC_ID, value);
+	nla_put(msg, QCA_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAC_ADDR, MAC_ADDR_LEN, macaddr);
+
+	nla_nest_end(msg, defqmap_attr);
+	return 0;
+err:
+	return -EINVAL;
+}
+
+COMMAND(defqmap, unmap, "<service_id> <macaddr>", NL80211_CMD_VENDOR, 0, CIB_NETDEV, handle_default_q_unmap_req, ".");
+
+
+static int handle_default_q_map_report(struct nl80211_state *state,
+				struct nl_msg *msg, int argc, char **argv,
+				enum id_input id)
+{
+	struct nlattr *defqmap_attr;
+	char macaddr[MAC_ADDR_LEN] = {0};
+
+	if (argc < 1 || argc > 1)
+		goto err;
+
+	nla_put_u32(msg, NL80211_ATTR_VENDOR_ID, OUI_QCA);
+	nla_put_u32(msg, NL80211_ATTR_VENDOR_SUBCMD,
+			QCA_NL80211_VENDOR_SUBCMD_SAWF_DEF_Q_MAP_REP);
+
+	defqmap_attr = nla_nest_start(msg, NL80211_ATTR_VENDOR_DATA);
+	if (!defqmap_attr)
+		return -ENOBUFS;
+
+	errno = 0;
+	strlcpy(macaddr, argv[0], MAC_ADDR_LEN);
+
+	nla_put(msg, QCA_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAC_ADDR, MAC_ADDR_LEN, macaddr);
+
+	nla_nest_end(msg, defqmap_attr);
+	return 0;
+err:
+	return -EINVAL;
+}
+
+COMMAND(defqmap, report, "<macaddr>", NL80211_CMD_VENDOR, 0, CIB_NETDEV, handle_default_q_map_report, ".");
diff --git a/iw.h b/iw.h
index 494919f..1b327c3 100644
--- a/iw.h
+++ b/iw.h
@@ -74,6 +74,9 @@ enum qca_nl80211_vendor_subcmds {
 	QCA_NL80211_VENDOR_SUBCMD_SVC_CREATE = 204,
 	QCA_NL80211_VENDOR_SUBCMD_SVC_DISABLE = 205,
 	QCA_NL80211_VENDOR_SUBCMD_SVC_VIEW = 206,
+	QCA_NL80211_VENDOR_SUBCMD_SAWF_DEF_Q_MAP = 207,
+	QCA_NL80211_VENDOR_SUBCMD_SAWF_DEF_Q_UNMAP = 208,
+	QCA_NL80211_VENDOR_SUBCMD_SAWF_DEF_Q_MAP_REP = 209
 };
 /* Attributes for data used by
  * QCA_NL80211_VENDOR_SUBCMD_SET_WIFI_CONFIGURATION and
@@ -88,6 +91,16 @@ enum qca_wlan_vendor_attr_config {
 		QCA_WLAN_VENDOR_ATTR_CONFIG_AFTER_LAST - 1,
 };
 
+enum ath12k_vendor_attr_sawf_def_q_map {
+	QCA_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_INVALID = 0,
+	QCA_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_SVC_ID = 1,
+	QCA_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAC_ADDR = 2,
+
+	QCA_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_AFTER_LAST,
+	QCA_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_MAX =
+	QCA_WLAN_VENDOR_ATTR_SAWF_DEF_Q_MAP_AFTER_LAST - 1,
+};
+
 enum qca_wlan_vendor_sawf_attr_config {
 	QCA_WLAN_VENDOR_ATTR_SAWF_SERVICE_CLASSES = 1,
 	QCA_WLAN_VENDOR_ATTR_SAWF_SVC_ID,
-- 
2.17.1

