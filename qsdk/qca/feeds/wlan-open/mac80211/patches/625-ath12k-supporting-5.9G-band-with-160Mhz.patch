From 127c237624867aa617371dbfbe0b3a71fc2061a6 Mon Sep 17 00:00:00 2001
From: Aishwarya R <quic_aisr@quicinc.com>
Date: Mon, 16 May 2022 23:06:53 +0530
Subject: [PATCH] ath12k: Supporting 5.9G band with 160Mhz

added channel 177 into global operating class 125 and 127

Signed-off-by: Aishwarya R <quic_aisr@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h  | 16 ++++---
 drivers/net/wireless/ath/ath12k/dp_rx.c |  6 ++-
 drivers/net/wireless/ath/ath12k/mac.c   | 56 ++++++++++++++++++++-----
 drivers/net/wireless/ath/ath12k/reg.c   | 21 ++++++----
 drivers/net/wireless/ath/ath12k/wmi.h   |  1 +
 5 files changed, 73 insertions(+), 27 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -494,8 +494,12 @@ struct ath12k_sta {
 #define ATH12K_MIN_6G_FREQ (ATH12K_6G_MIN_CENTER - ATH12K_HALF_20MHZ_BW)
 #define ATH12K_MAX_6G_FREQ (ATH12K_6G_MAX_CENTER + ATH12K_HALF_20MHZ_BW)
 
-#define ATH12K_NUM_CHANS 101
-#define ATH12K_MAX_5G_CHAN 173
+
+#define ATH12K_NUM_CHANS 102
+#define ATH12K_MIN_5G_CHAN 36
+#define ATH12K_MAX_5G_CHAN 177
+#define ATH12K_MIN_2G_CHAN 1
+#define ATH12K_MAX_2G_CHAN 11
 
 enum ath12k_state {
 	ATH12K_STATE_OFF,
@@ -806,7 +810,7 @@ struct ath12k_soc_dp_stats {
 	struct ath12k_dp_ring_bp_stats bp_stats;
 };
 
-struct ath12k_reg_rule {
+struct ath12k_reg_freq {
          u32 start_freq;
          u32 end_freq;
 };
@@ -883,9 +887,9 @@ struct ath12k_base {
 
 	/* Current DFS Regulatory */
 	enum ath12k_dfs_region dfs_region;
-	struct ath12k_reg_rule reg_rule_2g;
-	struct ath12k_reg_rule reg_rule_5g;
-	struct ath12k_reg_rule reg_rule_6g;
+	struct ath12k_reg_freq reg_freq_2g;
+	struct ath12k_reg_freq reg_freq_5g;
+	struct ath12k_reg_freq reg_freq_6g;
 #ifdef CPTCFG_ATH12K_DEBUGFS
 	struct dentry *debugfs_soc;
 #endif
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -2528,9 +2528,11 @@ void ath12k_dp_rx_h_ppdu(struct ath12k *
 	    center_freq <= ATH12K_MAX_6G_FREQ) {
 		rx_status->band = NL80211_BAND_6GHZ;
 		rx_status->freq = center_freq;
-	} else if (channel_num >= 1 && channel_num <= 14) {
+	} else if (channel_num >= ATH12K_MIN_2G_CHAN &&
+		  channel_num <= ATH12K_MAX_2G_CHAN) {
 		rx_status->band = NL80211_BAND_2GHZ;
-	} else if (channel_num >= 36 && channel_num <= 173) {
+	} else if (channel_num >= ATH12K_MIN_5G_CHAN &&
+		  channel_num <= ATH12K_MAX_5G_CHAN) {
 		rx_status->band = NL80211_BAND_5GHZ;
 	}
 
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -89,6 +89,7 @@ static const struct ieee80211_channel at
 	CHAN5G(165, 5825, 0),
 	CHAN5G(169, 5845, 0),
 	CHAN5G(173, 5865, 0),
+	CHAN5G(177, 5885, 0),
 };
 
 static const struct ieee80211_channel ath12k_6ghz_channels[] = {
@@ -9071,6 +9072,28 @@ static void ath12k_mac_update_ch_list(st
 	}
 }
 
+#define ATH12K_5_9_MIN_FREQ 5845
+#define ATH12K_5_9_MAX_FREQ 5885
+
+static void ath12k_mac_update_5_9_ch_list(struct ath12k *ar,
+                                      struct ieee80211_supported_band *band)
+{
+        int i;
+
+        if (test_bit(WMI_TLV_SERVICE_5_9GHZ_SUPPORT,
+                                ar->ab->wmi_ab.svc_map))
+                return;
+
+        if (ar->ab->dfs_region != ATH12K_DFS_REG_FCC)
+                return;
+
+        for (i = 0; i < band->n_channels; i++) {
+                if (band->channels[i].center_freq >= ATH12K_5_9_MIN_FREQ &&
+                    band->channels[i].center_freq <= ATH12K_5_9_MAX_FREQ)
+                        band->channels[i].flags |= IEEE80211_CHAN_DISABLED;
+        }
+}
+
 static u32 ath12k_get_phy_id(struct ath12k *ar, u32 band)
 {
 	struct ath12k_pdev *pdev = ar->pdev;
@@ -9090,8 +9113,9 @@ static u32 ath12k_get_phy_id(struct ath1
 static int ath12k_mac_setup_channels_rates(struct ath12k *ar,
 					   u32 supported_bands)
 {
+	struct ath12k_base *ab = ar->ab;
 	struct ieee80211_supported_band *band;
-	struct ath12k_hal_reg_capabilities_ext *reg_cap;
+	struct ath12k_hal_reg_capabilities_ext *reg_cap, *temp_reg_cap;
 	void *channels;
 	u32 phy_id;
 	struct ieee80211_6ghz_channel *chan_6g;
@@ -9103,7 +9127,8 @@ static int ath12k_mac_setup_channels_rat
 		      ARRAY_SIZE(ath12k_6ghz_channels)) !=
 		     ATH12K_NUM_CHANS);
 
-	reg_cap = &ar->ab->hal_reg_cap[ar->pdev_idx];
+	reg_cap = &ab->hal_reg_cap[ar->pdev_idx];
+	temp_reg_cap = reg_cap;
 
 	if (supported_bands & WMI_HOST_WLAN_2G_CAP) {
 		channels = kmemdup(ath12k_2ghz_channels,
@@ -9120,13 +9145,15 @@ static int ath12k_mac_setup_channels_rat
 		band->bitrates = ath12k_g_rates;
 		ar->hw->wiphy->bands[NL80211_BAND_2GHZ] = band;
 
-		if (ar->ab->hw_params->single_pdev_only) {
+		if (ab->hw_params->single_pdev_only) {
 			phy_id = ath12k_get_phy_id(ar, WMI_HOST_WLAN_2G_CAP);
-			reg_cap = &ar->ab->hal_reg_cap[phy_id];
+			temp_reg_cap = &ab->hal_reg_cap[phy_id];
 		}
 		ath12k_mac_update_ch_list(ar, band,
-					  reg_cap->low_2ghz_chan,
-					  reg_cap->high_2ghz_chan);
+					  max(temp_reg_cap->low_2ghz_chan,
+					     ab->reg_freq_2g.start_freq),
+					  min(temp_reg_cap->high_2ghz_chan,
+					     ab->reg_freq_2g.end_freq));
 	}
 
 	if (supported_bands & WMI_HOST_WLAN_5G_CAP) {
@@ -9157,12 +9184,16 @@ static int ath12k_mac_setup_channels_rat
 
                         if (ar->ab->hw_params->single_pdev_only) {
                                 phy_id = ath12k_get_phy_id(ar, WMI_HOST_WLAN_5G_CAP);
+				temp_reg_cap = &ab->hal_reg_cap[phy_id];
                         }
 			ath12k_mac_update_ch_list(ar, band,
-                                                  reg_cap->low_5ghz_chan,
-                                                  reg_cap->high_5ghz_chan);
+                                                  max(temp_reg_cap->low_5ghz_chan,
+                                                      ab->reg_freq_5g.start_freq),
+						  min(temp_reg_cap->high_5ghz_chan,
+						      ab->reg_freq_5g.end_freq));
 
-			} else if (reg_cap->low_5ghz_chan >= ATH12K_MIN_6G_FREQ &&
+			ath12k_mac_update_5_9_ch_list(ar, band);
+		} else if (reg_cap->low_5ghz_chan >= ATH12K_MIN_6G_FREQ &&
                            reg_cap->high_5ghz_chan <= ATH12K_MAX_6G_FREQ) {
                         band = &ar->mac.sbands[NL80211_BAND_6GHZ];
                         band->band = NL80211_BAND_6GHZ;
@@ -9196,9 +9227,13 @@ static int ath12k_mac_setup_channels_rat
                         band->n_bitrates = ath12k_a_rates_size;
                         band->bitrates = ath12k_a_rates;
                         ar->hw->wiphy->bands[NL80211_BAND_6GHZ] = band;
+
                         ath12k_mac_update_ch_list(ar, band,
-						reg_cap->low_5ghz_chan,
-                                                 reg_cap->high_5ghz_chan);
+						  max(temp_reg_cap->low_5ghz_chan,
+                                                      ab->reg_freq_6g.start_freq),
+						  min(temp_reg_cap->high_5ghz_chan,
+						      ab->reg_freq_6g.end_freq));
+
 			/* For 6G sband, the strcut channels and int numchannels will
                         * have the default value. During ieee80211_hw_register(),
                         * all sbands are parsed and at that time code can crash while
--- a/drivers/net/wireless/ath/ath12k/reg.c
+++ b/drivers/net/wireless/ath/ath12k/reg.c
@@ -43,15 +43,15 @@ ath12k_ieee80211_ap_pwr_type_convert(enu
        }
 }
 
-static void ath12k_copy_reg_rule(struct ath12k_reg_rule *ath12k_reg_rule,
+static void ath12k_copy_reg_rule(struct ath12k_reg_freq *ath12k_reg_freq,
                                  struct cur_reg_rule *reg_rule)
 {
-        if (!ath12k_reg_rule->start_freq)
-                ath12k_reg_rule->start_freq = reg_rule->start_freq;
+        if (!ath12k_reg_freq->start_freq)
+                ath12k_reg_freq->start_freq = reg_rule->start_freq;
 
-        if ((!ath12k_reg_rule->end_freq) ||
-            (ath12k_reg_rule->end_freq < reg_rule->end_freq))
-                ath12k_reg_rule->end_freq = reg_rule->end_freq;
+        if ((!ath12k_reg_freq->end_freq) ||
+            (ath12k_reg_freq->end_freq < reg_rule->end_freq))
+                ath12k_reg_freq->end_freq = reg_rule->end_freq;
 }
 
 static struct cur_reg_rule
@@ -715,6 +715,7 @@ ath12k_reg_build_regd(struct ath12k_base
 				       reg_info->max_bw_2g);
 			flags = NL80211_RRF_NO_320MHZ;
 			pwr_mode = 0;
+			ath12k_copy_reg_rule(&ab->reg_freq_2g, reg_rule);
 		} else if (reg_info->num_5g_reg_rules &&
 			   (j < reg_info->num_5g_reg_rules)) {
 			reg_rule = reg_info->reg_rules_5g_ptr + j++;
@@ -739,6 +740,10 @@ ath12k_reg_build_regd(struct ath12k_base
 			 */
 			flags = NL80211_RRF_AUTO_BW | NL80211_RRF_NO_320MHZ;
 			pwr_mode = 0;
+			if (reg_rule->end_freq <= ATH12K_MAX_5G_FREQ)
+                                ath12k_copy_reg_rule(&ab->reg_freq_5g, reg_rule);
+                        else if (reg_rule->start_freq >= ATH12K_MIN_6G_FREQ)
+                                ath12k_copy_reg_rule(&ab->reg_freq_6g, reg_rule);
 		 } else if (reg_info->is_ext_reg_event && reg_6g_number) {
                          if (!reg_6g_itr_set) {
                                  reg_rule_6g = ath12k_get_active_6g_reg_rule(reg_info,
@@ -762,9 +767,9 @@ ath12k_reg_build_regd(struct ath12k_base
                                          flags |= NL80211_RRF_PSD;
 
                                  if (reg_rule->end_freq <= ATH12K_MAX_6G_FREQ)
-                                         ath12k_copy_reg_rule(&ab->reg_rule_6g, reg_rule);
+                                         ath12k_copy_reg_rule(&ab->reg_freq_6g, reg_rule);
                                  else if (reg_rule->start_freq >= ATH12K_MIN_6G_FREQ)
-                                         ath12k_copy_reg_rule(&ab->reg_rule_6g, reg_rule);
+                                         ath12k_copy_reg_rule(&ab->reg_freq_6g, reg_rule);
                          }
 
                          if (reg_6g_itr_set && k >= max_elements) {
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -2124,6 +2124,7 @@ enum wmi_tlv_service {
 	WMI_TLV_SERVICE_PER_PEER_HTT_STATS_RESET = 213,
 	WMI_TLV_SERVICE_FREQINFO_IN_METADATA = 219,
 	WMI_TLV_SERVICE_EXT2_MSG = 220,
+	WMI_TLV_SERVICE_5_9GHZ_SUPPORT = 247,
 	WMI_TLV_SERVICE_SRG_SRP_SPATIAL_REUSE_SUPPORT = 249,
 
 	WMI_TLV_SERVICE_MBSS_PARAM_IN_VDEV_START_SUPPORT = 253,
