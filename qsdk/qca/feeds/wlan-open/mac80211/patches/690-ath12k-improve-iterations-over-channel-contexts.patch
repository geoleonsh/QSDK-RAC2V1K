From 9443cb736e3e2b8013991dd2152ec56754420109 Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Wed, 21 Dec 2022 17:56:44 +0530
Subject: [PATCH] ath12k: improve iterations over channel contexts for Singly Wiphy

At various places, there is a need to iterate over channel contexts available
under the hardware. With Single Wiphy architecture, there will be multiple
channel contexts available from various underlying hardwares and hence, there
is a need to have the ar info in the iterator in order to decide whether the
current iterating channel context belongs to the ar under consideration or
not.

Add modification in the iterator functions to support multi-link operation.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 39 ++++++++++++++++-----------
 1 file changed, 24 insertions(+), 15 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -1225,14 +1225,20 @@ ath12k_mac_get_any_chandef_iter(struct i
 				struct ieee80211_chanctx_conf *conf,
 				void *data)
 {
-	struct cfg80211_chan_def **def = data;
+	struct ath12k_mac_any_chandef_arg *arg =
+				      (struct ath12k_mac_any_chandef_arg *)data;
+	struct ath12k *ctx_ar, *ar = arg->ar;
 
-	*def = &conf->def;
+	ctx_ar = ath12k_get_ar_by_ctx(ar->ah->hw, conf);
+
+	if (ctx_ar == ar)
+		arg->def = &conf->def;
 }
 
 static int ath12k_mac_monitor_start(struct ath12k *ar)
 {
-	struct cfg80211_chan_def *chandef = NULL;
+	struct cfg80211_chan_def *chandef;
+	struct ath12k_mac_any_chandef_arg arg = { .ar = ar, .def = NULL};
 	int ret;
 
 	lockdep_assert_held(&ar->conf_mutex);
@@ -1242,7 +1248,8 @@ static int ath12k_mac_monitor_start(stru
 
 	ieee80211_iter_chan_contexts_atomic(ar->ah->hw,
 					    ath12k_mac_get_any_chandef_iter,
-					    &chandef);
+					    &arg);
+	chandef = arg.def;
 	if (!chandef)
 		return 0;
 
@@ -10105,20 +10112,25 @@ static void ath12k_mac_num_chanctxs_iter
                                          struct ieee80211_chanctx_conf *conf,
                                          void *data)
 {
-        int *num = data;
+	struct ath12k_mac_num_chanctxs_arg *arg =
+				     (struct ath12k_mac_num_chanctxs_arg *)data;
+	struct ath12k *ctx_ar, *ar = arg->ar;
+
+	ctx_ar = ath12k_get_ar_by_ctx(ar->ah->hw, conf);
 
-        (*num)++;
+	if (ctx_ar == ar)
+	        arg->num++;
 }
 
 static int ath12k_mac_num_chanctxs(struct ath12k *ar)
 {
-        int num = 0;
+	struct ath12k_mac_num_chanctxs_arg arg = { .ar = ar, .num = 0};
 
         ieee80211_iter_chan_contexts_atomic(ar->ah->hw,
                                             ath12k_mac_num_chanctxs_iter,
-                                            &num);
+                                            &arg);
 
-        return num;
+        return arg.num;
 }
 
 static void ath12k_mac_update_rx_channel(struct ath12k *ar,
@@ -10126,7 +10138,7 @@ static void ath12k_mac_update_rx_channel
                                          struct ieee80211_vif_chanctx_switch *vifs,
                                          int n_vifs)
 {
-        struct cfg80211_chan_def *def = NULL;
+	struct ath12k_mac_any_chandef_arg arg = { .ar = ar, .def = NULL};
 
         /* Both locks are required because ar->rx_channel is modified. This
          * allows readers to hold either lock.
@@ -10151,11 +10163,13 @@ static void ath12k_mac_update_rx_channel
         if (!ctx && ath12k_mac_num_chanctxs(ar) == 1) {
                 ieee80211_iter_chan_contexts_atomic(ar->ah->hw,
                                                     ath12k_mac_get_any_chandef_iter,
-                                                    &def);
+                                                    &arg);
                 if (vifs)
-                        def = &vifs[0].new_ctx->def;
-
-                ar->rx_channel = def->chan;
+                	ar->rx_channel = vifs[0].new_ctx->def.chan;
+                else if (arg.def)
+	                ar->rx_channel = arg.def->chan;
+	        else
+	        	ar->rx_channel = NULL;
         } else if ((ctx && ath12k_mac_num_chanctxs(ar) == 0) ||
                   (ctx && (ar->state == ATH12K_STATE_RESTARTED))) {
                /* During driver restart due to firmware assert, since mac80211
--- a/drivers/net/wireless/ath/ath12k/mac.h
+++ b/drivers/net/wireless/ath/ath12k/mac.h
@@ -20,6 +20,16 @@ struct ath12k_generic_iter {
 	int ret;
 };
 
+struct ath12k_mac_any_chandef_arg {
+	struct ath12k *ar;
+	struct cfg80211_chan_def *def;
+};
+
+struct ath12k_mac_num_chanctxs_arg {
+	struct ath12k *ar;
+	int num;
+};
+
 /* number of failed packets (20 packets with 16 sw reties each) */
 #define ATH12K_KICKOUT_THRESHOLD		(20 * 16)
 
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -8322,7 +8322,8 @@ ath12k_wmi_dcs_awgn_interference_event(s
 {
         const struct wmi_dcs_interference_ev *dcs_intf_ev;
         struct wmi_dcs_awgn_info awgn_info = {};
-        struct cfg80211_chan_def *chandef = NULL;
+        struct cfg80211_chan_def *chandef;
+        struct ath12k_mac_any_chandef_arg arg;
         struct ath12k *ar;
         const struct wmi_tlv *tlv;
 	struct ath12k_hw *ah;
@@ -8400,8 +8401,12 @@ ath12k_wmi_dcs_awgn_interference_event(s
         ath12k_info(ab, "Interface(pdev %d) : AWGN interference detected\n",
                     dcs_intf_ev->pdev_id);
 
+	arg.ar = ar;
+	arg.def = NULL;
+
         ieee80211_iter_chan_contexts_atomic(ah->hw, ath12k_mac_get_any_chandef_iter,
-                                            &chandef);
+                                            &arg);
+        chandef = arg.def;
         if (!chandef) {
                 ath12k_warn(ab, "chandef is not available\n");
                 goto exit;
