From ab9b5478345921fad607f8b9ec2f607a8026e371 Mon Sep 17 00:00:00 2001
From: Aishwarya R <quic_aisr@quicinc.com>
Date: Mon, 11 Apr 2022 11:22:11 +0530
Subject: [PATCH] ath12k: add support to select 6 GHZ Regulatory type

There are 3 types of regulatory rules for AP mode and 6 type for
STATION mode. This is to add wmi_vdev_type and ieee80211_ap_reg_power
to select the exact reg rules.

Signed-off-by: Aishwarya R <quic_aisr@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/reg.c |  61 +++++++--
 drivers/net/wireless/ath/ath12k/reg.h |   6 +-
 drivers/net/wireless/ath/ath12k/wmi.c | 187 +++++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/wmi.h |  29 +++-
 4 files changed, 262 insertions(+), 21 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/reg.c b/drivers/net/wireless/ath/ath12k/reg.c
index ff2b517..0a9ddf2 100644
--- a/drivers/net/wireless/ath/ath12k/reg.c
+++ b/drivers/net/wireless/ath/ath12k/reg.c
@@ -28,6 +28,21 @@ static const struct ieee80211_regdomain ath12k_world_regd = {
 	}
 };
 
+enum wmi_reg_6g_ap_type
+ath12k_ieee80211_ap_pwr_type_convert(enum ieee80211_ap_reg_power power_type)
+{
+       switch (power_type) {
+       case IEEE80211_REG_LPI_AP:
+               return WMI_REG_INDOOR_AP;
+       case IEEE80211_REG_SP_AP:
+               return WMI_REG_STD_POWER_AP;
+       case IEEE80211_REG_VLP_AP:
+               return WMI_REG_VLP_AP;
+       default:
+               return WMI_REG_MAX_AP_TYPE;
+       }
+}
+
 static bool ath12k_regdom_changes(struct ath12k *ar, char *alpha2)
 {
 	const struct ieee80211_regdomain *regd;
@@ -565,14 +580,16 @@ ath12k_reg_update_weather_radar_band(struct ath12k_base *ab,
 
 struct ieee80211_regdomain *
 ath12k_reg_build_regd(struct ath12k_base *ab,
-		      struct cur_regulatory_info *reg_info, bool intersect)
+		      struct cur_regulatory_info *reg_info, bool intersect,
+		      enum wmi_vdev_type vdev_type,
+		      enum ieee80211_ap_reg_power power_type)
 {
 	struct ieee80211_regdomain *tmp_regd, *default_regd, *new_regd = NULL;
-	struct cur_reg_rule *reg_rule;
+	struct cur_reg_rule *reg_rule, *reg_rule_6g;
 	u8 i = 0, j = 0, k = 0;
 	u8 num_rules;
 	u16 max_bw;
-	u32 flags;
+	u32 flags, reg_6g_number, max_bw_6g;
 	char alpha2[3];
 
 	num_rules = reg_info->num_5g_reg_rules + reg_info->num_2g_reg_rules;
@@ -581,8 +598,32 @@ ath12k_reg_build_regd(struct ath12k_base *ab,
 	 * This can be updated to choose the combination dynamically based on AP
 	 * type and client type, after complete 6G regulatory support is added.
 	 */
-	if (reg_info->is_ext_reg_event)
-		num_rules += reg_info->num_6g_reg_rules_ap[WMI_REG_INDOOR_AP];
+	if (reg_info->is_ext_reg_event) {
+               if (vdev_type == WMI_VDEV_TYPE_STA) {
+                       enum wmi_reg_6g_ap_type ap_type;
+
+                       ap_type = ath12k_ieee80211_ap_pwr_type_convert(power_type);
+
+                       if (ap_type == WMI_REG_MAX_AP_TYPE)
+                               ap_type = WMI_REG_INDOOR_AP;
+                       reg_6g_number = reg_info->num_6g_reg_rules_cl
+                                       [ap_type][WMI_REG_DEFAULT_CLIENT];
+                       if (reg_6g_number == 0) {
+                               ap_type = WMI_REG_INDOOR_AP;
+                               reg_6g_number = reg_info->num_6g_reg_rules_cl
+                                               [ap_type][WMI_REG_DEFAULT_CLIENT];
+                       }
+                       reg_rule_6g = reg_info->reg_rules_6g_client_ptr
+                                       [ap_type][WMI_REG_DEFAULT_CLIENT];
+                       max_bw_6g = reg_info->max_bw_6g_client
+                                       [ap_type][WMI_REG_DEFAULT_CLIENT];
+               } else {
+                       reg_6g_number = reg_info->num_6g_reg_rules_ap[WMI_REG_INDOOR_AP];
+                       reg_rule_6g = reg_info->reg_rules_6g_ap_ptr[WMI_REG_INDOOR_AP];
+                       max_bw_6g = reg_info->max_bw_6g_ap[WMI_REG_INDOOR_AP];
+               }
+               num_rules += reg_6g_number;
+       }
 
 	if (!num_rules)
 		goto ret;
@@ -639,12 +680,10 @@ ath12k_reg_build_regd(struct ath12k_base *ab,
 			 * per other BW rule flags we pass from here
 			 */
 			flags = NL80211_RRF_AUTO_BW | NL80211_RRF_NO_320MHZ;
-		} else if (reg_info->is_ext_reg_event &&
-			   reg_info->num_6g_reg_rules_ap[WMI_REG_INDOOR_AP] &&
-			(k < reg_info->num_6g_reg_rules_ap[WMI_REG_INDOOR_AP])) {
-			reg_rule = reg_info->reg_rules_6g_ap_ptr[WMI_REG_INDOOR_AP] + k++;
-			max_bw = min_t(u16, reg_rule->max_bw,
-				       reg_info->max_bw_6g_ap[WMI_REG_INDOOR_AP]);
+		 } else if (reg_info->is_ext_reg_event && reg_6g_number &&
+                        (k < reg_6g_number)) {
+                        reg_rule = reg_rule_6g + k++;
+                        max_bw = min_t(u16, reg_rule->max_bw, max_bw_6g);
 #if 1 /*WAR*/
 			if ((reg_rule->start_freq == 6425) && (reg_rule->end_freq == 6525))
 				max_bw = 80;
diff --git a/drivers/net/wireless/ath/ath12k/reg.h b/drivers/net/wireless/ath/ath12k/reg.h
index 74a27c4..bae7af8 100644
--- a/drivers/net/wireless/ath/ath12k/reg.h
+++ b/drivers/net/wireless/ath/ath12k/reg.h
@@ -31,7 +31,11 @@ void ath12k_reg_free(struct ath12k_base *ab);
 void ath12k_regd_update_work(struct work_struct *work);
 struct ieee80211_regdomain *
 ath12k_reg_build_regd(struct ath12k_base *ab,
-		      struct cur_regulatory_info *reg_info, bool intersect);
+		      struct cur_regulatory_info *reg_info, bool intersect,
+		      enum wmi_vdev_type vdev_type,
+                      enum ieee80211_ap_reg_power power_type);
+enum wmi_reg_6g_ap_type
+ath12k_ieee80211_ap_pwr_type_convert(enum ieee80211_ap_reg_power power_type);
 int ath12k_regd_update(struct ath12k *ar, bool init);
 int ath12k_reg_update_chan_list(struct ath12k *ar);
 #endif
diff --git a/drivers/net/wireless/ath/ath12k/wmi.c b/drivers/net/wireless/ath/ath12k/wmi.c
index 7d3d92d..87e0fb8 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -4777,6 +4777,119 @@ static struct cur_reg_rule
 	return reg_rule_ptr;
 }
 
+static const char *ath12k_cc_status_to_str(enum cc_setting_code code)
+{
+       switch (code) {
+       case REG_SET_CC_STATUS_PASS:
+               return "REG_SET_CC_STATUS_PASS";
+       case REG_CURRENT_ALPHA2_NOT_FOUND:
+               return "REG_CURRENT_ALPHA2_NOT_FOUND";
+       case REG_INIT_ALPHA2_NOT_FOUND:
+               return "REG_INIT_ALPHA2_NOT_FOUND";
+       case REG_SET_CC_CHANGE_NOT_ALLOWED:
+               return "REG_SET_CC_CHANGE_NOT_ALLOWED";
+       case REG_SET_CC_STATUS_NO_MEMORY:
+               return "REG_SET_CC_STATUS_NO_MEMORY";
+       case REG_SET_CC_STATUS_FAIL:
+               return "REG_SET_CC_STATUS_FAIL";
+       default:
+               return "unknown cc status";
+       }
+};
+
+static const char *ath12k_super_reg_6g_to_str(enum reg_super_domain_6g domain_id)
+{
+        switch (domain_id) {
+        case FCC1_6G:
+                return "FCC1_6G";
+        case ETSI1_6G:
+                return "ETSI1_6G";
+        case ETSI2_6G:
+                return "ETSI2_6G";
+        case APL1_6G:
+                return "APL1_6G";
+        case FCC1_6G_CL:
+                return "FCC1_6G_CL";
+        default:
+                return "unknown domain id";
+        }
+}
+
+static const char *ath12k_6g_client_type_to_str(enum wmi_reg_6g_client_type type)
+{
+        switch (type) {
+        case WMI_REG_DEFAULT_CLIENT:
+                return "DEFAULT CLIENT";
+        case WMI_REG_SUBORDINATE_CLIENT:
+                return "SUBORDINATE CLIENT";
+        default:
+                return "unknown client type";
+        }
+}
+
+static const char *ath12k_6g_ap_type_to_str(enum wmi_reg_6g_ap_type type)
+{
+        switch (type) {
+        case WMI_REG_INDOOR_AP:
+                return "INDOOR AP";
+        case WMI_REG_STD_POWER_AP:
+                return "STANDARD POWER AP";
+        case WMI_REG_VLP_AP:
+                return "VERY LOW POWER AP";
+        default:
+                return "unknown AP type";
+       }
+}
+
+static const char *ath12k_sub_reg_6g_to_str(enum reg_subdomains_6g sub_id)
+{
+        switch (sub_id) {
+        case FCC1_CLIENT_LPI_REGULAR_6G:
+                return "FCC1_CLIENT_LPI_REGULAR_6G";
+        case FCC1_CLIENT_SP_6G:
+                return "FCC1_CLIENT_SP_6G";
+        case FCC1_AP_LPI_6G:
+                return "FCC1_AP_LPI_6G/FCC1_CLIENT_LPI_SUBORDINATE";
+        case FCC1_AP_SP_6G:
+                return "FCC1_AP_SP_6G";
+        case ETSI1_LPI_6G:
+                return "ETSI1_LPI_6G";
+        case ETSI1_VLP_6G:
+                return "ETSI1_VLP_6G";
+        case ETSI2_LPI_6G:
+                return "ETSI2_LPI_6G";
+        case ETSI2_VLP_6G:
+                return "ETSI2_VLP_6G";
+        case APL1_LPI_6G:
+                return "APL1_LPI_6G";
+        case APL1_VLP_6G:
+                return "APL1_VLP_6G";
+        case EMPTY_6G:
+                return "N/A";
+        default:
+                return "unknown sub reg id";
+        }
+}
+
+static void ath12k_print_reg_rule(struct ath12k_base *ab, char *prev,
+                                 u32 num_reg_rules,
+                                 struct cur_reg_rule *reg_rule_ptr)
+{
+       struct cur_reg_rule *reg_rule = reg_rule_ptr;
+       u32 count;
+
+       ath12k_dbg(ab, ATH12K_DBG_WMI, "%s reg rules number %d\n", prev, num_reg_rules);
+
+       for (count = 0; count < num_reg_rules; count++) {
+               ath12k_dbg(ab, ATH12K_DBG_WMI,
+                          "reg rule %d: (%d - %d @ %d) (%d, %d) (FLAGS %d) (psd flag %d EIRP %d dB/MHz)\n",
+                          count + 1, reg_rule->start_freq, reg_rule->end_freq,
+                          reg_rule->max_bw, reg_rule->ant_gain, reg_rule->reg_power,
+                          reg_rule->flags, reg_rule->psd_flag, reg_rule->psd_eirp);
+               reg_rule++;
+       }
+}
+
 static int ath12k_pull_reg_chan_list_ext_update_ev(struct ath12k_base *ab,
 						   struct sk_buff *skb,
 						   struct cur_regulatory_info *reg_info)
@@ -4788,7 +4901,7 @@ static int ath12k_pull_reg_chan_list_ext_update_ev(struct ath12k_base *ab,
 	u32 num_6g_reg_rules_ap[WMI_REG_CURRENT_MAX_AP_TYPE];
 	u32 num_6g_reg_rules_cl[WMI_REG_CURRENT_MAX_AP_TYPE][WMI_REG_MAX_CLIENT_TYPE];
 	u32 total_reg_rules = 0;
-	int ret, i, j;
+	int ret, i, j, skip_6g_rules_in_5g_rules = 0;
 
 	ath12k_dbg(ab, ATH12K_DBG_WMI, "processing regulatory ext channel list\n");
 
@@ -4891,6 +5004,14 @@ static int ath12k_pull_reg_chan_list_ext_update_ev(struct ath12k_base *ab,
 	 * from 5G rules list.
 	 */
 	if (memcmp(reg_info->alpha2, "US", 2) == 0) {
+		ath12k_dbg(ab, ATH12K_DBG_WMI,
+                          "US 5g reg rules number %d from fw",
+                          reg_info->num_5g_reg_rules);
+
+                if (reg_info->num_5g_reg_rules > REG_US_5G_NUM_REG_RULES)
+                        skip_6g_rules_in_5g_rules = reg_info->num_5g_reg_rules -
+                                                    REG_US_5G_NUM_REG_RULES;
+
 		reg_info->num_5g_reg_rules = REG_US_5G_NUM_REG_RULES;
 		num_5g_reg_rules = reg_info->num_5g_reg_rules;
 	}
@@ -4923,6 +5044,10 @@ static int ath12k_pull_reg_chan_list_ext_update_ev(struct ath12k_base *ab,
 		break;
 	}
 
+	ath12k_dbg(ab, ATH12K_DBG_WMI,
+                   "%s: status_code %s", __func__,
+                   ath12k_cc_status_to_str(reg_info->status_code));
+
 	reg_info->is_ext_reg_event = true;
 
 	reg_info->min_bw_2g = ext_chan_list_event_hdr->min_bw_2g;
@@ -4958,6 +5083,10 @@ static int ath12k_pull_reg_chan_list_ext_update_ev(struct ath12k_base *ab,
 	}
 
 	ath12k_dbg(ab, ATH12K_DBG_WMI,
+		   "%s: status_code %s", __func__,
+                   ath12k_cc_status_to_str(reg_info->status_code));
+
+        ath12k_dbg(ab, ATH12K_DBG_WMI,
 		   "%s:cc_ext %s dsf %d BW: min_2g %d max_2g %d min_5g %d max_5g %d",
 		   __func__, reg_info->alpha2, reg_info->dfs_region,
 		   reg_info->min_bw_2g, reg_info->max_bw_2g,
@@ -5000,10 +5129,13 @@ static int ath12k_pull_reg_chan_list_ext_update_ev(struct ath12k_base *ab,
 			ath12k_warn(ab, "Unable to Allocate memory for 2g rules\n");
 			return -ENOMEM;
 		}
+		ath12k_print_reg_rule(ab, "2g",
+                                     num_2g_reg_rules,
+                                     reg_info->reg_rules_2g_ptr);
 	}
+	ext_wmi_reg_rule += num_2g_reg_rules;
 
 	if (num_5g_reg_rules) {
-		ext_wmi_reg_rule += num_2g_reg_rules;
 		reg_info->reg_rules_5g_ptr =
 			create_ext_reg_rules_from_wmi(num_5g_reg_rules,
 						      ext_wmi_reg_rule);
@@ -5013,9 +5145,18 @@ static int ath12k_pull_reg_chan_list_ext_update_ev(struct ath12k_base *ab,
 			ath12k_warn(ab, "Unable to Allocate memory for 5g rules\n");
 			return -ENOMEM;
 		}
+		ath12k_print_reg_rule(ab, "5g",
+                                     num_5g_reg_rules,
+                                     reg_info->reg_rules_5g_ptr);
 	}
 
-	ext_wmi_reg_rule += num_5g_reg_rules;
+	/* We have adjusted the number of 5g reg rules via the hack above.
+         * Here, we adjust that many extra rules which came with 5g reg rules
+         * (for cc: US)
+         *
+         * NOTE: skip_6g_rules_in_5g_rules will be 0 for rest other cases.
+         */
+        ext_wmi_reg_rule += num_5g_reg_rules + skip_6g_rules_in_5g_rules;
 
 	for (i = 0; i < WMI_REG_CURRENT_MAX_AP_TYPE; i++) {
 		reg_info->reg_rules_6g_ap_ptr[i] =
@@ -5028,10 +5169,17 @@ static int ath12k_pull_reg_chan_list_ext_update_ev(struct ath12k_base *ab,
 			return -ENOMEM;
 		}
 
+		ath12k_print_reg_rule(ab, ath12k_6g_ap_type_to_str(i),
+                                     num_6g_reg_rules_ap[i],
+                                     reg_info->reg_rules_6g_ap_ptr[i]);
+
 		ext_wmi_reg_rule += num_6g_reg_rules_ap[i];
 	}
 
 	for (j = 0; j < WMI_REG_CURRENT_MAX_AP_TYPE; j++) {
+		ath12k_dbg(ab, ATH12K_DBG_WMI,
+                          "AP type %s", ath12k_6g_ap_type_to_str(j));
+
 		for (i = 0; i < WMI_REG_MAX_CLIENT_TYPE; i++) {
 			reg_info->reg_rules_6g_client_ptr[j][i] =
 				create_ext_reg_rules_from_wmi(num_6g_reg_rules_cl[j][i],
@@ -5043,6 +5191,10 @@ static int ath12k_pull_reg_chan_list_ext_update_ev(struct ath12k_base *ab,
 				return -ENOMEM;
 			}
 
+			ath12k_print_reg_rule(ab, ath12k_6g_client_type_to_str(i),
+                                             num_6g_reg_rules_cl[j][i],
+                                             reg_info->reg_rules_6g_client_ptr[j][i]);
+
 			ext_wmi_reg_rule += num_6g_reg_rules_cl[j][i];
 		}
 	}
@@ -5058,6 +5210,19 @@ static int ath12k_pull_reg_chan_list_ext_update_ev(struct ath12k_base *ab,
 	reg_info->domain_code_6g_ap[WMI_REG_VLP_AP] =
 			ext_chan_list_event_hdr->domain_code_6g_ap_vlp;
 
+	ath12k_dbg(ab, ATH12K_DBG_WMI,
+                  "6g reg info client type %s rnr_tpe_usable %d unspecified_ap_usable %d AP sub domain: lpi %s , sp %s , vlp %s\n",
+                  ath12k_6g_client_type_to_str(reg_info->client_type),
+                  reg_info->rnr_tpe_usable,
+                  reg_info->unspecified_ap_usable,
+                  ath12k_sub_reg_6g_to_str
+                  (ext_chan_list_event_hdr->domain_code_6g_ap_lpi),
+                  ath12k_sub_reg_6g_to_str
+                  (ext_chan_list_event_hdr->domain_code_6g_ap_sp),
+                  ath12k_sub_reg_6g_to_str
+                  (ext_chan_list_event_hdr->domain_code_6g_ap_vlp));
+
+
 	for (i = 0; i < WMI_REG_MAX_CLIENT_TYPE; i++) {
 		reg_info->domain_code_6g_client[WMI_REG_INDOOR_AP][i] =
 				ext_chan_list_event_hdr->domain_code_6g_client_lpi[i];
@@ -5065,13 +5230,22 @@ static int ath12k_pull_reg_chan_list_ext_update_ev(struct ath12k_base *ab,
 				ext_chan_list_event_hdr->domain_code_6g_client_sp[i];
 		reg_info->domain_code_6g_client[WMI_REG_VLP_AP][i] =
 				ext_chan_list_event_hdr->domain_code_6g_client_vlp[i];
+		ath12k_dbg(ab, ATH12K_DBG_WMI,
+                  "6g AP BW: lpi %d - %d sp %d - %d vlp %d - %d\n",
+                  ext_chan_list_event_hdr->min_bw_6g_ap_lpi,
+                  ext_chan_list_event_hdr->max_bw_6g_ap_lpi,
+                  ext_chan_list_event_hdr->min_bw_6g_ap_sp,
+                  ext_chan_list_event_hdr->max_bw_6g_ap_sp,
+                  ext_chan_list_event_hdr->min_bw_6g_ap_vlp,
+                  ext_chan_list_event_hdr->max_bw_6g_ap_vlp);
 	}
 
 	reg_info->domain_code_6g_super_id =
 			ext_chan_list_event_hdr->domain_code_6g_super_id;
 
-	ath12k_dbg(ab, ATH12K_DBG_WMI, "6g client_type: %d domain_code_6g_super_id: %d",
-		   reg_info->client_type, reg_info->domain_code_6g_super_id);
+	ath12k_dbg(ab, ATH12K_DBG_WMI, "6g client type %s 6g super domain %s",
+                  ath12k_6g_client_type_to_str(reg_info->client_type),
+                  ath12k_super_reg_6g_to_str(reg_info->domain_code_6g_super_id));
 
 	ath12k_dbg(ab, ATH12K_DBG_WMI, "processed regulatory ext channel list\n");
 
@@ -6344,7 +6518,8 @@ static int ath12k_reg_chan_list_event(struct ath12k_base *ab, struct sk_buff *sk
 	    !ath12k_reg_is_world_alpha((char *)reg_info->alpha2))
 		intersect = true;
 
-	regd = ath12k_reg_build_regd(ab, reg_info, intersect);
+	regd = ath12k_reg_build_regd(ab, reg_info, intersect,
+			             WMI_VDEV_TYPE_AP, IEEE80211_REG_UNSET_AP);
 	if (!regd) {
 		ath12k_warn(ab, "failed to build regd from reg_info\n");
 		goto fallback;
diff --git a/drivers/net/wireless/ath/ath12k/wmi.h b/drivers/net/wireless/ath/ath12k/wmi.h
index 03251df..84b0069 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -3028,8 +3028,8 @@ struct rx_reorder_queue_remove_params {
 #define REG_RULE_MAX_BW				0x0000ffff
 #define REG_RULE_REG_PWR			0x00ff0000
 #define REG_RULE_ANT_GAIN			0xff000000
-#define REG_RULE_PSD_INFO			BIT(2)
-#define REG_RULE_PSD_EIRP			0xffff0000
+#define REG_RULE_PSD_INFO                       BIT(0)
+#define REG_RULE_PSD_EIRP                       0xff0000
 
 #define WMI_VDEV_PARAM_TXBF_SU_TX_BFEE BIT(0)
 #define WMI_VDEV_PARAM_TXBF_MU_TX_BFEE BIT(1)
@@ -4335,7 +4335,30 @@ struct cur_reg_rule {
 	u8 ant_gain;
 	u16 flags;
 	bool psd_flag;
-	u16 psd_eirp;
+	s8 psd_eirp;
+};
+
+enum reg_subdomains_6g {
+       EMPTY_6G = 0x0,
+       FCC1_CLIENT_LPI_REGULAR_6G = 0x01,
+       FCC1_CLIENT_SP_6G = 0x02,
+       FCC1_AP_LPI_6G = 0x03,
+       FCC1_CLIENT_LPI_SUBORDINATE = FCC1_AP_LPI_6G,
+       FCC1_AP_SP_6G = 0x04,
+       ETSI1_LPI_6G = 0x10,
+       ETSI1_VLP_6G = 0x11,
+       ETSI2_LPI_6G = 0x12,
+       ETSI2_VLP_6G = 0x13,
+       APL1_LPI_6G = 0x20,
+       APL1_VLP_6G = 0x21,
+};
+
+enum reg_super_domain_6g {
+       FCC1_6G = 0x01,
+       ETSI1_6G = 0x02,
+       ETSI2_6G = 0x03,
+       APL1_6G = 0x04,
+       FCC1_6G_CL = 0x05,
 };
 
 struct cur_regulatory_info {
-- 
2.17.1

