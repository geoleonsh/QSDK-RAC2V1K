From b8dff8e9730b4ac9ec6e2542c3e841ff842888a8 Mon Sep 17 00:00:00 2001
From: Harshitha Prem <quic_hprem@quicinc.com>
Date: Tue, 14 Mar 2023 13:01:41 +0530
Subject: [PATCH] cfg80211: fix 6GHz AP-STA concurrency issue

Currently, for 6 GHz band, 9 different channel pools are maintained
based on the various 6G regulatory power mode a device can be
configured in. Due to this, chandef chan pointer will not be same
for AP and STA. During, AP-STA concurrency, chandef compatibility is
matched and for 6 GHz it fails which ultimately leads to nl80211_start_ap
returning EBUSY.

This changes were removed as part of refactoring the cfg80211 to handle
multiple hw abstraction. Hence, add a new api to check to channels for 6 GHz bands

Fixes: 830c2dd38c0f ("capability advertisement infra for multi-hw abstraction under one wiphy")

Change-Id: Iae5c344765fe9f748fa848b25b4a9fa80b617497
Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
Signed-off-by: Harshitha Prem <quic_hprem@quicinc.com>
---
 include/net/cfg80211.h | 33 +++++++++++++++++++++++++++++++--
 1 file changed, 31 insertions(+), 2 deletions(-)

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -908,6 +908,37 @@ void cfg80211_chandef_create(struct cfg8
 			     enum nl80211_channel_type chantype);
 
 /**
+ * cfg80211_channel_identical - check if two channel definitions are identical
+ *                     for 6 GHz band alone check center_freq as they have
+ *                     different power modes.
+ * @channel1: first channel definition
+ * @channel2: second channel definition
+ *
+ * Return: %true if the channels defined by the channel definitions are
+ * identical except power related settings, %false otherwise.
+ */
+
+static inline bool
+cfg80211_channel_identical(struct ieee80211_channel *channel1,
+			   struct ieee80211_channel *channel2)
+{
+	if (channel1 == channel2)
+		return true;
+
+	if (!channel1 || !channel2)
+		return false;
+
+	if (channel1->band != channel2->band)
+		return false;
+
+	if (channel1->band != NL80211_BAND_6GHZ)
+		return false;
+
+	return (channel1->center_freq == channel2->center_freq &&
+		channel1->freq_offset == channel2->freq_offset);
+}
+
+/**
  * cfg80211_chandef_identical - check if two channel definitions are identical
  * @chandef1: first channel definition
  * @chandef2: second channel definition
@@ -919,7 +950,8 @@ static inline bool
 cfg80211_chandef_identical(const struct cfg80211_chan_def *chandef1,
 			   const struct cfg80211_chan_def *chandef2)
 {
-	return (chandef1->chan == chandef2->chan &&
+	return (cfg80211_channel_identical(chandef1->chan,
+					   chandef2->chan) &&
 		chandef1->width == chandef2->width &&
 		chandef1->center_freq1 == chandef2->center_freq1 &&
 		chandef1->freq1_offset == chandef2->freq1_offset &&
