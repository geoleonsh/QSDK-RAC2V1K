From 57e6aa2970641b4f1490b7da1ac5fd362ef711bf Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Wed, 1 Feb 2023 11:47:27 +0530
Subject: [PATCH] wifi: mac80211: add accumulated statistics for Multi link

Add acummulated statistics for the below params in the ML STA,
	1. rx_pkt
	2. rx_byte
	3. tx_pkt
	4. tx_byte
	5. rx_drop_misc
	6. tx_retry

Other params are report from the associated link in the station dump.

Also avoid below call trace, due to the call of ieee80211_get_sband() in the
ML VAP. we fix it by get the sdata of that link by ieee80211_get_link_sband().

Trace:

------------[ cut here ]------------
WARNING: CPU: 1 PID: 19341 at /local/mnt/workspace/periyasa/ath12k_19Jan2023/qsdk/build_dir/target-aarch64_cortex-a73+neon-vfpv4_musl/linux-ipq95xx_generic/backports-20220822-5.4.213-ef7197
Modules linked in: ath12k mac80211 nf_flow_table_ipv6 nf_flow_table_ipv4 nf_flow_table_inet ipt_REJECT cfg80211 xt_time xt_tcpudp xt_tcpmss xt_string xt_statistic xt_state xt_recent xt_quot
 nf_conntrack_rtsp nf_conntrack_rtcache nf_conntrack_pptp nf_conntrack_netlink nf_conntrack_irc nf_conntrack_h323 nf_conntrack_ftp nf_conntrack_broadcast ts_kmp nf_conntrack_amanda iptable_
 qca_nss_ppe_pppoe_mgr qca_nss_ppe_lag qca_nss_ppe_bridge_mgr qca_nss_ppe_vlan libcomposite udc_core usb_common xt_sctp xt_set ip_set_list_set ip_set_hash_netportnet ip_set_hash_netport ip_
 qca_nss_ppe_rule qca_nss_ppe nat46 nf_conntrack pptp pppox ppp_generic slhc nf_defrag_ipv4 libcrc32c gre emesh_sp qca_ssdk nf_defrag_ipv6 md5 authenc bootconfig gpio_button_hotplug button_
CPU: 1 PID: 19341 Comm: hostapd Tainted: G        W         5.4.213 #0
Hardware name: Qualcomm Technologies, Inc. IPQ9574/AP-AL02-C4 (DT)
pstate: 60400005 (nZCv daif +PAN -UAO)
pc : sta_set_rate_info_tx+0xc0/0x19c [mac80211]
lr : sta_set_rate_info_tx+0xb0/0x19c [mac80211]
sp : ffffff80336ab630
x29: ffffff80336ab630 x28: ffffff8028f610e0
x27: 0000000000000000 x26: 0000048111839e02
x25: ffffff801b8736e8 x24: ffffff801b873680
x23: ffffff8028f610e0 x22: ffffff80300048c0
x21: 0000000000000000 x20: ffffff801b873968
x19: ffffff802358a638 x18: 0000000000000000
x17: 0000000000000000 x16: 0000000000000000
x15: 0000000000000000 x14: 3030303030303020
x13: 6174735f66656420 x12: 6639613639343864
x11: 3030303030303030 x10: 206f666e695f6174
x9 : ffffffc0109b6000 x8 : ffffffffffffffff
x7 : 0000000000000000 x6 : 0000000000000001
x5 : 0000000000000000 x4 : 000000000000000f
x3 : ffffffc010aa8778 x2 : ffffff802358a638
x1 : 0000000000000000 x0 : 0000000000000003
Call trace:
 sta_set_rate_info_tx+0xc0/0x19c [mac80211]
 sta_set_sinfo+0x3f4/0x9a4 [mac80211]
 __sta_info_destroy_part2+0xe4/0x13c [mac80211]
 __sta_info_flush+0x110/0x164 [mac80211]
 ieee80211_stop_ap+0x14c/0x2d0 [mac80211]
 cfg80211_leave_mesh+0xc0/0x164 [cfg80211]
 __cfg80211_stop_ap+0x78/0xa8 [cfg80211]
 cfg80211_stop_ap+0x48/0x6c [cfg80211]
 cfg80211_vendor_cmd_reply+0x204c/0x23b0 [cfg80211]
 genl_family_rcv_msg+0x314/0x3b0
 genl_rcv_msg+0x58/0x84
 netlink_rcv_skb+0x94/0x10c
 genl_rcv+0x34/0x48
 netlink_unicast+0x15c/0x248
 netlink_sendmsg+0x320/0x3bc
 sock_sendmsg+0x18/0x2c
 ____sys_sendmsg+0x2c4/0x350
 ___sys_sendmsg+0x7c/0xc4
 __sys_sendmsg+0x64/0xac
 __arm64_sys_sendmsg+0x1c/0x24
 el0_svc_common.constprop.0+0x98/0x114
 el0_svc_handler+0x18/0x20
 el0_svc+0x8/0x500
---[ end trace e15307d11438e309 ]---

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---
 net/mac80211/cfg.c      |   2 +-
 net/mac80211/sta_info.c | 203 ++++++++++++++++++++++++++--------------
 2 files changed, 133 insertions(+), 72 deletions(-)

--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -831,7 +831,7 @@ void sta_set_rate_info_tx(struct sta_inf
 		int shift = ieee80211_vif_get_shift(&sta->sdata->vif);
 		u16 brate;
 
-		sband = ieee80211_get_sband(sta->sdata);
+		sband = ieee80211_get_link_sband(&sta->sdata->deflink);
 		WARN_ON_ONCE(sband && !sband->bitrates);
 		if (sband && sband->bitrates) {
 			brate = sband->bitrates[rate->idx].bitrate;
--- a/net/mac80211/sta_info.c
+++ b/net/mac80211/sta_info.c
@@ -2417,13 +2417,112 @@ static inline u64 sta_get_stats_bytes(st
 	return value;
 }
 
+static u64 link_sta_set_info(struct link_sta_info *link_sta,
+			      struct station_info *sinfo,
+			      bool init)
+{
+	int ac, cpu;
+	u64 filled = 0;
+
+	if (!(sinfo->filled & (BIT_ULL(NL80211_STA_INFO_TX_BYTES64) |
+			       BIT_ULL(NL80211_STA_INFO_TX_BYTES)))) {
+		if (init)
+			sinfo->tx_bytes = 0;
+
+		for (ac = 0; ac < IEEE80211_NUM_ACS; ac++)
+			sinfo->tx_bytes += link_sta->tx_stats.bytes[ac];
+
+		filled |= BIT_ULL(NL80211_STA_INFO_TX_BYTES64);
+	}
+
+	if (!(sinfo->filled & BIT_ULL(NL80211_STA_INFO_TX_PACKETS))) {
+		if (init)
+			sinfo->tx_packets = 0;
+
+		for (ac = 0; ac < IEEE80211_NUM_ACS; ac++)
+			sinfo->tx_packets += link_sta->tx_stats.packets[ac];
+
+		filled |= BIT_ULL(NL80211_STA_INFO_TX_PACKETS);
+	}
+
+	if (!(sinfo->filled & (BIT_ULL(NL80211_STA_INFO_RX_BYTES64) |
+			       BIT_ULL(NL80211_STA_INFO_RX_BYTES)))) {
+		if (init)
+			sinfo->rx_bytes = 0;
+
+		sinfo->rx_bytes += sta_get_stats_bytes(&link_sta->rx_stats);
+
+		if (link_sta->pcpu_rx_stats) {
+			for_each_possible_cpu(cpu) {
+				struct ieee80211_sta_rx_stats *cpurxs;
+
+				cpurxs = per_cpu_ptr(link_sta->pcpu_rx_stats,
+						     cpu);
+				sinfo->rx_bytes += sta_get_stats_bytes(cpurxs);
+			}
+		}
+
+		filled |= BIT_ULL(NL80211_STA_INFO_RX_BYTES64);
+	}
+
+	if (!(sinfo->filled & BIT_ULL(NL80211_STA_INFO_RX_PACKETS))) {
+		if (init)
+			sinfo->rx_packets = 0;
+
+		sinfo->rx_packets += link_sta->rx_stats.packets;
+		if (link_sta->pcpu_rx_stats) {
+			for_each_possible_cpu(cpu) {
+				struct ieee80211_sta_rx_stats *cpurxs;
+
+				cpurxs = per_cpu_ptr(link_sta->pcpu_rx_stats,
+						     cpu);
+				sinfo->rx_packets += cpurxs->packets;
+			}
+		}
+
+		filled |= BIT_ULL(NL80211_STA_INFO_RX_PACKETS);
+	}
+
+	if (!(sinfo->filled & BIT_ULL(NL80211_STA_INFO_TX_RETRIES))) {
+		if (init)
+			sinfo->tx_retries = 0;
+
+		sinfo->tx_retries += link_sta->status_stats.retry_count;
+
+		filled |= BIT_ULL(NL80211_STA_INFO_TX_RETRIES);
+	}
+
+	if (!(sinfo->filled & BIT_ULL(NL80211_STA_INFO_TX_FAILED))) {
+		if (init)
+			sinfo->tx_failed = 0;
+
+		sinfo->tx_failed += link_sta->status_stats.retry_failed;
+		filled |= BIT_ULL(NL80211_STA_INFO_TX_FAILED);
+	}
+
+	if (init)
+		sinfo->rx_dropped_misc = 0;
+
+	sinfo->rx_dropped_misc += link_sta->rx_stats.dropped;
+	if (link_sta->pcpu_rx_stats) {
+		for_each_possible_cpu(cpu) {
+			struct ieee80211_sta_rx_stats *cpurxs;
+
+			cpurxs = per_cpu_ptr(link_sta->pcpu_rx_stats, cpu);
+			sinfo->rx_dropped_misc += cpurxs->dropped;
+		}
+	}
+
+	return filled;
+}
+
 void sta_set_sinfo(struct sta_info *sta, struct station_info *sinfo,
 		   bool tidstats)
 {
 	struct ieee80211_sub_if_data *sdata = sta->sdata;
 	struct ieee80211_local *local = sdata->local;
 	u32 thr = 0;
-	int i, ac, cpu, link_id = 0;
+	int i, ac, link_id = 0;
 	struct ieee80211_sta_rx_stats *last_rxstats;
 	struct link_sta_info *link_sta = NULL;
 
@@ -2460,10 +2559,12 @@ void sta_set_sinfo(struct sta_info *sta,
 	sinfo->valid_links = sta->sta.valid_links;
 
 	if (sinfo->valid_links) {
+		u64 link_sta_filled = 0;
+		bool init = true;
+
 		for_each_valid_link(sinfo, link_id) {
 			rcu_read_lock();
 			link_sta = rcu_dereference(sta->link[link_id]);
-
 			if (!link_sta) {
 				rcu_read_unlock();
 				continue;
@@ -2471,65 +2572,18 @@ void sta_set_sinfo(struct sta_info *sta,
 
 			memcpy(sinfo->links[link_id].addr, link_sta->addr,
 			       ETH_ALEN);
-			rcu_read_unlock();
-		}
-	}
-
-	if (!(sinfo->filled & (BIT_ULL(NL80211_STA_INFO_TX_BYTES64) |
-			       BIT_ULL(NL80211_STA_INFO_TX_BYTES)))) {
-		sinfo->tx_bytes = 0;
-		for (ac = 0; ac < IEEE80211_NUM_ACS; ac++)
-			sinfo->tx_bytes += sta->deflink.tx_stats.bytes[ac];
-		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_TX_BYTES64);
-	}
-
-	if (!(sinfo->filled & BIT_ULL(NL80211_STA_INFO_TX_PACKETS))) {
-		sinfo->tx_packets = 0;
-		for (ac = 0; ac < IEEE80211_NUM_ACS; ac++)
-			sinfo->tx_packets += sta->deflink.tx_stats.packets[ac];
-		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_TX_PACKETS);
-	}
-
-	if (!(sinfo->filled & (BIT_ULL(NL80211_STA_INFO_RX_BYTES64) |
-			       BIT_ULL(NL80211_STA_INFO_RX_BYTES)))) {
-		sinfo->rx_bytes += sta_get_stats_bytes(&sta->deflink.rx_stats);
-
-		if (sta->deflink.pcpu_rx_stats) {
-			for_each_possible_cpu(cpu) {
-				struct ieee80211_sta_rx_stats *cpurxs;
 
-				cpurxs = per_cpu_ptr(sta->deflink.pcpu_rx_stats,
-						     cpu);
-				sinfo->rx_bytes += sta_get_stats_bytes(cpurxs);
-			}
-		}
-
-		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_RX_BYTES64);
-	}
-
-	if (!(sinfo->filled & BIT_ULL(NL80211_STA_INFO_RX_PACKETS))) {
-		sinfo->rx_packets = sta->deflink.rx_stats.packets;
-		if (sta->deflink.pcpu_rx_stats) {
-			for_each_possible_cpu(cpu) {
-				struct ieee80211_sta_rx_stats *cpurxs;
-
-				cpurxs = per_cpu_ptr(sta->deflink.pcpu_rx_stats,
-						     cpu);
-				sinfo->rx_packets += cpurxs->packets;
-			}
+			link_sta_filled |= link_sta_set_info(link_sta, sinfo,
+							     init);
+			init = false;
+			rcu_read_unlock();
 		}
-		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_RX_PACKETS);
-	}
 
-	if (!(sinfo->filled & BIT_ULL(NL80211_STA_INFO_TX_RETRIES))) {
-		sinfo->tx_retries = sta->deflink.status_stats.retry_count;
-		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_TX_RETRIES);
+		sinfo->filled |= link_sta_filled;
+	} else {
+		sinfo->filled |= link_sta_set_info(&sta->deflink, sinfo, true);
 	}
 
-	if (!(sinfo->filled & BIT_ULL(NL80211_STA_INFO_TX_FAILED))) {
-		sinfo->tx_failed = sta->deflink.status_stats.retry_failed;
-		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_TX_FAILED);
-	}
 
 	if (!(sinfo->filled & BIT_ULL(NL80211_STA_INFO_RX_DURATION))) {
 		for (ac = 0; ac < IEEE80211_NUM_ACS; ac++)
@@ -2548,16 +2602,6 @@ void sta_set_sinfo(struct sta_info *sta,
 		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_AIRTIME_WEIGHT);
 	}
 
-	sinfo->rx_dropped_misc = sta->deflink.rx_stats.dropped;
-	if (sta->deflink.pcpu_rx_stats) {
-		for_each_possible_cpu(cpu) {
-			struct ieee80211_sta_rx_stats *cpurxs;
-
-			cpurxs = per_cpu_ptr(sta->deflink.pcpu_rx_stats, cpu);
-			sinfo->rx_dropped_misc += cpurxs->dropped;
-		}
-	}
-
 	if (sdata->vif.type == NL80211_IFTYPE_STATION &&
 	    !(sdata->vif.driver_flags & IEEE80211_VIF_BEACON_FILTER)) {
 		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_BEACON_RX) |
@@ -2601,15 +2645,13 @@ void sta_set_sinfo(struct sta_info *sta,
 		}
 	}
 
-	if (!(sinfo->filled & BIT_ULL(NL80211_STA_INFO_TX_BITRATE)) &&
-	    !sta->sta.valid_links) {
+	if (!(sinfo->filled & BIT_ULL(NL80211_STA_INFO_TX_BITRATE))) {
 		sta_set_rate_info_tx(sta, &sta->deflink.tx_stats.last_rate,
 				     &sinfo->txrate);
 		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_TX_BITRATE);
 	}
 
-	if (!(sinfo->filled & BIT_ULL(NL80211_STA_INFO_RX_BITRATE)) &&
-	    !sta->sta.valid_links) {
+	if (!(sinfo->filled & BIT_ULL(NL80211_STA_INFO_RX_BITRATE))) {
 		if (sta_set_rate_info_rx(sta, &sinfo->rxrate) == 0)
 			sinfo->filled |= BIT_ULL(NL80211_STA_INFO_RX_BITRATE);
 	}
