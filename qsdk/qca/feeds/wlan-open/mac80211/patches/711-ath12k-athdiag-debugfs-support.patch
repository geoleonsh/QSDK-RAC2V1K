From d523dea6236c50210aab18d23c8dcd2a8e9c71f3 Mon Sep 17 00:00:00 2001
From: Karthik M <quic_karm@quicinc.com>
Date: Fri, 10 Feb 2023 15:00:10 +0530
Subject: [PATCH] wifi: ath12k: athdiag debugfs support

Add debugfs support to enable the athdiag feature

Signed-off-by: Karthik M <quic_karm@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debugfs.c | 101 ++++++++++++++++++++++
 1 file changed, 101 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -13,6 +13,7 @@
 #include "dp_tx.h"
 #include "debugfs_htt_stats.h"
 #include "peer.h"
+#include "qmi.h"
 
 static struct dentry *debugfs_ath12k;
 
@@ -2462,6 +2463,104 @@ static const struct file_operations fops
 	.open = simple_open
 };
 
+static ssize_t ath12k_athdiag_read(struct file *file,
+                                   char __user *user_buf,
+                                   size_t count, loff_t *ppos)
+{
+        struct ath12k *ar = file->private_data;
+        u8 *buf;
+        int ret;
+
+        if (*ppos <= 0)
+                return -EINVAL;
+
+        if (!count)
+                return 0;
+
+        buf = vmalloc(count);
+        if (!buf) {
+                return -ENOMEM;
+        }
+
+        mutex_lock(&ar->conf_mutex);
+
+        ret = ath12k_qmi_mem_read(ar->ab, *ppos, buf, count);
+        if (ret < 0) {
+                ath12k_warn(ar->ab, "failed to read address 0x%08x via diagnose window from debugfs: %d\n",
+                            (u32)(*ppos), ret);
+                goto exit;
+        }
+
+        ret = copy_to_user(user_buf, buf, count);
+        if (ret) {
+                ret = -EFAULT;
+                goto exit;
+        }
+
+        count -= ret;
+        *ppos += count;
+        ret = count;
+
+exit:
+        vfree(buf);
+        mutex_unlock(&ar->conf_mutex);
+        return ret;
+}
+
+static ssize_t ath12k_athdiag_write(struct file *file,
+                                    const char __user *user_buf,
+                                    size_t count, loff_t *ppos)
+{
+        struct ath12k *ar = file->private_data;
+        u8 *buf;
+        int ret;
+
+        if (*ppos <= 0)
+                return -EINVAL;
+
+        if (!count)
+                return 0;
+
+        mutex_lock(&ar->conf_mutex);
+
+        buf = vmalloc(count);
+        if (!buf) {
+                ret = -ENOMEM;
+                goto error_unlock;
+        }
+
+        ret = copy_from_user(buf, user_buf, count);
+        if (ret) {
+                ret = -EFAULT;
+                goto exit;
+        }
+
+        ret = ath12k_qmi_mem_write(ar->ab, *ppos, buf, count);
+        if (ret < 0) {
+                ath12k_warn(ar->ab, "failed to write address 0x%08x via diagnose window from debugfs: %d\n",
+                            (u32)(*ppos), ret);
+                goto exit;
+        }
+
+        *ppos += count;
+        ret = count;
+
+exit:
+        vfree(buf);
+
+error_unlock:
+        mutex_unlock(&ar->conf_mutex);
+        return ret;
+}
+
+static const struct file_operations fops_athdiag = {
+        .read = ath12k_athdiag_read,
+        .write = ath12k_athdiag_write,
+        .open = simple_open,
+        .owner = THIS_MODULE,
+        .llseek = default_llseek,
+};
+
 int ath12k_debugfs_register(struct ath12k *ar)
 {
 	struct ath12k_base *ab = ar->ab;
@@ -2532,6 +2631,10 @@ int ath12k_debugfs_register(struct ath12
 				ar->debug.debugfs_pdev, ar,
 				&fops_dump_mgmt_stats);
 
+	debugfs_create_file("athdiag", S_IRUSR | S_IWUSR,
+			    ar->debug.debugfs_pdev, ar,
+			    &fops_athdiag);
+
 	return 0;
 }
 
