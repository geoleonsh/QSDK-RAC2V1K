From 281b6cb98d5374af63b666eb332cc28e76256169 Mon Sep 17 00:00:00 2001
From: Rajat Soni <quic_rajson@quicinc.com>
Date: Fri, 24 Feb 2023 14:31:59 +0530
Subject: [PATCH] mac80211: Add link id support for op sta rc update

Currently only link id 0 is hardcoded in ath12k driver that is
causing crash because when multiple interfaces are up. mac has
proper link id information.

To resolve this issue send proper link id to ath12k driver
through sta_rc_update.

Signed-off-by: Rajat Soni <quic_rajson@quicinc.com>
---
 include/net/mac80211.h    |  2 +-
 net/mac80211/driver-ops.c | 10 +++++++---
 net/mac80211/driver-ops.h |  3 ++-
 net/mac80211/ibss.c       |  4 ++--
 net/mac80211/mlme.c       |  1 -
 net/mac80211/rate.c       |  4 +---
 net/mac80211/rx.c         |  7 +++++--
 net/mac80211/trace.h      |  4 ++--
 8 files changed, 20 insertions(+), 15 deletions(-)

--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -4403,7 +4403,7 @@ struct ieee80211_ops {
 	void (*sta_rc_update)(struct ieee80211_hw *hw,
 			      struct ieee80211_vif *vif,
 			      struct ieee80211_sta *sta,
-			      u32 changed);
+			      u32 changed, u8 link_id);
 	void (*sta_rate_tbl_update)(struct ieee80211_hw *hw,
 				    struct ieee80211_vif *vif,
 				    struct ieee80211_sta *sta);
--- a/net/mac80211/driver-ops.c
+++ b/net/mac80211/driver-ops.c
@@ -187,20 +187,24 @@ int drv_sta_set_mgmt_rts_cts(struct ieee
 
 void drv_sta_rc_update(struct ieee80211_local *local,
 		       struct ieee80211_sub_if_data *sdata,
-		       struct ieee80211_sta *sta, u32 changed)
+		       struct ieee80211_sta *sta, u32 changed,
+		       int link_id)
 {
 	sdata = get_bss_sdata(sdata);
 	if (!check_sdata_in_driver(sdata))
 		return;
 
+	if (link_id < 0 || link_id >= IEEE80211_MLD_MAX_NUM_LINKS)
+		link_id = 0;
+
 	WARN_ON(changed & IEEE80211_RC_SUPP_RATES_CHANGED &&
 		(sdata->vif.type != NL80211_IFTYPE_ADHOC &&
 		 sdata->vif.type != NL80211_IFTYPE_MESH_POINT));
 
-	trace_drv_sta_rc_update(local, sdata, sta, changed);
+	trace_drv_sta_rc_update(local, sdata, sta, changed, link_id);
 	if (local->ops->sta_rc_update)
 		local->ops->sta_rc_update(&local->hw, &sdata->vif,
-					  sta, changed);
+					  sta, changed, (u8) link_id);
 
 	trace_drv_return_void(local);
 }
--- a/net/mac80211/driver-ops.h
+++ b/net/mac80211/driver-ops.h
@@ -551,7 +551,8 @@ int drv_sta_set_mgmt_rts_cts(struct ieee
 
 void drv_sta_rc_update(struct ieee80211_local *local,
 		       struct ieee80211_sub_if_data *sdata,
-		       struct ieee80211_sta *sta, u32 changed);
+		       struct ieee80211_sta *sta, u32 changed,
+		       int link_id);
 
 static inline void drv_sta_rate_tbl_update(struct ieee80211_local *local,
 					   struct ieee80211_sub_if_data *sdata,
--- a/net/mac80211/ibss.c
+++ b/net/mac80211/ibss.c
@@ -981,6 +981,12 @@ static void ieee80211_update_sta_info(st
 	struct ieee80211_supported_band *sband;
 	bool rates_updated = false;
 	u32 supp_rates = 0;
+	int link_id;
+
+	if (!rx_status->link_valid)
+		link_id = -1;
+	else
+		link_id = rx_status->link_id;
 
 	if (sdata->vif.type != NL80211_IFTYPE_ADHOC)
 		return;
@@ -1088,7 +1094,7 @@ static void ieee80211_update_sta_info(st
 		if (sta->sta.deflink.rx_nss != rx_nss)
 			changed |= IEEE80211_RC_NSS_CHANGED;
 
-		drv_sta_rc_update(local, sdata, &sta->sta, changed);
+		drv_sta_rc_update(local, sdata, &sta->sta, changed, link_id);
 	}
 
 	rcu_read_unlock();
@@ -1110,7 +1116,6 @@ static void ieee80211_rx_bss_info(struct
 	channel = ieee80211_get_channel(local->hw.wiphy, rx_status->freq);
 	if (!channel)
 		return;
-
 	ieee80211_update_sta_info(sdata, mgmt, len, rx_status, elems, channel);
 
 	bss = ieee80211_bss_info_update(local, rx_status, mgmt, len, channel);
--- a/net/mac80211/rate.c
+++ b/net/mac80211/rate.c
@@ -101,8 +101,6 @@ void rate_control_rate_update(struct iee
 	void *priv_sta = sta->rate_ctrl_priv;
 	struct ieee80211_chanctx_conf *chanctx_conf;
 
-	WARN_ON(link_id != 0);
-
 	if (ref && ref->ops->rate_update) {
 		rcu_read_lock();
 
@@ -119,7 +117,7 @@ void rate_control_rate_update(struct iee
 		rcu_read_unlock();
 	}
 
-	drv_sta_rc_update(local, sta->sdata, &sta->sta, changed);
+	drv_sta_rc_update(local, sta->sdata, &sta->sta, changed, link_id);
 }
 
 int ieee80211_rate_control_register(const struct rate_control_ops *ops)
--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -3547,6 +3547,7 @@ ieee80211_rx_h_action(struct ieee80211_r
 	struct ieee80211_mgmt *mgmt = (struct ieee80211_mgmt *) rx->skb->data;
 	struct ieee80211_rx_status *status = IEEE80211_SKB_RXCB(rx->skb);
 	int len = rx->skb->len;
+	int link_id;
 
 	if (!ieee80211_is_action(mgmt->frame_control))
 		return RX_CONTINUE;
@@ -3612,7 +3613,8 @@ ieee80211_rx_h_action(struct ieee80211_r
 
 			sband = rx->local->hw.wiphy->bands[status->band];
 
-			rate_control_rate_update(local, sband, rx->sta, 0,
+			link_id = rx->link_sta->link_id;
+			rate_control_rate_update(local, sband, rx->sta, link_id,
 						 IEEE80211_RC_SMPS_CHANGED);
 			cfg80211_sta_opmode_change_notify(sdata->dev,
 							  rx->sta->addr,
@@ -3650,7 +3652,8 @@ ieee80211_rx_h_action(struct ieee80211_r
 				ieee80211_sta_rx_bw_to_chan_width(rx->link_sta);
 			sta_opmode.changed = STA_OPMODE_MAX_BW_CHANGED;
 
-			rate_control_rate_update(local, sband, rx->sta, 0,
+			link_id = rx->link_sta->link_id;
+			rate_control_rate_update(local, sband, rx->sta, link_id,
 						 IEEE80211_RC_BW_CHANGED);
 			cfg80211_sta_opmode_change_notify(sdata->dev,
 							  rx->sta->addr,
--- a/net/mac80211/trace.h
+++ b/net/mac80211/trace.h
@@ -969,9 +969,9 @@ TRACE_EVENT(drv_sta_rc_update,
 	TP_PROTO(struct ieee80211_local *local,
 		 struct ieee80211_sub_if_data *sdata,
 		 struct ieee80211_sta *sta,
-		 u32 changed),
+		 u32 changed, int link_id),
 
-	TP_ARGS(local, sdata, sta, changed),
+	TP_ARGS(local, sdata, sta, changed, link_id),
 
 	TP_STRUCT__entry(
 		LOCAL_ENTRY
