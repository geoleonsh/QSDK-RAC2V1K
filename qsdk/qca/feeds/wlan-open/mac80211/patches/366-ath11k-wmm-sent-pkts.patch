From 871856ed87e144a2ec67bb2fed85de2ebcda759b Mon Sep 17 00:00:00 2001
From: saleemuddin shaik <quic_saleemud@quicinc.com>
Date: Sat, 4 Mar 2023 14:07:19 +0530
Subject: ath11k: add statistic support for counting wmm sent packets.

Segregated wmm types for rx path and tx path introduced to handle bidirectional
 traffic flow. This will avoid misplaced piling of the wmm buckets.

Signed-off-by: saleemuddin shaik <quic_saleemud@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/core.h    |  8 ++++
 drivers/net/wireless/ath/ath11k/debugfs.c | 51 +++++++++++++++++++++++
 drivers/net/wireless/ath/ath11k/dp_rx.c   |  2 +
 drivers/net/wireless/ath/ath11k/mac.c     |  2 +
 4 files changed, 63 insertions(+)

diff --git a/drivers/net/wireless/ath/ath11k/core.h b/drivers/net/wireless/ath/ath11k/core.h
index e83e1af..094d163 100644
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -849,6 +849,13 @@ struct ath11k_per_peer_tx_stats {
 	bool is_ampdu;
 };
 
+#define ATH11K_DSCP_PRIORITY 7
+
+struct ath11k_wmm_stats {
+	int tx_type;
+	u64 total_wmm_tx_pkts[WME_NUM_AC];
+};
+
 #define ATH11K_FLUSH_TIMEOUT (5 * HZ)
 #define ATH11K_VDEV_DELETE_TIMEOUT_HZ (5 * HZ)
 
@@ -1002,6 +1009,7 @@ struct ath11k {
 	struct ath11k_wow wow;
 	struct completion target_suspend;
 	bool target_suspend_ack;
+	struct ath11k_wmm_stats wmm_stats;
 	struct ath11k_per_peer_tx_stats peer_tx_stats;
 	struct list_head ppdu_stats_info;
 	u32 ppdu_stat_list_depth;
diff --git a/drivers/net/wireless/ath/ath11k/debugfs.c b/drivers/net/wireless/ath/ath11k/debugfs.c
index c400643..e1fe71d 100644
--- a/drivers/net/wireless/ath/ath11k/debugfs.c
+++ b/drivers/net/wireless/ath/ath11k/debugfs.c
@@ -864,6 +864,51 @@ static const struct file_operations fops_pdev_stats = {
 	.llseek = default_llseek,
 };
 
+static ssize_t ath11k_read_wmm_stats(struct file *file,
+				     char __user *ubuf,
+				     size_t count, loff_t *ppos)
+{
+	struct ath11k *ar = file->private_data;
+	int len = 0;
+	int size = 2048;
+	char *buf;
+	ssize_t retval;
+	u64 total_wmm_sent_pkts = 0;
+
+	buf = kzalloc(size, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	mutex_lock(&ar->conf_mutex);
+	for (count = 0; count < WME_NUM_AC; count++)
+		total_wmm_sent_pkts += ar->wmm_stats.total_wmm_tx_pkts[count];
+
+	len += scnprintf(buf + len, size - len, "total number of wmm_sent: %llu\n",
+			 total_wmm_sent_pkts);
+	len += scnprintf(buf + len, size - len, "num of be wmm_sent: %llu\n",
+			 ar->wmm_stats.total_wmm_tx_pkts[WME_AC_BE]);
+	len += scnprintf(buf + len, size - len, "num of bk wmm_sent: %llu\n",
+			 ar->wmm_stats.total_wmm_tx_pkts[WME_AC_BK]);
+	len += scnprintf(buf + len, size - len, "num of vi wmm_sent: %llu\n",
+			 ar->wmm_stats.total_wmm_tx_pkts[WME_AC_VI]);
+	len += scnprintf(buf + len, size - len, "num of vo wmm_sent: %llu\n",
+			 ar->wmm_stats.total_wmm_tx_pkts[WME_AC_VO]);
+
+	mutex_unlock(&ar->conf_mutex);
+
+	if (len > size)
+		len = size;
+	retval = simple_read_from_buffer(ubuf, count, ppos, buf, len);
+	kfree(buf);
+
+	return retval;
+}
+
+static const struct file_operations fops_wmm_stats = {
+	.read = ath11k_read_wmm_stats,
+	.open = simple_open,
+};
+
 static int ath11k_open_vdev_stats(struct inode *inode, struct file *file)
 {
 	struct ath11k *ar = inode->i_private;
@@ -4610,6 +4655,12 @@ int ath11k_debugfs_register(struct ath11k *ar)
         init_completion(&ab->ani_ofdm_event);
         init_completion(&ab->ani_cck_event);
 
+	memset(&ar->wmm_stats, 0, sizeof(struct ath11k_wmm_stats));
+
+	debugfs_create_file("wmm_stats", 0644,
+			    ar->debug.debugfs_pdev, ar,
+			    &fops_wmm_stats);
+
 	debugfs_create_file("ext_tx_stats", 0644,
 			    ar->debug.debugfs_pdev, ar,
 			    &fops_extd_tx_stats);
diff --git a/drivers/net/wireless/ath/ath11k/dp_rx.c b/drivers/net/wireless/ath/ath11k/dp_rx.c
index 896d797..d47378f 100644
--- a/drivers/net/wireless/ath/ath11k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath11k/dp_rx.c
@@ -1589,6 +1589,8 @@ ath11k_update_per_peer_tx_stats(struct ath11k *ar,
 				      usr_stats->ack_ba.info);
 		tid = FIELD_GET(HTT_PPDU_STATS_ACK_BA_INFO_TID_NUM,
 				usr_stats->ack_ba.info);
+		ar->wmm_stats.tx_type = ath11k_tid_to_ac(tid > ATH11K_DSCP_PRIORITY ? 0: tid);
+		ar->wmm_stats.total_wmm_tx_pkts[ar->wmm_stats.tx_type]++;
 	}
 
 	if (common->fes_duration_us)
diff --git a/drivers/net/wireless/ath/ath11k/mac.c b/drivers/net/wireless/ath/ath11k/mac.c
index 6849f40..fb7e411 100644
--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -8860,6 +8860,8 @@ static int ath11k_mac_vdev_stop(struct ath11k_vif *arvif)
 
 	reinit_completion(&ar->vdev_setup_done);
 
+	memset(&ar->wmm_stats, 0, sizeof(struct ath11k_wmm_stats));
+
 	ret = ath11k_wmi_vdev_stop(ar, arvif->vdev_id);
 	if (ret) {
 		ath11k_warn(ar->ab, "failed to stop WMI vdev %i: %d\n",
-- 
2.17.1

