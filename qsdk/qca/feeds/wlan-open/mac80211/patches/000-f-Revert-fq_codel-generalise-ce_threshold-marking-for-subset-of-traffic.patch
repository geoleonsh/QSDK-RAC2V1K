From dfcb63ce1de6b10ba98dee928f9463f37e5a5512 Mon Sep 17 00:00:00 2001
From: quic_nikhgurr <quic_nikhgurr@quicinc.com>
Date: Tue, 19 Oct 2021 19:47:09 +0200
Subject: Revert: "fq_codel: generalise ce_threshold marking for subset of traffic"

This reverts commit: https://git.codelinaro.org/clo/qsdk/kvalo/ath/-/commit/dfcb63ce1de6b10ba98dee928f9463f37e5a5512

Signed-off-by: quic_nikhgurr <quic_nikhgurr@quicinc.com>

---
 include/net/codel.h            |  7 ++-----
 include/net/codel_impl.h       | 14 +++++++-------
 include/uapi/linux/pkt_sched.h |  3 +--
 net/mac80211/sta_info.c        |  3 +--
 net/sched/sch_fq_codel.c       | 13 ++++---------
 5 files changed, 15 insertions(+), 25 deletions(-)

diff --git b/include/net/codel.h a/include/net/codel.h
index a6c9e34e62b8..5e8b181b76b8 100644
--- b/include/net/codel.h
+++ a/include/net/codel.h
@@ -102,9 +102,7 @@ static inline u32 codel_time_to_us(codel_time_t val)
  * @interval:	width of moving time window
  * @mtu:	device mtu, or minimal queue backlog in bytes.
  * @ecn:	is Explicit Congestion Notification enabled
- * @ce_threshold_selector: apply ce_threshold to packets matching this value
- *                         in the diffserv/ECN byte of the IP header
- * @ce_threshold_mask: mask to apply to ce_threshold_selector comparison
+ * @ce_threshold_ect1: if ce_threshold only marks ECT(1) packets
  */
 struct codel_params {
 	codel_time_t	target;
@@ -112,8 +110,7 @@ struct codel_params {
 	codel_time_t	interval;
 	u32		mtu;
 	bool		ecn;
-	u8		ce_threshold_selector;
-	u8		ce_threshold_mask;
+	bool		ce_threshold_ect1;
 };
 
 /**
diff --git b/include/net/codel_impl.h a/include/net/codel_impl.h
index 137d40d8cbeb..7af2c3eb3c43 100644
--- b/include/net/codel_impl.h
+++ a/include/net/codel_impl.h
@@ -54,8 +54,7 @@ static void codel_params_init(struct codel_params *params)
 	params->interval = MS2TIME(100);
 	params->target = MS2TIME(5);
 	params->ce_threshold = CODEL_DISABLED_THRESHOLD;
-	params->ce_threshold_mask = 0;
-	params->ce_threshold_selector = 0;
+	params->ce_threshold_ect1 = false;
 	params->ecn = false;
 }
 
@@ -251,12 +250,13 @@ static struct sk_buff *codel_dequeue(void *ctx,
 	if (skb && codel_time_after(vars->ldelay, params->ce_threshold)) {
 		bool set_ce = true;
 
-		if (params->ce_threshold_mask) {
-			int dsfield = skb_get_dsfield(skb);
+		if (params->ce_threshold_ect1) {
+			/* Note: if skb_get_dsfield() returns -1, following
+			 * gives INET_ECN_MASK, which is != INET_ECN_ECT_1.
+			 */
+			u8 ecn = skb_get_dsfield(skb) & INET_ECN_MASK;
 
-			set_ce = (dsfield >= 0 &&
-				  (((u8)dsfield & params->ce_threshold_mask) ==
-				   params->ce_threshold_selector));
+			set_ce = (ecn == INET_ECN_ECT_1);
 		}
 		if (set_ce && INET_ECN_set_ce(skb))
 			stats->ce_mark++;
 
diff --git b/net/mac80211/sta_info.c a/net/mac80211/sta_info.c
index bd52ac3bee90..a39830418434 100644
--- b/net/mac80211/sta_info.c
+++ a/net/mac80211/sta_info.c
@@ -513,8 +513,7 @@ struct sta_info *sta_info_alloc(struct ieee80211_sub_if_data *sdata,
 	sta->cparams.target = MS2TIME(20);
 	sta->cparams.interval = MS2TIME(100);
 	sta->cparams.ecn = true;
-	sta->cparams.ce_threshold_selector = 0;
-	sta->cparams.ce_threshold_mask = 0;
+	sta->cparams.ce_threshold_ect1 = false;
 
 	sta_dbg(sdata, "Allocated STA %pM\n", sta->sta.addr);
 
-- 
2.25.1

