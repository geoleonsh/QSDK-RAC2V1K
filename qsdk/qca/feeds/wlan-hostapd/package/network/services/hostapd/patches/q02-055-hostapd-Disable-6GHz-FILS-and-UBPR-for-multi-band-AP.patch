From 1b09438e34cab44bb80ccfecef013077d0e9af39 Mon Sep 17 00:00:00 2001
From: Hari Chandrakanthan <quic_haric@quicinc.com>
Date: Tue, 10 Jan 2023 17:23:23 +0530
Subject: [PATCH] hostapd: Disable 6GHz FILS and UBPR for multi-band AP

WFA test plan 2.0 has specification below:
3.3.2.1 Out of Box requirements:

FILS Discovery and Unsolicited Probe Response frames disabled
in the 6 GHz band if the AP simultaneously operates
on multiple bands in its out of box configuration.

Also Channel access latency in 6GHz gets impacted by 20-33%
when there is FILS/UBPR in-band discovery frames.

Extra transmissions (FILS, UBPRs) are polluting the spectrum
and increasing the potential to cause interference to the
incumbent systems operating in the 6GHz band.

Keeping these in-band advertisement frames disabled helps
to optimize this latency. So, the aim to is to keep
FILS/UBPR disabled without impacting discoverability.

Having OOB advertisement in lower band helps to avoid any
impact in AP discoverability even if FILS/UBPR is
disabled in 6GHz. So, keep those disabled if OOB is
ongoing.

Re-enable in-band discovery with FILS/20 TU PRBR frames
if OOB gets disabled.

Signed-off-by: Hari Chandrakanthan <quic_haric@quicinc.com>
Signed-off-by: Rameshkumar Sundaram <quic_ramess@quicinc.com>
---
 src/ap/ap_config.h           |  6 ++++
 src/ap/beacon.c              | 31 ++++++++++++++++++--
 src/ap/hostapd.c             | 69 +++++++++++++++++++++++++++++++++++++++++++-
 src/ap/ieee802_11.c          | 13 +++------
 src/ap/ieee802_11.h          |  7 +++++
 src/drivers/driver_nl80211.c | 20 ++++++++-----
 6 files changed, 126 insertions(+), 20 deletions(-)

--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -940,6 +940,12 @@ struct hostapd_bss_config {
 	u8 rnr;
 	int beacon_tx_mode;
 	char *config_id;
+
+	enum {
+		FILS_UBPR_USER_DISABLED,
+		FILS_UBPR_FORCE_DISABLED,
+		FILS_UBPR_ENABLED
+	} fils_state, ubpr_state;
 };
 
 /**
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -1368,16 +1368,28 @@ static u8 * hostapd_probe_resp_offloads(
 
 
 #ifdef CONFIG_IEEE80211AX
-/* Unsolicited broadcast Probe Response transmission, 6 GHz only */
+/* Unsolicited broadcast Probe Response(UBPR) transmission, 6 GHz only */
 static u8 * hostapd_unsol_bcast_probe_resp(struct hostapd_data *hapd,
 					   struct wpa_driver_ap_params *params)
 {
+	/* Do not enable UBPR in 6GHz AP if colocated with lower band APs */
+	hapd->conf->ubpr_state = FILS_UBPR_USER_DISABLED;
+
 	if (!is_6ghz_op_class(hapd->iconf->op_class))
 		return NULL;
 
+	if (hapd->conf->unsol_bcast_probe_resp_interval &&
+	    (get_colocation_mode(hapd) == COLOCATED_6GHZ)) {
+		hapd->conf->ubpr_state = FILS_UBPR_FORCE_DISABLED;
+		return NULL;
+	}
+
 	params->unsol_bcast_probe_resp_interval =
 		hapd->conf->unsol_bcast_probe_resp_interval;
 
+	if (params->unsol_bcast_probe_resp_interval)
+		hapd->conf->ubpr_state = FILS_UBPR_ENABLED;
+
 	return hostapd_gen_probe_resp(hapd, NULL, 0,
 				      &params->unsol_bcast_probe_resp_tmpl_len,
 				      NULL, 0);
@@ -1662,6 +1674,17 @@ static u8 * hostapd_gen_fils_discovery(s
 static u8 * hostapd_fils_discovery(struct hostapd_data *hapd,
 				   struct wpa_driver_ap_params *params)
 {
+	/* Do not enable Fils discovery for 6GHz AP if its colocated
+	 * with lower band APs.
+	 */
+
+	if (is_6ghz_op_class(hapd->iconf->op_class) &&
+	    get_colocation_mode(hapd) == COLOCATED_6GHZ &&
+	    hapd->conf->fils_discovery_max_int) {
+		hapd->conf->fils_state = FILS_UBPR_FORCE_DISABLED;
+		return NULL;
+	}
+
 	params->fd_max_int = hapd->conf->fils_discovery_max_int;
 	if (is_6ghz_op_class(hapd->iconf->op_class) &&
 	    params->fd_max_int > FD_MAX_INTERVAL_6GHZ)
@@ -1671,10 +1694,12 @@ static u8 * hostapd_fils_discovery(struc
 	if (params->fd_min_int > params->fd_max_int)
 		params->fd_min_int = params->fd_max_int;
 
-	if (params->fd_max_int)
+	if (params->fd_max_int) {
+		hapd->conf->fils_state = FILS_UBPR_ENABLED;
 		return hostapd_gen_fils_discovery(hapd,
 						  &params->fd_frame_tmpl_len);
-
+	}
+	hapd->conf->fils_state = FILS_UBPR_USER_DISABLED;
 	return NULL;
 }
 
--- a/src/ap/hostapd.c
+++ b/src/ap/hostapd.c
@@ -71,6 +71,8 @@ static void hostapd_switch_color_timeout
 						 void *user_ctx);
 #endif /* CONFIG_IEEE80211AX */
 
+static void hostapd_interface_update_fils_ubpr(struct hostapd_iface *iface, bool iface_enabled);
+
 #ifdef CONFIG_IEEE80211BE
 void hostapd_mld_unlink_bss(struct hostapd_data *tbss);
 #endif
@@ -2433,6 +2435,8 @@ dfs_offload:
 	for (j = 0; j < iface->num_bss; j++)
 		hostapd_neighbor_set_own_report(iface->bss[j]);
 
+	hostapd_interface_update_fils_ubpr(iface, true);
+
 	return 0;
 
 fail:
@@ -2670,7 +2674,7 @@ void hostapd_interface_deinit(struct hos
 			break;
 		hostapd_bss_deinit(iface->bss[j]);
 	}
-
+	hostapd_interface_update_fils_ubpr(iface, false);
 #ifdef NEED_AP_MLME
 	hostapd_stop_setup_timers(iface);
 	eloop_cancel_timeout(ap_ht2040_timeout, iface, NULL);
@@ -2968,6 +2972,68 @@ static int ifname_in_use(struct hapd_int
 	return 0;
 }
 
+/**
+ * hostapd_interface_update_fils_ubpr - Update 6GHz In-band discovery
+ * frames (FILS/UBPR) based on lower band interface state change.
+ * @iface_enabled: Whether lower band AP is enabled or disabled
+ *
+ * This function iterates through interfaces list and updates all 6GHz
+ * APs In-band discovery frames (enable/disable) based on state of lower
+ * band interfaces.
+ * Lower band interfaces going down: Enable FILS/UBPR for all 6GHz APs if config
+ * has it enabled.
+ * Lower band interfaces coming up: Disable FILS/UBPR for all 6GHz APs if not done
+ * already.
+ */
+
+static void
+hostapd_interface_update_fils_ubpr(struct hostapd_iface *iface, bool iface_enabled)
+{
+	int i, j;
+
+	if (!iface || (iface->interfaces == NULL))
+		return;
+
+#ifdef CONFIG_MESH
+	if (iface->mconf != NULL)
+		return;
+#endif
+
+	if (is_6ghz_op_class(iface->conf->op_class))
+		return;
+
+	for (i = 0; i < iface->interfaces->count; i++) {
+		struct hostapd_iface *iface_6g = iface->interfaces->iface[i];
+		if (iface == iface_6g || !iface_6g || !iface_6g->conf)
+			continue;
+
+		if (!is_6ghz_op_class(iface_6g->conf->op_class))
+			continue;
+
+		for (j = 0; j < iface_6g->num_bss; j++) {
+			if (!iface_6g->bss[j] || !iface_6g->bss[j]->started)
+				continue;
+
+			/* Lower band interface coming up but fils/ubpr is already disabled */
+			if (iface_enabled &&
+			    (iface_6g->bss[j]->conf->fils_state != FILS_UBPR_ENABLED &&
+			    iface_6g->bss[j]->conf->ubpr_state != FILS_UBPR_ENABLED)) {
+				continue;
+			}
+			/* Lower band interface going down but fils/ubpr is not force disabled */
+			if (!iface_enabled &&
+			    (iface_6g->bss[j]->conf->fils_state != FILS_UBPR_FORCE_DISABLED &&
+			    iface_6g->bss[j]->conf->ubpr_state != FILS_UBPR_FORCE_DISABLED)) {
+				continue;
+			}
+			wpa_printf(MSG_DEBUG, "%s Interface getting %s, check and set 6GHz Interface(%s)"
+				   "In-band discovery frames", iface->bss[0]->conf->iface,
+				   iface_enabled ? "enabled" : "disabled", iface_6g->bss[j]->conf->iface);
+			ieee802_11_set_beacon(iface_6g->bss[j]);
+		}
+	}
+	return;
+}
 
 /**
  * hostapd_interface_init_bss - Read configuration file and init BSS data
@@ -3262,6 +3328,7 @@ int hostapd_disable_iface(struct hostapd
 	wpa_printf(MSG_DEBUG, "Interface %s disabled",
 		   hapd_iface->bss[0]->conf->iface);
 	hostapd_set_state(hapd_iface, HAPD_IFACE_DISABLED);
+	hostapd_interface_update_fils_ubpr(hapd_iface, false);
 	return 0;
 }
 
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -6639,15 +6639,7 @@ static size_t hostapd_eid_rnr_iface_len(
 	return total_len;
 }
 
-
-enum colocation_mode {
-	NO_COLOCATED_6GHZ,
-	STANDALONE_6GHZ,
-	COLOCATED_6GHZ,
-	COLOCATED_LOWER_BAND,
-};
-
-static enum colocation_mode get_colocation_mode(struct hostapd_data *hapd)
+enum colocation_mode get_colocation_mode(struct hostapd_data *hapd)
 {
 	u8 i;
 	bool is_6ghz = is_6ghz_op_class(hapd->iconf->op_class);
@@ -6666,6 +6658,9 @@ static enum colocation_mode get_colocati
 		if (iface == hapd->iface || !iface || !iface->conf)
 			continue;
 
+		if (iface->state == HAPD_IFACE_DISABLED)
+			continue;
+
 		is_colocated_6ghz = is_6ghz_op_class(iface->conf->op_class);
 		if (!is_6ghz && is_colocated_6ghz)
 			return COLOCATED_LOWER_BAND;
--- a/src/ap/ieee802_11.h
+++ b/src/ap/ieee802_11.h
@@ -21,6 +21,13 @@ enum ieee80211_op_mode;
 struct mac_acl_entry;
 enum oper_chan_width;
 
+enum colocation_mode {
+        NO_COLOCATED_6GHZ,
+        STANDALONE_6GHZ,
+        COLOCATED_6GHZ,
+        COLOCATED_LOWER_BAND,
+};
+enum colocation_mode get_colocation_mode(struct hostapd_data *hapd);
 int ieee802_11_mgmt(struct hostapd_data *hapd, const u8 *buf, size_t len,
 		    struct hostapd_frame_info *fi);
 void ieee802_11_mgmt_cb(struct hostapd_data *hapd, const u8 *buf, size_t len,
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -4594,10 +4594,13 @@ static int nl80211_fils_discovery(struct
 	struct nlattr *attr;
 
 	if (!bss->drv->fils_discovery) {
-		wpa_printf(MSG_ERROR,
-			   "nl80211: Driver does not support FILS Discovery frame transmission for %s",
-			   bss->ifname);
-		return -1;
+		if (params->fd_max_int) {
+			wpa_printf(MSG_ERROR,
+				   "nl80211: Driver does not support FILS Discovery frame transmission for %s",
+				   bss->ifname);
+			return -1;
+		}
+		return 0;
 	}
 
 	attr = nla_nest_start(msg, NL80211_ATTR_FILS_DISCOVERY);
@@ -4626,10 +4629,13 @@ static int nl80211_unsol_bcast_probe_res
 	struct nlattr *attr;
 
 	if (!bss->drv->unsol_bcast_probe_resp) {
-		wpa_printf(MSG_ERROR,
-			   "nl80211: Driver does not support unsolicited broadcast Probe Response frame transmission for %s",
+		if (params->unsol_bcast_probe_resp_interval) {
+			wpa_printf(MSG_ERROR,
+				   "nl80211: Driver does not support unsolicited broadcast Probe Response frame transmission for %s",
 			   bss->ifname);
-		return -1;
+			return -1;
+		}
+		return 0;
 	}
 
 	wpa_printf(MSG_DEBUG,
