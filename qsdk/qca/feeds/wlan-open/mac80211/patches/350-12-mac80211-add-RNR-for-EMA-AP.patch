From 2415378b306301707b850d8c543ea3ef159fb462 Mon Sep 17 00:00:00 2001
From: Aloka Dixit <quic_alokad@quicinc.com>
Date: Tue, 18 Jan 2022 17:38:42 -0800
Subject: [PATCH 12/14] mac80211: add RNR for EMA AP

Generate EMA beacons by adding RNR elements along with MBSSID elements.

Signed-off-by: Aloka Dixit <quic_alokad@quicinc.com>
---
 net/mac80211/cfg.c         | 118 +++++++++++++++++++++++++++++++++----
 net/mac80211/ieee80211_i.h |   1 +
 net/mac80211/tx.c          |  48 ++++++++++++++-
 3 files changed, 151 insertions(+), 16 deletions(-)

--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -1012,6 +1012,39 @@ ieee80211_copy_mbssid_beacon(u8 *pos, st
 	return offset;
 }
 
+static int ieee80211_get_rnr_beacon_len(struct cfg80211_rnr_elems *elems)
+{
+	int i, len = 0;
+
+	if (!elems)
+		return 0;
+
+	for (i = 0; i < elems->cnt; i++)
+		len += elems->elem[i].len;
+
+	return len;
+}
+
+static u8 *ieee80211_copy_rnr_beacon(u8 *pos,
+				     struct cfg80211_rnr_elems *dest,
+				     struct cfg80211_rnr_elems *src)
+{
+	int i;
+
+	if (!dest || !src)
+		return pos;
+
+	dest->cnt = src->cnt;
+	for (i = 0; i < dest->cnt; i++) {
+		dest->elem[i].len = src->elem[i].len;
+		memcpy(pos, src->elem[i].data, dest->elem[i].len);
+		dest->elem[i].data = pos;
+		pos += dest->elem[i].len;
+	}
+
+	return pos;
+}
+
 static int ieee80211_assign_beacon(struct ieee80211_sub_if_data *sdata,
 				   struct ieee80211_link_data *link,
 				   struct cfg80211_beacon_data *params,
@@ -1019,8 +1052,9 @@ static int ieee80211_assign_beacon(struc
 				   const struct ieee80211_color_change_settings *cca)
 {
 	struct cfg80211_mbssid_elems *mbssid = NULL;
+	struct cfg80211_rnr_elems *rnr = NULL;
 	struct beacon_data *new, *old;
-	int new_head_len, new_tail_len;
+	int new_head_len, new_tail_len, new_rnr_len = 0;
 	int size, err;
 	u32 changed = BSS_CHANGED_BEACON;
 	struct ieee80211_bss_conf *link_conf = link->conf;
@@ -1051,16 +1085,43 @@ static int ieee80211_assign_beacon(struc
 		mbssid = params->mbssid_ies;
 		size += struct_size(new->mbssid_ies, elem, mbssid->cnt);
 		size += ieee80211_get_mbssid_beacon_len(mbssid, IEEE80211_BCN_EMA_DISABLED);
+		if (params->rnr_ies) {
+			rnr = params->rnr_ies;
+			new_rnr_len = ieee80211_get_rnr_beacon_len(rnr);
+		}
 	} else if (old && old->mbssid_ies) {
 		mbssid = old->mbssid_ies;
 		size += struct_size(new->mbssid_ies, elem, mbssid->cnt);
 		size += ieee80211_get_mbssid_beacon_len(mbssid, IEEE80211_BCN_EMA_DISABLED);
+		if (old->rnr_ies) {
+			rnr = old->rnr_ies;
+			new_rnr_len = ieee80211_get_rnr_beacon_len(rnr);
+		}
 	}
 
+	size += new_rnr_len;
+
 	new = kzalloc(size, GFP_KERNEL);
 	if (!new)
 		return -ENOMEM;
 
+	if (new_rnr_len) {
+		if (params->rnr_ies)
+			new->rnr_ies = kzalloc(struct_size(new->rnr_ies,
+						elem,
+						params->rnr_ies->cnt),
+					GFP_KERNEL);
+		else if (old && old->rnr_ies)
+			new->rnr_ies = kzalloc(struct_size(new->rnr_ies,
+						elem,
+						old->rnr_ies->cnt),
+					GFP_KERNEL);
+		if (!new->rnr_ies) {
+			kfree(new);
+			return -ENOMEM;
+		}
+	}
+
 	/* start filling the new info now */
 
 	/*
@@ -1078,6 +1139,7 @@ static int ieee80211_assign_beacon(struc
 		new->mbssid_ies = (void *)pos;
 		pos += struct_size(new->mbssid_ies, elem, mbssid->cnt);
 		pos += ieee80211_copy_mbssid_beacon(pos, new->mbssid_ies, mbssid);
+		pos = ieee80211_copy_rnr_beacon(pos, new->rnr_ies, rnr);
 		/* update bssid_indicator */
 		link_conf->bssid_indicator =
 			ilog2(__roundup_pow_of_two(mbssid->cnt + 1));
@@ -1109,6 +1171,7 @@ static int ieee80211_assign_beacon(struc
 	err = ieee80211_set_probe_resp(sdata, params->probe_resp,
 				       params->probe_resp_len, csa, cca, link);
 	if (err < 0) {
+		kfree(new->rnr_ies);
 		kfree(new);
 		return err;
 	}
@@ -1125,6 +1188,7 @@ static int ieee80211_assign_beacon(struc
 							 link_conf);
 
 		if (err < 0) {
+			kfree(new->rnr_ies);
 			kfree(new);
 			return err;
 		}
@@ -1135,8 +1199,10 @@ static int ieee80211_assign_beacon(struc
 	rcu_assign_pointer(link->u.ap.beacon, new);
 	sdata->u.ap.active = true;
 
-	if (old)
+	if (old) {
+		kfree(old->rnr_ies);
 		kfree_rcu(old, rcu_head);
+	}
 
 	return changed;
 }
@@ -1379,6 +1445,7 @@ static void ieee80211_free_next_beacon(s
 		return;
 
 	kfree(link->u.ap.next_beacon->mbssid_ies);
+	kfree(link->u.ap.next_beacon->rnr_ies);
 	kfree(link->u.ap.next_beacon);
 	link->u.ap.next_beacon = NULL;
 }
@@ -1435,6 +1502,7 @@ static int ieee80211_stop_ap(struct wiph
 	RCU_INIT_POINTER(link->u.ap.probe_resp, NULL);
 	RCU_INIT_POINTER(link->u.ap.fils_discovery, NULL);
 	RCU_INIT_POINTER(link->u.ap.unsol_bcast_probe_resp, NULL);
+	kfree(old_beacon->rnr_ies);
 	kfree_rcu(old_beacon, rcu_head);
 	if (old_probe_resp)
 		kfree_rcu(old_probe_resp, rcu_head);
@@ -3282,12 +3350,16 @@ cfg80211_beacon_dup(struct cfg80211_beac
 {
 	struct cfg80211_beacon_data *new_beacon;
 	u8 *pos;
-	int len;
+	int len, mbssid_len = 0, rnr_len = 0;
+
+	mbssid_len = ieee80211_get_mbssid_beacon_len(beacon->mbssid_ies, 0);
+	if (mbssid_len)
+		rnr_len = ieee80211_get_rnr_beacon_len(beacon->rnr_ies);
 
 	len = beacon->head_len + beacon->tail_len + beacon->beacon_ies_len +
 	      beacon->proberesp_ies_len + beacon->assocresp_ies_len +
 	      beacon->probe_resp_len + beacon->lci_len + beacon->civicloc_len +
-	      ieee80211_get_mbssid_beacon_len(beacon->mbssid_ies, IEEE80211_BCN_EMA_DISABLED);
+	      mbssid_len + rnr_len;
 
 	new_beacon = kzalloc(sizeof(*new_beacon) + len, GFP_KERNEL);
 	if (!new_beacon)
@@ -3298,9 +3370,16 @@ cfg80211_beacon_dup(struct cfg80211_beac
 			kzalloc(struct_size(new_beacon->mbssid_ies,
 					    elem, beacon->mbssid_ies->cnt),
 				GFP_KERNEL);
-		if (!new_beacon->mbssid_ies) {
-			kfree(new_beacon);
-			return NULL;
+		if (!new_beacon->mbssid_ies)
+			goto error;
+
+		if (rnr_len) {
+			new_beacon->rnr_ies = kzalloc(struct_size(new_beacon->rnr_ies,
+								  elem,
+								  beacon->rnr_ies->cnt),
+						      GFP_KERNEL);
+			if (!new_beacon->rnr_ies)
+				goto error;
 		}
 	}
 
@@ -3341,10 +3420,15 @@ cfg80211_beacon_dup(struct cfg80211_beac
 		memcpy(pos, beacon->probe_resp, beacon->probe_resp_len);
 		pos += beacon->probe_resp_len;
 	}
-	if (beacon->mbssid_ies && beacon->mbssid_ies->cnt)
+	if (beacon->mbssid_ies && beacon->mbssid_ies->cnt) {
 		pos += ieee80211_copy_mbssid_beacon(pos,
 						    new_beacon->mbssid_ies,
 						    beacon->mbssid_ies);
+		if (rnr_len)
+			pos = ieee80211_copy_rnr_beacon(pos,
+							new_beacon->rnr_ies,
+							beacon->rnr_ies);
+	}
 
 	/* might copy -1, meaning no changes requested */
 	new_beacon->ftm_responder = beacon->ftm_responder;
@@ -3362,6 +3446,14 @@ cfg80211_beacon_dup(struct cfg80211_beac
 	}
 
 	return new_beacon;
+
+error:
+	if (new_beacon) {
+		kfree(new_beacon->mbssid_ies);
+		kfree(new_beacon->rnr_ies);
+		kfree(new_beacon);
+	}
+	return NULL;
 }
 
 void ieee80211_csa_finish(struct ieee80211_vif *vif)
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -276,6 +276,7 @@ struct beacon_data {
 	u16 cntdwn_counter_offsets[IEEE80211_MAX_CNTDWN_COUNTERS_NUM];
 	u8 cntdwn_current_counter;
 	struct cfg80211_mbssid_elems *mbssid_ies;
+	struct cfg80211_rnr_elems *rnr_ies;
 	struct rcu_head rcu_head;
 };
 
--- a/net/mac80211/tx.c
+++ b/net/mac80211/tx.c
@@ -5381,6 +5381,41 @@ ieee80211_beacon_add_mbssid(struct sk_bu
 			     beacon->mbssid_ies->elem[i].len);
 }
 
+static int ieee80211_beacon_rnr_len(struct beacon_data *beacon, int index)
+{
+	int len = 0;
+
+	if (!beacon->mbssid_ies || !beacon->rnr_ies ||
+	    index == IEEE80211_BCN_EMA_DISABLED ||
+	    index >= beacon->rnr_ies->cnt)
+		return 0;
+
+	len = beacon->rnr_ies->elem[index].len;
+
+	for (index = beacon->mbssid_ies->cnt; index < beacon->rnr_ies->cnt;
+	     index++)
+		len += beacon->rnr_ies->elem[index].len;
+
+	return len;
+}
+
+static void ieee80211_beacon_add_rnr(struct beacon_data *beacon, int index,
+				     struct sk_buff *skb)
+{
+	if (!beacon->mbssid_ies || !beacon->rnr_ies || !beacon->rnr_ies->cnt ||
+	    index == IEEE80211_BCN_EMA_DISABLED ||
+	    index >= beacon->rnr_ies->cnt)
+		return;
+
+	skb_put_data(skb, beacon->rnr_ies->elem[index].data,
+		     beacon->rnr_ies->elem[index].len);
+
+	for (index = beacon->mbssid_ies->cnt; index < beacon->rnr_ies->cnt;
+	     index++)
+		skb_put_data(skb, beacon->rnr_ies->elem[index].data,
+			     beacon->rnr_ies->elem[index].len);
+}
+
 static struct sk_buff *
 ieee80211_beacon_get_ap(struct ieee80211_hw *hw,
 			struct ieee80211_vif *vif,
@@ -5396,7 +5431,7 @@ ieee80211_beacon_get_ap(struct ieee80211
 	struct ieee80211_if_ap *ap = &sdata->u.ap;
 	struct sk_buff *skb = NULL;
 	u16 csa_off_base = 0;
-	int mbssid_len;
+	int mbssid_len, rnr_len = 0;
 
 	if (beacon->cntdwn_counter_offsets[0]) {
 		if (!is_template)
@@ -5409,9 +5444,13 @@ ieee80211_beacon_get_ap(struct ieee80211
 	 * tail length, maximum TIM length and multiple BSSID length
 	 */
 	mbssid_len = ieee80211_get_mbssid_beacon_len(beacon->mbssid_ies, ema_index);
+	if (mbssid_len > 0)
+		rnr_len = ieee80211_beacon_rnr_len(beacon, ema_index);
+
 	skb = dev_alloc_skb(local->tx_headroom + beacon->head_len +
 			    beacon->tail_len + 256 +
-			    local->hw.extra_beacon_tailroom + mbssid_len);
+			    local->hw.extra_beacon_tailroom + mbssid_len +
+				rnr_len);
 	if (!skb)
 		return NULL;
 
@@ -5427,7 +5466,10 @@ ieee80211_beacon_get_ap(struct ieee80211
 
 		if (mbssid_len) {
 			ieee80211_beacon_add_mbssid(skb, ema_index, beacon);
-			offs->mbssid_off = skb->len - mbssid_len;
+			if (rnr_len)
+				ieee80211_beacon_add_rnr(beacon, ema_index, skb);
+
+			offs->mbssid_off = skb->len - (mbssid_len + rnr_len);
 		}
 
 		/* for AP the csa offsets are from tail */
