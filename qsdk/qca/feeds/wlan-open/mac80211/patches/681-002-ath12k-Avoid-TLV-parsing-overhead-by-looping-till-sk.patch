From c38bebf3959d8a7f21cf5b9c297915c131b4ff48 Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Fri, 4 Nov 2022 00:41:10 +0530
Subject: [PATCH] ath12k: Avoid TLV parsing overhead by looping till skb->len

Current TLV parsing logic loops through the individual TLV tag till the
size of the allocated buffer. In monitor destination descriptor, end
offset is received for each buffer which implies the acutal size of
buffer DMA'ed by hardware.

Make Use the end offset for skb_put, so that skb->len is used as a upper
limit instead of DP_RX_BUFFER_SIZE while parsing the individual
monitor TLVs.

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_mon.c | 28 +++++++++++++++++++++---
 1 file changed, 25 insertions(+), 3 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/dp_mon.c b/drivers/net/wireless/ath/ath12k/dp_mon.c
index 3abb14c..e22ba90 100644
--- a/drivers/net/wireless/ath/ath12k/dp_mon.c
+++ b/drivers/net/wireless/ath/ath12k/dp_mon.c
@@ -2430,7 +2430,7 @@ ath12k_dp_mon_parse_rx_dest(struct ath12k *ar, struct hal_rx_mon_ppdu_info *ppdu
 		ptr += tlv_len;
 		ptr = PTR_ALIGN(ptr, HAL_TLV_64_ALIGN);
 
-		if ((ptr - skb->data) >= DP_RX_BUFFER_SIZE)
+		if ((ptr - skb->data) >= skb->len + 1)
 			break;
 
 	} while ((hal_status == HAL_RX_MON_STATUS_PPDU_NOT_DONE) ||
@@ -3609,7 +3609,7 @@ int ath12k_dp_mon_srng_process(struct ath12k *ar, int mac_id, int *budget,
 	struct ath12k_peer *peer = NULL;
 	struct ath12k_sta *arsta = NULL;
 	u64 cookie;
-	u32 hal_status, end_reason, ppdu_id;
+	u32 hal_status, end_reason, ppdu_id, end_offset;
 	int num_buffs_reaped = 0, srng_id, buf_id;
 
 	__skb_queue_head_init(&skb_list);
@@ -3670,6 +3670,17 @@ int ath12k_dp_mon_srng_process(struct ath12k *ar, int mac_id, int *budget,
 		if (end_reason == HAL_MON_END_OF_PPDU)
 			*budget -= 1;
 
+		end_offset = u32_get_bits(mon_dst_desc->info0,
+					  HAL_MON_DEST_INFO0_END_OFFSET);
+
+		if (likely(end_offset < DP_RX_BUFFER_SIZE)) {
+			skb_put(skb, end_offset);
+		} else {
+			ath12k_warn(ab, "invalid offset received from mon dest %u\n",
+				    end_offset);
+			skb_put(skb, DP_RX_BUFFER_SIZE);
+		}
+
 		__skb_queue_tail(&skb_list, skb);
 move_next:
 		ath12k_dp_mon_buf_replenish(ab, buf_ring, 1);
@@ -3755,7 +3766,7 @@ int ath12k_dp_mon_rx_process_stats(struct ath12k *ar, int mac_id,
 	struct sk_buff_head skb_list;
 	u64 cookie;
 	int num_buffs_reaped = 0, srng_id, buf_id;
-	u32 hal_status, rx_buf_sz, end_reason;
+	u32 hal_status, rx_buf_sz, end_reason, end_offset;
 	u16 log_type = 0;
 
 	__skb_queue_head_init(&skb_list);
@@ -3810,6 +3821,17 @@ int ath12k_dp_mon_rx_process_stats(struct ath12k *ar, int mac_id,
 		if (end_reason == HAL_MON_END_OF_PPDU)
 			*budget -= 1;
 
+		end_offset = u32_get_bits(mon_dst_desc->info0,
+					  HAL_MON_DEST_INFO0_END_OFFSET);
+
+		if (likely(end_offset < DP_RX_BUFFER_SIZE)) {
+			skb_put(skb, end_offset);
+		} else {
+			ath12k_warn(ab, "invalid offset received on mon stats dest %u\n",
+				    end_offset);
+			skb_put(skb, DP_RX_BUFFER_SIZE);
+		}
+
 		__skb_queue_tail(&skb_list, skb);
 move_next:
 		ath12k_dp_mon_buf_replenish(ab, buf_ring, 1);
-- 
2.17.1

