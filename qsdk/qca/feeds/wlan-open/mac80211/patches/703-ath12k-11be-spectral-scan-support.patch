From 1838228b17c223ca6ae3f8ce2932329825f258eb Mon Sep 17 00:00:00 2001
From: Rajat Soni <quic_rajson@quicinc.com>
Date: Fri, 10 Feb 2023 17:06:43 +0530
Subject: [PATCH] ath12k: 11be spectral scan support

Add support for 11be spectral scan. IPQ9274 also support spectral
scan for 320 MHZ.

Signed-off-by: Rajat Soni <quic_rajson@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dbring.c   |  32 ++-
 drivers/net/wireless/ath/ath12k/dbring.h   |  15 ++
 drivers/net/wireless/ath/ath12k/hw.c       |  16 ++
 drivers/net/wireless/ath/ath12k/hw.h       |  10 +-
 drivers/net/wireless/ath/ath12k/mac.c      |   4 +
 drivers/net/wireless/ath/ath12k/spectral.c | 173 ++++++++++++---
 drivers/net/wireless/ath/ath12k/spectral.h |   3 +
 drivers/net/wireless/ath/ath12k/wmi.c      | 236 +++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/wmi.h      |  82 +++++++
 drivers/net/wireless/ath/spectral_common.h |   3 +-
 10 files changed, 544 insertions(+), 30 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dbring.c
+++ b/drivers/net/wireless/ath/ath12k/dbring.c
@@ -7,6 +7,34 @@
 #include "core.h"
 #include "debug.h"
 
+#define ATH12K_DB_MAGIC_VALUE 0xdeadbeaf
+
+int ath12k_dbring_validate_buffer(struct ath12k *ar, void *buffer, u32 size)
+{
+	u32 *temp;
+	int idx;
+	size = size >> 2;
+
+	for (idx = 0, temp = buffer; idx < size; idx++, temp++) {
+		if (*temp == ATH12K_DB_MAGIC_VALUE)
+			return -EINVAL;
+	}
+
+	return 0;
+}
+
+static void ath12k_dbring_fill_magic_value(struct ath12k *ar,
+					  void *buffer, u32 size)
+{
+	/* memset32 function fills buffer payload with the ATH12K_DB_MAGIC_VALUE
+	 * and the variable size is expected to be the number of u32 values
+	 * to be stored, not the number of bytes.
+	 */
+	size = size / sizeof(u32);
+
+	memset32(buffer, ATH12K_DB_MAGIC_VALUE, size);
+}
+
 static int ath12k_dbring_bufs_replenish(struct ath12k *ar,
 					struct ath12k_dbring *ring,
 					struct ath12k_dbring_element *buff,
@@ -28,6 +56,7 @@ static int ath12k_dbring_bufs_replenish(
 
 	ptr_unaligned = buff->payload;
 	ptr_aligned = PTR_ALIGN(ptr_unaligned, ring->buf_align);
+	ath12k_dbring_fill_magic_value(ar, ptr_aligned, ring->buf_sz);
 	paddr = dma_map_single(ab->dev, ptr_aligned, ring->buf_sz,
 			       DMA_FROM_DEVICE);
 
@@ -51,6 +80,7 @@ static int ath12k_dbring_bufs_replenish(
 
 	buff->paddr = paddr;
 
+	dma_sync_single_for_device(ab->dev, paddr, ring->buf_sz, DMA_FROM_DEVICE);
 	cookie = u32_encode_bits(ar->pdev_idx, DP_DIR_BUF_COOKIE_PDEV_ID) |
 		 u32_encode_bits(buf_id, DP_DIR_BUF_COOKIE_BUF_ID);
 
@@ -177,7 +207,7 @@ int ath12k_dbring_buf_setup(struct ath12
 	ring->hp_addr = ath12k_hal_srng_get_hp_addr(ar->ab, srng);
 	ring->tp_addr = ath12k_hal_srng_get_tp_addr(ar->ab, srng);
 
-	ret = ath12k_dbring_fill_bufs(ar, ring, GFP_KERNEL);
+	ret = ath12k_dbring_fill_bufs(ar, ring, GFP_ATOMIC);
 
 	return ret;
 }
@@ -299,7 +329,7 @@ int ath12k_dbring_buffer_release_event(s
 
 		ath12k_hal_rx_buf_addr_info_get(&desc, &paddr, &cookie, &rbm);
 
-		buf_id = u32_get_bits(cookie, DP_RXDMA_BUF_COOKIE_BUF_ID);
+		buf_id = u32_get_bits(cookie, DP_DIR_BUF_COOKIE_BUF_ID);
 
 		spin_lock_bh(&ring->idr_lock);
 		buff = idr_find(&ring->bufs_idr, buf_id);
--- a/drivers/net/wireless/ath/ath12k/dbring.h
+++ b/drivers/net/wireless/ath/ath12k/dbring.h
@@ -31,6 +31,20 @@ struct ath12k_dbring_buf_release_event {
 	u32 num_meta;
 };
 
+struct wmi_pdev_sscan_fw_param_event {
+	struct ath12k_wmi_pdev_sscan_fw_cmd_fixed_param fixed;
+	struct ath12k_wmi_pdev_sscan_fft_bin_index *bin;
+	struct ath12k_wmi_pdev_sscan_chan_info ch_info;
+	struct ath12k_wmi_pdev_sscan_per_detector_info *det_info;
+};
+
+struct wmi_spectral_capabilities_event {
+	struct ath12k_wmi_spectral_scan_bw_capabilities *sscan_bw_caps;
+	struct ath12k_wmi_spectral_fft_size_capabilities *fft_size_caps;
+	u32 num_bw_caps_entry;
+	u32 num_fft_size_caps_entry;
+};
+
 struct ath12k_dbring_cap {
 	u32 pdev_id;
 	enum wmi_direct_buffer_module id;
@@ -77,4 +91,5 @@ int ath12k_dbring_get_cap(struct ath12k_
 			  struct ath12k_dbring_cap *db_cap);
 void ath12k_dbring_srng_cleanup(struct ath12k *ar, struct ath12k_dbring *ring);
 void ath12k_dbring_buf_cleanup(struct ath12k *ar, struct ath12k_dbring *ring);
+int ath12k_dbring_validate_buffer(struct ath12k *ar, void *data, u32 size);
 #endif /* ATH12K_DBRING_H */
--- a/drivers/net/wireless/ath/ath12k/hw.c
+++ b/drivers/net/wireless/ath/ath12k/hw.c
@@ -1016,6 +1016,14 @@ static const struct ath12k_hw_params ath
 		.credit_flow = false,
 		.wakeup_mhi = false,
 		.alloc_cacheable_memory = true,
+		.spectral = {
+			.fft_sz = 0,
+			.fft_pad_sz = 0,
+			.summary_pad_sz = 0,
+			.fft_hdr_len = 0,
+			.max_fft_bins = 0,
+			.fragment_160mhz = false,
+		},
 		.max_mlo_peer = ATH12K_MAX_MLO_PEER,
 		.num_local_link = 0,
 	},
@@ -1146,6 +1154,14 @@ static const struct ath12k_hw_params ath
 		.credit_flow = false,
 		.wakeup_mhi = false,
 		.alloc_cacheable_memory = true,
+		.spectral = {
+			.fft_sz = 7,
+			.fft_pad_sz = 0,
+			.summary_pad_sz = 16,
+			.fft_hdr_len = 24,
+			.max_fft_bins = 512,
+			.fragment_160mhz = true,
+		},
 		.max_mlo_peer = ATH12K_MAX_MLO_PEER,
 		.num_local_link = 0,
 	},
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -170,7 +170,15 @@ struct ath12k_hw_params {
 	int num_rxdma_dst_ring;
 	bool rx_mac_buf_ring;
 	bool vdev_start_delay;
-	u8 spectral_fft_sz;
+
+	struct {
+		u8 fft_sz;
+		u8 fft_pad_sz;
+		u8 summary_pad_sz;
+		u8 fft_hdr_len;
+		u16 max_fft_bins;
+		bool fragment_160mhz;
+	} spectral;
 
 	u16 interface_modes;
 	bool supports_monitor;
--- a/drivers/net/wireless/ath/ath12k/spectral.c
+++ b/drivers/net/wireless/ath/ath12k/spectral.c
@@ -12,27 +12,28 @@
 #define ATH12K_SPECTRAL_EVENT_TIMEOUT_MS	1
 
 #define ATH12K_SPECTRAL_DWORD_SIZE		4
-/* HW bug, expected BIN size is 2 bytes but HW report as 4 bytes */
-#define ATH12K_SPECTRAL_BIN_SIZE		4
+#define ATH12K_SPECTRAL_BIN_SIZE		1
 #define ATH12K_SPECTRAL_ATH12K_MIN_BINS		64
-#define ATH12K_SPECTRAL_ATH12K_MIN_IB_BINS	32
-#define ATH12K_SPECTRAL_ATH12K_MAX_IB_BINS	256
+#define ATH12K_SPECTRAL_ATH12K_MIN_IB_BINS	(ATH12K_SPECTRAL_ATH12K_MIN_BINS>>1)
+#define ATH12K_SPECTRAL_ATH12K_MAX_IB_BINS(x)	((x)->hw_params->spectral.max_fft_bins >> 1)
 
 #define ATH12K_SPECTRAL_SCAN_COUNT_MAX		4095
 
 /* Max channel computed by sum of 2g and 5g band channels */
 #define ATH12K_SPECTRAL_TOTAL_CHANNEL		41
 #define ATH12K_SPECTRAL_SAMPLES_PER_CHANNEL	70
-#define ATH12K_SPECTRAL_PER_SAMPLE_SIZE		(sizeof(struct fft_sample_ath12k) + \
-						 ATH12K_SPECTRAL_ATH12K_MAX_IB_BINS)
+#define ATH12K_SPECTRAL_PER_SAMPLE_SIZE(x)	(sizeof(struct fft_sample_ath12k) + \
+						 ATH12K_SPECTRAL_ATH12K_MAX_IB_BINS(x))
 #define ATH12K_SPECTRAL_TOTAL_SAMPLE		(ATH12K_SPECTRAL_TOTAL_CHANNEL * \
 						 ATH12K_SPECTRAL_SAMPLES_PER_CHANNEL)
-#define ATH12K_SPECTRAL_SUB_BUFF_SIZE		ATH12K_SPECTRAL_PER_SAMPLE_SIZE
+#define ATH12K_SPECTRAL_SUB_BUFF_SIZE(x)	ATH12K_SPECTRAL_PER_SAMPLE_SIZE(x)
 #define ATH12K_SPECTRAL_NUM_SUB_BUF		ATH12K_SPECTRAL_TOTAL_SAMPLE
 
 #define ATH12K_SPECTRAL_20MHZ			20
 #define ATH12K_SPECTRAL_40MHZ			40
 #define ATH12K_SPECTRAL_80MHZ			80
+#define ATH12K_SPECTRAL_160MHZ                  160
+#define ATH12K_SPECTRAL_320MHZ                  320
 
 #define ATH12K_SPECTRAL_SIGNATURE		0xFA
 
@@ -149,7 +150,7 @@ static int remove_buf_file_handler(struc
 	return 0;
 }
 
-static const struct rchan_callbacks rfs_scan_cb = {
+static struct rchan_callbacks rfs_scan_cb = {
 	.create_buf_file = create_buf_file_handler,
 	.remove_buf_file = remove_buf_file_handler,
 };
@@ -186,6 +187,8 @@ static int ath12k_spectral_scan_trigger(
 	if (ar->spectral.mode == ATH12K_SPECTRAL_DISABLED)
 		return 0;
 
+	ar->spectral.is_primary = true;
+
 	ret = ath12k_wmi_vdev_spectral_enable(ar, arvif->vdev_id,
 					      ATH12K_WMI_SPECTRAL_TRIGGER_CMD_CLEAR,
 					      ATH12K_WMI_SPECTRAL_ENABLE_CMD_ENABLE);
@@ -238,7 +241,7 @@ static int ath12k_spectral_scan_config(s
 
 	param.vdev_id = arvif->vdev_id;
 	param.scan_count = count;
-	param.scan_fft_size = ar->spectral.fft_size;
+	param.scan_fft_size = ATH12K_WMI_SPECTRAL_FFT_SIZE_DEFAULT;
 	param.scan_period = ATH12K_WMI_SPECTRAL_PERIOD_DEFAULT;
 	param.scan_priority = ATH12K_WMI_SPECTRAL_PRIORITY_DEFAULT;
 	param.scan_gc_ena = ATH12K_WMI_SPECTRAL_GC_ENA_DEFAULT;
@@ -586,11 +589,16 @@ int ath12k_spectral_process_fft(struct a
 	int tlv_len, bin_len, num_bins;
 	u16 length, freq;
 	u8 chan_width_mhz;
-	int ret;
+	int ret, i;
+	u32 check_length;
+	bool fragment_sample = false;
+	struct wmi_spectral_capabilities_event spectral_cap;
+	u32 supported_flags;
+	spectral_cap = ar->spectral.spectral_cap;
 
 	lockdep_assert_held(&ar->spectral.lock);
 
-	if (!ab->hw_params->spectral_fft_sz) {
+	if (!ab->hw_params->spectral.fft_sz) {
 		ath12k_warn(ab, "invalid bin size type for hw rev %d\n",
 			    ab->hw_rev);
 		return -EINVAL;
@@ -600,7 +608,7 @@ int ath12k_spectral_process_fft(struct a
 	tlv_len = FIELD_GET(SPECTRAL_TLV_HDR_LEN, __le32_to_cpu(tlv->header));
 	/* convert Dword into bytes */
 	tlv_len *= ATH12K_SPECTRAL_DWORD_SIZE;
-	bin_len = tlv_len - (sizeof(*fft_report) - sizeof(*tlv));
+	bin_len = tlv_len - ab->hw_params->spectral.fft_hdr_len;
 
 	if (data_len < (bin_len + sizeof(*fft_report))) {
 		ath12k_warn(ab, "mismatch in expected bin len %d and data len %d\n",
@@ -613,25 +621,121 @@ int ath12k_spectral_process_fft(struct a
 	num_bins >>= 1;
 
 	if (num_bins < ATH12K_SPECTRAL_ATH12K_MIN_IB_BINS ||
-	    num_bins > ATH12K_SPECTRAL_ATH12K_MAX_IB_BINS ||
+	    num_bins > ATH12K_SPECTRAL_ATH12K_MAX_IB_BINS(ab) ||
 	    !is_power_of_2(num_bins)) {
 		ath12k_warn(ab, "Invalid num of bins %d\n", num_bins);
 		return -EINVAL;
 	}
 
+	check_length = sizeof(*fft_report);
+	ret = ath12k_dbring_validate_buffer(ar, data, check_length);
+	if (ret) {
+		ath12k_warn(ar->ab, "found magic value in fft data, dropping\n");
+		return ret;
+	}
+
 	ret = ath12k_spectral_pull_search(ar, data, &search);
 	if (ret) {
 		ath12k_warn(ab, "failed to pull search report %d\n", ret);
 		return ret;
 	}
 
-	chan_width_mhz = summary->meta.ch_width;
+	chan_width_mhz = ar->spectral.ch_width;
 
 	switch (chan_width_mhz) {
-	case ATH12K_SPECTRAL_20MHZ:
-	case ATH12K_SPECTRAL_40MHZ:
-	case ATH12K_SPECTRAL_80MHZ:
-		fft_sample->chan_width_mhz = chan_width_mhz;
+	case WMI_PEER_CHWIDTH_20MHZ:
+		for (i = 0; i < spectral_cap.num_fft_size_caps_entry; i++) {
+			if (spectral_cap.fft_size_caps->sscan_bw == chan_width_mhz) {
+				supported_flags = spectral_cap.fft_size_caps->supported_flags;
+				supported_flags >>= 6;
+				if (!(supported_flags & 1)) {
+					ath12k_warn(ab, "Spectral fft size %d is not supported", ar->spectral.fft_size);
+					return -EINVAL;
+				}
+				break;
+			}
+			spectral_cap.fft_size_caps++;
+		}
+		fft_sample->chan_width_mhz = ATH12K_SPECTRAL_20MHZ;
+		summary->meta.ch_width = ATH12K_SPECTRAL_20MHZ;
+		break;
+	case WMI_PEER_CHWIDTH_40MHZ:
+		for (i = 0; i < spectral_cap.num_fft_size_caps_entry; i++) {
+			if (spectral_cap.fft_size_caps->sscan_bw == chan_width_mhz) {
+				supported_flags = spectral_cap.fft_size_caps->supported_flags;
+				supported_flags >>= 7;
+				if (!(supported_flags & 1)) {
+					ath12k_warn(ab, "Spectral fft size %d is not supported", ar->spectral.fft_size);
+					return -EINVAL;
+				} else {
+					num_bins <<= 1;
+					ar->spectral.fft_size = 8;
+				}
+				break;
+			}
+			spectral_cap.fft_size_caps++;
+		}
+		fft_sample->chan_width_mhz = ATH12K_SPECTRAL_40MHZ;
+		summary->meta.ch_width = ATH12K_SPECTRAL_40MHZ;
+		break;
+	case WMI_PEER_CHWIDTH_80MHZ:
+		for (i = 0; i < spectral_cap.num_fft_size_caps_entry; i++) {
+			if (spectral_cap.fft_size_caps->sscan_bw == chan_width_mhz) {
+				supported_flags = spectral_cap.fft_size_caps->supported_flags;
+				supported_flags >>= 8;
+				if (!(supported_flags & 1)) {
+					ath12k_warn(ab, "Spectral fft size %d is not supported", ar->spectral.fft_size);
+					return -EINVAL;
+				} else {
+					num_bins <<= 2;
+					ar->spectral.fft_size = 9;
+				}
+				break;
+			}
+			spectral_cap.fft_size_caps++;
+		}
+		fft_sample->chan_width_mhz = ATH12K_SPECTRAL_80MHZ;
+		summary->meta.ch_width = ATH12K_SPECTRAL_80MHZ;
+		break;
+	case WMI_PEER_CHWIDTH_160MHZ:
+		for (i = 0; i < spectral_cap.num_fft_size_caps_entry; i++) {
+			if (spectral_cap.fft_size_caps->sscan_bw == chan_width_mhz) {
+				supported_flags = spectral_cap.fft_size_caps->supported_flags;
+				supported_flags >>= 8;
+				if (!(supported_flags & 1)) {
+					ath12k_warn(ab, "Spectral fft size %d is not supported", ar->spectral.fft_size);
+					return -EINVAL;
+				} else {
+					ar->spectral.fft_size = 9;
+					num_bins <<= 2;
+				}
+				break;
+			}
+			spectral_cap.fft_size_caps++;
+		}
+		fft_sample->chan_width_mhz = ATH12K_SPECTRAL_160MHZ;
+		summary->meta.ch_width = ATH12K_SPECTRAL_160MHZ;
+		if (ab->hw_params->spectral.fragment_160mhz)
+			fragment_sample = true;
+		break;
+	case WMI_PEER_CHWIDTH_MAX:
+		for (i = 0; i < spectral_cap.num_fft_size_caps_entry; i++) {
+			if (spectral_cap.fft_size_caps->sscan_bw == chan_width_mhz) {
+				supported_flags = spectral_cap.fft_size_caps->supported_flags;
+				supported_flags >>= 8;
+				if (!(supported_flags & 1)) {
+					ath12k_warn(ab, "Spectral fft size %d is not supported", ar->spectral.fft_size);
+					return -EINVAL;
+				} else {
+					ar->spectral.fft_size = 9;
+					num_bins <<= 2;
+				}
+				break;
+			}
+			spectral_cap.fft_size_caps++;
+		}
+		fft_sample->chan_width_mhz = ATH12K_SPECTRAL_320MHZ;
+		summary->meta.ch_width = ATH12K_SPECTRAL_320MHZ;
 		break;
 	default:
 		ath12k_warn(ab, "invalid channel width %d\n", chan_width_mhz);
@@ -657,8 +761,15 @@ int ath12k_spectral_process_fft(struct a
 	freq = summary->meta.freq2;
 	fft_sample->freq2 = __cpu_to_be16(freq);
 
+	/* If freq2 is available then the spectral scan results are fragmented as primary and secondary */
+	if (fragment_sample && freq) {
+		fft_sample->is_primary = ar->spectral.is_primary;
+		/* We have to toggle the is_primary to handle the next report */
+		ar->spectral.is_primary = !ar->spectral.is_primary;
+	}
+
 	ath12k_spectral_parse_fft(fft_sample->data, fft_report->bins, num_bins,
-				  ab->hw_params->spectral_fft_sz);
+				  ar->spectral.fft_size);
 
 	fft_sample->max_exp = ath12k_spectral_get_max_exp(fft_sample->max_index,
 							  search.peak_mag,
@@ -694,7 +805,7 @@ static int ath12k_spectral_process_data(
 		goto unlock;
 	}
 
-	sample_sz = sizeof(*fft_sample) + ATH12K_SPECTRAL_ATH12K_MAX_IB_BINS;
+	sample_sz = sizeof(*fft_sample) + ATH12K_SPECTRAL_ATH12K_MAX_IB_BINS(ab);
 	fft_sample = kmalloc(sample_sz, GFP_ATOMIC);
 	if (!fft_sample) {
 		ret = -ENOBUFS;
@@ -716,8 +827,10 @@ static int ath12k_spectral_process_data(
 		sign = FIELD_GET(SPECTRAL_TLV_HDR_SIGN,
 				 __le32_to_cpu(tlv->header));
 		if (sign != ATH12K_SPECTRAL_SIGNATURE) {
+			/*TODO: Need to add this warn print back after resolving cpu cache issue
+			 *
 			ath12k_warn(ab, "Invalid sign 0x%x at bytes %d\n",
-				    sign, i);
+				    sign, i);*/
 			ret = -EINVAL;
 			goto err;
 		}
@@ -742,7 +855,8 @@ static int ath12k_spectral_process_data(
 			 * is 4 DWORD size (16 bytes).
 			 * Need to remove this workaround once HW bug fixed
 			 */
-			tlv_len = sizeof(*summary) - sizeof(*tlv);
+			tlv_len = sizeof(*summary) - sizeof(*tlv) +
+				ab->hw_params->spectral.summary_pad_sz;
 
 			if (tlv_len < (sizeof(*summary) - sizeof(*tlv))) {
 				ath12k_warn(ab, "failed to parse spectral summary at bytes %d tlv_len:%d\n",
@@ -751,6 +865,12 @@ static int ath12k_spectral_process_data(
 				goto err;
 			}
 
+			ret = ath12k_dbring_validate_buffer(ar, data, tlv_len);
+			if (ret) {
+				ath12k_warn(ar->ab, "found magic value in spectral summary, dropping\n");
+				goto err;
+			}
+
 			summary = (struct spectral_summary_fft_report *)tlv;
 			ath12k_spectral_pull_summary(ar, &param->meta,
 						     summary, &summ_rpt);
@@ -776,7 +896,6 @@ static int ath12k_spectral_process_data(
 			quit = true;
 			break;
 		}
-
 		i += sizeof(*tlv) + tlv_len;
 	}
 
@@ -854,7 +973,7 @@ static inline void ath12k_spectral_debug
 	}
 }
 
-int ath12k_spectral_vif_stop(struct ath12k_vif *arvif)
+int ath12k_spectral_vif_stop(struct ath12k_link_vif *arvif)
 {
 	if (!arvif->spectral_enabled)
 		return 0;
@@ -881,10 +1000,18 @@ void ath12k_spectral_deinit(struct ath12
 		ar = ab->pdevs[i].ar;
 		sp = &ar->spectral;
 
-		if (!sp->enabled)
+		mutex_lock(&ar->conf_mutex);
+
+		if (sp->spectral_cap.fft_size_caps) {
+			kfree(sp->spectral_cap.fft_size_caps);
+			sp->spectral_cap.fft_size_caps = NULL;
+		}
+
+		if (!sp->enabled) {
+			mutex_unlock(&ar->conf_mutex);
 			continue;
+		}
 
-		mutex_lock(&ar->conf_mutex);
 		ath12k_spectral_scan_config(ar, ATH12K_SPECTRAL_DISABLED);
 		mutex_unlock(&ar->conf_mutex);
 
@@ -903,7 +1030,7 @@ static inline int ath12k_spectral_debug_
 
 	ar->spectral.rfs_scan = relay_open("spectral_scan",
 					   ar->debug.debugfs_pdev,
-					   ATH12K_SPECTRAL_SUB_BUFF_SIZE,
+					   ATH12K_SPECTRAL_SUB_BUFF_SIZE(ar->ab),
 					   ATH12K_SPECTRAL_NUM_SUB_BUF,
 					   &rfs_scan_cb, NULL);
 	if (!ar->spectral.rfs_scan) {
@@ -964,7 +1091,7 @@ int ath12k_spectral_init(struct ath12k_b
 		      ab->wmi_ab.svc_map))
 		return 0;
 
-	if (!ab->hw_params->spectral_fft_sz)
+	if (!ab->hw_params->spectral.fft_sz)
 		return 0;
 
 	for (i = 0; i < ab->num_radios; i++) {
--- a/drivers/net/wireless/ath/ath12k/spectral.h
+++ b/drivers/net/wireless/ath/ath12k/spectral.h
@@ -36,6 +36,9 @@ struct ath12k_spectral {
 	u16 count;
 	u8 fft_size;
 	bool enabled;
+	bool is_primary;
+	u32 ch_width;
+	struct wmi_spectral_capabilities_event spectral_cap;
 };
 
 #ifdef CPTCFG_ATH12K_SPECTRAL
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -79,6 +79,25 @@ struct wmi_tlv_dma_buf_release_parse {
 	bool meta_data_done;
 };
 
+struct wmi_pdev_sscan_fw_param_parse {
+	struct ath12k_wmi_pdev_sscan_fw_cmd_fixed_param fixed;
+	struct ath12k_wmi_pdev_sscan_fft_bin_index *bin;
+	struct ath12k_wmi_pdev_sscan_chan_info ch_info;
+	struct ath12k_wmi_pdev_sscan_per_detector_info *det_info;
+	bool bin_entry_done;
+	bool det_info_entry_done;
+
+};
+
+struct wmi_spectral_capabilities_parse {
+	struct ath12k_wmi_spectral_scan_bw_capabilities *sscan_bw_caps;
+	struct ath12k_wmi_spectral_fft_size_capabilities *fft_size_caps;
+	bool sscan_bw_caps_entry_done;
+	bool fft_size_caps_entry_done;
+	u32 num_bw_caps_entry;
+	u32 num_fft_size_caps_entry;
+};
+
 static const struct wmi_tlv_policy wmi_tlv_policies[] = {
 	[WMI_TAG_ARRAY_BYTE] = { .min_len = 0 },
 	[WMI_TAG_ARRAY_UINT32] = { .min_len = 0 },
@@ -320,6 +339,7 @@ ath12k_wmi_tlv_iter(struct ath12k_base *
 	u16 tlv_tag, tlv_len;
 	int ret;
 
+
 	while (len > 0) {
 		if (len < sizeof(*tlv)) {
 			ath12k_err(ab, "wmi tlv parse failure at byte %zd (%zu bytes left, %zu expected)\n",
@@ -4682,6 +4702,7 @@ static void ath12k_wmi_pdev_dma_ring_buf
 	struct ath12k_dbring_buf_release_event param;
 	int ret;
 
+
 	ret = ath12k_wmi_tlv_iter(ab, skb->data, skb->len,
 				  ath12k_wmi_tlv_dma_buf_parse,
 				  &parse);
@@ -9928,6 +9949,227 @@ exit:
 }
 
 
+static int ath12k_wmi_pdev_sscan_fft_bin_index_parse(struct ath12k_base *soc,
+						     u16 tag, u16 len,
+						     const void *ptr, void *data)
+{
+	if (tag != WMI_TAG_PDEV_SSCAN_FFT_BIN_INDEX)
+		return -EPROTO;
+	return 0;
+}
+
+static int ath12k_wmi_pdev_sscan_per_detector_info_parse(struct ath12k_base *soc,
+							 u16 tag, u16 len,
+							 const void *ptr, void *data)
+{
+	if (tag != WMI_TAG_PDEV_SSCAN_PER_DETECTOR_INFO)
+		return -EPROTO;
+
+	return 0;
+}
+
+static int ath12k_wmi_tlv_sscan_fw_parse(struct ath12k_base *ab,
+					 u16 tag, u16 len,
+					 const void *ptr, void *data)
+{
+	struct wmi_pdev_sscan_fw_param_parse *parse = data;
+	int ret;
+
+	switch (tag) {
+
+	case WMI_TAG_PDEV_SSCAN_FW_CMD_FIXED_PARAM:
+		memcpy(&parse->fixed, ptr,
+		       sizeof(struct ath12k_wmi_pdev_sscan_fw_cmd_fixed_param));
+		parse->fixed.pdev_id = DP_HW2SW_MACID(parse->fixed.pdev_id);
+		break;
+	case WMI_TAG_ARRAY_STRUCT:
+	       if (!parse->bin_entry_done) {
+		       parse->bin = (struct ath12k_wmi_pdev_sscan_fft_bin_index *)ptr;
+
+		       ret = ath12k_wmi_tlv_iter(ab, ptr, len,
+						 ath12k_wmi_pdev_sscan_fft_bin_index_parse,
+						 parse);
+
+		       if (ret) {
+			       ath12k_warn(ab, "failed to parse fft bin index %d\n",
+					   ret);
+			       return ret;
+		       }
+
+		       parse->bin_entry_done = true;
+	       } else if (!parse->det_info_entry_done) {
+		       parse->det_info = (struct ath12k_wmi_pdev_sscan_per_detector_info *)ptr;
+
+		       ret = ath12k_wmi_tlv_iter(ab, ptr, len,
+						 ath12k_wmi_pdev_sscan_per_detector_info_parse,
+						 parse);
+
+		       if (ret) {
+			       ath12k_warn(ab, "failed to parse detector info %d\n",
+					   ret);
+			       return ret;
+		       }
+		       parse->det_info_entry_done = true;
+	       }
+	       break;
+	case WMI_TAG_PDEV_SSCAN_CHAN_INFO:
+	       memcpy(&parse->ch_info, ptr,
+		      sizeof(struct ath12k_wmi_pdev_sscan_chan_info));
+	       parse->bin_entry_done = true;
+	       break;
+	default:
+	       break;
+	}
+	return 0;
+
+}
+
+static void
+ath12k_wmi_pdev_sscan_fw_param_event(struct ath12k_base *ab,
+				     struct sk_buff *skb)
+{
+	struct ath12k *ar;
+	struct wmi_pdev_sscan_fw_param_parse parse = { };
+	struct wmi_pdev_sscan_fw_param_event param;
+	int ret;
+	u8 pdev_idx;
+
+	ret = ath12k_wmi_tlv_iter(ab, skb->data, skb->len,
+				  ath12k_wmi_tlv_sscan_fw_parse,
+				  &parse);
+
+	if (ret) {
+		ath12k_warn(ab, "failed to parse padev sscan fw tlv %d\n", ret);
+		return;
+	}
+
+	param.fixed             = parse.fixed;
+	param.bin		= parse.bin;
+	param.ch_info		= parse.ch_info;
+	param.det_info		= parse.det_info;
+
+	pdev_idx = param.fixed.pdev_id;
+	ar = ab->pdevs[pdev_idx].ar;
+	ar->spectral.ch_width = param.ch_info.operating_bw;
+}
+
+static int
+ath12k_wmi_spectral_scan_bw_cap_parse(struct ath12k_base *soc,
+				     u16 tag, u16 len,
+				     const void *ptr, void *data)
+{
+	struct wmi_spectral_capabilities_parse *parse = data;
+	if (tag != WMI_TAG_SPECTRAL_SCAN_BW_CAPABILITIES)
+		return -EPROTO;
+	parse->num_bw_caps_entry++;
+	return 0;
+}
+
+static int
+ath12k_wmi_spectral_fft_size_cap_parse(struct ath12k_base *soc,
+				       u16 tag, u16 len,
+				       const void *ptr, void *data)
+{
+	struct wmi_spectral_capabilities_parse *parse = data;
+	if (tag != WMI_TAG_SPECTRAL_FFT_SIZE_CAPABILITIES)
+		return -EPROTO;
+
+	parse->num_fft_size_caps_entry++;
+	return 0;
+}
+
+static int
+ath12k_wmi_tlv_spectral_cap_parse(struct ath12k_base *ab,
+				  u16 tag, u16 len,
+				  const void *ptr, void *data)
+{
+	struct wmi_spectral_capabilities_parse *parse = data;
+	int ret;
+
+	if (tag == WMI_TAG_ARRAY_STRUCT) {
+		if (!parse->sscan_bw_caps_entry_done) {
+			parse->num_bw_caps_entry = 0;
+			parse->sscan_bw_caps = (struct ath12k_wmi_spectral_scan_bw_capabilities *)ptr;
+			ret = ath12k_wmi_tlv_iter(ab, ptr, len,
+					ath12k_wmi_spectral_scan_bw_cap_parse,
+					parse);
+			if (ret) {
+				ath12k_warn(ab, "failed to parse scan bw cap %d\n",
+					    ret);
+				return ret;
+			}
+			parse->sscan_bw_caps_entry_done = true;
+		} else if (!parse->fft_size_caps_entry_done) {
+			parse->num_fft_size_caps_entry = 0;
+			parse->fft_size_caps = (struct ath12k_wmi_spectral_fft_size_capabilities *)ptr;
+			ret = ath12k_wmi_tlv_iter(ab, ptr, len,
+					ath12k_wmi_spectral_fft_size_cap_parse,
+					parse);
+			if (ret) {
+				ath12k_warn(ab, "failed to parse fft size cap %d\n",
+					    ret);
+				return ret;
+			}
+			parse->fft_size_caps_entry_done = true;
+		}
+	}
+	return 0;
+}
+
+static void
+ath12k_wmi_spectral_capabilities_event(struct ath12k_base *ab,
+				       struct sk_buff *skb)
+{
+	struct wmi_spectral_capabilities_parse parse = { };
+	struct wmi_spectral_capabilities_event param;
+	struct ath12k *ar = NULL;
+	int ret, size;
+	u8 pdev_id, i;
+	struct ath12k_pdev *pdev;
+
+	ret = ath12k_wmi_tlv_iter(ab, skb->data, skb->len,
+				  ath12k_wmi_tlv_spectral_cap_parse,
+				  &parse);
+	if (ret) {
+		ath12k_warn(ab, "failed to parse spectral capabilities tlv %d\n", ret);
+		return;
+	}
+
+	param.sscan_bw_caps = parse.sscan_bw_caps;
+	param.fft_size_caps = parse.fft_size_caps;
+	param.num_bw_caps_entry = parse.num_bw_caps_entry;
+	param.num_fft_size_caps_entry = parse.num_fft_size_caps_entry;
+
+	pdev_id = param.sscan_bw_caps->pdev_id;
+
+	for (i = 0; i < ab->num_radios; i++) {
+		pdev = &ab->pdevs[i];
+		if (pdev && pdev->pdev_id == pdev_id) {
+			ar = pdev->ar;
+			break;
+		}
+	}
+
+	if (!ar) {
+		ath12k_dbg(ab, ATH12K_DBG_WMI,
+			   "ar is NULL for pdev_id %d use default spectral fft size 7",
+			   pdev_id);
+		return;
+	}
+	size = sizeof(struct ath12k_wmi_spectral_fft_size_capabilities)*
+					param.num_fft_size_caps_entry;
+
+	ar->spectral.spectral_cap.fft_size_caps = kzalloc(size, GFP_ATOMIC);
+	if (!ar->spectral.spectral_cap.fft_size_caps) {
+		ath12k_warn(ab, "Failed to allocate memory");
+		return;
+	}
+	memcpy(ar->spectral.spectral_cap.fft_size_caps,
+		param.fft_size_caps, size);
+	ar->spectral.spectral_cap.num_bw_caps_entry = param.num_bw_caps_entry;
+	ar->spectral.spectral_cap.num_fft_size_caps_entry = param.num_fft_size_caps_entry;
+}
+
 static void ath12k_wmi_tlv_op_rx(struct ath12k_base *ab, struct sk_buff *skb)
 {
 	struct wmi_cmd_hdr *cmd_hdr;
@@ -10023,6 +10265,12 @@ static void ath12k_wmi_tlv_op_rx(struct
 	case WMI_TWT_ADD_DIALOG_EVENTID:
 		ath12k_wmi_twt_add_dialog_event(ab, skb);
 		break;
+	case WMI_PDEV_SSCAN_FW_PARAM_EVENTID:
+		ath12k_wmi_pdev_sscan_fw_param_event(ab, skb);
+		break;
+	case WMI_SPECTRAL_CAPABILITIES_EVENTID:
+		ath12k_wmi_spectral_capabilities_event(ab, skb);
+		break;
 	/* add Unsupported events here */
 	case WMI_TBTTOFFSET_EXT_UPDATE_EVENTID:
 	case WMI_PEER_OPER_MODE_CHANGE_EVENTID:
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -639,6 +639,9 @@ enum wmi_tlv_event_id {
 	WMI_READY_EVENTID,
 	WMI_SERVICE_AVAILABLE_EVENTID,
 	WMI_SCAN_EVENTID = WMI_EVT_GRP_START_ID(WMI_GRP_SCAN),
+	WMI_PDEV_SSCAN_FW_PARAM_EVENTID,
+	WMI_SSCAN_EVT_MESSAGE_EVENTID,
+	WMI_SPECTRAL_CAPABILITIES_EVENTID,
 	WMI_PDEV_TPC_CONFIG_EVENTID = WMI_TLV_CMD(WMI_GRP_PDEV),
 	WMI_CHAN_INFO_EVENTID,
 	WMI_PHYERR_EVENTID,
@@ -1924,6 +1927,8 @@ enum wmi_tlv_tag {
 	WMI_TAG_MAC_PHY_CAPABILITIES_EXT = 0x36F,
 	WMI_TAG_PDEV_SRG_BSS_COLOR_BITMAP_CMD = 0x37b,
 	WMI_TAG_PDEV_SRG_PARTIAL_BSSID_BITMAP_CMD,
+	WMI_TAG_PDEV_SSCAN_FW_CMD_FIXED_PARAM = 0x37f,
+	WMI_TAG_PDEV_SSCAN_FFT_BIN_INDEX,
 	WMI_TAG_PDEV_SRG_OBSS_COLOR_ENABLE_BITMAP_CMD = 0x381,
 	WMI_TAG_PDEV_SRG_OBSS_BSSID_ENABLE_BITMAP_CMD,
 	WMI_TAG_PDEV_NON_SRG_OBSS_COLOR_ENABLE_BITMAP_CMD,
@@ -1947,6 +1952,10 @@ enum wmi_tlv_tag {
 	WMI_TAG_MLO_VDEV_START_PARAMS = 0x3D6,
 	WMI_TAG_MLO_VDEV_CREATE_PARAMS = 0x3D7,
 	WMI_TAG_PDEV_PKTLOG_DECODE_INFO = 0x414,
+	WMI_TAG_SPECTRAL_SCAN_BW_CAPABILITIES,
+	WMI_TAG_SPECTRAL_FFT_SIZE_CAPABILITIES,
+	WMI_TAG_PDEV_SSCAN_CHAN_INFO = 0X417,
+	WMI_TAG_PDEV_SSCAN_PER_DETECTOR_INFO,
 	WMI_TAG_TPC_STATS_GET_CMD = 0x38B,
 	WMI_TAG_TPC_STATS_EVENT_FIXED_PARAM,
 	WMI_TAG_TPC_STATS_CONFIG_EVENT,
@@ -2260,6 +2269,7 @@ enum wmi_peer_chwidth {
 	WMI_PEER_CHWIDTH_80MHZ = 2,
 	WMI_PEER_CHWIDTH_160MHZ = 3,
 	WMI_PEER_CHWIDTH_320MHZ = 4,
+	WMI_PEER_CHWIDTH_MAX = 9,
 };
 
 enum wmi_beacon_gen_mode {
@@ -2270,6 +2280,7 @@ enum wmi_beacon_gen_mode {
 enum wmi_direct_buffer_module {
 	WMI_DIRECT_BUF_SPECTRAL = 0,
 	WMI_DIRECT_BUF_CFR = 1,
+	WMI_CONFIG_MODULE_CV_UPLOAD = 2,
 
 	/* keep it last */
 	WMI_DIRECT_BUF_MAX
@@ -5828,6 +5839,78 @@ struct wmi_dma_buf_release_entry {
 	u32 paddr_hi;
 } __packed;
 
+struct ath12k_wmi_pdev_sscan_fw_cmd_fixed_param {
+	u32 pdev_id;
+	u32 spectral_scan_mode;
+} __packed;
+
+
+struct ath12k_wmi_pdev_sscan_fft_bin_index {
+	u32 pri80_bins;
+	u32 sec80_bins;
+	u32 mid_5mhz_bins;
+} __packed;
+
+struct ath12k_wmi_pdev_sscan_chan_info {
+	u32 operating_pri20_freq;
+	u32 operating_cfreq1;
+	u32 operating_cfreq2;
+	u32 operating_bw;
+	u32 operating_puncture_20mhz_bitmap;
+	u32 sscan_cfreq1;
+	u32 sscan_cfreq2;
+	u32 sscan_bw;
+	u32 sscan_puncture_20mhz_bitmap;
+} __packed;
+
+struct ath12k_wmi_pdev_sscan_per_detector_info {
+	__le32 tlv_header;
+	u32 detector_id;
+	u32 start_freq;
+	u32 end_freq;
+} __packed;
+
+struct ath12k_wmi_spectral_scan_bw_capabilities {
+	__le32 tlv_header;
+	u32 pdev_id;
+	u32 sscan_mode;
+	u32 operating_bw;
+	union {
+		struct {
+			u32 supports_sscan_bw_20:1,
+			    supports_sscan_bw_40:1,
+			    supports_sscan_bw_80:1,
+			    supports_sscan_bw_160:1,
+			    supports_sscan_bw_80p80:1,
+			    supports_sscan_bw_320:1,
+			    reserved:21;
+		};
+		u32 supported_flags;
+	};
+} __packed;
+
+struct ath12k_wmi_spectral_fft_size_capabilities {
+	__le32 tlv_header;
+	u32 pdev_id;
+	u32 sscan_bw;
+	union {
+		struct {
+			u32 supports_fft_size_1:1,
+			    supports_fft_size_2:1,
+			    supports_fft_size_3:1,
+			    supports_fft_size_4:1,
+			    supports_fft_size_5:1,
+			    supports_fft_size_6:1,
+			    supports_fft_size_7:1,
+			    supports_fft_size_8:1,
+			    supports_fft_size_9:1,
+			    supports_fft_size_10:1,
+			    supports_fft_size_11:1,
+			    reserved:21;
+		};
+		u32 supported_flags;
+	};
+} __packed;
 #define WMI_SPECTRAL_META_INFO1_FREQ1		GENMASK(15, 0)
 #define WMI_SPECTRAL_META_INFO1_FREQ2		GENMASK(31, 16)
 
--- a/drivers/net/wireless/ath/spectral_common.h
+++ b/drivers/net/wireless/ath/spectral_common.h
@@ -132,9 +132,10 @@ struct fft_sample_ath11k {
 
 struct fft_sample_ath12k {
 	struct fft_sample_tlv tlv;
-	u8 chan_width_mhz;
+	u16 chan_width_mhz;
 	s8 max_index;
 	u8 max_exp;
+	bool is_primary;
 	__be16 freq1;
 	__be16 freq2;
 	__be16 max_magnitude;
