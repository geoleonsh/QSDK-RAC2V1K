From bdbbf6f502a02517510c433f318a34c176d6a560 Mon Sep 17 00:00:00 2001
From: Maharaja Kennadyrajan <quic_mkenna@quicinc.com>
Date: Tue, 18 Apr 2023 23:10:32 +0530
Subject: [PATCH 3/3] ath11k: Add Rate table for peer tx stats

Add the rate table for peer tx stats which helps to
provide the number of packets transmitted in the
particular rate for success, failure, retry and ampdu
packets.
Also added the tx bytes in the rate table to get the
success, failure, retry and ampdu bytes in the
particular rate.

Output:
Rate table packets :
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       4       0       0       4
        0       0       4       0       0       0       0       0
        5       0       0       5       0       0       5       0
        0       0       0       0       5       0       0       17
        0       0       200     0       0       0       0       0
        5       0       0       12      0       0       1730    0
        0       0       0       0       38      0       0       5
        0       0       2428    0       0       0       0       0
        0       0       0       0       0       0       0       0
        0       0       0       0       0       0       0       0

Validated that total number of success packets in the rate code
table is matching with the total number of success packets in
NSS or BW or VHT MCS packets.

Signed-off-by: Maharaja Kennadyrajan <quic_mkenna@quicinc.com>
Signed-off-by: Tamizh Chelvam Raja <quic_tamizhr@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/core.h        |  2 ++
 drivers/net/wireless/ath/ath11k/debugfs_sta.c | 36 +++++++++++++++++--
 drivers/net/wireless/ath/ath11k/mac.c         |  6 ++--
 3 files changed, 40 insertions(+), 4 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -63,6 +63,7 @@ extern struct mutex dev_init_lock;
 #define ATH11K_CONNECTION_LOSS_HZ	(3 * HZ)
 #define ATH11K_RX_RATE_TABLE_NUM 320
 #define ATH11K_RX_RATE_TABLE_11AX_NUM 576
+#define ATH11K_TX_RATE_TABLE_11AX_NUM 576
 
 #define QCN6122_USERPD_0               1
 #define QCN6122_USERPD_1               2
@@ -611,6 +612,7 @@ struct ath11k_htt_data_stats {
 	u64 gi[ATH11K_COUNTER_TYPE_MAX][ATH11K_GI_NUM];
 	u64 transmit_type[ATH11K_COUNTER_TYPE_MAX][HAL_RX_RECEPTION_TYPE_MAX];
 	u64 ru_loc[ATH11K_COUNTER_TYPE_MAX][HAL_RX_RU_ALLOC_TYPE_MAX];
+	u64 rate_table[ATH11K_COUNTER_TYPE_MAX][ATH11K_TX_RATE_TABLE_11AX_NUM];
 };
 
 struct ath11k_wbm_tx_stats {
--- a/drivers/net/wireless/ath/ath11k/debugfs_sta.c
+++ b/drivers/net/wireless/ath/ath11k/debugfs_sta.c
@@ -45,7 +45,8 @@ void ath11k_debugfs_sta_add_tx_stats(str
 {
 	struct rate_info *txrate = &arsta->txrate;
 	struct ath11k_htt_tx_stats *tx_stats;
-	int gi, mcs, bw, nss, ru_type, ppdu_type;
+	int gi, mcs, bw, nss, ru_type, ppdu_type, idx;
+	u8 he_gi;
 
 	if (!arsta->tx_stats)
 		return;
@@ -56,6 +57,10 @@ void ath11k_debugfs_sta_add_tx_stats(str
 	bw = ath11k_mac_mac80211_bw_to_ath11k_bw(txrate->bw);
 	nss = txrate->nss - 1;
 
+	he_gi = ath11k_he_gi_to_nl80211_he_gi(gi);
+	idx = mcs * 12 + 12 * 12 * nss;
+	idx += bw * 3 + he_gi;
+
 #define STATS_OP_FMT(name) tx_stats->stats[ATH11K_STATS_TYPE_##name]
 
 	if (txrate->flags & RATE_INFO_FLAGS_HE_MCS) {
@@ -152,12 +157,16 @@ void ath11k_debugfs_sta_add_tx_stats(str
 			peer_stats->succ_bytes + peer_stats->retry_bytes;
 		STATS_OP_FMT(AMPDU).gi[0][gi] +=
 			peer_stats->succ_bytes + peer_stats->retry_bytes;
+		STATS_OP_FMT(AMPDU).rate_table[0][idx] +=
+			peer_stats->succ_bytes + peer_stats->retry_bytes;
 		STATS_OP_FMT(AMPDU).bw[1][bw] +=
 			peer_stats->succ_pkts + peer_stats->retry_pkts;
 		STATS_OP_FMT(AMPDU).nss[1][nss] +=
 			peer_stats->succ_pkts + peer_stats->retry_pkts;
 		STATS_OP_FMT(AMPDU).gi[1][gi] +=
 			peer_stats->succ_pkts + peer_stats->retry_pkts;
+		STATS_OP_FMT(AMPDU).rate_table[1][idx] +=
+			peer_stats->succ_pkts + peer_stats->retry_pkts;
 	} else {
 		tx_stats->ack_fails += peer_stats->ba_fails;
 	}
@@ -186,6 +195,15 @@ void ath11k_debugfs_sta_add_tx_stats(str
 	STATS_OP_FMT(RETRY).nss[1][nss] += peer_stats->retry_pkts;
 	STATS_OP_FMT(RETRY).gi[1][gi] += peer_stats->retry_pkts;
 
+	if (txrate->flags >= RATE_INFO_FLAGS_MCS) {
+		STATS_OP_FMT(SUCC).rate_table[0][idx] += peer_stats->succ_bytes;
+		STATS_OP_FMT(SUCC).rate_table[1][idx] += peer_stats->succ_pkts;
+		STATS_OP_FMT(FAIL).rate_table[0][idx] += peer_stats->failed_bytes;
+		STATS_OP_FMT(FAIL).rate_table[1][idx] += peer_stats->failed_pkts;
+		STATS_OP_FMT(RETRY).rate_table[0][idx] += peer_stats->retry_bytes;
+		STATS_OP_FMT(RETRY).rate_table[1][idx] += peer_stats->retry_pkts;
+	}
+
 	tx_stats->tx_duration += peer_stats->duration;
 
 	tx_stats->ru_start = peer_stats->ru_start;
@@ -206,6 +224,8 @@ void ath11k_debugfs_sta_update_txcompl(s
 	ath11k_dp_tx_update_txcompl(ar, ts);
 }
 
+#define STR_PKTS_BYTES  ((strstr(str[j], "packets")) ? "packets" : "bytes")
+
 static ssize_t ath11k_dbg_sta_dump_tx_stats(struct file *file,
 					    char __user *user_buf,
 					    size_t count, loff_t *ppos)
@@ -218,7 +238,7 @@ static ssize_t ath11k_dbg_sta_dump_tx_st
 							      "retry", "ampdu"};
 	static const char *str[ATH11K_COUNTER_TYPE_MAX] = {"bytes", "packets"};
 	int len = 0, i, j, k, retval = 0;
-	const int size = 2 * 4096;
+	const int size = 16 * 4096;
 	char *buf, mu_group_id[MAX_MU_GROUP_LENGTH] = {0};
 	u32 index;
 	char *fields[] = {[HAL_WBM_REL_HTT_TX_COMP_STATUS_OK] = "Acked pkt count",
@@ -297,6 +317,18 @@ static ssize_t ath11k_dbg_sta_dump_tx_st
 				len += scnprintf(buf + len, size - len, "%llu ",
 						 stats->legacy[j][i]);
 
+			len += scnprintf(buf + len, size - len,
+					 "\nRate table %s :\n",
+					 STR_PKTS_BYTES);
+			for (i = 0; i < ATH11K_TX_RATE_TABLE_11AX_NUM; i++) {
+				len += scnprintf(buf + len, size - len,
+						 "\t%llu",
+						 stats->rate_table[j][i]);
+				if (!((i + 1) % 8))
+					len +=
+					scnprintf(buf + len, size - len, "\n");
+			}
+			len += scnprintf(buf + len, size - len, "\n");
 			len += scnprintf(buf + len, size - len, "\n ru %s: \n", str[j]);
 			len += scnprintf(buf + len, size - len,
 					 "\tru 26: %llu\n", stats->ru_loc[j][0]);
