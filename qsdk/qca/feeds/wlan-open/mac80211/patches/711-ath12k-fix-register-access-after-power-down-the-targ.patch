From c81714b45e1ad026b4cd1765c78bc164a7be5ad2 Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Fri, 3 Feb 2023 12:04:08 +0530
Subject: [PATCH] ath12k: fix register access after power down the target

During rmmod, REO QUEUE LUT base address is reset to 0 after
target power down which is invalid access.

Fix it by reset the REO QUEUE LUT address before target power
down.

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c | 21 +++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/dp.c   |  2 --
 2 files changed, 21 insertions(+), 2 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index 7a9993d..036b1bb 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -1724,6 +1724,8 @@ static void ath12k_core_hw_group_destroy(struct ath12k_hw_group *ag)
 static void ath12k_core_hw_group_stop(struct ath12k_hw_group *ag)
 {
 	struct ath12k_base *ab;
+	struct ath12k_dp *dp;
+	u32 address;
 	int i;
 
 	lockdep_assert_held(&ag->mutex_lock);
@@ -1761,9 +1763,28 @@ static void ath12k_core_hw_group_stop(struct ath12k_hw_group *ag)
 
 	for (i = ag->num_chip - 1; i >= 0; i--) {
 		ab = ag->ab[i];
+		dp = &ab->dp;
 
 		mutex_lock(&ab->core_lock);
 
+		if (!ab->hw_params->reoq_lut_support)
+			break;
+
+		if (!dp->reoq_lut.vaddr)
+			break;
+
+		if (dp->reoq_lut.vaddr) {
+			address = HAL_SEQ_WCSS_UMAC_REO_REG +\
+				  HAL_REO1_QDESC_LUT_BASE0(ab);
+			ath12k_hif_write32(ab, address, 0);
+		}
+
+		if (dp->ml_reoq_lut.vaddr) {
+			address = HAL_SEQ_WCSS_UMAC_REO_REG +\
+				  HAL_REO1_QDESC_LUT_BASE1(ab);
+			ath12k_hif_write32(ab, address, 0);
+		}
+
 		ath12k_hif_power_down(ab);
 
 		mutex_unlock(&ab->core_lock);
diff --git a/drivers/net/wireless/ath/ath12k/dp.c b/drivers/net/wireless/ath/ath12k/dp.c
index 05169dd..ba3ebda 100644
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -1263,14 +1263,12 @@ static void ath12k_dp_reoq_lut_cleanup(struct ath12k_base *ab)
 		return;
 
 	if (dp->reoq_lut.vaddr) {
-		ath12k_hif_write32(ab, HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO1_QDESC_LUT_BASE0(ab), 0);
 		dma_free_coherent(ab->dev, DP_REOQ_LUT_SIZE,
 				  dp->reoq_lut.vaddr, dp->reoq_lut.paddr);
 		dp->reoq_lut.vaddr = NULL;
 	}
 
 	if (dp->ml_reoq_lut.vaddr) {
-		ath12k_hif_write32(ab, HAL_SEQ_WCSS_UMAC_REO_REG + HAL_REO1_QDESC_LUT_BASE1(ab), 0);
 		dma_free_coherent(ab->dev, DP_REOQ_LUT_SIZE,
 				  dp->ml_reoq_lut.vaddr, dp->ml_reoq_lut.paddr);
 		dp->ml_reoq_lut.vaddr = NULL;
-- 
2.17.1

