From 7dab5ec52c6f450e37cca5306e9ca222a2a4b3a7 Mon Sep 17 00:00:00 2001
From: Rajat Soni <quic_rajson@quicinc.com>
Date: Tue, 27 Dec 2022 12:11:09 +0530
Subject: [PATCH] ath12k: Add support for new htt_stats

ATH12K_DBG_HTT_EXT_RX_RING_STATS
ATH12K_DBG_HTT_STRM_GEN_MPDUS_STATS
ATH12K_DBG_HTT_STRM_GEN_MPDUS_DETAILS_STATS
ATH12K_DBG_HTT_DBG_SOC_ERROR_STATS

Signed-off-by: Rajat Soni <quic_rajson@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debugfs.h     |   4 +
 .../wireless/ath/ath12k/debugfs_htt_stats.c   | 482 +++++++++++++++++-
 .../wireless/ath/ath12k/debugfs_htt_stats.h   | 104 +++-
 3 files changed, 588 insertions(+), 2 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/debugfs.h b/drivers/net/wireless/ath/ath12k/debugfs.h
index da4083a..f002387 100644
--- a/drivers/net/wireless/ath/ath12k/debugfs.h
+++ b/drivers/net/wireless/ath/ath12k/debugfs.h
@@ -58,6 +58,10 @@ enum ath12k_dbg_htt_ext_stats_type {
 	ATH12K_DBG_HTT_EXT_VDEV_RTT_INITIATOR_STATS	    =  39,
 	ATH12K_DBG_HTT_EXT_PDEV_PER_STATS		    =  40,
 	ATH12K_DBG_HTT_EXT_AST_ENTRIES			    =  41,
+	ATH12K_DBG_HTT_EXT_RX_RING_STATS		    =  42,
+	ATH12K_DBG_HTT_STRM_GEN_MPDUS_STATS		    =  43,
+	ATH12K_DBG_HTT_STRM_GEN_MPDUS_DETAILS_STATS	    =  44,
+	ATH12K_DBG_HTT_DBG_SOC_ERROR_STATS		    =  45,
 
 	/* keep this last */
 	ATH12K_DBG_HTT_NUM_EXT_STATS,
diff --git a/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.c b/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.c
index 726f021..2cf6689 100644
--- a/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.c
@@ -5737,6 +5737,466 @@ htt_print_txbf_ofdma_ax_steer_stats_tlv(const void *tag_buf,
 	stats_req->buf_len = len;
 }
 
+static inline void
+htt_print_txbf_ofdma_be_ndpa_stats_tlv(const void *tag_buf,
+				       struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_txbf_ofdma_be_ndpa_stats_tlv *htt_stats_buf = tag_buf;
+	u8 *buf = stats_req->buf;
+	u32 len = stats_req->buf_len;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	int i, null_output;
+	u32 num_elements = htt_stats_buf->num_elems_be_ndpa_arr;
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "HTT_TXBF_OFDMA_BE_NDPA_STATS_TLV:\n");
+
+	null_output = 1;
+	for (i = 0; i < num_elements; i++) {
+		if (htt_stats_buf->be_ndpa[i].be_ofdma_ndpa_queued) {
+			null_output = 0;
+			len += scnprintf(buf + len, buf_len - len,
+				" %u:%u,", i + 1,
+				htt_stats_buf->be_ndpa[i].be_ofdma_ndpa_queued);
+		}
+	}
+	if (null_output) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_ofdma_ndpa_queued = %s\n", "NONE");
+	}
+
+	null_output = 1;
+
+	for (i = 0; i < num_elements; i++) {
+		if (htt_stats_buf->be_ndpa[i].be_ofdma_ndpa_tried) {
+			null_output = 0;
+			len += scnprintf(buf + len, buf_len - len,
+				" %u:%u,", i + 1,
+				htt_stats_buf->be_ndpa[i].be_ofdma_ndpa_tried);
+		}
+	}
+	if (null_output) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_ofdma_ndpa_tried = %s\n", "NONE");
+	}
+
+	null_output = 1;
+
+	for (i = 0; i < num_elements; i++) {
+		if (htt_stats_buf->be_ndpa[i].be_ofdma_ndpa_flushed) {
+			null_output = 0;
+			len += scnprintf(buf + len, buf_len - len,
+				" %u:%u,", i + 1,
+				htt_stats_buf->be_ndpa[i].be_ofdma_ndpa_flushed);
+		}
+	}
+	if (null_output) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_ofdma_ndpa_flushed = %s\n", "NONE");
+	}
+
+	null_output = 1;
+
+	for (i = 0; i < num_elements; i++) {
+		if (htt_stats_buf->be_ndpa[i].be_ofdma_ndpa_err) {
+			null_output = 0;
+			len += scnprintf(buf + len, buf_len - len,
+				" %u:%u,", i + 1,
+				htt_stats_buf->be_ndpa[i].be_ofdma_ndpa_err);
+		}
+	}
+	if (null_output) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_ofdma_ndpa_err = %s\n", "NONE");
+	}
+
+	stats_req->buf_len = len;
+}
+
+static inline void
+htt_print_txbf_ofdma_be_ndp_stats_tlv(const void *tag_buf,
+				      struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_txbf_ofdma_be_ndp_stats_tlv *htt_stats_buf = tag_buf;
+	u8 *buf = stats_req->buf;
+	u32 len = stats_req->buf_len;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	int i, null_output;
+
+	u32 num_elements = htt_stats_buf->num_elems_be_ndp_arr;
+
+	len += scnprintf(buf + len, buf_len - len, "HTT_TXBF_OFDMA_BE_NDP_STATS_TLV:\n");
+	null_output = 1;
+	for (i = 0; i < num_elements; i++) {
+		if (htt_stats_buf->be_ndp[i].be_ofdma_ndp_queued) {
+			null_output = 0;
+			len += scnprintf(buf + len, buf_len - len,
+				" %u:%u,", i + 1,
+				htt_stats_buf->be_ndp[i].be_ofdma_ndp_queued);
+		}
+	}
+	if (null_output) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_ofdma_ndp_queued = %s\n", "NONE");
+	}
+
+	null_output = 1;
+	for (i = 0; i < num_elements; i++) {
+		if (htt_stats_buf->be_ndp[i].be_ofdma_ndp_flushed) {
+			null_output = 0;
+			len += scnprintf(buf + len, buf_len - len,
+				" %u:%u,", i + 1,
+				htt_stats_buf->be_ndp[i].be_ofdma_ndp_flushed);
+		}
+	}
+	if (null_output) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_ofdma_ndp_flushed = %s\n", "NONE");
+	}
+
+	null_output = 1;
+	for (i = 0; i < num_elements; i++) {
+		if (htt_stats_buf->be_ndp[i].be_ofdma_ndp_err) {
+			null_output = 0;
+			len += scnprintf(buf + len, buf_len - len,
+				" %u:%u,", i + 1,
+				htt_stats_buf->be_ndp[i].be_ofdma_ndp_err);
+		}
+	}
+	if (null_output) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_ofdma_ndp_err = %s\n", "NONE");
+	}
+	stats_req->buf_len = len;
+}
+
+static inline void
+htt_print_txbf_ofdma_be_brp_stats_tlv(const void *tag_buf,
+				      struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_txbf_ofdma_be_brp_stats_tlv *htt_stats_buf = tag_buf;
+	u8 *buf = stats_req->buf;
+	u32 len = stats_req->buf_len;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	int i, null_output;
+
+	u32 num_elements = htt_stats_buf->num_elems_be_brp_arr;
+
+	len += scnprintf(buf + len, buf_len - len, "HTT_TXBF_OFDMA_BE_BRP_STATS_TLV:\n");
+	null_output = 1;
+	for (i = 0; i < num_elements; i++) {
+		if (htt_stats_buf->be_brp[i].be_ofdma_brpoll_queued) {
+			null_output = 0;
+			len += scnprintf(buf + len, buf_len - len,
+				" %u:%u,", i + 1,
+				htt_stats_buf->be_brp[i].be_ofdma_brpoll_queued);
+		}
+	}
+	if (null_output) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_ofdma_brpoll_queued = %s\n", "NONE");
+	}
+
+	null_output = 1;
+	for (i = 0; i < num_elements; i++) {
+		if (htt_stats_buf->be_brp[i].be_ofdma_brpoll_tried) {
+			null_output = 0;
+			len += scnprintf(buf + len, buf_len - len,
+				" %u:%u,", i + 1,
+				htt_stats_buf->be_brp[i].be_ofdma_brpoll_tried);
+		}
+	}
+	if (null_output) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_ofdma_brpoll_tried = %s\n", "NONE");
+	}
+
+	null_output = 1;
+	for (i = 0; i < num_elements; i++) {
+		if (htt_stats_buf->be_brp[i].be_ofdma_brpoll_flushed) {
+			null_output = 0;
+			len += scnprintf(buf + len, buf_len - len,
+				" %u:%u,", i + 1,
+				htt_stats_buf->be_brp[i].be_ofdma_brpoll_flushed);
+		}
+	}
+	if (null_output) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_ofdma_brpoll_flushed = %s\n", "NONE");
+	}
+
+	null_output = 1;
+	for (i = 0; i < num_elements; i++) {
+		if (htt_stats_buf->be_brp[i].be_ofdma_brp_err) {
+			null_output = 0;
+			len += scnprintf(buf + len, buf_len - len,
+				" %u:%u,", i + 1,
+				htt_stats_buf->be_brp[i].be_ofdma_brp_err);
+		}
+	}
+	if (null_output) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_ofdma_brp_err = %s\n", "NONE");
+	}
+	null_output = 1;
+	for (i = 0; i < num_elements; i++) {
+		if (htt_stats_buf->be_brp[i].be_ofdma_brp_err_num_cbf_rcvd) {
+			null_output = 0;
+			len += scnprintf(buf + len, buf_len - len,
+				" %u:%u,", i + 1,
+				htt_stats_buf->be_brp[i].be_ofdma_brp_err_num_cbf_rcvd);
+		}
+	}
+	if (null_output) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_ofdma_brp_err_num_cbf_rcvd = %s\n", "NONE");
+	}
+	stats_req->buf_len = len;
+}
+
+static inline void
+htt_print_txbf_ofdma_be_steer_stats_tlv(const void *tag_buf,
+					struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_txbf_ofdma_be_steer_stats_tlv *htt_stats_buf = tag_buf;
+	u8 *buf = stats_req->buf;
+	u32 len = stats_req->buf_len;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	int i, null_output;
+
+	u32 num_elements = htt_stats_buf->num_elems_be_steer_arr;
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "HTT_TXBF_OFDMA_BE_STEER_STATS_TLV:\n");
+
+	null_output = 1;
+	for (i = 0; i < num_elements; i++) {
+		if (htt_stats_buf->be_steer[i].be_ofdma_num_ppdu_steer) {
+			null_output = 0;
+			len += scnprintf(buf + len, buf_len - len,
+				" %u:%u,", i + 1,
+				htt_stats_buf->be_steer[i].be_ofdma_num_ppdu_steer);
+		}
+	}
+	if (null_output) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_ofdma_num_ppdu_steer = %s\n", "NONE");
+	}
+
+	null_output = 1;
+	for (i = 0; i < num_elements; i++) {
+		if (htt_stats_buf->be_steer[i].be_ofdma_num_ppdu_ol) {
+			null_output = 0;
+			len += scnprintf(buf + len, buf_len - len,
+				" %u:%u,", i + 1,
+				htt_stats_buf->be_steer[i].be_ofdma_num_ppdu_ol);
+		}
+	}
+	if (null_output) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_ofdma_num_ppdu_ol = %s\n", "NONE");
+	}
+
+	null_output = 1;
+	for (i = 0; i < num_elements; i++) {
+		if (htt_stats_buf->be_steer[i].be_ofdma_num_usrs_prefetch) {
+			null_output = 0;
+			len += scnprintf(buf + len, buf_len - len,
+				" %u:%u,", i + 1,
+				htt_stats_buf->be_steer[i].be_ofdma_num_usrs_prefetch);
+		}
+	}
+	if (null_output) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_ofdma_num_usrs_prefetch = %s\n", "NONE");
+	}
+
+	null_output = 1;
+	for (i = 0; i < num_elements; i++) {
+		if (htt_stats_buf->be_steer[i].be_ofdma_num_usrs_sound) {
+			null_output = 0;
+			len += scnprintf(buf + len, buf_len - len,
+				" %u:%u,", i + 1,
+				htt_stats_buf->be_steer[i].be_ofdma_num_usrs_sound);
+		}
+	}
+	if (null_output) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_ofdma_num_usrs_sound = %s\n", "NONE");
+	}
+
+	null_output = 1;
+	for (i = 0; i < num_elements; i++) {
+		if (htt_stats_buf->be_steer[i].be_ofdma_num_usrs_force_sound) {
+			null_output = 0;
+			len += scnprintf(buf + len, buf_len - len,
+				" %u:%u,", i + 1,
+				htt_stats_buf->be_steer[i].be_ofdma_num_usrs_force_sound);
+		}
+	}
+	if (null_output) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "be_ofdma_num_usrs_force_sound = %s\n", "NONE");
+	}
+
+	stats_req->buf_len = len;
+}
+
+static inline void
+htt_print_dmac_reset_stats_tlv(const void *tag_buf,
+			       struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_dmac_reset_stats_tlv *htt_stats_buf = tag_buf;
+	u8 *buf = stats_req->buf;
+	u32 len = stats_req->buf_len;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+
+	len += scnprintf(buf + len, buf_len - len, "HTT_DMAC_RESET_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len, "reset_count = %u\n",
+			 htt_stats_buf->reset_count);
+	len += scnprintf(buf + len, buf_len - len, "reset_time_hi_ms = 0x%x\n",
+			 htt_stats_buf->reset_time_hi_ms);
+	len += scnprintf(buf + len, buf_len - len, "reset_time_lo_ms = 0x%x\n",
+			 htt_stats_buf->reset_time_lo_ms);
+	len += scnprintf(buf + len, buf_len - len, "disengage_time_hi_ms = 0x%x\n",
+			 htt_stats_buf->disengage_time_hi_ms);
+	len += scnprintf(buf + len, buf_len - len, "disengage_time_lo_ms = 0x%x\n",
+			 htt_stats_buf->disengage_time_lo_ms);
+	len += scnprintf(buf + len, buf_len - len, "engage_time_hi_ms = 0x%x\n",
+			 htt_stats_buf->engage_time_hi_ms);
+	len += scnprintf(buf + len, buf_len - len, "engage_time_lo_ms = 0x%x\n",
+			 htt_stats_buf->engage_time_lo_ms);
+	len += scnprintf(buf + len, buf_len - len, "disengage_count = %u\n",
+			 htt_stats_buf->disengage_count);
+	len += scnprintf(buf + len, buf_len - len, "drain_dest_ring_mask = %u\n",
+			 htt_stats_buf->drain_dest_ring_mask);
+	stats_req->buf_len = len;
+}
+
+static inline void
+htt_print_be_ul_ofdma_user_stats(const void *tag_buf,
+				 struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_rx_pdev_be_ul_ofdma_user_stats_tlv *htt_ul_user_stats_buf = tag_buf;
+	u8 *buf = stats_req->buf;
+	u32 len = stats_req->buf_len;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+
+	if (htt_ul_user_stats_buf->user_index == 0) {
+		len += scnprintf(buf + len, buf_len - len,
+				"HTT_RX_PDEV_BE_UL_OFDMA_USER_STAS_TLV\n");
+	}
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_rx_ulofdma_non_data_ppdu_%u = %u\n",
+			 htt_ul_user_stats_buf->user_index,
+			 htt_ul_user_stats_buf->be_rx_ulofdma_non_data_ppdu);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_rx_ulofdma_data_ppdu_%u = %u\n",
+			 htt_ul_user_stats_buf->user_index,
+			 htt_ul_user_stats_buf->be_rx_ulofdma_data_ppdu);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_rx_ulofdma_mpdu_ok_%u = %u\n",
+			 htt_ul_user_stats_buf->user_index,
+			 htt_ul_user_stats_buf->be_rx_ulofdma_mpdu_ok);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_rx_ulofdma_mpdu_fail_%u = %u\n",
+			 htt_ul_user_stats_buf->user_index,
+			 htt_ul_user_stats_buf->be_rx_ulofdma_mpdu_fail);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_rx_ulofdma_non_data_nusers_%u = %u\n",
+			 htt_ul_user_stats_buf->user_index,
+			 htt_ul_user_stats_buf->be_rx_ulofdma_non_data_nusers);
+	len += scnprintf(buf + len, buf_len - len,
+			 "be_rx_ulofdma_data_nusers_%u = %u\n",
+			 htt_ul_user_stats_buf->user_index,
+			 htt_ul_user_stats_buf->be_rx_ulofdma_data_nusers);
+
+	stats_req->buf_len = len;
+}
+
+static inline void
+htt_print_phy_tpc_stats_tlv(const void *tag_buf,
+			    struct debug_htt_stats_req *stats_req)
+{
+	const struct htt_phy_tpc_stats_tlv *htt_stats_phy_tpc_stats_buf = tag_buf;
+	u8 *buf = stats_req->buf;
+	u32 len = stats_req->buf_len;
+	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
+	int i;
+
+	len += scnprintf(buf + len, buf_len - len, "HTT_PHY_TPC_STATS_TLV:\n");
+	len += scnprintf(buf + len, buf_len - len,
+			 "tpc_stats : pdev_id = %u\n",
+			 htt_stats_phy_tpc_stats_buf->pdev_id);
+	len += scnprintf(buf + len, buf_len - len,
+			 "tpc_stats : tx_power_scale = %u\n",
+			 htt_stats_phy_tpc_stats_buf->tx_power_scale);
+	len += scnprintf(buf + len, buf_len - len,
+			 "tpc_stats : tx_power_scale_db = %u\n",
+			 htt_stats_phy_tpc_stats_buf->tx_power_scale_db);
+	len += scnprintf(buf + len, buf_len - len,
+			 "tpc_stats : min_negative_tx_power = %d\n",
+			 htt_stats_phy_tpc_stats_buf->min_negative_tx_power);
+	len += scnprintf(buf + len, buf_len - len,
+			 "tpc_stats : reg_ctl_domain = %u\n",
+			 htt_stats_phy_tpc_stats_buf->reg_ctl_domain);
+	len += scnprintf(buf + len, buf_len - len,
+			 "tpc_stats : twice_max_rd_power = %u\n",
+			 htt_stats_phy_tpc_stats_buf->twice_max_rd_power);
+	len += scnprintf(buf + len, buf_len - len,
+			 "tpc_stats : max_tx_power = %u\n",
+			 htt_stats_phy_tpc_stats_buf->max_tx_power);
+	len += scnprintf(buf + len, buf_len - len,
+			 "tpc_stats : home_max_tx_power = %u\n",
+			 htt_stats_phy_tpc_stats_buf->home_max_tx_power);
+	len += scnprintf(buf + len, buf_len - len,
+			 "tpc_stats : psd_power = %d\n",
+			 htt_stats_phy_tpc_stats_buf->psd_power);
+	len += scnprintf(buf + len, buf_len - len,
+			 "tpc_stats : eirp_power = %u\n",
+			 htt_stats_phy_tpc_stats_buf->eirp_power);
+	len += scnprintf(buf + len, buf_len - len,
+			 "tpc_stats : power_type_6ghz = %u\n",
+			 htt_stats_phy_tpc_stats_buf->power_type_6ghz);
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "tpc_stats : max_reg_allowed_power\n");
+	for (i = 0; i < HTT_STATS_MAX_CHAINS; i++) {
+		len += scnprintf(buf + len, buf_len - len,
+				 " %u:%d,", i,
+				 htt_stats_phy_tpc_stats_buf->max_reg_allowed_power[i]);
+	}
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "tpc_stats : max_reg_allowed_power_6g\n");
+	for (i = 0; i < HTT_STATS_MAX_CHAINS; i++) {
+		len += scnprintf(buf + len, buf_len - len,
+				 " %u:%d,", i,
+				 htt_stats_phy_tpc_stats_buf->max_reg_allowed_power_6g[i]);
+	}
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "tpc_stats : sub_band_cfreq\n");
+	for (i = 0; i < HTT_MAX_CH_PWR_INFO_SIZE; i++) {
+		len += scnprintf(buf + len, buf_len - len,
+				 " %u:%u,", i,
+				 htt_stats_phy_tpc_stats_buf->sub_band_cfreq[i]);
+	}
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "tpc_stats : sub_band_txpower\n");
+	for (i = 0; i < HTT_MAX_CH_PWR_INFO_SIZE; i++) {
+		len += scnprintf(buf + len, buf_len - len,
+				 " %u:%u,", i,
+				 htt_stats_phy_tpc_stats_buf->sub_band_txpower[i]);
+	}
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "\n=========================================== \n");
+	stats_req->buf_len = len;
+}
+
 static inline void htt_print_phy_counters_tlv(const void *tag_buf,
 					      struct debug_htt_stats_req *stats_req)
 {
@@ -6984,7 +7444,27 @@ static int ath12k_dbg_htt_ext_stats_parse(struct ath12k_base *ab,
 	case HTT_STATS_TXBF_OFDMA_AX_STEER_STATS_TAG:
 		htt_print_txbf_ofdma_ax_steer_stats_tlv(tag_buf, stats_req);
 		break;
-
+	case HTT_STATS_TXBF_OFDMA_BE_NDPA_STATS_TAG:
+		htt_print_txbf_ofdma_be_ndpa_stats_tlv(tag_buf, stats_req);
+		break;
+	case HTT_STATS_TXBF_OFDMA_BE_NDP_STATS_TAG:
+		htt_print_txbf_ofdma_be_ndp_stats_tlv(tag_buf, stats_req);
+		break;
+	case HTT_STATS_TXBF_OFDMA_BE_BRP_STATS_TAG:
+		htt_print_txbf_ofdma_be_brp_stats_tlv(tag_buf, stats_req);
+		break;
+	case HTT_STATS_TXBF_OFDMA_BE_STEER_STATS_TAG:
+		htt_print_txbf_ofdma_be_steer_stats_tlv(tag_buf, stats_req);
+		break;
+	case HTT_STATS_DMAC_RESET_STATS_TAG:
+		htt_print_dmac_reset_stats_tlv(tag_buf, stats_req);
+		break;
+	case HTT_STATS_RX_PDEV_BE_UL_OFDMA_USER_STATS_TAG:
+		htt_print_be_ul_ofdma_user_stats(tag_buf, stats_req);
+		break;
+	case HTT_STATS_PHY_TPC_STATS_TAG:
+		htt_print_phy_tpc_stats_tlv(tag_buf, stats_req);
+		break;
 	default:
 		break;
 	}
diff --git a/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.h b/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.h
index 5ebc892..c6bc306 100644
--- a/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.h
+++ b/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.h
@@ -162,7 +162,13 @@ enum htt_tlv_tag_t {
 	HTT_STATS_TXBF_OFDMA_AX_NDP_STATS_TAG		    = 148,
 	HTT_STATS_TXBF_OFDMA_AX_BRP_STATS_TAG		    = 149,
 	HTT_STATS_TXBF_OFDMA_AX_STEER_STATS_TAG		    = 150,
-
+	HTT_STATS_TXBF_OFDMA_BE_NDPA_STATS_TAG		    = 151,
+	HTT_STATS_TXBF_OFDMA_BE_NDP_STATS_TAG		    = 152,
+	HTT_STATS_TXBF_OFDMA_BE_BRP_STATS_TAG		    = 153,
+	HTT_STATS_TXBF_OFDMA_BE_STEER_STATS_TAG		    = 154,
+	HTT_STATS_DMAC_RESET_STATS_TAG			    = 155,
+	HTT_STATS_RX_PDEV_BE_UL_OFDMA_USER_STATS_TAG	    = 156,
+	HTT_STATS_PHY_TPC_STATS_TAG			    = 157,
 	HTT_STATS_MAX_TAG,
 };
 
@@ -2739,11 +2745,107 @@ struct htt_txbf_ofdma_ax_steer_stats_tlv {
 	struct htt_txbf_ofdma_ax_steer_stats_elem_t ax_steer[1];
 };
 
+struct htt_txbf_ofdma_be_ndpa_stats_elem_t {
+	u32 be_ofdma_ndpa_queued;
+	u32 be_ofdma_ndpa_tried;
+	u32 be_ofdma_ndpa_flushed;
+	u32 be_ofdma_ndpa_err;
+};
+
+struct htt_txbf_ofdma_be_ndpa_stats_tlv {
+	u32 num_elems_be_ndpa_arr;
+	u32 arr_elem_size_be_ndpa;
+	struct htt_txbf_ofdma_be_ndpa_stats_elem_t be_ndpa[1];
+};
+
+struct htt_txbf_ofdma_be_ndp_stats_elem_t {
+	u32 be_ofdma_ndp_queued;
+	u32 be_ofdma_ndp_tried;
+	u32 be_ofdma_ndp_flushed;
+	u32 be_ofdma_ndp_err;
+};
+
+struct htt_txbf_ofdma_be_ndp_stats_tlv {
+	u32 num_elems_be_ndp_arr;
+	u32 arr_elem_size_be_ndp;
+	struct htt_txbf_ofdma_be_ndp_stats_elem_t be_ndp[1];
+};
+
+struct htt_txbf_ofdma_be_brp_stats_elem_t {
+	u32 be_ofdma_brpoll_queued;
+	u32 be_ofdma_brpoll_tried;
+	u32 be_ofdma_brpoll_flushed;
+	u32 be_ofdma_brp_err;
+	u32 be_ofdma_brp_err_num_cbf_rcvd;
+};
+
+struct htt_txbf_ofdma_be_brp_stats_tlv {
+	u32 num_elems_be_brp_arr;
+	u32 arr_elem_size_be_brp;
+	struct htt_txbf_ofdma_be_brp_stats_elem_t be_brp[1];
+};
+
+struct htt_txbf_ofdma_be_steer_stats_elem_t {
+	u32 be_ofdma_num_ppdu_steer;
+	u32 be_ofdma_num_ppdu_ol;
+	u32 be_ofdma_num_usrs_prefetch;
+	u32 be_ofdma_num_usrs_sound;
+	u32 be_ofdma_num_usrs_force_sound;
+};
+
+struct htt_txbf_ofdma_be_steer_stats_tlv {
+	u32 num_elems_be_steer_arr;
+	u32 arr_elem_size_be_steer;
+	struct htt_txbf_ofdma_be_steer_stats_elem_t be_steer[1];
+};
+
+struct htt_dmac_reset_stats_tlv {
+	u32 reset_count;
+	u32 reset_time_lo_ms;
+	u32 reset_time_hi_ms;
+	u32 disengage_time_lo_ms;
+	u32 disengage_time_hi_ms;
+	u32 engage_time_lo_ms;
+	u32 engage_time_hi_ms;
+	u32 disengage_count;
+	u32 engage_count;
+	u32 drain_dest_ring_mask;
+};
+
+struct htt_rx_pdev_be_ul_ofdma_user_stats_tlv {
+	u32 user_index;
+	u32 be_rx_ulofdma_non_data_ppdu;
+	u32 be_rx_ulofdma_data_ppdu;
+	u32 be_rx_ulofdma_mpdu_ok;
+	u32 be_rx_ulofdma_mpdu_fail;
+	u32 be_rx_ulofdma_non_data_nusers;
+	u32 be_rx_ulofdma_data_nusers;
+};
+
 #define HTT_MAX_RX_PKT_CNT 8
 #define HTT_MAX_RX_PKT_CRC_PASS_CNT 8
 #define HTT_MAX_PER_BLK_ERR_CNT 20
 #define HTT_MAX_RX_OTA_ERR_CNT 14
 #define HTT_STATS_MAX_CHAINS 8
+#define HTT_MAX_CH_PWR_INFO_SIZE 16
+
+struct htt_phy_tpc_stats_tlv {
+	u32 pdev_id;
+	u32 tx_power_scale;
+	u32 tx_power_scale_db;
+	u32 min_negative_tx_power;
+	u32 reg_ctl_domain;
+	u32 max_reg_allowed_power[HTT_STATS_MAX_CHAINS];
+	u32 max_reg_allowed_power_6g[HTT_STATS_MAX_CHAINS];
+	u32 twice_max_rd_power;
+	u32 max_tx_power;
+	u32 home_max_tx_power;
+	u32 psd_power;
+	u32 eirp_power;
+	u32 power_type_6ghz;
+	u32 sub_band_cfreq[HTT_MAX_CH_PWR_INFO_SIZE];
+	u32 sub_band_txpower[HTT_MAX_CH_PWR_INFO_SIZE];
+};
 
 struct htt_phy_counters_tlv {
 	u32 rx_ofdma_timing_err_cnt;
-- 
2.17.1

