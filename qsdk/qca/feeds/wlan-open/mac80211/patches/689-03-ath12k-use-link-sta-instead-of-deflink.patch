From 5a2e9c701a1cc127a1868020c6d4858ed2bf476b Mon Sep 17 00:00:00 2001
From: Sriram R <quic_srirrama@quicinc.com>
Date: Sat, 26 Nov 2022 13:43:32 +0530
Subject: [PATCH] ath12k: use link sta instead of deflink

Use the link sta corresponding to the arsta rather
than the deflink for all operations within ath12k mac.

The fixed rate and power config settings needs to be
done separately after the mac ops is extended with link id.

Signed-off-by: Sriram R <quic_srirrama@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 350 ++++++++++++++++----------
 1 file changed, 217 insertions(+), 133 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -600,6 +600,25 @@ ieee80211_bss_conf *ath12k_get_link_bss_
 	return link_conf;
 }
 
+static struct
+ieee80211_link_sta *ath12k_get_link_sta(struct ath12k_link_sta *arsta)
+{
+	struct ieee80211_sta *sta;
+	struct ath12k_sta *ahsta = arsta->ahsta;
+	struct ieee80211_link_sta *link_sta;
+
+	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
+
+	WARN_ON(!rcu_read_lock_held());
+
+	if (arsta->link_id > IEEE80211_MLD_MAX_NUM_LINKS)
+		return NULL;
+
+	link_sta = rcu_dereference(sta->link[arsta->link_id]);
+
+	return link_sta;
+}
+
 static void ath12k_get_arvif_iter(void *data, u8 *mac,
 				  struct ieee80211_vif *vif)
 {
@@ -1719,19 +1738,15 @@ static void ath12k_peer_assoc_h_crypto(s
 
 	lockdep_assert_held(&ar->conf_mutex);
 
-	rcu_read_lock();
 	info = ath12k_get_link_bss_conf(arvif);
 
 	if (!info) {
-		rcu_read_unlock();
 		ath12k_warn(ar->ab, "unable to access bss link conf for peer assoc send\n");
 		return;
 	}
 
-	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id))) {
-		rcu_read_unlock();
+	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
 		return;
-	}
 
 	hw = ar->ah->hw;
 	bss = cfg80211_get_bss(hw->wiphy, def.chan, info->bssid, NULL, 0,
@@ -1744,7 +1759,6 @@ static void ath12k_peer_assoc_h_crypto(s
 	} else if (bss) {
 		const struct cfg80211_bss_ies *ies;
 
-		rcu_read_lock();
 		rsnie = ieee80211_bss_get_ie(bss, WLAN_EID_RSN);
 
 		ies = rcu_dereference(bss->ies);
@@ -1753,7 +1767,6 @@ static void ath12k_peer_assoc_h_crypto(s
 						WLAN_OUI_TYPE_MICROSOFT_WPA,
 						ies->data,
 						ies->len);
-		rcu_read_unlock();
 		cfg80211_put_bss(hw->wiphy, bss);
 	}
 
@@ -1776,7 +1789,6 @@ static void ath12k_peer_assoc_h_crypto(s
 	}
 
 	/* TODO: safe_mode_enabled (bypass 4-way handshake) flag req? */
-	rcu_read_unlock();
 }
 
 static void ath12k_peer_assoc_h_rates(struct ath12k *ar,
@@ -1796,6 +1808,7 @@ static void ath12k_peer_assoc_h_rates(st
 	u8 link_id = arvif->link_id;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
+	struct ieee80211_link_sta *link_sta;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
 
@@ -1804,9 +1817,16 @@ static void ath12k_peer_assoc_h_rates(st
 	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
 		return;
 
+	link_sta = ath12k_get_link_sta(arsta);
+
+	if (!link_sta) {
+		ath12k_warn(ar->ab, "unable to access link sta in peer assoc rate set\n");
+		return;
+	}
+
 	band = def.chan->band;
 	sband = ar->ah->hw->wiphy->bands[band];
-	ratemask = sta->deflink.supp_rates[band];
+	ratemask = link_sta->supp_rates[band];
 	ratemask &= arvif->bitrate_mask.control[band].legacy;
 	rates = sband->bitrates;
 
@@ -1862,9 +1882,18 @@ static void ath12k_peer_assoc_h_ht(struc
 	u8 link_id = arvif->link_id;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
+	struct ieee80211_link_sta *link_sta;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
-	ht_cap = &sta->deflink.ht_cap;
+
+	link_sta = ath12k_get_link_sta(arsta);
+
+	if (!link_sta) {
+		ath12k_warn(ar->ab, "unable to access link sta in peer assoc ht set\n");
+		return;
+	}
+
+	ht_cap = &link_sta->ht_cap;
 
 	lockdep_assert_held(&ar->conf_mutex);
 
@@ -1894,7 +1923,7 @@ static void ath12k_peer_assoc_h_ht(struc
 	if (ht_cap->cap & IEEE80211_HT_CAP_LDPC_CODING)
 		arg->ldpc_flag = true;
 
-	if (sta->deflink.bandwidth >= IEEE80211_STA_RX_BW_40) {
+	if (link_sta->bandwidth >= IEEE80211_STA_RX_BW_40) {
 		arg->bw_40 = true;
 		arg->peer_rate_caps |= WMI_HOST_RC_CW40_FLAG;
 	}
@@ -1952,7 +1981,7 @@ static void ath12k_peer_assoc_h_ht(struc
 			arg->peer_ht_rates.rates[i] = i;
 	} else {
 		arg->peer_ht_rates.num_rates = n;
-		arg->peer_nss = min(sta->deflink.rx_nss, max_nss);
+		arg->peer_nss = min(link_sta->rx_nss, max_nss);
 	}
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "mac ht peer %pM mcs cnt %d nss %d\n",
@@ -2067,12 +2096,20 @@ static void ath12k_peer_assoc_h_vht(stru
 	u8 link_id = arvif->link_id;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
+	struct ieee80211_link_sta *link_sta;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
 
-	vht_cap = &sta->deflink.vht_cap;
-	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
+	link_sta = ath12k_get_link_sta(arsta);
+
+	if (!link_sta) {
+		ath12k_warn(ar->ab, "unable to access link sta in peer assoc vht set\n");
+		return;
+	}
+	vht_cap = &link_sta->vht_cap;
+	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id))) {
 		return;
+	}
 
 	if (!vht_cap->vht_supported)
 		return;
@@ -2106,17 +2143,17 @@ static void ath12k_peer_assoc_h_vht(stru
 				 (1U << (IEEE80211_HT_MAX_AMPDU_FACTOR +
 					ampdu_factor)) - 1);
 
-	if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_80)
+	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_80)
 		arg->bw_80 = true;
 
-	if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_160)
+	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_160)
 		arg->bw_160 = true;
 
 	vht_nss =  ath12k_mac_max_vht_nss(vht_mcs_mask);
 
-	if (vht_nss > sta->deflink.rx_nss) {
+	if (vht_nss > link_sta->rx_nss) {
 		user_rate_valid = false;
-		for (nss_idx = sta->deflink.rx_nss - 1; nss_idx >= 0; nss_idx--) {
+		for (nss_idx = link_sta->rx_nss - 1; nss_idx >= 0; nss_idx--) {
 			if (vht_mcs_mask[nss_idx]) {
 				user_rate_valid = true;
 				break;
@@ -2127,8 +2164,8 @@ static void ath12k_peer_assoc_h_vht(stru
 	if (!user_rate_valid) {
 		ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 			   "Setting vht range MCS value to peer supported nss:%d for peer %pM\n",
-			   sta->deflink.rx_nss, arsta->addr);
-		vht_mcs_mask[sta->deflink.rx_nss - 1] = vht_mcs_mask[vht_nss - 1];
+			   link_sta->rx_nss, arsta->addr);
+		vht_mcs_mask[link_sta->rx_nss - 1] = vht_mcs_mask[vht_nss - 1];
 	}
 
 	/* Calculate peer NSS capability from VHT capabilities if STA
@@ -2142,7 +2179,7 @@ static void ath12k_peer_assoc_h_vht(stru
 		    vht_mcs_mask[i])
 			max_nss = i + 1;
 	}
-	arg->peer_nss = min(sta->deflink.rx_nss, max_nss);
+	arg->peer_nss = min(link_sta->rx_nss, max_nss);
 	arg->rx_max_rate = __le16_to_cpu(vht_cap->vht_mcs.rx_highest);
 	arg->rx_mcs_set = __le16_to_cpu(vht_cap->vht_mcs.rx_mcs_map);
 	arg->tx_max_rate = __le16_to_cpu(vht_cap->vht_mcs.tx_highest);
@@ -2279,24 +2316,27 @@ static void ath12k_peer_assoc_h_he(struc
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
 	struct ieee80211_bss_conf* link_conf;
+	struct ieee80211_link_sta *link_sta;
 	u32 peer_he_ops;
 
-	rcu_read_lock();
-
 	link_conf = ath12k_get_link_bss_conf(arvif);
 
 	if (!link_conf) {
-		rcu_read_unlock();
 		ath12k_warn(ar->ab, "unable to access bss link conf in peer assoc\n");
 		return;
 	}
 
-	peer_he_ops = link_conf->he_oper.params;
+	link_sta = ath12k_get_link_sta(arsta);
 
-	rcu_read_unlock();
+	if (!link_sta) {
+		ath12k_warn(ar->ab, "unable to access link sta in peer assoc he set\n");
+		return;
+	}
+
+	peer_he_ops = link_conf->he_oper.params;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
-	he_cap = &sta->deflink.he_cap;
+	he_cap = &link_sta->he_cap;
 
 	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
 		return;
@@ -2344,7 +2384,7 @@ static void ath12k_peer_assoc_h_he(struc
 	else
 		max_nss = rx_mcs_80;
 
-	arg->peer_nss = min(sta->deflink.rx_nss, max_nss);
+	arg->peer_nss = min(link_sta->rx_nss, max_nss);
 
 	memcpy(&arg->peer_he_cap_macinfo, he_cap->he_cap_elem.mac_cap_info,
 	       sizeof(arg->peer_he_cap_macinfo));
@@ -2373,10 +2413,10 @@ static void ath12k_peer_assoc_h_he(struc
 			IEEE80211_HE_MAC_CAP3_MAX_AMPDU_LEN_EXP_MASK;
 
 	if (ampdu_factor) {
-		if (sta->deflink.vht_cap.vht_supported)
+		if (link_sta->vht_cap.vht_supported)
 			arg->peer_max_mpdu = (1 << (IEEE80211_HE_VHT_MAX_AMPDU_FACTOR +
 						    ampdu_factor)) - 1;
-		else if (sta->deflink.ht_cap.ht_supported)
+		else if (link_sta->ht_cap.ht_supported)
 			arg->peer_max_mpdu = (1 << (IEEE80211_HE_HT_MAX_AMPDU_FACTOR +
 						    ampdu_factor)) - 1;
 	}
@@ -2419,9 +2459,9 @@ static void ath12k_peer_assoc_h_he(struc
 
 	he_nss =  ath12k_mac_max_he_nss(he_mcs_mask);
 
-	if (he_nss > sta->deflink.rx_nss) {
+	if (he_nss > link_sta->rx_nss) {
 		user_rate_valid = false;
-		for (nss_idx = sta->deflink.rx_nss - 1; nss_idx >= 0; nss_idx--) {
+		for (nss_idx = link_sta->rx_nss - 1; nss_idx >= 0; nss_idx--) {
 			if (he_mcs_mask[nss_idx]) {
 				user_rate_valid = true;
 				break;
@@ -2432,11 +2472,11 @@ static void ath12k_peer_assoc_h_he(struc
 	if (!user_rate_valid) {
 		ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 			   "Setting he range MCS value to peer supported nss:%d for peer %pM\n",
-			   sta->deflink.rx_nss, arsta->addr);
-		he_mcs_mask[sta->deflink.rx_nss - 1] = he_mcs_mask[he_nss - 1];
+			   link_sta->rx_nss, arsta->addr);
+		he_mcs_mask[link_sta->rx_nss - 1] = he_mcs_mask[he_nss - 1];
 	}
 
-	switch (sta->deflink.bandwidth) {
+	switch (link_sta->bandwidth) {
 	case IEEE80211_STA_RX_BW_160:
 		if (he_cap->he_cap_elem.phy_cap_info[0] &
 		    IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_80PLUS80_MHZ_IN_5G) {
@@ -2488,14 +2528,14 @@ static void ath12k_peer_assoc_h_he(struc
 		    he_mcs_mask[i])
 			max_nss = i + 1;
 	}
-	arg->peer_nss = min(sta->deflink.rx_nss, max_nss);
+	arg->peer_nss = min(link_sta->rx_nss, max_nss);
 
 	if (arg->peer_phymode == MODE_11AX_HE160 ||
 	    arg->peer_phymode == MODE_11AX_HE80_80) {
 		tx_nss = ath12k_get_nss_160mhz(ar, ar->num_tx_chains);
 		rx_nss = min(arg->peer_nss, tx_nss);
 
-		arg->peer_nss = min(sta->deflink.rx_nss, ar->num_rx_chains);
+		arg->peer_nss = min(link_sta->rx_nss, ar->num_rx_chains);
 		arg->peer_bw_rxnss_override = ATH12K_BW_NSS_MAP_ENABLE;
 
 		if (!rx_nss) {
@@ -2531,25 +2571,33 @@ static void ath12k_peer_assoc_h_he_6ghz(
 	u8 link_id = arvif->link_id;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
+	struct ieee80211_link_sta *link_sta;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
-	he_cap = &sta->deflink.he_cap;
+
+	link_sta = ath12k_get_link_sta(arsta);
+
+	if (!link_sta) {
+		ath12k_warn(ar->ab, "unable to access link sta in peer assoc he-6ghz set\n");
+		return;
+	}
+	he_cap = &link_sta->he_cap;
  
 	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
 		return;
 
 	band = def.chan->band;
 
-	if (!arg->he_flag || band != NL80211_BAND_6GHZ || !sta->deflink.he_6ghz_capa.capa)
+	if (!arg->he_flag || band != NL80211_BAND_6GHZ || !link_sta->he_6ghz_capa.capa)
 		return;
 
-	if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_80)
+	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_80)
 		arg->bw_80 = true;
 
-	if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_160)
+	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_160)
 		arg->bw_160 = true;
 
-	arg->peer_he_caps_6ghz = le16_to_cpu(sta->deflink.he_6ghz_capa.capa);
+	arg->peer_he_caps_6ghz = le16_to_cpu(link_sta->he_6ghz_capa.capa);
 	arg->peer_mpdu_density =
 		ath12k_parse_mpdudensity(FIELD_GET(IEEE80211_HE_6GHZ_CAP_MIN_MPDU_START,
 						   arg->peer_he_caps_6ghz));
@@ -2723,26 +2771,29 @@ static void ath12k_peer_assoc_h_eht(stru
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
 	struct ieee80211_bss_conf* link_conf;
+	struct ieee80211_link_sta *link_sta;
 	u32 peer_eht_ops;
 
-	rcu_read_lock();
-
 	link_conf = ath12k_get_link_bss_conf(arvif);
 
 	if (!link_conf) {
-		rcu_read_unlock();
 		ath12k_warn(ar->ab, "unable to access bss link conf in peer assoc\n");
 		return;
 	}
 
+	link_sta = ath12k_get_link_sta(arsta);
+
+	if (!link_sta) {
+		ath12k_warn(ar->ab, "unable to access link sta in peer assoc eht set\n");
+		return;
+	}
+
 	memcpy(&peer_eht_ops, &link_conf->eht_oper,
 	       sizeof(link_conf->eht_oper));
 
-	rcu_read_unlock();
-
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
 
-	eht_cap = &sta->deflink.eht_cap;
+	eht_cap = &link_sta->eht_cap;
 	mcs_nss = &eht_cap->eht_mcs_nss_supp;
 	mcs_nss_supp_bw = &mcs_nss->bw._80;
 
@@ -2755,11 +2806,11 @@ static void ath12k_peer_assoc_h_eht(stru
 	if (ath12k_peer_assoc_h_eht_masked(eht_mcs_mask))
 		return;
 
-	if (!sta->deflink.he_cap.has_he || !eht_cap->has_eht)
+	if (!link_sta->he_cap.has_he || !eht_cap->has_eht)
 		return;
 
 	arg->eht_flag = true;
-	if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_320) {
+	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_320) {
 		arg->bw_40 = true;
 		arg->bw_80 = true;
 		arg->bw_160 = true;
@@ -2778,9 +2829,9 @@ static void ath12k_peer_assoc_h_eht(stru
 
 	eht_nss = ath12k_mac_max_eht_nss(eht_mcs_mask);
 
-	if (eht_nss > sta->deflink.rx_nss) {
+	if (eht_nss > link_sta->rx_nss) {
 		user_rate_valid = false;
-		for (nss_idx = (sta->deflink.rx_nss - 1); nss_idx >= 0; nss_idx--) {
+		for (nss_idx = (link_sta->rx_nss - 1); nss_idx >= 0; nss_idx--) {
 			if (eht_mcs_mask[nss_idx]) {
 				user_rate_valid = true;
 				break;
@@ -2791,11 +2842,11 @@ static void ath12k_peer_assoc_h_eht(stru
 	if (!user_rate_valid) {
 		ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 				"Setting eht range MCS value to peer supported nss:%d for peer %pM\n",
-				sta->deflink.rx_nss, arsta->addr);
-		eht_mcs_mask[sta->deflink.rx_nss - 1] = eht_mcs_mask[eht_nss - 1];
+				link_sta->rx_nss, arsta->addr);
+		eht_mcs_mask[link_sta->rx_nss - 1] = eht_mcs_mask[eht_nss - 1];
 	}
 
-	switch (sta->deflink.bandwidth) {
+	switch (link_sta->bandwidth) {
 	case IEEE80211_STA_RX_BW_320:
 		mcs_nss_supp_bw = &mcs_nss->bw._320;
 		mcs_idx = WMI_EHTCAP_TXRX_MCS_NSS_IDX_320;
@@ -2835,7 +2886,7 @@ static void ath12k_peer_assoc_h_eht(stru
 		break;
 	}
 
-	if (!(sta->deflink.he_cap.he_cap_elem.phy_cap_info[0] &
+	if (!(link_sta->he_cap.he_cap_elem.phy_cap_info[0] &
 	      IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_MASK_ALL)) {
 		if (mcs_nss->only_20mhz.rx_tx_mcs13_max_nss)
 			max_nss = mcs_nss->only_20mhz.rx_tx_mcs13_max_nss;
@@ -2856,10 +2907,10 @@ static void ath12k_peer_assoc_h_eht(stru
 
 	max_nss = max(max_nss, (uint8_t)eht_nss);
 
-	arg->peer_nss = min(sta->deflink.rx_nss, max_nss);
+	arg->peer_nss = min(link_sta->rx_nss, max_nss);
 	arg->ru_punct_bitmap = ~def.ru_punct_bitmap;
-	if (ieee80211_vif_is_mesh(vif) && sta->deflink.ru_punct_bitmap)
-		arg->ru_punct_bitmap = ~sta->deflink.ru_punct_bitmap;
+	if (ieee80211_vif_is_mesh(vif) && link_sta->ru_punct_bitmap)
+		arg->ru_punct_bitmap = ~link_sta->ru_punct_bitmap;
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 		   "mac he peer %pM nss %d mcs cnt %d ru_punct_bitmap 0x%x\n",
@@ -2873,11 +2924,21 @@ static void ath12k_peer_assoc_h_smps(str
 	int smps;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
+	struct ieee80211_link_sta *link_sta;
+	struct ath12k *ar = arsta->arvif->ar;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
-	ht_cap = &sta->deflink.ht_cap;
 
-	if (!ht_cap->ht_supported && !sta->deflink.he_6ghz_capa.capa)
+	link_sta = ath12k_get_link_sta(arsta);
+
+	if (!link_sta) {
+		ath12k_warn(ar->ab, "unable to access link sta in peer assoc smps set\n");
+		return;
+	}
+
+	ht_cap = &link_sta->ht_cap;
+
+	if (!ht_cap->ht_supported && !link_sta->he_6ghz_capa.capa)
 		return;
 
 	if (ht_cap->ht_supported) {
@@ -2885,7 +2946,7 @@ static void ath12k_peer_assoc_h_smps(str
 		smps >>= IEEE80211_HT_CAP_SM_PS_SHIFT;
 	} else {
 		smps = FIELD_GET(IEEE80211_HE_6GHZ_CAP_SM_PS,
-				 le16_to_cpu(sta->deflink.he_6ghz_capa.capa));
+				 le16_to_cpu(link_sta->he_6ghz_capa.capa));
 	}
 
 	switch (smps) {
@@ -3061,21 +3122,25 @@ static bool ath12k_mac_sta_has_ofdm_only
 {
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
+	struct ieee80211_link_sta *link_sta;
+	struct ath12k *ar = arsta->arvif->ar;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
-	return sta->deflink.supp_rates[NL80211_BAND_2GHZ] >>
+
+	link_sta = ath12k_get_link_sta(arsta);
+
+	if (!link_sta) {
+		ath12k_warn(ar->ab, "unable to access link sta in ofdm rate check\n");
+		return false;
+	}
+	return link_sta->supp_rates[NL80211_BAND_2GHZ] >>
 				ATH12K_MAC_FIRST_OFDM_RATE_IDX;
 }
 
-static enum wmi_phy_mode ath12k_mac_get_phymode_vht(struct ath12k *ar,
-						    struct ath12k_link_sta *arsta)
+static enum wmi_phy_mode ath12k_mac_get_phymode_vht(struct ieee80211_link_sta *link_sta)
 {
-	struct ath12k_sta *ahsta = arsta->ahsta;
-	struct ieee80211_sta *sta;
-
-	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
-	if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_160) {
-		switch (sta->deflink.vht_cap.cap &
+	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_160) {
+		switch (link_sta->vht_cap.cap &
 			IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_MASK) {
 		case IEEE80211_VHT_CAP_SUPP_CHAN_WIDTH_160MHZ:
 			return MODE_11AC_VHT160;
@@ -3087,77 +3152,67 @@ static enum wmi_phy_mode ath12k_mac_get_
 		}
 	}
 
-	if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_80)
+	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_80)
 		return MODE_11AC_VHT80;
 
-	if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_40)
+	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_40)
 		return MODE_11AC_VHT40;
 
-	if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_20)
+	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_20)
 		return MODE_11AC_VHT20;
 
 	return MODE_UNKNOWN;
 }
 
-static enum wmi_phy_mode ath12k_mac_get_phymode_he(struct ath12k *ar,
-						   struct ath12k_link_sta *arsta)
+static enum wmi_phy_mode ath12k_mac_get_phymode_he(struct ieee80211_link_sta *link_sta)
 {
-	struct ath12k_sta *ahsta = arsta->ahsta;
-	struct ieee80211_sta *sta;
-
-	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
-	if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_160) {
-		if (sta->deflink.he_cap.he_cap_elem.phy_cap_info[0] &
+	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_160) {
+		if (link_sta->he_cap.he_cap_elem.phy_cap_info[0] &
 		     IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_160MHZ_IN_5G)
 			return MODE_11AX_HE160;
-		else if (sta->deflink.he_cap.he_cap_elem.phy_cap_info[0] &
+		else if (link_sta->he_cap.he_cap_elem.phy_cap_info[0] &
 		     IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_80PLUS80_MHZ_IN_5G)
 			return MODE_11AX_HE80_80;
 		/* not sure if this is a valid case? */
 		return MODE_11AX_HE160;
 	}
 
-	if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_80)
+	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_80)
 		return MODE_11AX_HE80;
 
-	if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_40)
+	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_40)
 		return MODE_11AX_HE40;
 
-	if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_20)
+	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_20)
 		return MODE_11AX_HE20;
 
 	return MODE_UNKNOWN;
 }
 
-static enum wmi_phy_mode ath12k_mac_get_phymode_eht(struct ath12k *ar,
-						    struct ath12k_link_sta *arsta)
+static enum wmi_phy_mode ath12k_mac_get_phymode_eht(struct ieee80211_link_sta *link_sta)
 {
-	struct ath12k_sta *ahsta = arsta->ahsta;
-	struct ieee80211_sta *sta;
-
-	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
-	if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_320)
-		if (sta->deflink.eht_cap.eht_cap_elem.phy_cap_info[0] &
+	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_320)
+		if (link_sta->eht_cap.eht_cap_elem.phy_cap_info[0] &
 		    IEEE80211_EHT_PHY_CAP0_320MHZ_IN_6GHZ)
 			return MODE_11BE_EHT320;
-	if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_160) {
-		if (sta->deflink.he_cap.he_cap_elem.phy_cap_info[0] &
+	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_160) {
+		if (link_sta->he_cap.he_cap_elem.phy_cap_info[0] &
 		    IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_160MHZ_IN_5G)
 			return MODE_11BE_EHT160;
-		else if (sta->deflink.he_cap.he_cap_elem.phy_cap_info[0] &
+		else if (link_sta->he_cap.he_cap_elem.phy_cap_info[0] &
 			 IEEE80211_HE_PHY_CAP0_CHANNEL_WIDTH_SET_80PLUS80_MHZ_IN_5G)
 			return MODE_11BE_EHT80_80;
 		/* not sure if this is a valid case? */
 		return MODE_11BE_EHT160;
 	}
 
-	if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_80)
+	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_80)
 		return MODE_11BE_EHT80;
 
-	if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_40)
+	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_40)
 		return MODE_11BE_EHT40;
 
-	if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_20)
+	if (link_sta->bandwidth == IEEE80211_STA_RX_BW_20)
 		return MODE_11BE_EHT20;
 
 	return MODE_UNKNOWN;
@@ -3179,12 +3234,20 @@ static void ath12k_peer_assoc_h_phymode(
 	u8 link_id = arvif->link_id;
 	struct ath12k_sta *ahsta = arsta->ahsta;
 	struct ieee80211_sta *sta;
+	struct ieee80211_link_sta *link_sta;
 
 	sta = container_of((void *)ahsta, struct ieee80211_sta, drv_priv);
 
 	if (WARN_ON(ath12k_mac_vif_chan(vif, &def, link_id)))
 		return;
 
+	link_sta = ath12k_get_link_sta(arsta);
+
+	if (!link_sta) {
+		ath12k_warn(ar->ab, "unable to access link sta in peer assoc phymode set\n");
+		return;
+	}
+
 	band = def.chan->band;
 	ht_mcs_mask = arvif->bitrate_mask.control[band].ht_mcs;
 	vht_mcs_mask = arvif->bitrate_mask.control[band].vht_mcs;
@@ -3193,29 +3256,29 @@ static void ath12k_peer_assoc_h_phymode(
 
 	switch (band) {
 	case NL80211_BAND_2GHZ:
-		if (sta->deflink.eht_cap.has_eht &&
+		if (link_sta->eht_cap.has_eht &&
 		    !ath12k_peer_assoc_h_eht_masked(eht_mcs_mask)) {
-			if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_40)
+			if (link_sta->bandwidth == IEEE80211_STA_RX_BW_40)
 				phymode = MODE_11BE_EHT40_2G;
 			else
 				phymode = MODE_11BE_EHT20_2G;
-		} else if (sta->deflink.he_cap.has_he &&
+		} else if (link_sta->he_cap.has_he &&
 			   !ath12k_peer_assoc_h_he_masked(he_mcs_mask)) {
-			if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_80)
+			if (link_sta->bandwidth == IEEE80211_STA_RX_BW_80)
 				phymode = MODE_11AX_HE80_2G;
-			else if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_40)
+			else if (link_sta->bandwidth == IEEE80211_STA_RX_BW_40)
 				phymode = MODE_11AX_HE40_2G;
 			else
 				phymode = MODE_11AX_HE20_2G;
-		} else if (sta->deflink.vht_cap.vht_supported &&
+		} else if (link_sta->vht_cap.vht_supported &&
 			   !ath12k_peer_assoc_h_vht_masked(vht_mcs_mask)) {
-			if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_40)
+			if (link_sta->bandwidth == IEEE80211_STA_RX_BW_40)
 				phymode = MODE_11AC_VHT40;
 			else
 				phymode = MODE_11AC_VHT20;
-		} else if (sta->deflink.ht_cap.ht_supported &&
+		} else if (link_sta->ht_cap.ht_supported &&
 			   !ath12k_peer_assoc_h_ht_masked(ht_mcs_mask)) {
-			if (sta->deflink.bandwidth == IEEE80211_STA_RX_BW_40)
+			if (link_sta->bandwidth == IEEE80211_STA_RX_BW_40)
 				phymode = MODE_11NG_HT40;
 			else
 				phymode = MODE_11NG_HT20;
@@ -3228,18 +3291,18 @@ static void ath12k_peer_assoc_h_phymode(
 	case NL80211_BAND_5GHZ:
 	case NL80211_BAND_6GHZ:
 		/* Check EHT first */
-		if (sta->deflink.eht_cap.has_eht &&
+		if (link_sta->eht_cap.has_eht &&
 		    !ath12k_peer_assoc_h_eht_masked(eht_mcs_mask)) {
-			phymode = ath12k_mac_get_phymode_eht(ar, arsta);
-		} else if (sta->deflink.he_cap.has_he &&
+			phymode = ath12k_mac_get_phymode_eht(link_sta);
+		} else if (link_sta->he_cap.has_he &&
 			   !ath12k_peer_assoc_h_he_masked(he_mcs_mask)) {
-			phymode = ath12k_mac_get_phymode_he(ar, arsta);
-		} else if (sta->deflink.vht_cap.vht_supported &&
+			phymode = ath12k_mac_get_phymode_he(link_sta);
+		} else if (link_sta->vht_cap.vht_supported &&
 			   !ath12k_peer_assoc_h_vht_masked(vht_mcs_mask)) {
-			phymode = ath12k_mac_get_phymode_vht(ar, arsta);
-		} else if (sta->deflink.ht_cap.ht_supported &&
+			phymode = ath12k_mac_get_phymode_vht(link_sta);
+		} else if (link_sta->ht_cap.ht_supported &&
 			   !ath12k_peer_assoc_h_ht_masked(ht_mcs_mask)) {
-			if (sta->deflink.bandwidth >= IEEE80211_STA_RX_BW_40)
+			if (link_sta->bandwidth >= IEEE80211_STA_RX_BW_40)
 				phymode = MODE_11NA_HT40;
 			else
 				phymode = MODE_11NA_HT20;
@@ -3271,6 +3334,7 @@ static void ath12k_peer_assoc_prepare(st
 	reinit_completion(&ar->peer_assoc_done);
 
 	arg->peer_new_assoc = !reassoc;
+
 	ath12k_peer_assoc_h_basic(ar, arvif, arsta, arg);
 	ath12k_peer_assoc_h_crypto(ar, arvif, arsta, arg);
 	ath12k_peer_assoc_h_rates(ar, arvif, arsta, arg);
@@ -5504,6 +5568,11 @@ static int ath12k_station_assoc(struct a
 	struct cfg80211_bitrate_mask *mask;
 	u8 num_vht_rates, num_he_rates, num_eht_rates, num_ht_rates;
 	u8 link_id = arvif->link_id;
+	bool ht_supp, vht_supp, has_he, has_eht;
+	struct ieee80211_sta_ht_cap ht_cap;
+	enum ieee80211_sta_rx_bandwidth bandwidth;
+	u16 he_6ghz_capa;
+
 
 	lockdep_assert_held(&ar->conf_mutex);
 
@@ -5524,8 +5593,31 @@ static int ath12k_station_assoc(struct a
 	ahsta = (struct ath12k_sta *)sta->drv_priv;
 	arsta = ahsta->link[link_id];
 
+	if (WARN_ON(!arsta))
+		return -EINVAL;
+
+	rcu_read_lock();
+
+	link_sta = ath12k_get_link_sta(arsta);
+
+	if (!link_sta) {
+		rcu_read_unlock();
+		ath12k_warn(ar->ab, "unable to access link sta in station assoc\n");
+		return -EINVAL;
+	}
+
+	he_6ghz_capa = le16_to_cpu(link_sta->he_6ghz_capa.capa);
+	bandwidth = link_sta->bandwidth;
+	ht_cap = link_sta->ht_cap;
+	ht_supp = link_sta->ht_cap.ht_supported;
+	vht_supp = link_sta->vht_cap.vht_supported;
+	has_he = link_sta->he_cap.has_he;
+	has_eht = link_sta->eht_cap.has_eht;
+	bandwidth = link_sta->bandwidth;
+
 	ath12k_peer_assoc_prepare(ar, arvif, arsta, &peer_arg, reassoc);
 
+	rcu_read_unlock();
 	peer_arg.is_assoc = true;
 	ret = ath12k_wmi_send_peer_assoc_cmd(ar, &peer_arg);
 	if (ret) {
@@ -5550,22 +5642,22 @@ static int ath12k_station_assoc(struct a
 	 * specific fixed param.
 	 * Note that all other rates and NSS will be disabled for this peer.
 	 */
-	if (sta->deflink.vht_cap.vht_supported && num_vht_rates == 1) {
+	if (vht_supp && num_vht_rates == 1) {
 		ret = ath12k_mac_set_peer_vht_fixed_rate(arvif, arsta, mask,
 							 band);
 		if (ret)
 			return ret;
-	} else if (sta->deflink.he_cap.has_he && num_he_rates == 1) {
+	} else if (has_he && num_he_rates == 1) {
 		ret = ath12k_mac_set_peer_he_fixed_rate(arvif, arsta, mask,
 							band);
 		if (ret)
 			return ret;
-	} else if (sta->deflink.eht_cap.has_eht && num_eht_rates == 1) {
+	} else if (has_eht && num_eht_rates == 1) {
 		ret = ath12k_mac_set_peer_eht_fixed_rate(arvif, arsta, mask,
 							 band);
 		if (ret)
 			return ret;
-	} else if (sta->deflink.ht_cap.ht_supported && num_ht_rates == 1) {
+	} else if (ht_supp && num_ht_rates == 1) {
 		ret = ath12k_mac_set_peer_ht_fixed_rate(arvif, arsta, mask,
 							band);
 		if (ret)
@@ -5579,8 +5671,8 @@ static int ath12k_station_assoc(struct a
 		return 0;
 
 	ret = ath12k_setup_peer_smps(ar, arvif, arsta->addr,
-				     &sta->deflink.ht_cap,
-				     le16_to_cpu(sta->deflink.he_6ghz_capa.capa));
+				     &ht_cap,
+				     he_6ghz_capa);
 	if (ret) {
 		ath12k_warn(ar->ab, "failed to setup peer SMPS for vdev %d: %d\n",
 			    arvif->vdev_id, ret);
@@ -5606,15 +5698,8 @@ static int ath12k_station_assoc(struct a
 	spin_lock_bh(&ar->data_lock);
 
 	/* Set arsta bw and prev bw */
-        rcu_read_lock();
-	link_sta = rcu_dereference(sta->link[link_id]);
-	if (link_sta) {
-		arsta->bw = link_sta->bandwidth;
-		arsta->bw_prev = link_sta->bandwidth;
-	} else {
-		ath12k_warn(ar->ab, "failed to get link sta to store bw");
-	}
-	rcu_read_unlock();
+	arsta->bw = bandwidth;
+	arsta->bw_prev = bandwidth;
 
 	spin_unlock_bh(&ar->data_lock);
 
