From 8307c83e6bf1f31e49ec7bb215c0cc9fd1a8a4a1 Mon Sep 17 00:00:00 2001
From: Aaradhana Sahu <quic_aarasahu@quicinc.com>
Date: Mon, 18 Jul 2022 16:46:02 +0530
Subject: [PATCH] ath12k: sync hal_rx_* structures used in mon with firmware

Some of the fields present in hal_rx_* structures used by monitor
stats TLVs are not synced with firmware structures, because of
that we were fetching wrong values while receiving those TLVs.

Fix it by syncing it with firmware structure.

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
Signed-off-by: Aaradhana Sahu <quic_aarasahu@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/hal_rx.h | 14 ++++++--------
 1 file changed, 6 insertions(+), 8 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/hal_rx.h
+++ b/drivers/net/wireless/ath/ath12k/hal_rx.h
@@ -295,12 +295,13 @@ struct hal_rx_ppdu_start {
 	__le32 reserverd[2];
 } __packed;
 
-#define HAL_RX_PPDU_END_USER_STATS_INFO0_MPDU_CNT_FCS_ERR	GENMASK(25, 16)
+#define HAL_RX_PPDU_END_USER_STATS_INFO0_PEER_ID		GENMASK(15, 0)
+#define HAL_RX_PPDU_END_USER_STATS_INFO0_MPDU_CNT_FCS_ERR	GENMASK(26, 16)
 
-#define HAL_RX_PPDU_END_USER_STATS_INFO1_MPDU_CNT_FCS_OK	GENMASK(8, 0)
-#define HAL_RX_PPDU_END_USER_STATS_INFO1_FC_VALID		BIT(9)
-#define HAL_RX_PPDU_END_USER_STATS_INFO1_QOS_CTRL_VALID		BIT(10)
-#define HAL_RX_PPDU_END_USER_STATS_INFO1_HT_CTRL_VALID		BIT(11)
+#define HAL_RX_PPDU_END_USER_STATS_INFO1_MPDU_CNT_FCS_OK	GENMASK(10, 0)
+#define HAL_RX_PPDU_END_USER_STATS_INFO1_FC_VALID		BIT(11)
+#define HAL_RX_PPDU_END_USER_STATS_INFO1_QOS_CTRL_VALID		BIT(12)
+#define HAL_RX_PPDU_END_USER_STATS_INFO1_HT_CTRL_VALID		BIT(13)
 #define HAL_RX_PPDU_END_USER_STATS_INFO1_PKT_TYPE		GENMASK(24, 21)
 
 #define HAL_RX_PPDU_END_USER_STATS_INFO2_AST_INDEX		GENMASK(15, 0)
@@ -445,11 +446,9 @@ struct hal_rx_he_sig_a_su_info {
 #define HAL_RX_HE_SIG_A_MU_DL_INFO0_DOPPLER_INDICATION	BIT(25)
 
 #define HAL_RX_HE_SIG_A_MU_DL_INFO1_TXOP_DURATION	GENMASK(6, 0)
-#define HAL_RX_HE_SIG_A_MU_DL_INFO1_CODING		BIT(7)
 #define HAL_RX_HE_SIG_A_MU_DL_INFO1_NUM_LTF_SYMB	GENMASK(10, 8)
 #define HAL_RX_HE_SIG_A_MU_DL_INFO1_LDPC_EXTRA		BIT(11)
 #define HAL_RX_HE_SIG_A_MU_DL_INFO1_STBC		BIT(12)
-#define HAL_RX_HE_SIG_A_MU_DL_INFO1_TXBF		BIT(10)
 #define HAL_RX_HE_SIG_A_MU_DL_INFO1_PKT_EXT_FACTOR	GENMASK(14, 13)
 #define HAL_RX_HE_SIG_A_MU_DL_INFO1_PKT_EXT_PE_DISAM	BIT(15)
 
@@ -475,7 +474,7 @@ struct hal_rx_he_sig_b2_mu_info {
 
 #define HAL_RX_HE_SIG_B2_OFDMA_INFO_INFO0_STA_ID	GENMASK(10, 0)
 #define HAL_RX_HE_SIG_B2_OFDMA_INFO_INFO0_STA_NSTS	GENMASK(13, 11)
-#define HAL_RX_HE_SIG_B2_OFDMA_INFO_INFO0_STA_TXBF	BIT(19)
+#define HAL_RX_HE_SIG_B2_OFDMA_INFO_INFO0_STA_TXBF	BIT(14)
 #define HAL_RX_HE_SIG_B2_OFDMA_INFO_INFO0_STA_MCS	GENMASK(18, 15)
 #define HAL_RX_HE_SIG_B2_OFDMA_INFO_INFO0_STA_DCM	BIT(19)
 #define HAL_RX_HE_SIG_B2_OFDMA_INFO_INFO0_STA_CODING	BIT(20)
@@ -733,33 +732,33 @@ struct hal_mon_usig_hdr {
 	union hal_mon_usig_non_cmn usig_2;
 } __packed;
 
-#define HAL_RX_USR_INFO0_RECEPTION_TYPE			GENMASK(2, 0)
-#define HAL_RX_USR_INFO0_STBC				BIT(3)
-#define HAL_RX_USR_INFO0_PKT_TYPE			GENMASK(7, 4)
-#define HAL_RX_USR_INFO0_USR_RSSI			GENMASK(15, 8)
-#define HAL_RX_USR_INFO0_PHY_PPDU_ID			GENMASK(31, 16)
-
-#define HAL_RX_USR_INFO1_DL_OFMDA_USR_IDX		GENMASK(7, 0)
-#define HAL_RX_USR_INFO1_RX_BW				GENMASK(15, 13)
-#define HAL_RX_USR_INFO1_MIMO_SS_BITMAP			GENMASK(23, 16)
-#define HAL_RX_USR_INFO1_HE_RANGING_NDP			BIT(25)
-#define HAL_RX_USR_INFO1_SGI				GENMASK(27, 26)
-#define HAL_RX_USR_INFO1_MCS				GENMASK(31, 28)
-
-#define HAL_RX_USR_INFO2_RU_TYPE_80_3			GENMASK(3, 0)
-#define HAL_RX_USR_INFO2_RU_TYPE_80_2			GENMASK(7, 4)
-#define HAL_RX_USR_INFO2_RU_TYPE_80_1			GENMASK(11, 8)
-#define HAL_RX_USR_INFO2_RU_TYPE_80_0			GENMASK(15, 12)
-#define HAL_RX_USR_INFO2_LDPC				BIT(16)
-#define HAL_RX_USR_INFO2_STA_DCM			BIT(17)
-#define HAL_RX_USR_INFO2_STREAM_OFFSET			GENMASK(20, 18)
-#define HAL_RX_USR_INFO2_NSS				GENMASK(23, 21)
-#define HAL_RX_USR_INFO2_DL_OFDMA_CONTENT_CHAN		BIT(31)
-
-#define HAL_RX_USR_INFO3_RU_START_IDX_80_3		GENMASK(7, 2)
-#define HAL_RX_USR_INFO3_RU_START_IDX_80_2		GENMASK(15, 10)
-#define HAL_RX_USR_INFO3_RU_START_IDX_80_1		GENMASK(23, 18)
-#define HAL_RX_USR_INFO3_RU_START_IDX_80_0		GENMASK(31, 26)
+#define HAL_RX_USR_INFO0_PHY_PPDU_ID		GENMASK(15, 0)
+#define HAL_RX_USR_INFO0_USR_RSSI		GENMASK(23, 16)
+#define HAL_RX_USR_INFO0_PKT_TYPE		GENMASK(27, 24)
+#define HAL_RX_USR_INFO0_STBC			BIT(28)
+#define HAL_RX_USR_INFO0_RECEPTION_TYPE		GENMASK(31, 29)
+
+#define HAL_RX_USR_INFO1_MCS			GENMASK(3, 0)
+#define HAL_RX_USR_INFO1_SGI			GENMASK(5, 4)
+#define HAL_RX_USR_INFO1_HE_RANGING_NDP		BIT(6)
+#define HAL_RX_USR_INFO1_MIMO_SS_BITMAP		GENMASK(15, 8)
+#define HAL_RX_USR_INFO1_RX_BW			GENMASK(18, 16)
+#define HAL_RX_USR_INFO1_DL_OFMDA_USR_IDX	GENMASK(31, 24)
+
+#define HAL_RX_USR_INFO2_DL_OFDMA_CONTENT_CHAN	BIT(0)
+#define HAL_RX_USR_INFO2_NSS			GENMASK(10, 8)
+#define HAL_RX_USR_INFO2_STREAM_OFFSET		GENMASK(13, 11)
+#define HAL_RX_USR_INFO2_STA_DCM		BIT(14)
+#define HAL_RX_USR_INFO2_LDPC			BIT(15)
+#define HAL_RX_USR_INFO2_RU_TYPE_80_0		GENMASK(19, 16)
+#define HAL_RX_USR_INFO2_RU_TYPE_80_1		GENMASK(23, 20)
+#define HAL_RX_USR_INFO2_RU_TYPE_80_2		GENMASK(27, 24)
+#define HAL_RX_USR_INFO2_RU_TYPE_80_3		GENMASK(31, 28)
+
+#define HAL_RX_USR_INFO3_RU_START_IDX_80_0	GENMASK(5, 0)
+#define HAL_RX_USR_INFO3_RU_START_IDX_80_1	GENMASK(13, 8)
+#define HAL_RX_USR_INFO3_RU_START_IDX_80_2	GENMASK(21, 16)
+#define HAL_RX_USR_INFO3_RU_START_IDX_80_3	GENMASK(29, 24)
 
 struct hal_receive_user_info {
 	__le32 info0;
--- a/drivers/net/wireless/ath/ath12k/dp_mon.c
+++ b/drivers/net/wireless/ath/ath12k/dp_mon.c
@@ -110,10 +110,6 @@ static void ath12k_dp_mon_parse_vht_sig_
 	ppdu_info->beamformed = u32_get_bits(info1,
 					     HAL_RX_VHT_SIG_A_INFO_INFO1_BEAMFORMED);
 	group_id = u32_get_bits(info0, HAL_RX_VHT_SIG_A_INFO_INFO0_GROUP_ID);
-	if (group_id == 0 || group_id == 63)
-		ppdu_info->reception_type = HAL_RX_RECEPTION_TYPE_SU;
-	else
-		ppdu_info->reception_type = HAL_RX_RECEPTION_TYPE_MU_MIMO;
 	ppdu_info->vht_flag_values5 = group_id;
 	ppdu_info->vht_flag_values3[0] = (((ppdu_info->mcs) << 4) |
 					    ppdu_info->nss);
@@ -136,7 +132,6 @@ static void ath12k_dp_mon_parse_ht_sig(u
 	ppdu_info->ldpc = u32_get_bits(info1, HAL_RX_HT_SIG_INFO_INFO1_FEC_CODING);
 	ppdu_info->gi = u32_get_bits(info1, HAL_RX_HT_SIG_INFO_INFO1_GI);
 	ppdu_info->nss = (ppdu_info->mcs >> 3);
-	ppdu_info->reception_type = HAL_RX_RECEPTION_TYPE_SU;
 }
 
 static void ath12k_dp_mon_parse_l_sig_b(u8 *tlv_data,
@@ -170,7 +165,6 @@ static void ath12k_dp_mon_parse_l_sig_b(
 
 	ppdu_info->rate = rate;
 	ppdu_info->cck_flag = 1;
-	ppdu_info->reception_type = HAL_RX_RECEPTION_TYPE_SU;
 }
 
 static void ath12k_dp_mon_parse_l_sig_a(u8 *tlv_data,
@@ -212,7 +206,6 @@ static void ath12k_dp_mon_parse_l_sig_a(
 	}
 
 	ppdu_info->rate = rate;
-	ppdu_info->reception_type = HAL_RX_RECEPTION_TYPE_SU;
 }
 
 static void ath12k_dp_mon_parse_he_sig_b2_ofdma(u8 *tlv_data,
@@ -250,7 +243,6 @@ static void ath12k_dp_mon_parse_he_sig_b
 	ppdu_info->nss = u32_get_bits(info0, HAL_RX_HE_SIG_B2_OFDMA_INFO_INFO0_STA_NSTS);
 	ppdu_info->beamformed = u32_get_bits(info0,
 					     HAL_RX_HE_SIG_B2_OFDMA_INFO_INFO0_STA_TXBF);
-	ppdu_info->reception_type = HAL_RX_RECEPTION_TYPE_MU_OFDMA;
 }
 
 static void ath12k_dp_mon_parse_he_sig_b2_mu(u8 *tlv_data,
@@ -292,7 +284,6 @@ static void ath12k_dp_mon_parse_he_sig_b
 				HAL_RX_HE_SIG_B1_MU_INFO_INFO0_RU_ALLOCATION);
 	ppdu_info->ru_alloc = ath12k_mac_he_ru_tones_to_nl80211_he_ru_alloc(ru_tones);
 	ppdu_info->he_RU[0] = ru_tones;
-	ppdu_info->reception_type = HAL_RX_RECEPTION_TYPE_MU_MIMO;
 }
 
 static void ath12k_dp_mon_parse_he_sig_mu(u8 *tlv_data,
@@ -427,7 +418,6 @@ static void ath12k_dp_mon_parse_he_sig_m
 
 	ppdu_info->is_stbc = info1 &
 			     HAL_RX_HE_SIG_A_MU_DL_INFO1_STBC;
-	ppdu_info->reception_type = HAL_RX_RECEPTION_TYPE_MU_MIMO;
 }
 
 static void ath12k_dp_mon_parse_he_sig_su(u8 *tlv_data,
@@ -577,7 +567,6 @@ static void ath12k_dp_mon_parse_he_sig_s
 	dcm = u32_get_bits(info0, HAL_RX_HE_SIG_A_SU_INFO_INFO0_DCM);
 	ppdu_info->nss = u32_get_bits(info0, HAL_RX_HE_SIG_A_SU_INFO_INFO0_NSTS);
 	ppdu_info->dcm = dcm;
-	ppdu_info->reception_type = HAL_RX_RECEPTION_TYPE_SU;
 }
 
 static inline u32
@@ -1498,8 +1487,8 @@ ath12k_dp_mon_rx_parse_status_tlv(struct
 			u32_get_bits(info[1], HAL_RX_PPDU_END_USER_STATS_INFO1_FC_VALID);
 		ppdu_info->tid =
 			ffs(u32_get_bits(tid,
-					 HAL_RX_PPDU_END_USER_STATS_INFO6_TID_BITMAP)
-					 - 1);
+					 HAL_RX_PPDU_END_USER_STATS_INFO6_TID_BITMAP))
+					 - 1;
 		ppdu_info->tcp_msdu_count =
 			u32_get_bits(info[4],
 				     HAL_RX_PPDU_END_USER_STATS_INFO4_TCP_MSDU_CNT);
@@ -1521,6 +1510,8 @@ ath12k_dp_mon_rx_parse_status_tlv(struct
 		ppdu_info->num_mpdu_fcs_err =
 			u32_get_bits(info[0],
 				     HAL_RX_PPDU_END_USER_STATS_INFO0_MPDU_CNT_FCS_ERR);
+		ppdu_info->peer_id =
+			u32_get_bits(info[0], HAL_RX_PPDU_END_USER_STATS_INFO0_PEER_ID);
 
 		switch (ppdu_info->preamble_type) {
 		case HAL_RX_PREAMBLE_11N:
@@ -1602,7 +1593,6 @@ ath12k_dp_mon_rx_parse_status_tlv(struct
 	case HAL_PHYRX_RSSI_LEGACY: {
 		struct hal_rx_phyrx_rssi_legacy_info *rssi =
 			(struct hal_rx_phyrx_rssi_legacy_info *)tlv_data;
-		u32 reception_type = 0;
 		u32 rssi_legacy_info = __le32_to_cpu(rssi->info0);
 
 		info[0] = __le32_to_cpu(rssi->info1);
@@ -1614,22 +1604,6 @@ ath12k_dp_mon_rx_parse_status_tlv(struct
 		ppdu_info->rssi_comb =
 			u32_get_bits(info[0],
 				     HAL_RX_PHYRX_RSSI_LEGACY_INFO_INFO1_RSSI_COMB);
-		reception_type =
-			u32_get_bits(rssi_legacy_info,
-				     HAL_RX_PHYRX_RSSI_LEGACY_INFO_INFO0_RECEPTION);
-
-		switch (reception_type) {
-		case HAL_RECEPTION_TYPE_ULOFMDA:
-			ppdu_info->reception_type = HAL_RX_RECEPTION_TYPE_MU_OFDMA;
-			break;
-		case HAL_RECEPTION_TYPE_ULMIMO:
-			ppdu_info->reception_type = HAL_RX_RECEPTION_TYPE_MU_MIMO;
-			break;
-		default:
-			ppdu_info->reception_type = HAL_RX_RECEPTION_TYPE_SU;
-			break;
-		}
-
 		ppdu_info->bw = u32_get_bits(rssi_legacy_info,
 					     HAL_RX_PHYRX_RSSI_LEGACY_INFO_INFO0_RX_BW);
 		break;
@@ -1659,10 +1633,10 @@ ath12k_dp_mon_rx_parse_status_tlv(struct
 		ppdu_info->mpdu_len += u32_get_bits(info[1],
 						    HAL_RX_MPDU_START_INFO2_MPDU_LEN);
 		if (userid < HAL_MAX_UL_MU_USERS) {
-			info[0] = __le32_to_cpu(mpdu_start->info0);
+			info[1] = __le32_to_cpu(mpdu_start->info1);
 			ppdu_info->userid = userid;
 			ppdu_info->ampdu_id[userid] =
-				u32_get_bits(info[0], HAL_RX_MPDU_START_INFO1_PEERID);
+				u32_get_bits(info[1], HAL_RX_MPDU_START_INFO1_PEERID);
 		}
 
 		break;
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -1871,6 +1871,8 @@ void ath12k_dp_htt_htc_t2h_msg_handler(s
 					    HTT_T2H_PEER_MAP_INFO1_MAC_ADDR_H16);
 		ath12k_dp_get_mac_addr(resp->peer_map_ev.mac_addr_l32,
 				       peer_mac_h16, mac_addr);
+		ast_hash = FIELD_GET(HTT_T2H_PEER_MAP_INFO2_AST_HASH_VAL,
+				     resp->peer_map_ev.info2);
 		ath12k_peer_map_event(ab, vdev_id, peer_id, mac_addr, ast_hash,
 				      peer_id);
 		break;
