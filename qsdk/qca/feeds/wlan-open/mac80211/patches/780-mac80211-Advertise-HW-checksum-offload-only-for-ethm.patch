From d4ddaebe2132dbb169f78da3666b11a21f645ea0 Mon Sep 17 00:00:00 2001
From: Tamizh Chelvam Raja <quic_tamizhr@quicinc.com>
Date: Fri, 21 Apr 2023 12:28:21 +0530
Subject: [PATCH] mac80211: Advertise HW checksum offload only for ethmode

Upper(NSS/SFE) layer might remove checksum offset from a skb
for the net device which advertise HW checksum offload
feature. This would create an issue if any software encrypted
packet or for the netdev which don't support IEEE80211_OFFLOAD_*.
Avoid this by advertising the HW checksum offload feature
only for the netdev which supports IEEE80211_OFFLOAD_*
and have an check before checking checksum offset for the
exceptional packets getting called from 8023_xmit API.

Signed-off-by: Tamizh Chelvam Raja <quic_tamizhr@quicinc.com>
---
 net/mac80211/ieee80211_i.h |  3 ++-
 net/mac80211/iface.c       |  4 ++++
 net/mac80211/tdls.c        |  2 +-
 net/mac80211/tx.c          | 19 ++++++++++---------
 4 files changed, 17 insertions(+), 11 deletions(-)

--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -2425,6 +2425,10 @@ int ieee80211_if_add(struct ieee80211_lo
 			sdata->u.mgd.use_4addr = params->use_4addr;
 
 		ndev->features |= local->hw.netdev_features;
+		if ((type == NL80211_IFTYPE_AP || type == NL80211_IFTYPE_STATION) &&
+		    ieee80211_hw_check(&local->hw, SUPPORTS_TX_ENCAP_OFFLOAD) && !params->use_4addr)
+		    	ndev->features |= NETIF_F_HW_CSUM;
+
 		ndev->hw_features |= ndev->features &
 					MAC80211_SUPPORTED_FEATURES_TX;
 
--- a/net/mac80211/tx.c
+++ b/net/mac80211/tx.c
@@ -36,6 +36,8 @@
 #include "wme.h"
 #include "rate.h"
 
+#define IS_HW_CSUM_NOT_ENABLED(dev)		(!((dev)->features & NETIF_F_HW_CSUM))
+
 static void ieee80211_8023_xmit(struct ieee80211_sub_if_data *sdata,
 				struct net_device *dev, struct sta_info *sta,
 				struct ieee80211_key *key, struct sk_buff *skb,
@@ -3688,7 +3690,7 @@ static bool ieee80211_mesh_xmit_fast(str
 	/* if frame is software encrypted, checksum offloaded to
 	 * hardware can not be handled. Handle it in software instead
 	 */
-	if (skb->ip_summed == CHECKSUM_PARTIAL) {
+	if (skb->ip_summed == CHECKSUM_PARTIAL && IS_HW_CSUM_NOT_ENABLED(sdata->dev)) {
 		skb_set_transport_header(skb,
 					 skb_checksum_start_offset(skb));
 		if (skb_checksum_help(skb))
@@ -4403,7 +4405,7 @@ void __ieee80211_subif_start_xmit(struct
 		 * things so we cannot really handle checksum offload with it -
 		 * fix it up in software before we handle anything else.
 		 */
-		if (skb->ip_summed == CHECKSUM_PARTIAL) {
+		if (skb->ip_summed == CHECKSUM_PARTIAL && IS_HW_CSUM_NOT_ENABLED(dev)) {
 			skb_set_transport_header(skb,
 						 skb_checksum_start_offset(skb));
 			if (skb_checksum_help(skb))
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -15046,7 +15046,6 @@ static int ath12k_mac_hw_register(struct
 	ah->hw->wiphy->reg_notifier = ath12k_reg_notifier;
 
 	if (!test_bit(ATH12K_FLAG_RAW_MODE, &ag->dev_flags)) {
-		hw->netdev_features = NETIF_F_HW_CSUM;
 		ieee80211_hw_set(hw, SW_CRYPTO_CONTROL);
 		ieee80211_hw_set(hw, SUPPORT_FAST_XMIT);
 	}
