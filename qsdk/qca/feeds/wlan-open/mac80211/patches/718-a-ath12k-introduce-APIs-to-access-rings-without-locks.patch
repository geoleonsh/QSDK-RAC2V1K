From aa3a414286147ff22842e0872a5365698deb7d77 Mon Sep 17 00:00:00 2001
From: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Date: Sat, 4 Mar 2023 19:58:40 -0800
Subject: [PATCH] ath12k: introduce APIs to access rings without locks

Use these APIs to access transmit and transmit completion rings without
locks in the datapath

Signed-off-by: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
Signed-off-by: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_tx.c | 57 +++++++++++++--------------------
 drivers/net/wireless/ath/ath12k/hal.h   | 56 ++++++++++++++++++++++++++++++++
 2 files changed, 79 insertions(+), 34 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/dp_tx.c b/drivers/net/wireless/ath/ath12k/dp_tx.c
index 0224a67..a461c7d 100644
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -77,6 +77,25 @@ static void ath12k_dp_tx_release_txbuf(struct ath12k_dp *dp,
 	spin_unlock_bh(&dp->tx_desc_lock[ring_id]);
 }
 
+static inline
+struct ath12k_tx_desc_info *ath12k_dp_tx_assign_buffer_nolock(struct ath12k_dp *dp,
+							      u8 pool_id)
+{
+	struct ath12k_tx_desc_info *desc = NULL;
+
+	desc = list_first_entry_or_null(&dp->tx_desc_free_list[pool_id],
+					struct ath12k_tx_desc_info,
+					list);
+	if (!desc) {
+		ath12k_warn(dp->ab, "failed to allocate data Tx buffer\n");
+		return NULL;
+	}
+
+	list_move_tail(&desc->list, &dp->tx_desc_used_list[pool_id]);
+
+	return desc;
+}
+
 static struct ath12k_tx_desc_info *ath12k_dp_tx_assign_buffer(struct ath12k_dp *dp,
 							      u8 ring_id)
 {
@@ -175,8 +194,6 @@ int ath12k_dp_tx(struct ath12k *ar, struct ath12k_link_vif *arvif,
 	void *hal_tcl_desc;
 	u8 hal_ring_id;
 	int ret;
-	u8 ring_selector = 0, ring_map = 0;
-	bool tcl_ring_retry;
 	u16 peer_id;
 	bool msdu_ext_desc = false;
 	bool is_diff_encap = false;
@@ -189,20 +206,10 @@ int ath12k_dp_tx(struct ath12k *ar, struct ath12k_link_vif *arvif,
 	    !ieee80211_is_data(hdr->frame_control)))
 		return -ENOTSUPP;
 
-	/* Let the default ring selection be based on current processor
-	 * number, where one of the 3 tcl rings are selected based on
-	 * the smp_processor_id(). In case that ring
-	 * is full/busy, we resort to other available rings.
-	 * If all rings are full, we drop the packet.
-	 * TODO: Add throttling logic when all rings are full
-	 */
-	ring_selector = ab->hw_params->hw_ops->get_ring_selector(skb);
-
-tcl_ring_sel:
-	tcl_ring_retry = false;
-	ti.ring_id = ring_selector % ab->hw_params->max_tx_ring;
+	ti.ring_id =
+		ab->hw_params->hw_ops->get_ring_selector(skb) %
+		ab->hw_params->max_tx_ring;
 
-	ring_map |= BIT(ti.ring_id);
 	ti.rbm_id = ab->hw_params->hal_ops->tcl_to_wbm_rbm_map[ti.ring_id].rbm_id;
 
 	tx_ring = &dp->tx_ring[ti.ring_id];
@@ -210,12 +217,7 @@ tcl_ring_sel:
 	tx_desc = ath12k_dp_tx_assign_buffer(dp, ti.ring_id);
 	if (unlikely(!tx_desc)) {
 		ab->soc_stats.tx_err.txbuf_na[ti.ring_id]++;
-		if (ring_map == (BIT(DP_TCL_NUM_RING_MAX) - 1))
-			return -ENOSPC;
-
-		/* Check if the next ring is available */
-		ring_selector++;
-		goto tcl_ring_sel;
+		return -ENOSPC;
 	}
 
 	ti.bank_id = arvif->bank_id;
@@ -409,17 +411,6 @@ tcl_ring_sel:
 		spin_unlock_bh(&tcl_ring->lock);
 		ret = -ENOMEM;
 
-		/* Checking for available tcl descritors in another ring in
-		 * case of failure due to full tcl ring now, is better than
-		 * checking this ring earlier for each pkt tx.
-		 * Restart ring selection if some rings are not checked yet.
-		 */
-		if (unlikely(ring_map != (BIT(ab->hw_params->max_tx_ring) - 1) &&
-			     ab->hw_params->tcl_ring_retry)) {
-			tcl_ring_retry = true;
-			ring_selector++;
-		}
-
 		goto fail_unmap_dma_ext_desc;
 	}
 
@@ -456,8 +447,6 @@ fail_remove_tx_buf:
 		skb_pull(skb, ti.pkt_offset);
 
 	arvif->link_stats.tx_dropped++;
-	if (tcl_ring_retry)
-		goto tcl_ring_sel;
 
 	return ret;
 }
diff --git a/drivers/net/wireless/ath/ath12k/hal.h b/drivers/net/wireless/ath/ath12k/hal.h
index ae7c54c..75f01a6 100644
--- a/drivers/net/wireless/ath/ath12k/hal.h
+++ b/drivers/net/wireless/ath/ath12k/hal.h
@@ -9,6 +9,7 @@
 
 #include "hal_desc.h"
 #include "rx_desc.h"
+#include "core.h"
 
 struct ath12k_base;
 #define HAL_CE_REMAP_REG_BASE	(ab->ce_remap_base_addr)
@@ -60,6 +61,7 @@ struct ath12k_base;
 #define HAL_SEQ_WCSS_UMAC_WBM_REG		0x00a34000
 
 #define HAL_CE_WFSS_CE_REG_BASE			0x01b80000
+#define HAL_DP_REG_WINDOW_OFFSET		0x180000
 
 #define HAL_TCL_SW_CONFIG_BANK_ADDR		0x00a4408c
 
@@ -575,6 +577,7 @@ enum hal_ring_type {
 	HAL_MAX_RING_TYPES,
 };
 
+#define WINDOW_RANGE_MASK GENMASK(18, 0)
 #define HAL_RX_MAX_BA_WINDOW	256
 
 #define HAL_DEFAULT_BE_BK_VI_REO_TIMEOUT_USEC	(100 * 1000)
@@ -1192,4 +1195,57 @@ void ath12k_hal_reo_ring_ctrl_hash_ix3_setup(struct ath12k_base *ab,
 void ath12k_hal_reo_ring_ctrl_hash_ix2_setup(struct ath12k_base *ab,
 					     u32 ring_hash_map);
 void ath12k_hal_reo_shared_qaddr_cache_clear(struct ath12k_base *ab);
+
+static inline
+u32 *ath12k_hal_srng_src_get_next_entry_nolock(struct ath12k_base *ab,
+					       struct hal_srng *srng)
+{
+	u32 *desc;
+	u32 next_hp;
+
+	/* TODO: Using % is expensive, but we have to do this since size of some
+	 * SRNG rings is not power of 2 (due to descriptor sizes). Need to see
+	 * if separate function is defined for rings having power of 2 ring size
+	 * (TCL2SW, REO2SW, SW2RXDMA and CE rings) so that we can avoid the
+	 * overhead of % by using mask (with &).
+	 */
+	next_hp = (srng->u.src_ring.hp + srng->entry_size) % srng->ring_size;
+
+	if (next_hp == srng->u.src_ring.cached_tp)
+		return NULL;
+
+	desc = srng->ring_base_vaddr + srng->u.src_ring.hp;
+	srng->u.src_ring.hp = next_hp;
+
+	/* TODO: Reap functionality is not used by all rings. If particular
+	 * ring does not use reap functionality, we need not update reap_hp
+	 * with next_hp pointer. Need to make sure a separate function is used
+	 * before doing any optimization by removing below code updating
+	 * reap_hp.
+	 */
+	srng->u.src_ring.reap_hp = next_hp;
+
+	return desc;
+}
+
+static inline
+void ath12k_hal_srng_access_src_ring_begin_nolock(void *mem,
+						  struct hal_srng *srng)
+{
+	srng->u.src_ring.cached_tp = *(volatile u32 *)srng->u.src_ring.tp_addr;
+}
+
+static inline
+void ath12k_hal_srng_access_umac_src_ring_end_nolock(void *mem,
+						     struct hal_srng *srng)
+{
+	u32 offset = (unsigned long)srng->u.src_ring.hp_addr - (unsigned long)mem;
+
+	srng->u.src_ring.last_tp =
+			*(volatile u32 *)srng->u.src_ring.tp_addr;
+	iowrite32(srng->u.src_ring.hp, mem + HAL_DP_REG_WINDOW_OFFSET
+		  + (offset & WINDOW_RANGE_MASK));
+	srng->timestamp = jiffies;
+}
+
 #endif
-- 
2.7.4

