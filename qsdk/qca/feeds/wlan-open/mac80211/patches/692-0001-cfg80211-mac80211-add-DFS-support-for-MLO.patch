From 3204c1c02d7e85b8dd02357d1f8bb5ae3cd429bd Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Mon, 12 Dec 2022 10:04:23 +0530
Subject: [PATCH 1/2] cfg80211/mac80211: add DFS support for MLO

Currently, Dynamic Frequency Selection (DFS) and its related radar
events was supported only for non-MLO case where deflink
(or link_id 0) was always considered.
However, with MLO in place, there is need to handle DFS in per-link
manner instead of always assuming link_id 0.

Add support to handle DFS and radar related events per-link basis.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 include/net/cfg80211.h  | 23 +++++++++++---------
 net/mac80211/cfg.c      | 47 +++++++++++++++++++++++++++++------------
 net/mac80211/iface.c    |  4 ++--
 net/mac80211/link.c     | 26 ++++++++++++++++++++++-
 net/mac80211/mlme.c     | 12 +++++------
 net/mac80211/scan.c     |  3 ++-
 net/mac80211/util.c     | 34 +++++++++++++++++++++--------
 net/wireless/mlme.c     | 20 ++++++++----------
 net/wireless/nl80211.c  | 29 +++++++++++++++++++------
 net/wireless/rdev-ops.h | 12 ++++++-----
 net/wireless/reg.c      | 19 ++++++++++-------
 net/wireless/trace.h    | 29 +++++++++++++++----------
 12 files changed, 173 insertions(+), 85 deletions(-)

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -992,6 +992,16 @@ int cfg80211_chandef_dfs_required(struct
 				  enum nl80211_iftype iftype);
 
 /**
+ * cfg80211_chandef_dfs_available - checks if radar is already available
+ * @wiphy: the wiphy to validate against
+ * @chandef: the channel definition to check
+ * Returns:
+ *	true if all channels are radar available, false otherwise
+ */
+bool cfg80211_chandef_dfs_available(struct wiphy *wiphy,
+				    const struct cfg80211_chan_def *chandef);
+
+/**
  * ieee80211_chanwidth_rate_flags - return rate flags for channel width
  * @width: the channel width of the channel
  *
@@ -4657,10 +4667,12 @@ struct cfg80211_ops {
 
 	int	(*start_radar_detection)(struct wiphy *wiphy,
 					 struct net_device *dev,
+					 unsigned int link_id,
 					 struct cfg80211_chan_def *chandef,
 					 u32 cac_time_ms);
 	void	(*end_cac)(struct wiphy *wiphy,
-				struct net_device *dev);
+			   struct net_device *dev,
+			   unsigned int link_id);
 	int	(*update_ft_ies)(struct wiphy *wiphy, struct net_device *dev,
 				 struct cfg80211_update_ft_ies_params *ftie);
 	int	(*crit_proto_start)(struct wiphy *wiphy,
@@ -5957,9 +5969,6 @@ static inline void wiphy_unlock(struct w
  * @address: The address for this device, valid only if @netdev is %NULL
  * @is_running: true if this is a non-netdev device that has been started, e.g.
  *	the P2P Device.
- * @cac_started: true if DFS channel availability check has been started
- * @cac_start_time: timestamp (jiffies) when the dfs state was entered.
- * @cac_time_ms: CAC time in ms
  * @ps: powersave mode is enabled
  * @ps_timeout: dynamic powersave timeout
  * @ap_unexpected_nlportid: (private) netlink port ID of application
@@ -5982,6 +5991,9 @@ static inline void wiphy_unlock(struct w
  *	unprotected beacon report
  * @links: array of %IEEE80211_MLD_MAX_NUM_LINKS elements containing @addr
  *	@ap and @client for each link
+ * @links[].cac_started: true if DFS channel availability check has been started
+ * @links[].cac_start_time: timestamp (jiffies) when the dfs state was entered.
+ * @links[].cac_time_ms: CAC time in ms
  * @valid_links: bitmap describing what elements of @links are valid
  */
 struct wireless_dev {
@@ -6025,11 +6037,6 @@ struct wireless_dev {
 	u32 owner_nlportid;
 	bool nl_owner_dead;
 
-	/* FIXME: need to rework radar detection for MLO */
-	bool cac_started;
-	unsigned long cac_start_time;
-	unsigned int cac_time_ms;
-
 #ifdef CPTCFG_CFG80211_WEXT
 	/* wext data */
 	struct {
@@ -6095,6 +6102,10 @@ struct wireless_dev {
 				struct cfg80211_internal_bss *current_bss;
 			} client;
 		};
+
+		bool cac_started;
+		unsigned long cac_start_time;
+		unsigned int cac_time_ms;
 	} links[IEEE80211_MLD_MAX_NUM_LINKS];
 	u16 valid_links;
 
@@ -8407,6 +8418,7 @@ void cfg80211_sta_opmode_change_notify(s
  * @chandef: chandef for the current channel
  * @event: type of event
  * @gfp: context flags
+ * @link_id: valid link_id for MLO operation or 0 otherwise.
  *
  * This function is called when a Channel availability check (CAC) is finished
  * or aborted. This must be called to notify the completion of a CAC process,
@@ -8414,7 +8426,8 @@ void cfg80211_sta_opmode_change_notify(s
  */
 void cfg80211_cac_event(struct net_device *netdev,
 			const struct cfg80211_chan_def *chandef,
-			enum nl80211_radar_event event, gfp_t gfp);
+			enum nl80211_radar_event event, gfp_t gfp,
+			unsigned int link_id);
 
 /**
  * cfg80211_background_cac_abort - Channel Availability Check offchan abort event
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -1658,12 +1658,12 @@ static int ieee80211_stop_ap(struct wiph
 	ieee80211_link_info_change_notify(sdata, link,
 					  BSS_CHANGED_BEACON_ENABLED);
 
-	if (sdata->wdev.cac_started) {
+	if (sdata->wdev.links[link_id].cac_started) {
 		chandef = link_conf->chandef;
 		cancel_delayed_work_sync(&link->dfs_cac_timer_work);
 		cfg80211_cac_event(sdata->dev, &chandef,
 				   NL80211_RADAR_CAC_ABORTED,
-				   GFP_KERNEL);
+				   GFP_KERNEL, link_id);
 	}
 
 	drv_stop_ap(sdata->local, sdata, link_conf);
@@ -3460,13 +3460,19 @@ static int ieee80211_set_bitrate_mask(st
 
 static int ieee80211_start_radar_detection(struct wiphy *wiphy,
 					   struct net_device *dev,
+					   unsigned int link_id,
 					   struct cfg80211_chan_def *chandef,
 					   u32 cac_time_ms)
 {
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
 	struct ieee80211_local *local = sdata->local;
+	struct ieee80211_link_data *link;
 	int err;
 
+	link = sdata_dereference(sdata->link[link_id], sdata);
+	if (!link)
+		return -ENOLINK;
+
 	mutex_lock(&local->mtx);
 	if (!list_empty(&local->roc_list) || local->scanning) {
 		err = -EBUSY;
@@ -3474,16 +3480,16 @@ static int ieee80211_start_radar_detecti
 	}
 
 	/* whatever, but channel contexts should not complain about that one */
-	sdata->deflink.smps_mode = IEEE80211_SMPS_OFF;
-	sdata->deflink.needed_rx_chains = local->rx_chains;
+	link->smps_mode = IEEE80211_SMPS_OFF;
+	link->needed_rx_chains = local->rx_chains;
 
-	err = ieee80211_link_use_channel(&sdata->deflink, chandef,
+	err = ieee80211_link_use_channel(link, chandef,
 					 IEEE80211_CHANCTX_SHARED);
 	if (err)
 		goto out_unlock;
 
 	ieee80211_queue_delayed_work(&sdata->local->hw,
-				     &sdata->deflink.dfs_cac_timer_work,
+				     &link->dfs_cac_timer_work,
 				     msecs_to_jiffies(cac_time_ms));
 
  out_unlock:
@@ -3492,22 +3498,30 @@ static int ieee80211_start_radar_detecti
 }
 
 static void ieee80211_end_cac(struct wiphy *wiphy,
-			      struct net_device *dev)
+			      struct net_device *dev,
+			      unsigned int link_id)
 {
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
 	struct ieee80211_local *local = sdata->local;
+	struct ieee80211_link_data *link;
 
 	mutex_lock(&local->mtx);
 	list_for_each_entry(sdata, &local->interfaces, list) {
 		/* it might be waiting for the local->mtx, but then
-		 * by the time it gets it, sdata->wdev.cac_started
-		 * will no longer be true
+		 * by the time it gets it,
+		 * sdata->wdev.links[link_id].cac_started will no
+		 * longer be true
 		 */
-		cancel_delayed_work(&sdata->deflink.dfs_cac_timer_work);
+		link = sdata_dereference(sdata->link[link_id], sdata);
+
+		if (!link)
+			continue;
+
+		cancel_delayed_work(&link->dfs_cac_timer_work);
 
-		if (sdata->wdev.cac_started) {
-			ieee80211_link_release_channel(&sdata->deflink);
-			sdata->wdev.cac_started = false;
+		if (sdata->wdev.links[link_id].cac_started) {
+			ieee80211_link_release_channel(link);
+			sdata->wdev.links[link_id].cac_started = false;
 		}
 	}
 	mutex_unlock(&local->mtx);
@@ -3996,7 +4010,7 @@ __ieee80211_channel_switch(struct wiphy
 	if (!list_empty(&local->roc_list) || local->scanning)
 		return -EBUSY;
 
-	if (sdata->wdev.cac_started)
+	if (sdata->wdev.links[link_id].cac_started)
 		return -EBUSY;
 
 	link = sdata_dereference(sdata->link[link_id], sdata);
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -487,7 +487,7 @@ static void ieee80211_do_stop(struct iee
 
 	cancel_delayed_work_sync(&sdata->deflink.dfs_cac_timer_work);
 
-	if (sdata->wdev.cac_started) {
+	if (sdata->wdev.links[0].cac_started) {
 		chandef = sdata->vif.bss_conf.chandef;
 		WARN_ON(local->suspended);
 		mutex_lock(&local->mtx);
@@ -495,7 +495,7 @@ static void ieee80211_do_stop(struct iee
 		mutex_unlock(&local->mtx);
 		cfg80211_cac_event(sdata->dev, &chandef,
 				   NL80211_RADAR_CAC_ABORTED,
-				   GFP_KERNEL);
+				   GFP_KERNEL, 0);
 	}
 
 	if (sdata->vif.type == NL80211_IFTYPE_AP) {
--- a/net/mac80211/link.c
+++ b/net/mac80211/link.c
@@ -101,9 +101,33 @@ static void ieee80211_free_links(struct
 				 struct link_container **links)
 {
 	unsigned int link_id;
+	struct ieee80211_link_data *link;
+	struct ieee80211_bss_conf *link_conf;
+	struct cfg80211_chan_def chandef;
+
+	for (link_id = 0; link_id < IEEE80211_MLD_MAX_NUM_LINKS; link_id++) {
+		link = &links[link_id]->data;
+		link_conf = &links[link_id]->conf;
+
+		if (!link || !link_conf)
+			continue;
+
+		cancel_delayed_work(&link->dfs_cac_timer_work);
+
+		if (sdata->wdev.links[link_id].cac_started) {
+			chandef = link_conf->chandef;
+			WARN_ON(sdata->local->suspended);
+			mutex_lock(&sdata->local->mtx);
+			ieee80211_link_release_channel(link);
+			mutex_unlock(&sdata->local->mtx);
+			cfg80211_cac_event(sdata->dev,
+					   &chandef,
+					   NL80211_RADAR_CAC_ABORTED,
+					   GFP_KERNEL, link_id);
+		}
 
-	for (link_id = 0; link_id < IEEE80211_MLD_MAX_NUM_LINKS; link_id++)
 		kfree(links[link_id]);
+	}
 }
 
 static int ieee80211_check_dup_link_addrs(struct ieee80211_sub_if_data *sdata)
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -2340,12 +2340,14 @@ void ieee80211_dfs_cac_timer_work(struct
 	struct ieee80211_sub_if_data *sdata = link->sdata;
 
 	mutex_lock(&sdata->local->mtx);
-	if (sdata->wdev.cac_started) {
+
+	if (sdata->wdev.links[link->link_id].cac_started) {
 		ieee80211_link_release_channel(link);
 		cfg80211_cac_event(sdata->dev, &chandef,
 				   NL80211_RADAR_CAC_FINISHED,
-				   GFP_KERNEL);
+				   GFP_KERNEL, link->link_id);
 	}
+
 	mutex_unlock(&sdata->local->mtx);
 }
 
--- a/net/mac80211/scan.c
+++ b/net/mac80211/scan.c
@@ -584,7 +584,8 @@ static bool __ieee80211_can_leave_ch(str
 
 	mutex_lock(&local->iflist_mtx);
 	list_for_each_entry(sdata_iter, &local->interfaces, list) {
-		if (sdata_iter->wdev.cac_started) {
+		/* TODO: link_id with MLO. */
+		if (sdata_iter->wdev.links[0].cac_started) {
 			mutex_unlock(&local->iflist_mtx);
 			return false;
 		}
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -4238,6 +4238,9 @@ void ieee80211_dfs_cac_cancel(struct iee
 {
 	struct ieee80211_sub_if_data *sdata;
 	struct cfg80211_chan_def chandef;
+	struct ieee80211_link_data *link;
+	struct ieee80211_bss_conf *link_conf;
+	unsigned int link_id;
 
 	/* for interface list, to avoid linking iflist_mtx and chanctx_mtx */
 	lockdep_assert_wiphy(local->hw.wiphy);
@@ -4248,15 +4251,28 @@ void ieee80211_dfs_cac_cancel(struct iee
 		 * by the time it gets it, sdata->wdev.cac_started
 		 * will no longer be true
 		 */
-		cancel_delayed_work(&sdata->deflink.dfs_cac_timer_work);
+		for (link_id = 0; link_id < IEEE80211_MLD_MAX_NUM_LINKS; link_id++) {
+			link = sdata_dereference(sdata->link[link_id], sdata);
 
-		if (sdata->wdev.cac_started) {
-			chandef = sdata->vif.bss_conf.chandef;
-			ieee80211_link_release_channel(&sdata->deflink);
-			cfg80211_cac_event(sdata->dev,
-					   &chandef,
+			if (!link)
+				continue;
+
+			cancel_delayed_work(&link->dfs_cac_timer_work);
+
+			if (!sdata->wdev.links[link_id].cac_started)
+				continue;
+
+			link_conf =
+				rcu_dereference(sdata->vif.link_conf[link_id]);
+
+			if (!link_conf)
+				continue;
+
+			chandef = link_conf->chandef;
+			ieee80211_link_release_channel(link);
+			cfg80211_cac_event(sdata->dev, &chandef,
 					   NL80211_RADAR_CAC_ABORTED,
-					   GFP_KERNEL);
+					   GFP_KERNEL, link_id);
 		}
 	}
 	mutex_unlock(&local->mtx);
@@ -4290,9 +4306,11 @@ void ieee80211_awgn_detected_work(struct
 
 static void
 ieee80211_dfs_radar_detected_processing(struct ieee80211_local *local,
-					u16 radar_bitmap)
+					u16 radar_bitmap,
+					struct ieee80211_channel *radar_channel)
 {
 	struct cfg80211_chan_def chandef = local->hw.conf.chandef;
+	struct cfg80211_chan_def *radar_chandef = NULL;
 	struct ieee80211_chanctx *ctx;
 	int num_chanctx = 0;
 
@@ -4303,6 +4321,10 @@ ieee80211_dfs_radar_detected_processing(
 
 		num_chanctx++;
 		chandef = ctx->conf.def;
+
+		if (radar_channel &&
+		    (chandef.chan == radar_channel))
+			radar_chandef = &ctx->conf.def;
 	}
 	mutex_unlock(&local->chanctx_mtx);
 
@@ -4310,13 +4332,24 @@ ieee80211_dfs_radar_detected_processing(
 	ieee80211_dfs_cac_cancel(local);
 	wiphy_unlock(local->hw.wiphy);
 
+	if (radar_chandef)
+		radar_chandef->radar_bitmap = radar_bitmap;
+
 	chandef.radar_bitmap = radar_bitmap;
 
-	if (num_chanctx > 1)
-		/* XXX: multi-channel is not supported yet */
-		WARN_ON(1);
-	else
+	if (num_chanctx > 1) {
+		if (local->hw.wiphy->flags & WIPHY_FLAG_SUPPORTS_MLO) {
+			if (WARN_ON(!radar_chandef))
+				return;
+
+			cfg80211_radar_event(local->hw.wiphy, radar_chandef, GFP_KERNEL);
+		} else {
+			/* XXX: multi-channel is not supported yet */
+			WARN_ON(1);
+		}
+	} else {
 		cfg80211_radar_event(local->hw.wiphy, &chandef, GFP_KERNEL);
+	}
 }
 
 void ieee80211_dfs_radar_detected_work(struct work_struct *work)
@@ -4325,14 +4358,18 @@ void ieee80211_dfs_radar_detected_work(s
 		container_of(work, struct ieee80211_local, radar_detected_work);
 	struct channel_radar_info *radar_info, *temp;
 	u16 radar_bitmap;
+	struct ieee80211_channel *radar_channel;
 
 	if (list_empty(&local->radar_info_list))
-		return ieee80211_dfs_radar_detected_processing(local, 0);
+		return ieee80211_dfs_radar_detected_processing(local, 0,
+							       radar_channel);
 
 	list_for_each_entry_safe(radar_info, temp, &local->radar_info_list, list) {
 		radar_bitmap = radar_info->radar_bitmap;
+		radar_channel = radar_info->radar_channel;
 
-		ieee80211_dfs_radar_detected_processing(local, radar_bitmap);
+		ieee80211_dfs_radar_detected_processing(local, radar_bitmap,
+							radar_channel);
 
 		list_del(&radar_info->list);
 		kfree(radar_info);
@@ -4349,17 +4386,23 @@ void ieee80211_radar_detected(struct iee
 }
 EXPORT_SYMBOL(ieee80211_radar_detected);
 
-void ieee80211_radar_detected_bitmap(struct ieee80211_hw *hw, u16 radar_bitmap)
+void ieee80211_radar_detected_bitmap(struct ieee80211_hw *hw, u16 radar_bitmap,
+				     struct ieee80211_channel *radar_channel)
 {
 	struct ieee80211_local *local = hw_to_local(hw);
 	struct channel_radar_info *radar_info;
 
+	if (WARN_ON(local->hw.wiphy->flags & WIPHY_FLAG_SUPPORTS_MLO &&
+		    !radar_channel))
+		return;
+
 	radar_info = kzalloc(sizeof(*radar_info), GFP_ATOMIC);
 	if (!radar_info)
 		return;
 
 	INIT_LIST_HEAD(&radar_info->list);
 	radar_info->radar_bitmap = radar_bitmap;
+	radar_info->radar_channel = radar_channel;
 
 	list_add_tail(&radar_info->list, &local->radar_info_list);
 	schedule_work(&local->radar_detected_work);
--- a/net/wireless/mlme.c
+++ b/net/wireless/mlme.c
@@ -974,26 +974,24 @@ EXPORT_SYMBOL(cfg80211_awgn_event);
 
 void cfg80211_cac_event(struct net_device *netdev,
 			const struct cfg80211_chan_def *chandef,
-			enum nl80211_radar_event event, gfp_t gfp)
+			enum nl80211_radar_event event, gfp_t gfp,
+			unsigned int link_id)
 {
 	struct wireless_dev *wdev = netdev->ieee80211_ptr;
 	struct wiphy *wiphy = wdev->wiphy;
 	struct cfg80211_registered_device *rdev = wiphy_to_rdev(wiphy);
 	unsigned long timeout;
 
-	/* not yet supported */
-	if (wdev->valid_links)
-		return;
-
-	trace_cfg80211_cac_event(netdev, event);
+	trace_cfg80211_cac_event(netdev, link_id, event);
 
-	if (WARN_ON(!wdev->cac_started && event != NL80211_RADAR_CAC_STARTED))
+	if (WARN_ON(!wdev->links[link_id].cac_started &&
+		    event != NL80211_RADAR_CAC_STARTED))
 		return;
 
 	switch (event) {
 	case NL80211_RADAR_CAC_FINISHED:
-		timeout = wdev->cac_start_time +
-			  msecs_to_jiffies(wdev->cac_time_ms);
+		timeout = wdev->links[link_id].cac_start_time +
+			  msecs_to_jiffies(wdev->links[link_id].cac_time_ms);
 		WARN_ON(!time_after_eq(jiffies, timeout));
 		cfg80211_set_dfs_state(wiphy, chandef, NL80211_DFS_AVAILABLE);
 		memcpy(&rdev->cac_done_chandef, chandef,
@@ -1002,10 +1000,10 @@ void cfg80211_cac_event(struct net_devic
 		cfg80211_sched_dfs_chan_update(rdev);
 		fallthrough;
 	case NL80211_RADAR_CAC_ABORTED:
-		wdev->cac_started = false;
+		wdev->links[link_id].cac_started = false;
 		break;
 	case NL80211_RADAR_CAC_STARTED:
-		wdev->cac_started = true;
+		wdev->links[link_id].cac_started = true;
 		break;
 	default:
 		WARN_ON(1);
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -10392,6 +10392,7 @@ static int nl80211_start_radar_detection
 	struct net_device *dev = info->user_ptr[1];
 	struct wireless_dev *wdev = dev->ieee80211_ptr;
 	struct wiphy *wiphy = wdev->wiphy;
+	int link_id = nl80211_link_id(info->attrs);
 	struct cfg80211_chan_def chandef;
 	enum nl80211_dfs_regions dfs_region;
 	unsigned int cac_time_ms;
@@ -10400,6 +10401,7 @@ static int nl80211_start_radar_detection
 	flush_delayed_work(&rdev->dfs_update_channels_wk);
 
 	wiphy_lock(wiphy);
+	wdev_lock(wdev);
 
 	dfs_region = reg_get_dfs_region(wiphy);
 	if (dfs_region == NL80211_DFS_UNSET)
@@ -10434,7 +10436,7 @@ static int nl80211_start_radar_detection
 		goto unlock;
 	}
 
-	if (wdev->cac_started) {
+	if (wdev->links[link_id].cac_started) {
 		err = -EBUSY;
 		goto unlock;
 	}
@@ -10455,14 +10457,21 @@ static int nl80211_start_radar_detection
 	if (WARN_ON(!cac_time_ms))
 		cac_time_ms = IEEE80211_DFS_MIN_CAC_TIME_MS;
 
-	err = rdev_start_radar_detection(rdev, dev, &chandef, cac_time_ms);
+	err = rdev_start_radar_detection(rdev, dev, link_id,
+					 &chandef, cac_time_ms);
 	if (!err) {
-		wdev->links[0].ap.chandef = chandef;
-		wdev->cac_started = true;
-		wdev->cac_start_time = jiffies;
-		wdev->cac_time_ms = cac_time_ms;
+		if (wdev->iftype == NL80211_IFTYPE_MESH_POINT)
+			wdev->u.mesh.chandef = chandef;
+		else if (wdev->iftype == NL80211_IFTYPE_AP)
+			wdev->links[link_id].ap.chandef = chandef;
+
+		wdev->links[link_id].cac_started = true;
+		wdev->links[link_id].cac_start_time = jiffies;
+		wdev->links[link_id].cac_time_ms = cac_time_ms;
 	}
+
 unlock:
+	wdev_unlock(wdev);
 	wiphy_unlock(wiphy);
 
 	return err;
@@ -16795,6 +16804,10 @@ nl80211_remove_link_station(struct sk_bu
 	SELECTOR(__sel, NETDEV_UP_LINK,			\
 		 NL80211_FLAG_NEED_NETDEV_UP |		\
 		 NL80211_FLAG_MLO_VALID_LINK_ID)	\
+	SELECTOR(__sel, NETDEV_UP_LINK_NOMTX,		\
+		 NL80211_FLAG_NEED_NETDEV_UP |		\
+		 NL80211_FLAG_NO_WIPHY_MTX |		\
+		 NL80211_FLAG_MLO_VALID_LINK_ID)	\
 	SELECTOR(__sel, NETDEV_UP_NO_MLO,		\
 		 NL80211_FLAG_NEED_NETDEV_UP |		\
 		 NL80211_FLAG_MLO_UNSUPPORTED)		\
@@ -17698,7 +17711,7 @@ static const struct genl_small_ops nl802
 		.flags = GENL_UNS_ADMIN_PERM,
 		.internal_flags = IFLAGS(NL80211_FLAG_NEED_NETDEV_UP |
 					 NL80211_FLAG_NO_WIPHY_MTX |
-					 NL80211_FLAG_MLO_UNSUPPORTED),
+					 NL80211_FLAG_MLO_VALID_LINK_ID),
 	},
 	{
 		.cmd = NL80211_CMD_GET_PROTOCOL_FEATURES,
--- a/net/wireless/rdev-ops.h
+++ b/net/wireless/rdev-ops.h
@@ -1186,15 +1186,17 @@ rdev_tdls_cancel_channel_switch(struct c
 static inline int
 rdev_start_radar_detection(struct cfg80211_registered_device *rdev,
 			   struct net_device *dev,
+			   unsigned int link_id,
 			   struct cfg80211_chan_def *chandef,
 			   u32 cac_time_ms)
 {
 	int ret = -ENOTSUPP;
 
-	trace_rdev_start_radar_detection(&rdev->wiphy, dev, chandef,
-					 cac_time_ms);
+	trace_rdev_start_radar_detection(&rdev->wiphy, dev, link_id,
+					 chandef, cac_time_ms);
 	if (rdev->ops->start_radar_detection)
 		ret = rdev->ops->start_radar_detection(&rdev->wiphy, dev,
+						       link_id,
 						       chandef, cac_time_ms);
 	trace_rdev_return_int(&rdev->wiphy, ret);
 	return ret;
@@ -1202,11 +1204,11 @@ rdev_start_radar_detection(struct cfg802
 
 static inline void
 rdev_end_cac(struct cfg80211_registered_device *rdev,
-	     struct net_device *dev)
+	     struct net_device *dev, unsigned int link_id)
 {
-	trace_rdev_end_cac(&rdev->wiphy, dev);
+	trace_rdev_end_cac(&rdev->wiphy, dev, link_id);
 	if (rdev->ops->end_cac)
-		rdev->ops->end_cac(&rdev->wiphy, dev);
+		rdev->ops->end_cac(&rdev->wiphy, dev, link_id);
 	trace_rdev_return_void(&rdev->wiphy);
 }
 
--- a/net/wireless/reg.c
+++ b/net/wireless/reg.c
@@ -4267,6 +4267,8 @@ EXPORT_SYMBOL(regulatory_pre_cac_allowed
 static void cfg80211_check_and_end_cac(struct cfg80211_registered_device *rdev)
 {
 	struct wireless_dev *wdev;
+	unsigned int link_id;
+
 	/* If we finished CAC or received radar, we should end any
 	 * CAC running on the same channels.
 	 * the check !cfg80211_chandef_dfs_usable contain 2 options:
@@ -4279,16 +4281,17 @@ static void cfg80211_check_and_end_cac(s
 	list_for_each_entry(wdev, &rdev->wiphy.wdev_list, list) {
 		struct cfg80211_chan_def *chandef;
 
-		if (!wdev->cac_started)
-			continue;
+		for_each_valid_link(wdev, link_id) {
+			if (!wdev->links[link_id].cac_started)
+				continue;
 
-		/* FIXME: radar detection is tied to link 0 for now */
-		chandef = wdev_chandef(wdev, 0);
-		if (!chandef)
-			continue;
+			chandef = wdev_chandef(wdev, link_id);
+			if (!chandef)
+				continue;
 
-		if (!cfg80211_chandef_dfs_usable(&rdev->wiphy, chandef))
-			rdev_end_cac(rdev, wdev->netdev);
+			if (!cfg80211_chandef_dfs_usable(&rdev->wiphy, chandef))
+				rdev_end_cac(rdev, wdev->netdev, link_id);
+		}
 	}
 }
 
--- a/net/wireless/trace.h
+++ b/net/wireless/trace.h
@@ -732,8 +732,9 @@ DEFINE_EVENT(wiphy_netdev_evt, rdev_flus
 );
 
 DEFINE_EVENT(wiphy_netdev_evt, rdev_end_cac,
-	     TP_PROTO(struct wiphy *wiphy, struct net_device *netdev),
-	     TP_ARGS(wiphy, netdev)
+	     TP_PROTO(struct wiphy *wiphy, struct net_device *netdev,
+		      unsigned int link_id),
+	     TP_ARGS(wiphy, netdev, link_id)
 );
 
 DECLARE_EVENT_CLASS(station_add_change,
@@ -2553,25 +2554,28 @@ TRACE_EVENT(rdev_external_auth,
 
 TRACE_EVENT(rdev_start_radar_detection,
 	TP_PROTO(struct wiphy *wiphy, struct net_device *netdev,
+		 int link_id,
 		 struct cfg80211_chan_def *chandef,
 		 u32 cac_time_ms),
-	TP_ARGS(wiphy, netdev, chandef, cac_time_ms),
+	TP_ARGS(wiphy, netdev, link_id, chandef, cac_time_ms),
 	TP_STRUCT__entry(
 		WIPHY_ENTRY
 		NETDEV_ENTRY
+		__field(u8, link_id)
 		CHAN_DEF_ENTRY
 		__field(u32, cac_time_ms)
 	),
 	TP_fast_assign(
 		WIPHY_ASSIGN;
 		NETDEV_ASSIGN;
+		__entry->link_id = link_id;
 		CHAN_DEF_ASSIGN(chandef);
 		__entry->cac_time_ms = cac_time_ms;
 	),
-	TP_printk(WIPHY_PR_FMT ", " NETDEV_PR_FMT ", " CHAN_DEF_PR_FMT
-		  ", cac_time_ms=%u",
-		  WIPHY_PR_ARG, NETDEV_PR_ARG, CHAN_DEF_PR_ARG,
-		  __entry->cac_time_ms)
+	TP_printk(WIPHY_PR_FMT ", " NETDEV_PR_FMT ", link_id=%u,"
+		  CHAN_DEF_PR_FMT ", cac_time_ms=%u",
+		  WIPHY_PR_ARG, NETDEV_PR_ARG, __entry->link_id,
+		  CHAN_DEF_PR_ARG, __entry->cac_time_ms)
 );
 
 TRACE_EVENT(rdev_set_mcast_rate,
@@ -3308,18 +3312,21 @@ TRACE_EVENT(cfg80211_radar_event,
 );
 
 TRACE_EVENT(cfg80211_cac_event,
-	TP_PROTO(struct net_device *netdev, enum nl80211_radar_event evt),
-	TP_ARGS(netdev, evt),
+	TP_PROTO(struct net_device *netdev, unsigned int link_id,
+		 enum nl80211_radar_event evt),
+	TP_ARGS(netdev, link_id, evt),
 	TP_STRUCT__entry(
 		NETDEV_ENTRY
+		__field(unsigned int, link_id)
 		__field(enum nl80211_radar_event, evt)
 	),
 	TP_fast_assign(
 		NETDEV_ASSIGN;
+		__entry->link_id = link_id;
 		__entry->evt = evt;
 	),
-	TP_printk(NETDEV_PR_FMT ",  event: %d",
-		  NETDEV_PR_ARG, __entry->evt)
+	TP_printk(NETDEV_PR_FMT ",  link_id: %d event: %d",
+		  NETDEV_PR_ARG, __entry->link_id, __entry->evt)
 );
 
 DECLARE_EVENT_CLASS(cfg80211_rx_evt,
--- a/net/wireless/chan.c
+++ b/net/wireless/chan.c
@@ -1022,8 +1022,8 @@ static bool cfg80211_get_chans_dfs_avail
 	return true;
 }
 
-static bool cfg80211_chandef_dfs_available(struct wiphy *wiphy,
-				const struct cfg80211_chan_def *chandef)
+bool cfg80211_chandef_dfs_available(struct wiphy *wiphy,
+				    const struct cfg80211_chan_def *chandef)
 {
 	int width;
 	int r;
@@ -1057,6 +1057,7 @@ static bool cfg80211_chandef_dfs_availab
 
 	return r;
 }
+EXPORT_SYMBOL(cfg80211_chandef_dfs_available);
 
 static unsigned int cfg80211_get_chans_dfs_cac_time(struct wiphy *wiphy,
 						    u32 center_freq,
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -6576,8 +6576,11 @@ void ieee80211_radar_detected(struct iee
  * 	with bitmap
  * @hw: pointer as obtained from ieee80211_alloc_hw()
  * @radar_bitmap: denotes the bitmap of radar.
+ * @radar_channel: Channel pointer on which radar is detected. Mandatory to pass
+ *	for MLO drivers. For non-MLO %NULL can be passed
  */
-void ieee80211_radar_detected_bitmap(struct ieee80211_hw *hw, u16 radar_bitmap);
+void ieee80211_radar_detected_bitmap(struct ieee80211_hw *hw, u16 radar_bitmap,
+				     struct ieee80211_channel *radar_channel);
 
 
 /**
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -1296,6 +1296,7 @@ struct mac80211_memory_stats {
 struct channel_radar_info {
 	struct list_head list;
 	u16 radar_bitmap;
+	struct ieee80211_channel *radar_channel;
 };
 
 struct ieee80211_local {
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -8447,7 +8447,8 @@ static void ath12k_dfs_calculate_subchan
 
 mark_radar:
 	if (!radar->detector_id) {
-		ieee80211_radar_detected_bitmap(ar->ah->hw,radar_bitmap);
+		ieee80211_radar_detected_bitmap(ar->ah->hw, radar_bitmap,
+						chandef->chan);
 	} else {
 		ar->agile_chandef.radar_bitmap = radar_bitmap;
 		ath12k_mac_background_dfs_event(ar, ATH12K_BGDFS_RADAR);
