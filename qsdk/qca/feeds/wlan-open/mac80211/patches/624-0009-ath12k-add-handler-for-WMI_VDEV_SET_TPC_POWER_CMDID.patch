From aab88255974e5781fdc94dd4b377461675a56599 Mon Sep 17 00:00:00 2001
From: Aishwarya R <quic_aisr@quicinc.com>
Date: Mon, 11 Apr 2022 12:23:26 +0530
Subject: [PATCH] ath12k: add handler for WMI_VDEV_SET_TPC_POWER_CMDID

This patch is to add the handler for WMI_VDEV_SET_TPC_POWER_CMDID,
it is for 6 GHz band.

Signed-off-by: Aishwarya R <quic_aisr@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/wmi.c | 63 +++++++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/wmi.h | 62 ++++++++++++++++++++++++++
 2 files changed, 125 insertions(+)

diff --git a/drivers/net/wireless/ath/ath12k/wmi.c b/drivers/net/wireless/ath/ath12k/wmi.c
index b205d45..c3b5725 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -2377,6 +2377,69 @@ int ath12k_wmi_send_scan_start_cmd(struct ath12k *ar,
 	return ret;
 }
 
+int ath12k_wmi_send_vdev_set_tpc_power(struct ath12k *ar,
+                                       u32 vdev_id,
+                                       struct ath12k_reg_tpc_power_info *param)
+{
+        struct ath12k_pdev_wmi *wmi = ar->wmi;
+        struct wmi_vdev_set_tpc_power_cmd *cmd;
+        struct wmi_vdev_ch_power_info *ch;
+        struct sk_buff *skb;
+        struct wmi_tlv *tlv;
+        u8 *ptr;
+        int i, ret, len;
+
+        len = sizeof(*cmd) + TLV_HDR_SIZE;
+        len += (sizeof(struct wmi_vdev_ch_power_info) * param->num_pwr_levels);
+
+        skb = ath12k_wmi_alloc_skb(wmi->wmi_ab, len);
+        if (!skb)
+                return -ENOMEM;
+
+        ptr = skb->data;
+
+        cmd = (struct wmi_vdev_set_tpc_power_cmd *)ptr;
+        cmd->tlv_header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_VDEV_SET_TPC_POWER_CMD) |
+                          FIELD_PREP(WMI_TLV_LEN, sizeof(*cmd) - TLV_HDR_SIZE);
+        cmd->vdev_id = vdev_id;
+        cmd->psd_power = param->is_psd_power;
+        cmd->eirp_power = param->eirp_power;
+        cmd->power_type_6ghz = param->power_type_6g;
+        ath12k_dbg(ar->ab, ATH12K_DBG_WMI,
+                   "wmi TPC vdev_id: %d is_psd_power: %d eirp_power: %d power_type_6g: %d\n",
+                   vdev_id, param->is_psd_power, param->eirp_power, param->power_type_6g);
+
+        ptr += sizeof(*cmd);
+        tlv = (struct wmi_tlv *)ptr;
+        tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_STRUCT) |
+                      FIELD_PREP(WMI_TLV_LEN, param->num_pwr_levels * sizeof(*ch));
+
+        ptr += TLV_HDR_SIZE;
+        ch = (struct wmi_vdev_ch_power_info *)ptr;
+
+        for (i = 0; i < param->num_pwr_levels; i++, ch++) {
+                ch->tlv_header = FIELD_PREP(WMI_TLV_TAG,
+                                            WMI_TAG_VDEV_CH_POWER_INFO) |
+                                FIELD_PREP(WMI_TLV_LEN,
+                                           sizeof(*ch) - TLV_HDR_SIZE);
+
+                ch->chan_cfreq = param->chan_power_info[i].chan_cfreq;
+                ch->tx_power = param->chan_power_info[i].tx_power;
+
+                ath12k_dbg(ar->ab, ATH12K_DBG_WMI,
+                           "wmi TPC chan_cfreq: %d , tx_power: %d\n",
+                           ch->chan_cfreq, ch->tx_power);
+        }
+
+        ret = ath12k_wmi_cmd_send(wmi, skb,
+                                  WMI_VDEV_SET_TPC_POWER_CMDID);
+        if (ret) {
+                ath12k_warn(ar->ab, "failed to send WMI_VDEV_SET_TPC_POWER_CMDID\n");
+                dev_kfree_skb(skb);
+        }
+        return ret;
+}
+
 int ath12k_wmi_send_scan_stop_cmd(struct ath12k *ar,
 				  struct scan_cancel_param *param)
 {
diff --git a/drivers/net/wireless/ath/ath12k/wmi.h b/drivers/net/wireless/ath/ath12k/wmi.h
index 8113ec4..9b9f9f6 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -13,6 +13,7 @@
 struct ath12k_base;
 struct ath12k;
 struct ath12k_fw_stats;
+struct ath12k_reg_tpc_power_info;
 
 #define PSOC_HOST_MAX_NUM_SS (8)
 
@@ -321,6 +322,36 @@ enum wmi_tlv_cmd_id {
 	WMI_VDEV_SET_CUSTOM_AGGR_SIZE_CMDID,
 	WMI_VDEV_ENCRYPT_DECRYPT_DATA_REQ_CMDID,
 	WMI_VDEV_ADD_MAC_ADDR_TO_RX_FILTER_CMDID,
+        /** WMI commands related to dbg arp stats */
+        WMI_VDEV_SET_ARP_STAT_CMDID,
+        WMI_VDEV_GET_ARP_STAT_CMDID,
+        /** get tx power for the current vdev */
+        WMI_VDEV_GET_TX_POWER_CMDID,
+        /* limit STA offchannel activity */
+        WMI_VDEV_LIMIT_OFFCHAN_CMDID,
+        /** To set custom software retries per-AC for vdev */
+        WMI_VDEV_SET_CUSTOM_SW_RETRY_TH_CMDID,
+        /** To set chainmask configuration for vdev */
+        WMI_VDEV_CHAINMASK_CONFIG_CMDID,
+        WMI_VDEV_GET_BCN_RECEPTION_STATS_CMDID,
+        /* request LTE-Coex info */
+        WMI_VDEV_GET_MWS_COEX_INFO_CMDID,
+        /** delete all peer (excluding bss peer) */
+        WMI_VDEV_DELETE_ALL_PEER_CMDID,
+        /* To set bss max idle time related parameters */
+        WMI_VDEV_BSS_MAX_IDLE_TIME_CMDID,
+        /** Indicates FW to trigger Audio sync  */
+        WMI_VDEV_AUDIO_SYNC_TRIGGER_CMDID,
+        /** Gives Qtimer value  to FW  */
+        WMI_VDEV_AUDIO_SYNC_QTIMER_CMDID,
+        /** Preferred channel list for each vdev */
+        WMI_VDEV_SET_PCL_CMDID,
+        /** VDEV_GET_BIG_DATA_CMD IS DEPRECATED - DO NOT USE */
+        WMI_VDEV_GET_BIG_DATA_CMDID,
+        /** Get per vdev BIG DATA stats phase 2 */
+        WMI_VDEV_GET_BIG_DATA_P2_CMDID,
+        /** set TPC PSD/non-PSD power */
+        WMI_VDEV_SET_TPC_POWER_CMDID,
 	WMI_PEER_CREATE_CMDID = WMI_TLV_CMD(WMI_GRP_PEER),
 	WMI_PEER_DELETE_CMDID,
 	WMI_PEER_FLUSH_TIDS_CMDID,
@@ -1880,6 +1911,8 @@ enum wmi_tlv_tag {
 	WMI_TAG_PDEV_NON_SRG_OBSS_BSSID_ENABLE_BITMAP_CMD,
 	WMI_TAG_REGULATORY_RULE_EXT_STRUCT = 0x3A9,
 	WMI_TAG_REG_CHAN_LIST_CC_EXT_EVENT,
+	WMI_TAG_VDEV_SET_TPC_POWER_CMD = 0x3B5,
+	WMI_TAG_VDEV_CH_POWER_INFO,
 	WMI_TAG_EHT_RATE_SET = 0x3C4,
 	WMI_TAG_MAX
 };
@@ -3325,6 +3358,32 @@ struct wlan_ssid {
 	u8 ssid[WLAN_SSID_MAX_LEN];
 };
 
+struct wmi_vdev_ch_power_info {
+        u32 tlv_header;
+        u32 chan_cfreq; /* Channel center frequency (MHz) */
+        /* Unit: dBm, either PSD/EIRP power for this frequency or
+         * incremental for non-PSD BW
+         */
+        u32 tx_power;
+} __packed;
+
+struct wmi_vdev_set_tpc_power_cmd {
+        u32 tlv_header;
+        u32 vdev_id;
+        u32 psd_power; /* Value: 0 or 1, is PSD power or not */
+        u32 eirp_power; /* Maximum EIRP power (dBm units), valid only if power is PSD */
+        u32 power_type_6ghz; /* Type: WMI_6GHZ_REG_TYPE, used for halphy CTL lookup */
+        /* This fixed_param TLV is followed by the below TLVs:
+         * num_pwr_levels of wmi_vdev_ch_power_info
+         * For PSD power, it is the PSD/EIRP power of the frequency (20MHz chunks).
+         * For non-psd power, the power values are for 20, 40, and till
+         * BSS BW power levels.
+         * The num_pwr_levels will be checked by sw how many elements present
+         * in the variable-length array.
+         */
+} __packed;
+
+
 #define WMI_IE_BITMAP_SIZE             8
 
 #define WMI_SCAN_MAX_NUM_SSID                0x0A
@@ -5824,5 +5883,8 @@ int ath12k_wmi_set_hw_mode(struct ath12k_base *ab,
 			   enum wmi_host_hw_mode_config_type mode);
 int ath12k_wmi_wow_host_wakeup_ind(struct ath12k *ar);
 int ath12k_wmi_wow_enable(struct ath12k *ar);
+int ath12k_wmi_send_vdev_set_tpc_power(struct ath12k *ar,
+                                        u32 vdev_id,
+                                        struct ath12k_reg_tpc_power_info *param);
 
 #endif
-- 
2.17.1

