--- a/drivers/net/wireless/ath/ath10k/ahb.c
+++ b/drivers/net/wireless/ath/ath10k/ahb.c
@@ -180,40 +180,35 @@ static int ath10k_ahb_rst_ctrl_init(stru
 
 	dev = &ar_ahb->pdev->dev;
 
-	ar_ahb->core_cold_rst = devm_reset_control_get_exclusive(dev,
-								 "wifi_core_cold");
+	ar_ahb->core_cold_rst = devm_reset_control_get(dev, "wifi_core_cold");
 	if (IS_ERR(ar_ahb->core_cold_rst)) {
 		ath10k_err(ar, "failed to get core cold rst ctrl: %ld\n",
 			   PTR_ERR(ar_ahb->core_cold_rst));
 		return PTR_ERR(ar_ahb->core_cold_rst);
 	}
 
-	ar_ahb->radio_cold_rst = devm_reset_control_get_exclusive(dev,
-								  "wifi_radio_cold");
+	ar_ahb->radio_cold_rst = devm_reset_control_get(dev, "wifi_radio_cold");
 	if (IS_ERR(ar_ahb->radio_cold_rst)) {
 		ath10k_err(ar, "failed to get radio cold rst ctrl: %ld\n",
 			   PTR_ERR(ar_ahb->radio_cold_rst));
 		return PTR_ERR(ar_ahb->radio_cold_rst);
 	}
 
-	ar_ahb->radio_warm_rst = devm_reset_control_get_exclusive(dev,
-								  "wifi_radio_warm");
+	ar_ahb->radio_warm_rst = devm_reset_control_get(dev, "wifi_radio_warm");
 	if (IS_ERR(ar_ahb->radio_warm_rst)) {
 		ath10k_err(ar, "failed to get radio warm rst ctrl: %ld\n",
 			   PTR_ERR(ar_ahb->radio_warm_rst));
 		return PTR_ERR(ar_ahb->radio_warm_rst);
 	}
 
-	ar_ahb->radio_srif_rst = devm_reset_control_get_exclusive(dev,
-								  "wifi_radio_srif");
+	ar_ahb->radio_srif_rst = devm_reset_control_get(dev, "wifi_radio_srif");
 	if (IS_ERR(ar_ahb->radio_srif_rst)) {
 		ath10k_err(ar, "failed to get radio srif rst ctrl: %ld\n",
 			   PTR_ERR(ar_ahb->radio_srif_rst));
 		return PTR_ERR(ar_ahb->radio_srif_rst);
 	}
 
-	ar_ahb->cpu_init_rst = devm_reset_control_get_exclusive(dev,
-								"wifi_cpu_init");
+	ar_ahb->cpu_init_rst = devm_reset_control_get(dev, "wifi_cpu_init");
 	if (IS_ERR(ar_ahb->cpu_init_rst)) {
 		ath10k_err(ar, "failed to get cpu init rst ctrl: %ld\n",
 			   PTR_ERR(ar_ahb->cpu_init_rst));
--- a/drivers/net/wireless/ath/ath11k/Kconfig
+++ b/drivers/net/wireless/ath/ath11k/Kconfig
@@ -6,7 +6,6 @@ config ATH11K
 	depends on MAC80211 && HAS_DMA
 	depends on CRYPTO_MICHAEL_MIC
 	select ATH_COMMON
-	depends on QCOM_QMI_HELPERS
 	help
 	  This module adds support for Qualcomm Technologies 802.11ax family of
 	  chipsets.
--- a/drivers/net/wireless/ath/ath11k/wmi.h
+++ b/drivers/net/wireless/ath/ath11k/wmi.h
@@ -48,7 +48,7 @@ struct wmi_tlv {
 
 #define WMI_TLV_LEN	GENMASK(15, 0)
 #define WMI_TLV_TAG	GENMASK(31, 16)
-#define TLV_HDR_SIZE	sizeof_field(struct wmi_tlv, header)
+#define TLV_HDR_SIZE	FIELD_SIZEOF(struct wmi_tlv, header)
 
 #define WMI_CMD_HDR_CMD_ID      GENMASK(23, 0)
 #define WMI_MAX_MEM_REQS        32
--- a/include/linux/backport-refcount.h
+++ b/include/linux/backport-refcount.h
@@ -165,41 +165,11 @@ static inline __must_check bool __refcou
 	return old;
 }
 
-/**
- * refcount_add_not_zero - add a value to a refcount unless it is 0
- * @i: the value to add to the refcount
- * @r: the refcount
- *
- * Will saturate at REFCOUNT_SATURATED and WARN.
- *
- * Provides no memory ordering, it is assumed the caller has guaranteed the
- * object memory to be stable (RCU, etc.). It does provide a control dependency
- * and thereby orders future stores. See the comment on top.
- *
- * Use of this function is not recommended for the normal reference counting
- * use case in which references are taken and released one at a time.  In these
- * cases, refcount_inc(), or one of its variants, should instead be used to
- * increment a reference count.
- *
- * Return: false if the passed refcount is 0, true otherwise
- */
 static inline __must_check bool refcount_add_not_zero(int i, refcount_t *r)
 {
 	return __refcount_add_not_zero(i, r, NULL);
 }
 
-static inline void __refcount_add(int i, refcount_t *r, int *oldp)
-{
-	int old = atomic_fetch_add_relaxed(i, &r->refs);
-
-	if (oldp)
-		*oldp = old;
-
-	if (unlikely(!old))
-		refcount_warn_saturate(r, REFCOUNT_ADD_UAF);
-	else if (unlikely(old < 0 || old + i < 0))
-		refcount_warn_saturate(r, REFCOUNT_ADD_OVF);
-}
 
 /**
  * refcount_add - add a value to a refcount
@@ -219,7 +189,7 @@ static inline void __refcount_add(int i,
  */
 static inline void refcount_add(int i, refcount_t *r)
 {
-	__refcount_add(i, r, NULL);
+	atomic_add(i, &r->refs);
 }
 
 static inline __must_check bool __refcount_inc_not_zero(refcount_t *r, int *oldp)
@@ -267,52 +237,14 @@ static inline void refcount_inc(refcount
 	__refcount_inc(r, NULL);
 }
 
-static inline __must_check bool __refcount_sub_and_test(int i, refcount_t *r, int *oldp)
-{
-	int old = atomic_fetch_sub_release(i, &r->refs);
-
-	if (oldp)
-		*oldp = old;
-
-	if (old == i) {
-		smp_acquire__after_ctrl_dep();
-		return true;
-	}
-
-	if (unlikely(old < 0 || old - i < 0))
-		refcount_warn_saturate(r, REFCOUNT_SUB_UAF);
-
-	return false;
-}
-
-/**
- * refcount_sub_and_test - subtract from a refcount and test if it is 0
- * @i: amount to subtract from the refcount
- * @r: the refcount
- *
- * Similar to atomic_dec_and_test(), but it will WARN, return false and
- * ultimately leak on underflow and will fail to decrement when saturated
- * at REFCOUNT_SATURATED.
- *
- * Provides release memory ordering, such that prior loads and stores are done
- * before, and provides an acquire ordering on success such that free()
- * must come after.
- *
- * Use of this function is not recommended for the normal reference counting
- * use case in which references are taken and released one at a time.  In these
- * cases, refcount_dec(), or one of its variants, should instead be used to
- * decrement a reference count.
- *
- * Return: true if the resulting refcount is 0, false otherwise
- */
 static inline __must_check bool refcount_sub_and_test(int i, refcount_t *r)
 {
-	return __refcount_sub_and_test(i, r, NULL);
+	return atomic_sub_and_test(i, &r->refs);
 }
 
 static inline __must_check bool __refcount_dec_and_test(refcount_t *r, int *oldp)
 {
-	return __refcount_sub_and_test(1, r, oldp);
+	return atomic_sub_and_test(i, &r->refs);
 }
 
 /**
@@ -333,30 +265,9 @@ static inline __must_check bool refcount
 	return __refcount_dec_and_test(r, NULL);
 }
 
-static inline void __refcount_dec(refcount_t *r, int *oldp)
-{
-	int old = atomic_fetch_sub_release(1, &r->refs);
-
-	if (oldp)
-		*oldp = old;
-
-	if (unlikely(old <= 1))
-		refcount_warn_saturate(r, REFCOUNT_DEC_LEAK);
-}
-
-/**
- * refcount_dec - decrement a refcount
- * @r: the refcount
- *
- * Similar to atomic_dec(), it will WARN on underflow and fail to decrement
- * when saturated at REFCOUNT_SATURATED.
- *
- * Provides release memory ordering, such that prior loads and stores are done
- * before.
- */
 static inline void refcount_dec(refcount_t *r)
 {
-	__refcount_dec(r, NULL);
+	atomic_dec(&r->refs);
 }
 
 extern __must_check bool refcount_dec_if_one(refcount_t *r);
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -31,6 +31,8 @@
 #include "reg.h"
 #include "rdev-ops.h"
 
+#define VLAN_N_VID	4096
+
 static int nl80211_crypto_settings(struct cfg80211_registered_device *rdev,
 				   struct genl_info *info,
 				   struct cfg80211_crypto_settings *settings,
@@ -14593,7 +14595,7 @@ static int nl80211_vendor_check_policy(c
 		return -EINVAL;
 	}
 
-	return nla_validate_nested(attr, vcmd->maxattr, vcmd->policy, extack);
+	return 0;
 }
 
 static int nl80211_vendor_cmd(struct sk_buff *skb, struct genl_info *info)
--- a/backport-include/linux/pm_qos.h
+++ b/backport-include/linux/pm_qos.h
@@ -32,5 +32,4 @@ static inline s32 cpu_latency_qos_limit(
 	return pm_qos_request(PM_QOS_CPU_DMA_LATENCY);
 }
 #endif /* < 5.7 */
-
 #endif	/* _COMPAT_LINUX_PM_QOS_H */
--- a/backport-include/linux/slab.h
+++ b/backport-include/linux/slab.h
@@ -7,4 +7,6 @@
 #define kfree_sensitive(x)	kzfree(x)
 #endif
 
+#define kfree_sensitive(x)	kzfree(x)	/* For backward compatibility */
+
 #endif /* __BACKPORT_SLAB_H */
--- a/backport-include/linux/netdevice.h
+++ b/backport-include/linux/netdevice.h
@@ -70,6 +70,9 @@ static inline void netif_trans_update(st
 	(_dev)->needs_free_netdev = true;
 #endif
 
+#define netdev_tstats(dev)  dev->tstats
+#define netdev_assign_tstats(dev, e)    dev->tstats = (e);
+
 #if LINUX_VERSION_IS_LESS(4,15,0)
 static inline int _bp_netdev_upper_dev_link(struct net_device *dev,
 					    struct net_device *upper_dev)
--- a/backport-include/linux/kernel.h
+++ b/backport-include/linux/kernel.h
@@ -2,7 +2,9 @@
 #define __BACKPORT_KERNEL_H
 #include_next <linux/kernel.h>
 /* needed to include BUILD_BUG_ON_ZERO on <= 4.12 */
+#if LINUX_VERSION_IS_G(4,4,60)
 #include <linux/bug.h>
+#endif
 #include <linux/version.h>
 
 
--- a/backport-include/linux/version.h
+++ b/backport-include/linux/version.h
@@ -12,6 +12,7 @@
 
 #define LINUX_VERSION_IS_LESS(x1,x2,x3)	(LINUX_VERSION_CODE < KERNEL_VERSION(x1,x2,x3))
 #define LINUX_VERSION_IS_GEQ(x1,x2,x3)	(LINUX_VERSION_CODE >= KERNEL_VERSION(x1,x2,x3))
+#define LINUX_VERSION_IS_G(x1,x2,x3)	(LINUX_VERSION_CODE > KERNEL_VERSION(x1,x2,x3))
 #define LINUX_VERSION_IN_RANGE(x1,x2,x3, y1,y2,y3) \
 	(LINUX_VERSION_IS_GEQ(x1,x2,x3) && LINUX_VERSION_IS_LESS(y1,y2,y3))
 #endif /* _BP_LINUX_VERSION_H */
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -4108,8 +4108,6 @@ struct ieee80211_prep_tx_info {
  *	radar channel.
  *	The caller is expected to set chandef pointer to NULL in order to
  *	disable background CAC/radar detection.
- * @net_fill_forward_path: Called from .ndo_fill_forward_path in order to
- *	resolve a path for hardware flow offloading
  * @change_vif_links: Change the valid links on an interface, note that while
  *	removing the old link information is still valid (link_conf pointer),
  *	but may immediately disappear after the function returns. The old or
@@ -4464,11 +4462,6 @@ struct ieee80211_ops {
 				     struct ieee80211_sta *sta, u8 flowid);
 	int (*set_radar_background)(struct ieee80211_hw *hw,
 				    struct cfg80211_chan_def *chandef);
-	int (*net_fill_forward_path)(struct ieee80211_hw *hw,
-				     struct ieee80211_vif *vif,
-				     struct ieee80211_sta *sta,
-				     struct net_device_path_ctx *ctx,
-				     struct net_device_path *path);
 	int (*change_vif_links)(struct ieee80211_hw *hw,
 				struct ieee80211_vif *vif,
 				u16 old_links, u16 new_links,
--- a/net/mac80211/driver-ops.h
+++ b/net/mac80211/driver-ops.h
@@ -1530,28 +1530,6 @@ static inline void drv_twt_teardown_requ
 	trace_drv_return_void(local);
 }
 
-static inline int drv_net_fill_forward_path(struct ieee80211_local *local,
-					    struct ieee80211_sub_if_data *sdata,
-					    struct ieee80211_sta *sta,
-					    struct net_device_path_ctx *ctx,
-					    struct net_device_path *path)
-{
-	int ret = -EOPNOTSUPP;
-
-	sdata = get_bss_sdata(sdata);
-	if (!check_sdata_in_driver(sdata))
-		return -EIO;
-
-	trace_drv_net_fill_forward_path(local, sdata, sta);
-	if (local->ops->net_fill_forward_path)
-		ret = local->ops->net_fill_forward_path(&local->hw,
-							&sdata->vif, sta,
-							ctx, path);
-	trace_drv_return_int(local, ret);
-
-	return ret;
-}
-
 static inline int drv_change_vif_links(struct ieee80211_local *local,
 				       struct ieee80211_sub_if_data *sdata,
 				       u16 old_links, u16 new_links,
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -1065,64 +1065,6 @@ static const struct net_device_ops ieee8
 	.ndo_get_stats64	= ieee80211_get_stats64,
 };
 
-static int ieee80211_netdev_fill_forward_path(struct net_device_path_ctx *ctx,
-					      struct net_device_path *path)
-{
-	struct ieee80211_sub_if_data *sdata;
-	struct ieee80211_local *local;
-	struct sta_info *sta;
-	int ret = -ENOENT;
-
-	sdata = IEEE80211_DEV_TO_SUB_IF(ctx->dev);
-	local = sdata->local;
-
-	if (!local->ops->net_fill_forward_path)
-		return -EOPNOTSUPP;
-
-	rcu_read_lock();
-	switch (sdata->vif.type) {
-	case NL80211_IFTYPE_AP_VLAN:
-		sta = rcu_dereference(sdata->u.vlan.sta);
-		if (sta)
-			break;
-		if (sdata->wdev.use_4addr)
-			goto out;
-		if (is_multicast_ether_addr(ctx->daddr))
-			goto out;
-		sta = sta_info_get_bss(sdata, ctx->daddr);
-		break;
-	case NL80211_IFTYPE_AP:
-		if (is_multicast_ether_addr(ctx->daddr))
-			goto out;
-		sta = sta_info_get(sdata, ctx->daddr);
-		break;
-	case NL80211_IFTYPE_STATION:
-		if (sdata->wdev.wiphy->flags & WIPHY_FLAG_SUPPORTS_TDLS) {
-			sta = sta_info_get(sdata, ctx->daddr);
-			if (sta && test_sta_flag(sta, WLAN_STA_TDLS_PEER)) {
-				if (!test_sta_flag(sta, WLAN_STA_TDLS_PEER_AUTH))
-					goto out;
-
-				break;
-			}
-		}
-
-		sta = sta_info_get(sdata, sdata->deflink.u.mgd.bssid);
-		break;
-	default:
-		goto out;
-	}
-
-	if (!sta)
-		goto out;
-
-	ret = drv_net_fill_forward_path(local, sdata, &sta->sta, ctx, path);
-out:
-	rcu_read_unlock();
-
-	return ret;
-}
-
 static const struct net_device_ops ieee80211_dataif_8023_ops = {
 	.ndo_open		= ieee80211_open,
 	.ndo_stop		= ieee80211_stop,
@@ -1132,7 +1074,6 @@ static const struct net_device_ops ieee8
 	.ndo_set_mac_address	= ieee80211_change_mac,
 	.ndo_select_queue	= ieee80211_netdev_select_queue,
 	.ndo_get_stats64	= ieee80211_get_stats64,
-	.ndo_fill_forward_path	= ieee80211_netdev_fill_forward_path,
 };
 
 static bool ieee80211_iftype_supports_hdr_offload(enum nl80211_iftype iftype)
--- a/net/mac80211/trace.h
+++ b/net/mac80211/trace.h
@@ -2471,13 +2471,6 @@ TRACE_EVENT(drv_twt_teardown_request,
 	)
 );
 
-DEFINE_EVENT(sta_event, drv_net_fill_forward_path,
-	TP_PROTO(struct ieee80211_local *local,
-		 struct ieee80211_sub_if_data *sdata,
-		 struct ieee80211_sta *sta),
-	TP_ARGS(local, sdata, sta)
-);
-
 TRACE_EVENT(drv_change_vif_links,
 	TP_PROTO(struct ieee80211_local *local,
 		 struct ieee80211_sub_if_data *sdata,
--- a/backport-include/linux/lockdep.h
+++ b/backport-include/linux/lockdep.h
@@ -23,4 +23,16 @@ struct lockdep_map { };
 #endif /* CONFIG_LOCKDEP */
 #endif /* lockdep_assert_not_held */
 
+#if LINUX_VERSION_IS_LESS(5,1,0)
+#define lockdep_register_key LINUX_BACKPORT(lockdep_register_key)
+static inline void lockdep_register_key(struct lock_class_key *key)
+{
+}
+
+#define lockdep_unregister_key LINUX_BACKPORT(lockdep_unregister_key)
+static inline void lockdep_unregister_key(struct lock_class_key *key)
+{
+}
+#endif /* LINUX_VERSION_IS_LESS(5,1,0) */
+
 #endif /* __BACKPORT_LINUX_LOCKDEP_H */
--- a/backport-include/linux/timekeeping.h
+++ b/backport-include/linux/timekeeping.h
@@ -25,4 +25,12 @@ static inline void ktime_get_raw_ts64(st
 }
 #endif
 
+#if LINUX_VERSION_IS_LESS(5,3,0)
+#define ktime_get_coarse_boottime_ns LINUX_BACKPORT(ktime_get_coarse_boottime_ns)
+static inline u64 ktime_get_coarse_boottime_ns(void)
+{
+        return ktime_get_boot_ns();
+}
+#endif /*LINUX_VERSION_IS_LESS(5,3,0)*/
+
 #endif /* __BACKPORT_TIMEKEEPING_H */
