From cfa18812d2ff9c488ef6c736fd852a04f98a9461 Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Fri, 12 May 2023 14:25:09 +0530
Subject: [PATCH 2/3] ath12k: remove ieee80211_tx_info reference in tx data
 path

Driver specific tx path such as ath12k_dp_tx() and ath12k_mac_mgmt_tx_wmi
currently uses ieee80211_tx_info struct which is a mac80211 skb private
data structure. This is overwritten by ath12k_mac_op_tx().
Also, the same data is already available in ath12k's skb private data
structure. Fix it by replacing the info by ath12k skb private data structure.

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_tx.c |  9 ++++-----
 drivers/net/wireless/ath/ath12k/mac.c   | 10 +++++-----
 2 files changed, 9 insertions(+), 10 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -382,7 +382,6 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 	struct ath12k_peer *peer;
 	struct hal_tx_info ti = {0};
 	struct ath12k_tx_desc_info *tx_desc = NULL;
-	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
 	struct ath12k_skb_cb *skb_cb = ATH12K_SKB_CB(skb);
 	struct hal_tx_msdu_ext_desc *msg;
 	struct sk_buff *skb_ext_desc;
@@ -401,7 +400,7 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 	if (unlikely(test_bit(ATH12K_FLAG_CRASH_FLUSH, &ar->ab->dev_flags)))
 		return -ESHUTDOWN;
 
-	if (unlikely(!(info->flags & IEEE80211_TX_CTL_HW_80211_ENCAP) &&
+	if (unlikely(!(skb_cb->flags & ATH12K_SKB_HW_80211_ENCAP) &&
 	    !ieee80211_is_data(hdr->frame_control)))
 		return -ENOTSUPP;
 
@@ -497,7 +496,7 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 	}
 
 	if (unlikely((ahvif->tx_encap_type == HAL_TCL_ENCAP_TYPE_ETHERNET &&
-	     !(info->flags & IEEE80211_TX_CTL_HW_80211_ENCAP)))) {
+	     !(skb_cb->flags & ATH12K_SKB_HW_80211_ENCAP)))) {
 		msdu_ext_desc = true;
 
 		if (skb->protocol == cpu_to_be16(ETH_P_PAE)) {
@@ -526,8 +525,8 @@ int ath12k_dp_tx(struct ath12k *ar, stru
 
 	/* Add metadata for sw encrypted vlan group traffic */
 	if ((!test_bit(ATH12K_FLAG_HW_CRYPTO_DISABLED, &ar->ab->ag->dev_flags) &&
-	     !(info->control.flags & IEEE80211_TX_CTL_HW_80211_ENCAP) &&
-	     !info->control.hw_key && ieee80211_has_protected(hdr->frame_control)) ||
+	     !(skb_cb->flags & ATH12K_SKB_HW_80211_ENCAP) &&
+	     !(skb_cb->flags & ATH12K_SKB_CIPHER_SET) && ieee80211_has_protected(hdr->frame_control)) ||
 	     is_diff_encap) {
 		align_pad = ((unsigned long)skb->data) & (HTT_META_DATA_ALIGNMENT - 1);
 		ret = ath12k_dp_metadata_align_skb(skb, align_pad);
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -8353,8 +8353,8 @@ static int ath12k_mac_mgmt_tx_wmi(struct
 {
 	struct ath12k_base *ab = ar->ab;
 	struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
-	struct ieee80211_tx_info *info;
 	dma_addr_t paddr;
+	struct ath12k_skb_cb *skb_cb;
 	int buf_id;
 	int ret;
 
@@ -8367,8 +8367,8 @@ static int ath12k_mac_mgmt_tx_wmi(struct
 	if (buf_id < 0)
 		return -ENOSPC;
 
-	info = IEEE80211_SKB_CB(skb);
-	if (!(info->flags & IEEE80211_TX_CTL_HW_80211_ENCAP)) {
+	skb_cb = ATH12K_SKB_CB(skb);
+	if (!(skb_cb->flags & ATH12K_SKB_HW_80211_ENCAP)) {
 		if ((ieee80211_is_action(hdr->frame_control) ||
 		     ieee80211_is_deauth(hdr->frame_control) ||
 		     ieee80211_is_disassoc(hdr->frame_control)) &&
@@ -8384,7 +8384,7 @@ static int ath12k_mac_mgmt_tx_wmi(struct
 		goto err_free_idr;
 	}
 
-	ATH12K_SKB_CB(skb)->paddr = paddr;
+	skb_cb->paddr = paddr;
 
 	ret = ath12k_wmi_mgmt_send(ar, arvif->vdev_id, buf_id, skb);
 	if (ret) {
@@ -8395,7 +8395,7 @@ static int ath12k_mac_mgmt_tx_wmi(struct
 	return 0;
 
 err_unmap_buf:
-	dma_unmap_single(ab->dev, ATH12K_SKB_CB(skb)->paddr,
+	dma_unmap_single(ab->dev, skb_cb->paddr,
 			 skb->len, DMA_TO_DEVICE);
 err_free_idr:
 	spin_lock_bh(&ar->txmgmt_idr_lock);
