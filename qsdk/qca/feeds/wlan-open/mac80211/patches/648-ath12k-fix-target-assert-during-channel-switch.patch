From 9f34492dda8ce6b09eb98ccea3ed49eaa6aedb49 Mon Sep 17 00:00:00 2001
From: Aaradhana Sahu <quic_aarasahu@quicinc.com>
Date: Fri, 1 Jul 2022 14:39:32 +0530
Subject: [PATCH] ath12k: fix target assert during channel switch

Currently the updated bandwidth for the peer will be configured
to the firmware after channel switch from the sta_rc_update_wk.
If the updated bandwidth is greater than the configured peer phymode
during the peer assoc may result target assert.

fix this issue by sending WMI set peer param command for phymode
and bandwidth.

Signed-off-by: Aaradhana Sahu <quic_aarasahu@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |  1 +
 drivers/net/wireless/ath/ath12k/mac.c  | 65 +++++++++++++++++++++++---
 2 files changed, 59 insertions(+), 7 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -493,6 +493,7 @@ struct ath12k_sta {
 #endif
 	bool use_4addr_set;
 	u16 tcl_metadata;
+	u32 bw_prev;
 };
 
 #define ATH12K_HALF_20MHZ_BW 10
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -4630,10 +4630,11 @@ static void ath12k_sta_rc_update_wk(stru
 	const u16 *vht_mcs_mask;
 	const u16 *he_mcs_mask;
 	const u16 *eht_mcs_mask;
-	u32 changed, bw, nss, smps;
+	u32 changed, bw, nss, smps, bw_prev;
 	int err, num_vht_rates, num_he_rates, num_eht_rates;
 	const struct cfg80211_bitrate_mask *mask;
 	struct peer_assoc_params peer_arg;
+	enum wmi_phy_mode peer_phymode;
 
 	arsta = container_of(wk, struct ath12k_sta, update_wk);
 	sta = container_of((void *)arsta, struct ieee80211_sta, drv_priv);
@@ -4655,6 +4656,7 @@ static void ath12k_sta_rc_update_wk(stru
 	arsta->changed = 0;
 
 	bw = arsta->bw;
+	bw_prev = arsta->bw_prev;
 	nss = arsta->nss;
 	smps = arsta->smps;
 
@@ -4669,11 +4671,51 @@ static void ath12k_sta_rc_update_wk(stru
 			   ath12k_mac_max_eht_nss(eht_mcs_mask)));
 
 	if (changed & IEEE80211_RC_BW_CHANGED) {
-		err = ath12k_wmi_set_peer_param(ar, sta->addr, arvif->vdev_id,
-						WMI_PEER_CHWIDTH, bw);
-		if (err)
-			ath12k_warn(ar->ab, "failed to update STA %pM peer bw %d: %d\n",
-				    sta->addr, bw, err);
+		/* Get the the peer phymode */
+		ath12k_peer_assoc_h_phymode(ar, arvif->vif, sta, &peer_arg);
+		peer_phymode = peer_arg.peer_phymode;
+
+		if (bw > bw_prev) {
+			/* BW is upgraded. In this case we send WMI_PEER_PHYMODE
+			 * followed by WMI_PEER_CHWIDTH
+			 */
+			ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "mac BW upgrade for sta %pM new BW %d, old BW %d\n",
+					sta->addr, bw, bw_prev);
+			err = ath12k_wmi_set_peer_param(ar, sta->addr,
+					arvif->vdev_id, WMI_PEER_PHYMODE,
+					peer_phymode);
+			if (err) {
+				ath12k_warn(ar->ab, "failed to update STA %pM peer phymode %d: %d\n",
+						sta->addr, peer_phymode, err);
+				goto err_rc_bw_changed;
+			}
+			err = ath12k_wmi_set_peer_param(ar, sta->addr,
+					arvif->vdev_id, WMI_PEER_CHWIDTH,
+					bw);
+			if (err)
+				ath12k_warn(ar->ab, "failed to update STA %pM peer bw %d: %d\n",
+						sta->addr, bw, err);
+		} else {
+			/* BW is downgraded. In this case we send
+			 * WMI_PEER_CHWIDTH followed by WMI_PEER_PHYMODE
+			 */
+			ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "mac BW downgrade for sta %pM new BW %d,old BW %d\n",
+					sta->addr, bw, bw_prev);
+			err = ath12k_wmi_set_peer_param(ar, sta->addr,
+					arvif->vdev_id, WMI_PEER_CHWIDTH,
+					bw);
+			if (err) {
+				ath12k_warn(ar->ab, "failed to update STA %pM peer bw %d: %d\n",
+						sta->addr, bw, err);
+				goto err_rc_bw_changed;
+			}
+			err = ath12k_wmi_set_peer_param(ar, sta->addr,
+					arvif->vdev_id, WMI_PEER_PHYMODE,
+					peer_phymode);
+			if (err)
+				ath12k_warn(ar->ab, "failed to update STA %pM peer phymode %d: %d\n",
+						sta->addr, peer_phymode, err);
+		}
 	}
 
 	if (changed & IEEE80211_RC_NSS_CHANGED) {
@@ -4756,7 +4798,7 @@ static void ath12k_sta_rc_update_wk(stru
 					    sta->addr, arvif->vdev_id);
 		}
 	}
-
+err_rc_bw_changed:
 	mutex_unlock(&ar->conf_mutex);
 }
 
@@ -4981,6 +5023,14 @@ static int ath12k_mac_op_sta_state(struc
 		if (ret)
 			ath12k_warn(ar->ab, "Failed to associate station: %pM\n",
 				    sta->addr);
+
+		spin_lock_bh(&ar->data_lock);
+
+		/* Set arsta bw and prev bw */
+		arsta->bw = sta->deflink.bandwidth;
+		arsta->bw_prev = sta->deflink.bandwidth;
+
+		spin_unlock_bh(&ar->data_lock);
 	} else if (old_state == IEEE80211_STA_ASSOC &&
 		   new_state == IEEE80211_STA_AUTHORIZED) {
 		spin_lock_bh(&ar->ab->base_lock);
@@ -5128,6 +5178,7 @@ static void ath12k_mac_op_sta_rc_update(
 			break;
 		}
 
+		arsta->bw_prev = arsta->bw;
 		arsta->bw = bw;
 	}
 
