From ebab0b8e2ce8b7d7ff58e22ea438cc2b0791d791 Mon Sep 17 00:00:00 2001
From: Balamurugan S <quic_bselvara@quicinc.com>
Date: Tue, 31 Jan 2023 00:27:50 +0530
Subject: [PATCH 5/8] ath12k: IPQ5332 qmi changes

Host capabilities such as M3 firmware download, send platform model differs
between AHB and PCIe interfaces. Introduced hw param field to initialize
and skip M3 firmware download based on interface.

Signed-off-by: Balamurugan S <quic_bselvara@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/hw.c  |  4 ++
 drivers/net/wireless/ath/ath12k/hw.h  |  1 +
 drivers/net/wireless/ath/ath12k/qmi.c | 75 ++++++++++++++++++++++-----
 3 files changed, 66 insertions(+), 14 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/hw.c b/drivers/net/wireless/ath/ath12k/hw.c
index fa8af0c..7e1e687 100644
--- a/drivers/net/wireless/ath/ath12k/hw.c
+++ b/drivers/net/wireless/ath/ath12k/hw.c
@@ -1355,6 +1355,7 @@ static const struct ath12k_hw_params ath12k_hw_params[] = {
 		.num_local_link = 0,
 		.m3_fw_support = true,
 		.compact_rx_tlv = true,
+		.send_platform_model = false,
 	},
 	{
 		.name = "wcn7850 hw2.0",
@@ -1422,6 +1423,7 @@ static const struct ath12k_hw_params ath12k_hw_params[] = {
 		.num_local_link = 2,
 		.m3_fw_support = true,
 		.compact_rx_tlv = false,
+		.send_platform_model = false,
 	},
 	{
 		.name = "qcn9274 hw2.0",
@@ -1489,6 +1491,7 @@ static const struct ath12k_hw_params ath12k_hw_params[] = {
 		.num_local_link = 0,
 		.m3_fw_support = true,
 		.compact_rx_tlv = true,
+		.send_platform_model = false,
 	},
 	{
 		.name = "ipq5332 hw1.0",
@@ -1557,6 +1560,7 @@ static const struct ath12k_hw_params ath12k_hw_params[] = {
 		.ce_ie_addr = &ath12k_ce_ie_addr_ipq5332,
 		.ce_remap = &ath12k_ce_remap_ipq5332,
 		.cmem = &ath12k_cmem_ipq5332,
+		.send_platform_model = true,
 	},
 };
 
diff --git a/drivers/net/wireless/ath/ath12k/hw.h b/drivers/net/wireless/ath/ath12k/hw.h
index 3eb9ebf..5e61a69 100644
--- a/drivers/net/wireless/ath/ath12k/hw.h
+++ b/drivers/net/wireless/ath/ath12k/hw.h
@@ -208,6 +208,7 @@ struct ath12k_hw_params {
 	bool smp2p_wow_exit;
 	bool fixed_fw_mem;
 	bool m3_fw_support;
+	bool send_platform_model;
 	const struct ce_remap *ce_remap;
 	const struct cmem *cmem;
 	bool compact_rx_tlv;
diff --git a/drivers/net/wireless/ath/ath12k/qmi.c b/drivers/net/wireless/ath/ath12k/qmi.c
index f13fb5d..cbe6666 100644
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -2952,6 +2952,8 @@ static int ath12k_qmi_host_cap_send(struct ath12k_base *ab)
 {
 	struct qmi_wlanfw_host_cap_req_msg_v01 req;
 	struct qmi_wlanfw_host_cap_resp_msg_v01 resp;
+	struct device_node *root;
+	const char *model = NULL;
 	struct qmi_txn txn = {};
 	int ret = 0;
 
@@ -2965,14 +2967,35 @@ static int ath12k_qmi_host_cap_send(struct ath12k_base *ab)
 	req.bdf_support_valid = 1;
 	req.bdf_support = 1;
 
-	req.m3_support_valid = 1;
-	req.m3_support = 1;
-	req.m3_cache_support_valid = 1;
-	req.m3_cache_support = 1;
+	if (ab->hw_params->m3_fw_support) {
+		req.m3_support_valid = 1;
+		req.m3_support = 1;
+		req.m3_cache_support_valid = 1;
+		req.m3_cache_support = 1;
+	} else {
+		req.m3_support_valid = 0;
+		req.m3_support = 0;
+		req.m3_cache_support_valid = 0;
+		req.m3_cache_support = 0;
+	}
 
 	req.cal_done_valid = 1;
 	req.cal_done = ab->qmi.cal_done;
 
+	if (ab->hw_params->send_platform_model) {
+		root = of_find_node_by_path("/");
+		if (root) {
+			model = of_get_property(root, "model", NULL);
+			if (model) {
+				req.platform_name_valid = 1;
+				strlcpy(req.platform_name, model,
+					QMI_WLANFW_MAX_PLATFORM_NAME_LEN_V01);
+				ath12k_info(ab, "Platform name: %s", req.platform_name);
+			}
+			of_node_put(root);
+		}
+        }
+
 	/* BRINGUP: here we are piggybacking a lot of stuff using
 	 * internal_sleep_clock, should it be split?
 	 */
@@ -3181,8 +3204,7 @@ static int ath12k_qmi_respond_fw_mem_request(struct ath12k_base *ab)
 			req->mem_seg[i].addr = ab->qmi.target_mem[i].paddr;
 			req->mem_seg[i].size = ab->qmi.target_mem[i].size;
 			req->mem_seg[i].type = ab->qmi.target_mem[i].type;
-			ath12k_dbg(ab, ATH12K_DBG_QMI,
-				   "qmi req mem_seg[%d] %pad %u %u\n", i,
+			ath12k_info(ab, "qmi req mem_seg[%d] %pad %u %u\n", i,
 				   &ab->qmi.target_mem[i].paddr,
 				   ab->qmi.target_mem[i].size,
 				   ab->qmi.target_mem[i].type);
@@ -3403,6 +3425,7 @@ out:
 	return ret;
 }
 
+#define MAX_TGT_MEM_MODES 5
 static int ath12k_qmi_assign_target_mem_chunk(struct ath12k_base *ab)
 {
 	struct device *dev = ab->dev;
@@ -3411,6 +3434,7 @@ static int ath12k_qmi_assign_target_mem_chunk(struct ath12k_base *ab)
 	struct resource res;
 	int host_ddr_sz, mlo_ddr_sz, sz, mlo_sz = 0;
 	int i, idx, mlo_idx, ret;
+	unsigned int bdf_location[MAX_TGT_MEM_MODES];
 
 	sz = ab->host_ddr_fixed_mem_off;
 	hremote_node = of_parse_phandle(dev->of_node, "memory-region", 0);
@@ -3550,6 +3574,25 @@ skip_mlo_mem_init:
 			idx++;
 			mlo_idx++;
 			break;
+		case BDF_MEM_REGION_TYPE:
+			if (of_property_read_u32_array(dev->of_node,
+						       "qcom,bdf-addr", bdf_location,
+						       ARRAY_SIZE(bdf_location))) {
+				ath12k_err(ab, "BDF_MEM_REGION Not defined in device_tree\n");
+				ret = -EINVAL;
+				goto out;
+                        }
+			ab->qmi.target_mem[idx].paddr = bdf_location[0];
+
+			ab->qmi.target_mem[idx].v.ioaddr =
+					ioremap(ab->qmi.target_mem[idx].paddr,
+						ab->qmi.target_mem[i].size);
+			ab->qmi.target_mem[idx].size =
+					ab->qmi.target_mem[i].size;
+			ab->qmi.target_mem[idx].type =
+					ab->qmi.target_mem[i].type;
+			idx++;
+			break;
 		default:
 			ath12k_warn(ab, "qmi ignore invalid mem req type %d\n",
 				    ab->qmi.target_mem[i].type);
@@ -3947,7 +3990,7 @@ static void ath12k_qmi_m3_free(struct ath12k_base *ab)
 {
 	struct m3_mem_region *m3_mem = &ab->qmi.m3_mem;
 
-	if (!m3_mem->vaddr)
+	if (!ab->hw_params->m3_fw_support || !m3_mem->vaddr)
 		return;
 
 	dma_free_coherent(ab->dev, m3_mem->size,
@@ -3966,15 +4009,19 @@ static int ath12k_qmi_wlanfw_m3_info_send(struct ath12k_base *ab)
 	memset(&req, 0, sizeof(req));
 	memset(&resp, 0, sizeof(resp));
 
-	ret = ath12k_qmi_m3_load(ab);
-	if (ret) {
-		ath12k_err(ab, "failed to load m3 firmware: %d", ret);
-		return ret;
+	if (ab->hw_params->m3_fw_support) {
+		ret = ath12k_qmi_m3_load(ab);
+		if (ret) {
+			ath12k_err(ab, "failed to load m3 firmware: %d", ret);
+			return ret;
+		}
+		req.addr = m3_mem->paddr;
+		req.size = m3_mem->size;
+	} else {
+		req.addr = 0;
+		req.size = 0;
 	}
 
-	req.addr = m3_mem->paddr;
-	req.size = m3_mem->size;
-
 	ret = qmi_txn_init(&ab->qmi.handle, &txn,
 			   qmi_wlanfw_m3_info_resp_msg_v01_ei, &resp);
 	if (ret < 0)
-- 
2.17.1

