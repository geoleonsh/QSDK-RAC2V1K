From 2676762acf8a4480174e23df52a3b397986e5e4f Mon Sep 17 00:00:00 2001
From: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
Date: Wed, 21 Dec 2022 15:44:18 +0530
Subject: [PATCH] ath12k: handle mac op scan with link id

Currently the hw scan will not be done based on link id, enabling the hw
scan based on link id specific.

The link id is decided based on the scan freq, and the arvif is created
and stored based on the link_id in ahvif

Signed-off-by: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |  6 ++++
 drivers/net/wireless/ath/ath12k/mac.c  | 47 ++++++++++++++++++++++++--
 2 files changed, 50 insertions(+), 3 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -715,6 +715,11 @@ enum ath12k_fw_recovery_option {
 	 ATH12K_FW_RECOVERY_ENABLE_SSR_ONLY,
 };
 
+struct ath12k_chan_info {
+	u32 low_freq;
+	u32 high_freq;
+};
+
 #define ATH12K_FLUSH_TIMEOUT (5 * HZ)
 #define ATH12K_VDEV_DELETE_TIMEOUT_HZ (5 * HZ)
 
@@ -725,6 +730,7 @@ struct ath12k {
 	struct ath12k_pdev_wmi *wmi;
 	struct ath12k_pdev_dp dp;
 	u8 mac_addr[ETH_ALEN];
+	struct ath12k_chan_info chan_info;
 	u32 ht_cap_info;
 	u32 vht_cap_info;
 	struct ath12k_he ar_he;
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -4503,6 +4503,33 @@ static int ath12k_mac_vdev_delete(struct
 	return ret;
 }
 
+static int
+ath12k_mac_find_link_id_by_freq(struct ieee80211_vif *vif, struct ath12k *ar, u32 freq)
+{
+	struct ath12k_vif *ahvif = (void *)vif->drv_priv;
+	u16 link_id;
+
+	lockdep_assert_held(&ahvif->ah->conf_mutex);
+
+	if (!vif->valid_links)
+		return 0;
+
+	for (link_id = 0; link_id < IEEE80211_MLD_MAX_NUM_LINKS; link_id++) {
+		if (!(ahvif->links_map & BIT(link_id)) ||
+		    !ahvif->link[link_id]->ar)
+			continue;
+		if (freq >= ahvif->link[link_id]->ar->chan_info.low_freq &&
+		    freq <= ahvif->link[link_id]->ar->chan_info.high_freq)
+			return link_id;
+	}
+
+	/*
+	 * Valid ML case when channel is not assigned to any of the links
+	 * so link id 0 can be used
+	 */
+	return 0;
+}
+
 static struct ath12k_link_vif *
 ath12k_mac_assign_link_vif( struct ath12k_hw *ah, struct ieee80211_vif *vif, u8 link_id)
 {
@@ -4769,7 +4796,7 @@ static int ath12k_mac_op_hw_scan(struct
 	struct ath12k *ar;
 	struct scan_req_params arg;
 	int ret = 0;
-	int i;
+	int i, link_id;
 	bool create = true;
 
 	mutex_lock(&ah->conf_mutex);
@@ -4784,8 +4811,10 @@ static int ath12k_mac_op_hw_scan(struct
 		return -EINVAL;
 	}
 
-	/* TODO ML vif handling */
-	arvif = ath12k_mac_assign_link_vif(ah, vif, 0);  
+	link_id = ath12k_mac_find_link_id_by_freq(vif, ar,
+						  hw_req->req.channels[0]->center_freq);
+
+	arvif = ath12k_mac_assign_link_vif(ah, vif, link_id);
 	/* If the vif is already assigned to a specific vdev of an ar,
 	 * check whether its already started, vdev which is started
 	 * are not allowed to switch to a new radio.
@@ -13261,7 +13290,7 @@ static int ath12k_mac_setup_channels_rat
 	struct ieee80211_supported_band *band;
 	struct ath12k_hal_reg_capabilities_ext *reg_cap, *temp_reg_cap;
 	void *channels;
-	u32 phy_id;
+	u32 phy_id, freq_low, freq_high;
 	struct ieee80211_6ghz_channel *chan_6g;
 	int i = 0;
 
@@ -13293,13 +13322,17 @@ static int ath12k_mac_setup_channels_rat
 			phy_id = ath12k_get_phy_id(ar, WMI_HOST_WLAN_2G_CAP);
 			temp_reg_cap = &ab->hal_reg_cap[phy_id];
 		}
-		ath12k_mac_update_ch_list(ar, band,
-					  max(temp_reg_cap->low_2ghz_chan,
-					     ab->reg_freq_2g.start_freq),
-					  min(temp_reg_cap->high_2ghz_chan,
-					     ab->reg_freq_2g.end_freq));
+
+		freq_low = max(temp_reg_cap->low_2ghz_chan,
+			       ab->reg_freq_2g.start_freq);
+		freq_high = min(temp_reg_cap->high_2ghz_chan,
+			        ab->reg_freq_2g.end_freq);
+
+		ath12k_mac_update_ch_list(ar, band, freq_low, freq_high);
 
 		ah->supported_band_mask |= BIT(NL80211_BAND_2GHZ);
+		ar->chan_info.low_freq = freq_low;
+		ar->chan_info.high_freq = freq_high;
 	}
 
 	if (supported_bands & WMI_HOST_WLAN_5G_CAP) {
@@ -13332,15 +13365,19 @@ static int ath12k_mac_setup_channels_rat
                                 phy_id = ath12k_get_phy_id(ar, WMI_HOST_WLAN_5G_CAP);
 				temp_reg_cap = &ab->hal_reg_cap[phy_id];
                         }
-			ath12k_mac_update_ch_list(ar, band,
-                                                  max(temp_reg_cap->low_5ghz_chan,
-                                                      ab->reg_freq_5g.start_freq),
-						  min(temp_reg_cap->high_5ghz_chan,
-						      ab->reg_freq_5g.end_freq));
+
+			freq_low = max(temp_reg_cap->low_5ghz_chan,
+				       ab->reg_freq_5g.start_freq);
+			freq_high = min(temp_reg_cap->high_5ghz_chan,
+					ab->reg_freq_5g.end_freq);
+
+			ath12k_mac_update_ch_list(ar, band, freq_low, freq_high);
 
 			ath12k_mac_update_5_9_ch_list(ar, band);
 
 			ah->supported_band_mask |= BIT(NL80211_BAND_5GHZ);
+			ar->chan_info.low_freq = freq_low;
+			ar->chan_info.high_freq = freq_high;
 		} else if (reg_cap->low_5ghz_chan >= ATH12K_MIN_6G_FREQ &&
                            reg_cap->high_5ghz_chan <= ATH12K_MAX_6G_FREQ) {
                         band = &ar->mac.sbands[NL80211_BAND_6GHZ];
@@ -13376,11 +13413,12 @@ static int ath12k_mac_setup_channels_rat
                         band->bitrates = ath12k_a_rates;
                         ah->hw->wiphy->bands[NL80211_BAND_6GHZ] = band;
 
-                        ath12k_mac_update_ch_list(ar, band,
-						  max(temp_reg_cap->low_5ghz_chan,
-                                                      ab->reg_freq_6g.start_freq),
-						  min(temp_reg_cap->high_5ghz_chan,
-						      ab->reg_freq_6g.end_freq));
+			freq_low = max(temp_reg_cap->low_5ghz_chan,
+				       ab->reg_freq_6g.start_freq);
+			freq_high = min(temp_reg_cap->high_5ghz_chan,
+					ab->reg_freq_6g.end_freq);
+
+			ath12k_mac_update_ch_list(ar, band, freq_low, freq_high);
 
 			/* For 6G sband, the strcut channels and int numchannels will
                         * have the default value. During ieee80211_hw_register(),
@@ -13392,9 +13430,14 @@ static int ath12k_mac_setup_channels_rat
                        band->channels = band->chan_6g[0]->channels;
 
 			ah->supported_band_mask |= BIT(NL80211_BAND_6GHZ);
+			ar->chan_info.low_freq = freq_low;
+			ar->chan_info.high_freq = freq_high;
 		}
 	}
 
+	ath12k_dbg(ar->ab, ATH12K_DBG_MAC, "mac pdev %u freq limits %u->%u MHz\n",
+		   ar->pdev->pdev_id, ar->chan_info.low_freq,
+		   ar->chan_info.high_freq);
 	return 0;
 }
 
--- a/drivers/net/wireless/ath/ath12k/reg.c
+++ b/drivers/net/wireless/ath/ath12k/reg.c
@@ -275,13 +275,51 @@ int ath12k_regd_update(struct ath12k *ar
 	int ret, regd_len, pdev_id;
 	struct ath12k_base *ab;
 	struct ath12k_hw *ah;
+	struct ath12k_hal_reg_capabilities_ext *reg_cap;
 	int i;
+	u32 phy_id, freq_low, freq_high, supported_bands, band;
 
 	ab = ar->ab;
 	ah = ar->ah;
 
 	mutex_lock(&ah->conf_mutex);
 
+	supported_bands = ar->pdev->cap.supported_bands;
+	if (supported_bands & WMI_HOST_WLAN_2G_CAP)
+		band = NL80211_BAND_2GHZ;
+	else if(supported_bands & WMI_HOST_WLAN_5G_CAP && !ar->supports_6ghz)
+		band = NL80211_BAND_5GHZ;
+	else if(supported_bands & WMI_HOST_WLAN_5G_CAP && ar->supports_6ghz)
+		band = NL80211_BAND_6GHZ;
+
+	reg_cap = &ab->hal_reg_cap[ar->pdev_idx];
+
+	if (ab->hw_params->single_pdev_only && !ar->supports_6ghz) {
+		phy_id = ar->pdev->cap.band[band].phy_id;
+		reg_cap = &ab->hal_reg_cap[phy_id];
+	}
+
+	/* Possible that due to reg change, current limits for supported
+	 * frequency changed. Update that
+	 */
+	if (supported_bands & WMI_HOST_WLAN_2G_CAP) {
+		freq_low = max(reg_cap->low_2ghz_chan, ab->reg_freq_2g.start_freq);
+		freq_high = min(reg_cap->high_2ghz_chan, ab->reg_freq_2g.end_freq);
+	} else if(supported_bands & WMI_HOST_WLAN_5G_CAP && !ar->supports_6ghz) {
+		freq_low = max(reg_cap->low_5ghz_chan, ab->reg_freq_5g.start_freq);
+		freq_high = min(reg_cap->high_5ghz_chan, ab->reg_freq_5g.end_freq);
+	} else if(supported_bands & WMI_HOST_WLAN_5G_CAP && ar->supports_6ghz) {
+		freq_low = max(reg_cap->low_5ghz_chan, ab->reg_freq_6g.start_freq);
+		freq_high = min(reg_cap->high_5ghz_chan, ab->reg_freq_6g.end_freq);
+	}
+
+	ar->chan_info.low_freq = freq_low;
+	ar->chan_info.high_freq = freq_high;
+
+	ath12k_dbg(ab, ATH12K_DBG_REG, "pdev %u reg updated freq limits %u->%u MHz\n",
+		   ar->pdev->pdev_id, ar->chan_info.low_freq,
+		   ar->chan_info.high_freq);
+
 	if (ah->regd_updated) {
 		mutex_unlock(&ah->conf_mutex);
 		return 0;
