From f7fff85cada6ef82b18e707aba39e95698385cc7 Mon Sep 17 00:00:00 2001
From: Sidhanta Sahu <quic_sidhanta@quicinc.com>
Date: Fri, 24 Feb 2023 11:42:16 -0800
Subject: [PATCH] ath12k: ipq5332 SSR Recovery Support.

1. Implement the changes to support SSR Recovery for ipq5332 chipset. The
changes are made to support ssr recovery for ahb interfaced targets.
2. Disbaling ext_irq in core reset when the first crash is detected and avoid
disabling the irq on repeating firmware crashes. Disabling multiple
times in core reset may put the system in uninterruptible state.

Signed-off-by: Sidhanta Sahu <quic_sidhanta@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/ahb.c  |  23 +++-
 drivers/net/wireless/ath/ath12k/ahb.h  |  24 +++++
 drivers/net/wireless/ath/ath12k/core.c | 141 ++++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/core.h |   7 ++
 drivers/net/wireless/ath/ath12k/hif.h  |  18 ++++
 5 files changed, 209 insertions(+), 4 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/ahb.c b/drivers/net/wireless/ath/ath12k/ahb.c
index 09adb3b..4f9f3ea 100644
--- a/drivers/net/wireless/ath/ath12k/ahb.c
+++ b/drivers/net/wireless/ath/ath12k/ahb.c
@@ -384,6 +384,7 @@ static void ath12k_ahb_power_down(struct ath12k_base *ab)
 {
 	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
 
+	ath12k_core_wait_dump_collect(ab);
 	rproc_shutdown(ab_ahb->tgt_rproc);
 }
 
@@ -621,6 +622,24 @@ static int ath12k_ahb_map_service_to_pipe(struct ath12k_base *ab, u16 service_id
 	return 0;
 }
 
+static int ath12k_ahb_ssr_notifier_reg(struct ath12k_base *ab)
+{
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
+
+	return ath12k_rproc_register_subsys_notifier(ab_ahb->tgt_rproc->name,
+						     &ab->ssr_nb,
+						     &ab->atomic_ssr_nb);
+}
+
+static int ath12k_ahb_ssr_notifier_unreg(struct ath12k_base *ab)
+{
+	struct ath12k_ahb *ab_ahb = ath12k_ahb_priv(ab);
+
+	return ath12k_rproc_unregister_subsys_notifier(ab_ahb->tgt_rproc->name,
+						       &ab->ssr_nb,
+						       &ab->atomic_ssr_nb);
+}
+
 static const struct ath12k_hif_ops ath12k_ahb_hif_ops_ipq5332 = {
 	.start = ath12k_ahb_start,
 	.stop = ath12k_ahb_stop,
@@ -633,6 +652,8 @@ static const struct ath12k_hif_ops ath12k_ahb_hif_ops_ipq5332 = {
 	.map_service_to_pipe = ath12k_ahb_map_service_to_pipe,
 	.power_down = ath12k_ahb_power_down,
 	.power_up = ath12k_ahb_power_up,
+	.ssr_notifier_reg = ath12k_ahb_ssr_notifier_reg,
+	.ssr_notifier_unreg = ath12k_ahb_ssr_notifier_unreg,
 };
 
 
@@ -913,7 +934,7 @@ static int ath12k_ahb_probe(struct platform_device *pdev)
 	ab = ath12k_core_alloc(&pdev->dev, sizeof(struct ath12k_ahb),
 			       ATH12K_BUS_AHB, &ath12k_ahb_bus_params);
 	if (!ab) {
-		dev_err(&pdev->dev, "failed to allocate ath11k base\n");
+		dev_err(&pdev->dev, "failed to allocate ath12k base\n");
 		return -ENOMEM;
 	}
 
diff --git a/drivers/net/wireless/ath/ath12k/ahb.h b/drivers/net/wireless/ath/ath12k/ahb.h
index 9fcaf85..5efe1c4 100644
--- a/drivers/net/wireless/ath/ath12k/ahb.h
+++ b/drivers/net/wireless/ath/ath12k/ahb.h
@@ -6,6 +6,8 @@
 #ifndef ATH12K_AHB_H
 #define ATH12K_AHB_H
 
+#include <linux/remoteproc.h>
+
 #include "core.h"
 
 #define ATH12K_AHB_RECOVERY_TIMEOUT (3 * HZ)
@@ -46,6 +48,28 @@ static inline struct ath12k_ahb *ath12k_ahb_priv(struct ath12k_base *ab)
 	return (struct ath12k_ahb *)ab->drv_priv;
 }
 
+static inline int ath12k_rproc_register_subsys_notifier(const char *name,
+							struct notifier_block *nb,
+							struct notifier_block *atomic_nb)
+{
+#ifdef CONFIG_REMOTEPROC
+	return rproc_register_subsys_notifier(name, nb, atomic_nb);
+#else
+	return -ENODEV;
+#endif
+}
+
+static inline int ath12k_rproc_unregister_subsys_notifier(const char *name,
+							  struct notifier_block *nb,
+							  struct notifier_block *atomic_nb)
+{
+#ifdef CONFIG_REMOTEPROC
+	return rproc_unregister_subsys_notifier(name, nb, atomic_nb);
+#else
+	return -ENODEV;
+#endif
+}
+
 static const struct ath12k_bus_params ath12k_ahb_bus_params = {
 	.fixed_bdf_addr = false,
 	.fixed_mem_region = true,
diff --git a/drivers/net/wireless/ath/ath12k/core.c b/drivers/net/wireless/ath/ath12k/core.c
index 56e3892..b98036e 100644
--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -9,6 +9,8 @@
 #include <linux/remoteproc.h>
 #include <linux/firmware.h>
 #include <linux/of.h>
+#include <linux/of_platform.h>
+
 #include "core.h"
 #include "coredump.h"
 #include "dp_tx.h"
@@ -1290,13 +1292,115 @@ err_firmware_stop:
 	return ret;
 }
 
+#define ATH12K_COLLECT_DUMP_TIMEOUT	(90 * HZ)
+
+void ath12k_core_wait_dump_collect(struct ath12k_base *ab)
+{
+	int timeout;
+
+	if (ab->collect_dump) {
+		timeout = wait_event_timeout(ab->ssr_dump_wq,
+					     (ab->collect_dump == false),
+					     ATH12K_COLLECT_DUMP_TIMEOUT);
+		if (timeout <= 0)
+			ath12k_warn(ab, "dump collection timed out\n");
+	}
+	return;
+}
+EXPORT_SYMBOL(ath12k_core_wait_dump_collect);
+
+/* Print the driver stats and crash the system on receiving this notification */
+static int ath12k_core_ssr_notifier_cb(struct notifier_block *nb,
+				       const unsigned long event,
+				       void *data)
+{
+	struct ath12k_base *ab = container_of(nb, struct ath12k_base, ssr_nb);
+
+	if (ab->collect_dump && (event == SUBSYS_AFTER_POWERUP)) {
+		ab->collect_dump = false;
+		wake_up(&ab->ssr_dump_wq);
+		return NOTIFY_OK;
+	}
+
+	return NOTIFY_DONE;
+}
+
+/* Print the driver stats and crash the system on receiving this notification */
+static int ath12k_core_atomic_ssr_notifier_cb(struct notifier_block *nb,
+					      const unsigned long event,
+					      void *data)
+{
+	struct ath12k_base *ab = container_of(nb, struct ath12k_base, atomic_ssr_nb);
+	struct device *dev = ab->dev;
+	bool multi_pd_arch = false;
+	phandle rproc_phandle;
+	struct device_node *rproc_node = NULL;
+	struct platform_device *pdev = NULL;
+	struct platform_device *ssr_pdev = (struct platform_device *)data;
+
+	if (event != SUBSYS_PREPARE_FOR_FATAL_SHUTDOWN)
+		return NOTIFY_DONE;
+
+	ab->collect_dump = true;
+
+	if (!test_bit(ATH12K_FLAG_REGISTERED, &ab->dev_flags))
+		return NOTIFY_DONE;
+
+	/* Print the stats and do recover only if notification is received
+	 * for expected PD. Currently, there's only one PD for which below code
+	 * may not necessary. It's just added as a sanity check incase
+	 * core-BSP code base is modified and impacted this function.
+	 * However, below code will needed review when there will be
+	 * multi pd architecture.
+	 */
+	multi_pd_arch = of_property_read_bool(dev->of_node, "qcom,multipd_arch");
+	if (multi_pd_arch) {
+		if (of_property_read_u32(dev->of_node, "qcom,rproc",
+					 &rproc_phandle))
+			return NOTIFY_DONE;
+		rproc_node = of_find_node_by_phandle(rproc_phandle);
+		if (!rproc_node) {
+			ath12k_warn(ab, "ssr notification failed to get rproc_node\n");
+			return NOTIFY_DONE;
+		}
+		pdev = of_find_device_by_node(rproc_node);
+		if (!pdev) {
+			ath12k_warn(ab, "Failed to get pdev from device node\n");
+			return NOTIFY_DONE;
+		}
+		if (strcmp(ssr_pdev->name, pdev->name) != 0) {
+			ath12k_warn(ab, "SSR notification mismatch %s  pdev name:%s\n",
+				    (char *)data, pdev->name);
+			return NOTIFY_DONE;
+		}
+	}
+
+	if (!(test_bit(ATH12K_FLAG_UNREGISTERING, &ab->ag->dev_flags))) {
+		set_bit(ATH12K_FLAG_RECOVERY, &ab->dev_flags);
+		set_bit(ATH12K_FLAG_CRASH_FLUSH, &ab->dev_flags);
+		queue_work(ab->workqueue_aux, &ab->reset_work);
+	}
+
+	ath12k_hal_dump_srng_stats(ab);
+	/* TODO Add more driver stats */
+
+	ath12k_qmi_free_target_mem_chunk(ab);
+
+	/* Crash the system once all the stats are dumped */
+	if (!ab->fw_recovery_support)
+		BUG_ON(1);
+
+	ath12k_dbg(ab, ATH12K_DBG_BOOT, "reset started\n");
+
+	return NOTIFY_OK;
+}
+
 static int ath12k_core_reconfigure_on_crash(struct ath12k_base *ab)
 {
 	int ret;
 
 	mutex_lock(&ab->core_lock);
 	ath12k_core_pdev_deinit(ab);
-	ath12k_hif_irq_disable(ab);
 	ath12k_dp_pdev_free(ab);
 	ath12k_hif_stop(ab);
 	ath12k_wmi_detach(ab);
@@ -1307,6 +1411,7 @@ static int ath12k_core_reconfigure_on_crash(struct ath12k_base *ab)
 	ath12k_hal_srng_deinit(ab);
 
 	ab->free_vdev_map = (1LL << (ab->num_radios * TARGET_NUM_VDEVS)) - 1;
+	ab->num_db_cap = 0;
 
 	ret = ath12k_hal_srng_init(ab);
 	if (ret)
@@ -1559,6 +1664,10 @@ static void ath12k_core_reset(struct work_struct *work)
 	ab->recovery_start_time = jiffies;
 
 	mutex_lock(&ag->mutex_lock);
+
+	if (!ab->is_reset)
+		ath12k_hif_irq_disable(ab);
+
 	ab->is_reset = true;
 	atomic_set(&ab->recovery_count, 0);
 
@@ -1591,8 +1700,13 @@ static void ath12k_core_reset(struct work_struct *work)
 
 	/* reset host fixed mem off to zero */
 	ab->host_ddr_fixed_mem_off = 0;
-	/* prepare coredump */
-	ath12k_coredump_download_rddm(ab);
+
+	/* prepare coredump when bus is PCI
+	 * In case of AHB, the coredump occurs in rproc module
+	 */
+	if (ab->hif.bus == ATH12K_BUS_PCI) {
+		ath12k_coredump_download_rddm(ab);
+	}
 
 	if (ab->fw_recovery_support) {
 		ath12k_hif_power_down(ab);
@@ -1673,6 +1787,17 @@ int ath12k_core_init(struct ath12k_base *ab)
 	u8 num_ab;
 	int ret;
 
+	/* Register a notifier after core init
+	 * to be called on fw crash
+	 */
+	ab->ssr_nb.notifier_call = ath12k_core_ssr_notifier_cb;
+	ab->atomic_ssr_nb.notifier_call = ath12k_core_atomic_ssr_notifier_cb;
+	ret = ath12k_hif_ssr_notifier_reg(ab);
+	if (ret) {
+		ath12k_err(ab, "failed to register ssr notifier callback\n");
+		return ret;
+	}
+
 	ret = ath12k_debugfs_soc_create(ab);
 	if (ret) {
 		ath12k_err(ab, "failed to create debugfs\n");
@@ -1820,6 +1945,7 @@ static void ath12k_core_hw_group_stop(struct ath12k_hw_group *ag)
 void ath12k_core_deinit(struct ath12k_base *ab)
 {
 	struct ath12k_hw_group *ag = ab->ag;
+	int ret;
 
 	mutex_lock(&ag->mutex_lock);
 
@@ -1837,6 +1963,14 @@ void ath12k_core_deinit(struct ath12k_base *ab)
 	}
 
 	ath12k_debugfs_soc_destroy(ab);
+
+	/* Unregister the ssr notifier as we are not intersted
+	 * in receving these notifications after mac is unregistered.
+	 */
+	ret = ath12k_hif_ssr_notifier_unreg(ab);
+	if (ret)
+		ath12k_err(ab, "failed to un-register ssr notifier callback\n");
+
 	__ath12k_core_put_hw_group(ab);
 
 	mutex_unlock(&ag->mutex_lock);
@@ -1881,6 +2015,7 @@ struct ath12k_base *ath12k_core_alloc(struct device *dev, size_t priv_size,
 	init_waitqueue_head(&ab->peer_mapping_wq);
 	init_waitqueue_head(&ab->wmi_ab.tx_credits_wq);
 	init_waitqueue_head(&ab->qmi.cold_boot_waitq);
+	init_waitqueue_head(&ab->ssr_dump_wq);
 	INIT_WORK(&ab->restart_work, ath12k_core_restart);
 	INIT_WORK(&ab->reset_work, ath12k_core_reset);
 	timer_setup(&ab->rx_replenish_retry, ath12k_ce_rx_replenish_retry, 0);
diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index e9413bc..6f29879 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1211,6 +1211,10 @@ struct ath12k_base {
 	atomic_t reset_count;
 	bool is_reset;
 	struct completion reset_complete;
+	wait_queue_head_t ssr_dump_wq;
+	bool collect_dump;
+	struct notifier_block ssr_nb;
+	struct notifier_block atomic_ssr_nb;
 	struct completion reconfigure_complete;
 	unsigned long reset_fail_timeout;
         /* continuous recovery fail count */
@@ -1400,6 +1404,9 @@ void ath12k_core_put_hw_group(struct ath12k_base *ab);
 
 const struct firmware *ath12k_core_firmware_request(struct ath12k_base *ab,
 						    const char *filename);
+
+void ath12k_core_wait_dump_collect(struct ath12k_base *ab);
+
 void ath12k_fw_stats_init(struct ath12k *ar);
 void ath12k_fw_stats_pdevs_free(struct list_head *head);
 void ath12k_fw_stats_bcn_free(struct list_head *head);
diff --git a/drivers/net/wireless/ath/ath12k/hif.h b/drivers/net/wireless/ath/ath12k/hif.h
index 8c12f24..805b139 100644
--- a/drivers/net/wireless/ath/ath12k/hif.h
+++ b/drivers/net/wireless/ath/ath12k/hif.h
@@ -32,6 +32,8 @@ struct ath12k_hif_ops {
 	void (*ce_irq_enable)(struct ath12k_base *ab);
 	void (*ce_irq_disable)(struct ath12k_base *ab);
 	void (*get_ce_msi_idx)(struct ath12k_base *ab, u32 ce_id, u32 *msi_idx);
+	int (*ssr_notifier_reg)(struct ath12k_base *ab);
+	int (*ssr_notifier_unreg)(struct ath12k_base *ab);
 };
 
 static inline int ath12k_hif_map_service_to_pipe(struct ath12k_base *ab, u16 service_id,
@@ -74,6 +76,22 @@ static inline void ath12k_hif_get_ce_msi_idx(struct ath12k_base *ab, u32 ce_id,
 		*msi_data_idx = ce_id;
 }
 
+static inline int ath12k_hif_ssr_notifier_reg(struct ath12k_base *ab)
+{
+	if (!ab->hif.ops->ssr_notifier_reg)
+		return 0;
+
+	return ab->hif.ops->ssr_notifier_reg(ab);
+}
+
+static inline int ath12k_hif_ssr_notifier_unreg(struct ath12k_base *ab)
+{
+	if (!ab->hif.ops->ssr_notifier_unreg)
+		return 0;
+
+	return ab->hif.ops->ssr_notifier_unreg(ab);
+}
+
 static inline void ath12k_hif_ce_irq_enable(struct ath12k_base *ab)
 {
 	if (ab->hif.ops->ce_irq_enable)
-- 
2.17.1

