From 904843cfbdbaf02fab6d84d9cdb5360f57ee4b2f Mon Sep 17 00:00:00 2001
From: Pravas Kumar Panda <kumarpan@codeaurora.org>
Date: Tue, 17 Mar 2020 14:22:58 +0530
Subject: [PATCH] ath12k: Adding support for mgmt frames stats

Here we will log how many managgement frames are processed in our
driver and maintain counters for mgmt tx completion status.
This stat will be a per pdev stat. It can be dumped using
the below command:-

cat /sys/kernel/debug/ieee80211/phyX/ath12k/dump_mgmt_stats

After getting this command we will dump management stats
for all the vdevs of that particular pdev.

Signed-off-by: Pravas Kumar Panda <kumarpan@codeaurora.org>
Signed-off-by: Manish Dharanenthiran <quic_mdharane@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h    | 11 +++
 drivers/net/wireless/ath/ath12k/debugfs.c | 87 +++++++++++++++++++++++
 drivers/net/wireless/ath/ath12k/mac.c     | 21 ++++--
 drivers/net/wireless/ath/ath12k/wmi.c     | 63 ++++++++++++++++
 4 files changed, 178 insertions(+), 4 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -282,6 +282,16 @@ struct ath12k_reg_tpc_power_info {
         struct chan_power_info chan_power_info[IEEE80211_MAX_NUM_PWR_LEVEL];
 };
 
+#define ATH12K_STATS_MGMT_FRM_TYPE_MAX 16
+
+struct ath12k_mgmt_frame_stats {
+	u32 tx_succ_cnt[ATH12K_STATS_MGMT_FRM_TYPE_MAX];
+	u32 tx_fail_cnt[ATH12K_STATS_MGMT_FRM_TYPE_MAX];
+	u32 rx_cnt[ATH12K_STATS_MGMT_FRM_TYPE_MAX];
+	u32 tx_compl_succ[ATH12K_STATS_MGMT_FRM_TYPE_MAX];
+	u32 tx_compl_fail[ATH12K_STATS_MGMT_FRM_TYPE_MAX];
+};
+
 struct ath12k_tx_conf {
 	bool changed;
 	u16 ac;
@@ -368,6 +378,7 @@ struct ath12k_vif {
 	struct work_struct update_bcn_template_work;
 	u64 obss_color_bitmap;
 	struct work_struct update_obss_color_notify_work;
+	struct ath12k_mgmt_frame_stats mgmt_stats;
 };
 
 struct ath12k_vif_iter {
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -2348,6 +2348,89 @@ static const struct file_operations fops
         .open = simple_open
 };
 
+static ssize_t ath12k_dump_mgmt_stats(struct file *file,
+					char __user *ubuf,
+					size_t count, loff_t *ppos)
+{
+	struct ath12k *ar = file->private_data;
+	struct ath12k_vif *arvif = NULL;
+	struct ath12k_mgmt_frame_stats *mgmt_stats;
+	int len = 0, ret, i;
+	int size = (TARGET_NUM_VDEVS - 1) * 1500;
+	char *buf;
+	const char *mgmt_frm_type[ATH12K_STATS_MGMT_FRM_TYPE_MAX-1] = {
+		"assoc_req", "assoc_resp",
+		"reassoc_req", "reassoc_resp",
+		"probe_req", "probe_resp",
+		"timing_advertisement", "reserved",
+		"beacon", "atim", "disassoc",
+		"auth", "deauth", "action", "action_no_ack"};
+
+	if (ar->state != ATH12K_STATE_ON)
+		return -ENETDOWN;
+
+	buf = kzalloc(size, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	mutex_lock(&ar->conf_mutex);
+	spin_lock_bh(&ar->data_lock);
+
+	list_for_each_entry (arvif, &ar->arvifs, list) {
+		if (!arvif)
+			break;
+
+		if (arvif->vdev_type == WMI_VDEV_TYPE_MONITOR)
+			continue;
+		mgmt_stats = &arvif->mgmt_stats;
+		len += scnprintf(buf + len, size - len, "MGMT frame stats for vdev %u :\n", arvif->vdev_id);
+		len += scnprintf(buf + len, size - len, "  TX stats :\n ");
+		len += scnprintf(buf + len, size - len, "  Success frames:\n");
+		for (i = 0; i < ATH12K_STATS_MGMT_FRM_TYPE_MAX-1; i++)
+			len += scnprintf(buf + len, size - len, "       %s: %d\n",
+					mgmt_frm_type[i], mgmt_stats->tx_succ_cnt[i]);
+
+		len += scnprintf(buf + len, size - len, "  Failed frames:\n");
+
+		for (i = 0; i < ATH12K_STATS_MGMT_FRM_TYPE_MAX-1; i++)
+			len += scnprintf(buf + len, size - len, "       %s: %d\n",
+					mgmt_frm_type[i], mgmt_stats->tx_fail_cnt[i]);
+
+		len += scnprintf(buf + len, size - len, "  RX stats :\n");
+		len += scnprintf(buf + len, size - len, "  Success frames:\n");
+		for (i = 0; i < ATH12K_STATS_MGMT_FRM_TYPE_MAX-1; i++)
+			len += scnprintf(buf + len, size - len, "       %s: %d\n",
+					mgmt_frm_type[i], mgmt_stats->rx_cnt[i]);
+
+		len += scnprintf(buf + len, size - len, " Tx completion stats :\n");
+		len += scnprintf(buf + len, size - len, " success completions:\n");
+
+		for (i = 0; i < ATH12K_STATS_MGMT_FRM_TYPE_MAX-1; i++)
+			len += scnprintf(buf + len, size - len, "       %s: %d\n",
+					mgmt_frm_type[i], mgmt_stats->tx_compl_succ[i]);
+
+		len += scnprintf(buf + len, size - len, " failure completions:\n");
+
+		for (i = 0; i < ATH12K_STATS_MGMT_FRM_TYPE_MAX-1; i++)
+			len += scnprintf(buf + len, size - len, "       %s: %d\n", mgmt_frm_type[i], mgmt_stats->tx_compl_fail[i]);
+	}
+
+	spin_unlock_bh(&ar->data_lock);
+
+	if (len > size)
+		len = size;
+
+	ret = simple_read_from_buffer(ubuf, count, ppos, buf, len);
+	mutex_unlock(&ar->conf_mutex);
+	kfree(buf);
+	return ret;
+}
+
+static const struct file_operations fops_dump_mgmt_stats = {
+	.read = ath12k_dump_mgmt_stats,
+	.open = simple_open
+};
+
 int ath12k_debugfs_register(struct ath12k *ar)
 {
 	struct ath12k_base *ab = ar->ab;
@@ -2406,6 +2489,10 @@ int ath12k_debugfs_register(struct ath12
 				ar->debug.debugfs_pdev, ar,
 				&fops_tpc_stats_type);
 
+	debugfs_create_file("dump_mgmt_stats", 0644,
+				ar->debug.debugfs_pdev, ar,
+				&fops_dump_mgmt_stats);
+
 	return 0;
 }
 
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -6839,9 +6839,9 @@ static int ath12k_mac_mgmt_tx(struct ath
 	 */
 	if (is_prb_rsp &&
 	    atomic_read(&ar->num_pending_mgmt_tx) > ATH12K_PRB_RSP_DROP_THRESHOLD) {
-		ath12k_warn(ar->ab,
+		ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
 			    "dropping probe response as pending queue is almost full\n");
-		return -ENOSPC;
+		return -EBUSY;
 	}
 
 	if (skb_queue_len_lockless(q) >= ATH12K_TX_MGMT_NUM_PENDING_MAX) {
@@ -6868,10 +6868,12 @@ static void ath12k_mac_op_tx(struct ieee
 	struct ath12k_hw *ah = ar->ah;
 	struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
 	struct ieee80211_key_conf *key = info->control.hw_key;
+	struct ath12k_mgmt_frame_stats *mgmt_stats = &arvif->mgmt_stats;
 	struct ath12k_sta *arsta = NULL;
 	struct ieee80211_sta *sta = control->sta;
 	u32 info_flags = info->flags;
 	bool is_prb_rsp;
+	u16 frm_type = 0;
 	int ret;
 
 	if (arvif->vdev_type == WMI_VDEV_TYPE_MONITOR) {
@@ -6895,12 +6897,21 @@ static void ath12k_mac_op_tx(struct ieee
 	if (info_flags & IEEE80211_TX_CTL_HW_80211_ENCAP) {
 		skb_cb->flags |= ATH12K_SKB_HW_80211_ENCAP;
 	} else if (ieee80211_is_mgmt(hdr->frame_control)) {
+		frm_type = FIELD_GET(IEEE80211_FCTL_STYPE, hdr->frame_control);
 		is_prb_rsp = ieee80211_is_probe_resp(hdr->frame_control);
 		ret = ath12k_mac_mgmt_tx(ar, skb, is_prb_rsp);
 		if (ret) {
-			ath12k_warn(ar->ab, "failed to queue management frame %d\n",
-				    ret);
+			if (ret != -EBUSY)
+				ath12k_warn(ar->ab, "failed to queue mgmt stype 0x%x frame %d\n", frm_type, ret);
+
 			ieee80211_free_txskb(ah->hw, skb);
+			spin_lock_bh(&ar->data_lock);
+			mgmt_stats->tx_fail_cnt[frm_type]++;
+			spin_unlock_bh(&ar->data_lock);
+		} else {
+			spin_lock_bh(&ar->data_lock);
+			mgmt_stats->tx_succ_cnt[frm_type]++;
+			spin_unlock_bh(&ar->data_lock);
 		}
 		return;
 	}
@@ -8033,8 +8044,10 @@ static void ath12k_mac_op_remove_interfa
 err_vdev_del:
 	ath12k_peer_cleanup(ar, arvif->vdev_id);
 
+	spin_lock_bh(&ar->data_lock);
 	idr_for_each(&ar->txmgmt_idr,
 		     ath12k_mac_vif_txmgmt_idr_remove, vif);
+	spin_unlock_bh(&ar->data_lock);
 
 	ath12k_mac_vif_unref(&ab->dp, vif);
 	ath12k_dp_tx_put_bank_profile(&ab->dp, arvif->bank_id);
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -5722,8 +5722,14 @@ static int wmi_process_mgmt_tx_comp(stru
 	struct sk_buff *msdu;
 	struct ieee80211_tx_info *info;
 	struct ath12k_skb_cb *skb_cb;
+	struct ieee80211_hdr *hdr;
+	struct ieee80211_vif *vif;
+	struct ath12k_vif *arvif;
+	struct ath12k_mgmt_frame_stats *mgmt_stats;
+	u16 frm_type;
 	int num_mgmt;
 
+	spin_lock_bh(&ar->data_lock);
 	spin_lock_bh(&ar->txmgmt_idr_lock);
 	msdu = idr_find(&ar->txmgmt_idr, desc_id);
 
@@ -5731,6 +5737,7 @@ static int wmi_process_mgmt_tx_comp(stru
 		ath12k_warn(ar->ab, "received mgmt tx compl for invalid msdu_id: %d\n",
 			    desc_id);
 		spin_unlock_bh(&ar->txmgmt_idr_lock);
+		spin_unlock_bh(&ar->data_lock);
 		return -ENOENT;
 	}
 
@@ -5740,6 +5747,29 @@ static int wmi_process_mgmt_tx_comp(stru
 	skb_cb = ATH12K_SKB_CB(msdu);
 	dma_unmap_single(ar->ab->dev, skb_cb->paddr, msdu->len, DMA_TO_DEVICE);
 
+	hdr = (struct ieee80211_hdr *)msdu->data;
+
+	if (ieee80211_is_mgmt(hdr->frame_control)) {
+		frm_type = FIELD_GET(IEEE80211_FCTL_STYPE, hdr->frame_control);
+		vif = skb_cb->vif;
+
+		if (!vif) {
+			ath12k_warn(ar->ab, "failed to find vif to update txcompl mgmt stats\n");
+			goto skip_mgmt_stats;
+		}
+
+	        arvif = ath12k_vif_to_arvif(vif);
+		mgmt_stats = &arvif->mgmt_stats;
+
+		if (!status)
+			mgmt_stats->tx_compl_succ[frm_type]++;
+		else
+			mgmt_stats->tx_compl_fail[frm_type]++;
+	}
+
+skip_mgmt_stats:
+	spin_unlock_bh(&ar->data_lock);
+
 	info = IEEE80211_SKB_CB(msdu);
 	if ((!(info->flags & IEEE80211_TX_CTL_NO_ACK)) && !status)
 		info->flags |= IEEE80211_TX_STAT_ACK;
@@ -7129,6 +7159,11 @@ static void ath12k_mgmt_rx_event(struct
 	struct ieee80211_hdr *hdr;
 	u16 fc;
 	struct ieee80211_supported_band *sband;
+	struct ath12k_peer *peer;
+	struct ieee80211_vif *vif;
+	struct ath12k_vif *arvif;
+	struct ath12k_mgmt_frame_stats *mgmt_stats;
+	u16 frm_type = 0;
 
 	if (ath12k_pull_mgmt_rx_params_tlv(ab, skb, &rx_ev) != 0) {
 		ath12k_warn(ab, "failed to extract mgmt rx event");
@@ -7194,6 +7229,34 @@ static void ath12k_mgmt_rx_event(struct
 
 	hdr = (struct ieee80211_hdr *)skb->data;
 	fc = le16_to_cpu(hdr->frame_control);
+	frm_type = FIELD_GET(IEEE80211_FCTL_STYPE, fc);
+
+	spin_lock_bh(&ab->base_lock);
+
+	peer = ath12k_peer_find_by_addr(ab, hdr->addr1);
+	if(!peer)
+		peer = ath12k_peer_find_by_addr(ab, hdr->addr3);
+	if (!peer) {
+		spin_unlock_bh(&ab->base_lock);
+		goto skip_mgmt_stats;
+	}
+
+	vif = peer->vif;
+
+	spin_unlock_bh(&ab->base_lock);
+
+	if (!vif)
+		goto skip_mgmt_stats;
+
+	spin_lock_bh(&ar->data_lock);
+
+	arvif = ath12k_vif_to_arvif(vif);
+	mgmt_stats = &arvif->mgmt_stats;
+	mgmt_stats->rx_cnt[frm_type]++;
+
+	spin_unlock_bh(&ar->data_lock);
+
+skip_mgmt_stats:
 
 	/* Firmware is guaranteed to report all essential management frames via
 	 * WMI while it can deliver some extra via HTT. Since there can be
