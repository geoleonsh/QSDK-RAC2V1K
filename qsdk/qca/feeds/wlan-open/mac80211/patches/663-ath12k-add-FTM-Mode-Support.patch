From ee76760fa88227ebde17924ac02fc2631bd04db6 Mon Sep 17 00:00:00 2001
From: Aaradhana Sahu <quic_aarasahu@quicinc.com>
Date: Fri, 9 Sep 2022 12:17:52 +0530
Subject: [PATCH] ath12k: add FTM Mode Support

FTM (Factory test Mode) provide interface to send the test mode
and calibration related command to firmware. FTM daemon registers
a handler with Diag for receiving the QDART message, FTM daemon sends
Tx command to wifi driver via CFG80211. Wifi driver sends the WMI command
to FW and FW response via WMI events, wifi driver creates SKB and send to
CFG80211, CFG80211 sends FW response to FTM daemon via netlink message.

Command: insmod ath12k ftm_mode=1

Signed-off-by: Sowmiya Sree Elavalagan <quic_ssreeela@quicinc.com>
Signed-off-by: Aaradhana Sahu <quic_aarasahu@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c       |  14 +-
 drivers/net/wireless/ath/ath12k/core.h       |  11 +
 drivers/net/wireless/ath/ath12k/debug.h      |   1 +
 drivers/net/wireless/ath/ath12k/mac.c        |  11 +-
 drivers/net/wireless/ath/ath12k/qmi.c        |   5 +
 drivers/net/wireless/ath/ath12k/testmode.c   | 289 ++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/testmode.h   |  14 +-
 drivers/net/wireless/ath/ath12k/testmode_i.h |  14 +
 drivers/net/wireless/ath/ath12k/wmi.c        |  36 +++
 drivers/net/wireless/ath/ath12k/wmi.h        |  19 ++
 10 files changed, 402 insertions(+), 12 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -31,6 +31,10 @@ module_param_named(frame_mode, ath12k_fr
 MODULE_PARM_DESC(frame_mode,
 		 "Datapath frame mode (0: raw, 1: native wifi (default), 2: ethernet)");
 
+unsigned int ath12k_ftm_mode;
+module_param_named(ftm_mode, ath12k_ftm_mode, uint, 0444);
+MODULE_PARM_DESC(ftm_mode, "Boots up in factory test mode");
+
 unsigned int ath12k_mlo_capable = true;
 module_param_named(mlo_capable, ath12k_mlo_capable, uint, 0644);
 MODULE_PARM_DESC(mlo_capable, "mlo capable: 0-disable, 1-enable");
@@ -627,6 +631,11 @@ static int ath12k_core_soc_create(struct
 {
 	int ret;
 
+	if (ath12k_ftm_mode) {
+		ab->fw_mode = ATH12K_FIRMWARE_MODE_FTM;
+		ath12k_info(ab, "Booting in ftm mode\n");
+	}
+
 	ret = ath12k_qmi_init_service(ab);
 	if (ret) {
 		ath12k_err(ab, "failed to initialize qmi :%d\n", ret);
@@ -996,7 +1005,7 @@ int ath12k_core_qmi_firmware_ready(struc
 	/* This should be the last function, add core related
 	 * initializations within this function
 	 */
-	ret = ath12k_core_start(ab, ATH12K_FIRMWARE_MODE_NORMAL);
+	ret = ath12k_core_start(ab, ab->fw_mode);
 	if (ret) {
 		ath12k_err(ab, "failed to start core: %d\n", ret);
 		goto err_dp_free;
@@ -1162,7 +1171,8 @@ static void ath12k_core_restart(struct w
 		for (j = 0; j < ab->num_radios; j++) {
 			pdev = &ab->pdevs[j];
 			ar = pdev->ar;
-			if (!ar || ar->state == ATH12K_STATE_OFF)
+			if (!ar || ar->state == ATH12K_STATE_OFF ||
+				ar->state == ATH12K_STATE_TM)
 				continue;
 
 			mutex_lock(&ar->conf_mutex);
@@ -1186,6 +1196,9 @@ static void ath12k_core_restart(struct w
 				ath12k_warn(ab,
 					    "device is wedged, will not restart radio %d\n", j);
 				break;
+			case ATH12K_STATE_TM:
+				ath12k_warn(ab, "fw mode reset done radio %d\n", j);
+				break;
 			}
 			mutex_unlock(&ar->conf_mutex);
 		}
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -214,6 +214,7 @@ enum ath12k_dev_flags {
 	ATH12K_FLAG_HTC_SUSPEND_COMPLETE,
 	ATH12K_FLAG_QMI_FW_READY_COMPLETE,
 	ATH12K_FLAG_HW_GROUP_ATTACHED,
+	ATH12K_FLAG_FTM_SEGMENTED,
 };
 
 enum ath12k_monitor_flags {
@@ -568,12 +569,19 @@ enum ath12k_state {
 	ATH12K_STATE_RESTARTING,
 	ATH12K_STATE_RESTARTED,
 	ATH12K_STATE_WEDGED,
+	ATH12K_STATE_TM,
 	/* Add other states as required */
 };
 
 /* Antenna noise floor */
 #define ATH12K_DEFAULT_NOISE_FLOOR -95
 
+struct ath12k_ftm_event_obj {
+	u32 data_pos;
+	u32 expected_seq;
+	u8 *eventdata;
+};
+
 struct ath12k_fw_stats {
 	struct dentry *debugfs_fwstats;
 	u32 pdev_id;
@@ -781,6 +789,8 @@ struct ath12k {
 	int monitor_vdev_id;
 	u8 twt_enabled;
 	s8 max_allowed_tx_power;
+	struct completion fw_mode_reset;
+	u8 ftm_msgref;
 	bool ap_ps_enabled;
 	enum ath12k_ap_ps_state ap_ps_state;
 
@@ -939,6 +949,7 @@ struct ath12k_hw_group {
 /* Master structure to hold the hw data which may be used in core module */
 struct ath12k_base {
 	enum ath12k_hw_rev hw_rev;
+	enum ath12k_firmware_mode fw_mode;
 	struct platform_device *pdev;
 	struct device *dev;
 	struct ath12k_hw_group *ag;
@@ -1031,6 +1042,8 @@ struct ath12k_base {
 		/* protected by data_lock */
 		u32 fw_crash_counter;
 	} stats;
+	bool ftm_segment_handler;
+	struct ath12k_ftm_event_obj ftm_event_obj;
 	u32 pktlog_defs_checksum;
 
 	struct ath12k_dbring_cap *db_caps;
--- a/drivers/net/wireless/ath/ath12k/debug.h
+++ b/drivers/net/wireless/ath/ath12k/debug.h
@@ -34,6 +34,7 @@ __printf(2, 3) void ath12k_err(struct at
 __printf(2, 3) void ath12k_warn(struct ath12k_base *ab, const char *fmt, ...);
 
 extern unsigned int ath12k_debug_mask;
+extern unsigned int ath12k_ftm_mode;
 
 #ifdef CPTCFG_ATH12K_DEBUG
 __printf(3, 4) void __ath12k_dbg(struct ath12k_base *ab,
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -700,7 +700,10 @@ struct ath12k *ath12k_mac_get_ar_by_pdev
 		return NULL;
 
 	for (i = 0; i < ab->num_radios; i++) {
-		pdev = rcu_dereference(ab->pdevs_active[i]);
+		if (ab->fw_mode == ATH12K_FIRMWARE_MODE_FTM)
+			pdev = &ab->pdevs[i];
+		else
+			pdev = rcu_dereference(ab->pdevs_active[i]);
 
 		if (pdev && pdev->pdev_id == pdev_id)
 			return (pdev->ar ? pdev->ar : NULL);
@@ -6966,6 +6969,7 @@ static int ath12k_mac_radio_start(struct
 	case ATH12K_STATE_RESTARTED:
 	case ATH12K_STATE_WEDGED:
 	case ATH12K_STATE_ON:
+	case ATH12K_STATE_TM:
 		WARN_ON(1);
 		ret = -EINVAL;
 		goto err;
@@ -7122,6 +7126,12 @@ static int ath12k_mac_op_start(struct ie
 	ar = ah->radio;
 	ab = ar->ab;
 
+	if (ath12k_ftm_mode) {
+		ath12k_err(ab, "fail to start mac operations in ftm mode\n");
+		mutex_unlock(&ah->conf_mutex);
+		return -EWOULDBLOCK;
+	}
+
 	/* TODO Maintain state for ah? */
 
 	for (i = 0; i < ah->num_radio; i++) {
--- a/drivers/net/wireless/ath/ath12k/qmi.c
+++ b/drivers/net/wireless/ath/ath12k/qmi.c
@@ -3759,6 +3759,11 @@ int ath12k_config_qdss(struct ath12k_bas
 {
 	int ret;
 
+	/* Disabling qdss trace for FTM as it causes hig evt latency in FW
+*/
+	if (ab->fw_mode == ATH12K_FIRMWARE_MODE_FTM)
+		return 0;
+
 	ret = ath12k_qmi_send_qdss_config(ab);
 	if (ret < 0)
 		ath12k_warn(ab,
--- a/drivers/net/wireless/ath/ath12k/testmode.c
+++ b/drivers/net/wireless/ath/ath12k/testmode.c
@@ -10,8 +10,12 @@
 #include "wmi.h"
 #include "hw.h"
 #include "core.h"
+#include "hif.h"
 #include "testmode_i.h"
 
+#define ATH12K_FTM_SEGHDR_CURRENT_SEQ		GENMASK(3, 0)
+#define ATH12K_FTM_SEGHDR_TOTAL_SEGMENTS	GENMASK(7, 4)
+
 static const struct nla_policy ath12k_tm_policy[ATH12K_TM_ATTR_MAX + 1] = {
 	[ATH12K_TM_ATTR_CMD]		= { .type = NLA_U32 },
 	[ATH12K_TM_ATTR_DATA]		= { .type = NLA_BINARY,
@@ -58,66 +62,168 @@ void ath12k_fwlog_write(struct ath12k_ba
 /* Returns true if callee consumes the skb and the skb should be discarded.
  * Returns false if skb is not used. Does not sleep.
  */
-bool ath12k_tm_event_wmi(struct ath12k *ar, u32 cmd_id, struct sk_buff *skb)
+struct ath12k *ath12k_tm_get_ar(struct ath12k_base *ab)
+{
+	struct ath12k_pdev *pdev;
+	struct ath12k *ar = NULL;
+	int i;
+
+	for (i = 0; i < ab->num_radios; i++) {
+		pdev = &ab->pdevs[i];
+		ar = pdev->ar;
+		if (ar) {
+			if (ar->state == ATH12K_STATE_TM)
+				break;
+		}
+	}
+	return ar;
+}
+/* This function handles unsegmented events. Data in various events are aggregated
+* in application layer, this event is unsegmented from host perspective.
+*/
+void ath12k_tm_wmi_event_unsegmented(struct ath12k_base *ab, u32 cmd_id, struct sk_buff *skb)
 {
 	struct sk_buff *nl_skb;
-	bool consumed;
-	int ret;
+	struct ath12k *ar;
 
-	ath12k_dbg(ar->ab, ATH12K_DBG_TESTMODE,
-		   "testmode event wmi cmd_id %d skb %pK skb->len %d\n",
-		   cmd_id, skb, skb->len);
+	ath12k_dbg(ab, ATH12K_DBG_TESTMODE,
+		   "testmode event wmi cmd_id %d skb length %d\n",
+		   cmd_id, skb->len);
 
-	ath12k_dbg_dump(ar->ab, ATH12K_DBG_TESTMODE, NULL, "", skb->data, skb->len);
+	ath12k_dbg_dump(ab, ATH12K_DBG_TESTMODE, NULL, "", skb->data, skb->len);
+
+	ar = ath12k_tm_get_ar(ab);
+	if (!ar) {
+		ath12k_warn(ab, "testmode event not handled due to invalid pdev\n");
+		return;
+	}
 
 	spin_lock_bh(&ar->data_lock);
 
-	consumed = true;
 
 	nl_skb = cfg80211_testmode_alloc_event_skb(ar->ah->hw->wiphy,
-						   2 * sizeof(u32) + skb->len,
+						   2 * nla_total_size(sizeof(u32)) +
+						   nla_total_size(skb->len),
 						   GFP_ATOMIC);
 	if (!nl_skb) {
-		ath12k_warn(ar->ab,
+		ath12k_warn(ab,
 			    "failed to allocate skb for testmode wmi event\n");
 		goto out;
 	}
-
-	ret = nla_put_u32(nl_skb, ATH12K_TM_ATTR_CMD, ATH12K_TM_CMD_WMI);
-	if (ret) {
-		ath12k_warn(ar->ab,
-			    "failed to put testmode wmi event cmd attribute: %d\n",
-			    ret);
+	if (nla_put_u32(nl_skb, ATH12K_TM_ATTR_CMD, ATH12K_TM_CMD_WMI) ||
+	    nla_put_u32(nl_skb, ATH12K_TM_ATTR_WMI_CMDID, cmd_id) ||
+	    nla_put(nl_skb, ATH12K_TM_ATTR_DATA, skb->len, skb->data)) {
+		ath12k_warn(ab, "failed to populate testmode unsegmented event\n");
 		kfree_skb(nl_skb);
 		goto out;
 	}
 
-	ret = nla_put_u32(nl_skb, ATH12K_TM_ATTR_WMI_CMDID, cmd_id);
-	if (ret) {
-		ath12k_warn(ar->ab,
-			    "failed to put testmode wmi even cmd_id: %d\n",
-			    ret);
-		kfree_skb(nl_skb);
+
+	cfg80211_testmode_event(nl_skb, GFP_ATOMIC);
+	spin_unlock_bh(&ar->data_lock);
+	return;
+
+out:
+	spin_unlock_bh(&ar->data_lock);
+	ath12k_warn(ab, "Failed to send testmode event to higher layers\n");
+}
+
+/* This function handles segmented events.
+* Data of various events received from fw is aggregated and
+* sent to application layer
+*/
+int ath12k_tm_process_event(struct ath12k_base *ab, u32 cmd_id,
+			    const struct wmi_ftm_event_msg *ftm_msg,
+                            u16 length)
+{
+	struct sk_buff *nl_skb;
+	int ret = 0;
+	struct ath12k *ar;
+	u8 const *buf_pos;
+	u16 datalen;
+	u8 total_segments, current_seq;
+	u32 data_pos;
+	u32 pdev_id;
+
+	ath12k_dbg(ab, ATH12K_DBG_TESTMODE,
+		   "testmode event wmi cmd_id %d ftm event msg %pK datalen %d\n",
+		   cmd_id, ftm_msg, length);
+	ath12k_dbg_dump(ab, ATH12K_DBG_TESTMODE, NULL, "", ftm_msg, length);
+	pdev_id = DP_HW2SW_MACID(ftm_msg->seg_hdr.pdev_id);
+
+	if (pdev_id >= ab->num_radios) {
+		ath12k_warn(ab, "testmode event not handled due to invalid pdev id\n");
+		return -EINVAL;
+	}
+
+	ar = ab->pdevs[pdev_id].ar;
+	if (!ar) {
+		ath12k_warn(ab, "testmode event not handled due to absence of pdev\n");
+		return -ENODEV;
+	}
+
+	current_seq = FIELD_GET(ATH12K_FTM_SEGHDR_CURRENT_SEQ,
+				ftm_msg->seg_hdr.segmentinfo);
+	total_segments = FIELD_GET(ATH12K_FTM_SEGHDR_TOTAL_SEGMENTS,
+				   ftm_msg->seg_hdr.segmentinfo);
+	datalen = length - (sizeof(struct wmi_ftm_seg_hdr));
+	buf_pos = ftm_msg->data;
+
+	spin_lock_bh(&ar->data_lock);
+	if (current_seq == 0) {
+		ab->ftm_event_obj.expected_seq = 0;
+		ab->ftm_event_obj.data_pos = 0;
+	}
+
+	data_pos = ab->ftm_event_obj.data_pos;
+
+	if ((data_pos + datalen) > ATH12K_FTM_EVENT_MAX_BUF_LENGTH) {
+		ath12k_warn(ab,
+			     "Invalid event length date_pos[%d] datalen[%d]\n",
+			      data_pos, datalen);
 		goto out;
 	}
 
-	ret = nla_put(nl_skb, ATH12K_TM_ATTR_DATA, skb->len, skb->data);
-	if (ret) {
-		ath12k_warn(ar->ab,
-			    "failed to copy skb to testmode wmi event: %d\n",
-			    ret);
+	memcpy(&ab->ftm_event_obj.eventdata[data_pos], buf_pos, datalen);
+	data_pos += datalen;
+
+	if (++ab->ftm_event_obj.expected_seq != total_segments) {
+		ab->ftm_event_obj.data_pos = data_pos;
+		ath12k_dbg(ab, ATH12K_DBG_TESTMODE,
+			   "partial data received current_seq[%d], total_seg[%d]\n",
+			   current_seq, total_segments);
+		goto out;
+	}
+
+	ath12k_dbg(ab, ATH12K_DBG_TESTMODE,
+		   "total data length[%d] = [%d]\n",
+		   data_pos, ftm_msg->seg_hdr.len);
+	nl_skb = cfg80211_testmode_alloc_event_skb(ar->ah->hw->wiphy,
+						   2 * nla_total_size(sizeof(u32)) +
+						   nla_total_size(data_pos),
+						   GFP_ATOMIC);
+	if (!nl_skb) {
+		ath12k_warn(ab,
+			    "failed to allocate skb for testmode wmi event\n");
+		goto out;
+	}
+
+	if (nla_put_u32(nl_skb, ATH12K_TM_ATTR_CMD,
+			ATH12K_TM_CMD_WMI_FTM) ||
+	    nla_put_u32(nl_skb, ATH12K_TM_ATTR_WMI_CMDID, cmd_id) ||
+	    nla_put(nl_skb, ATH12K_TM_ATTR_DATA, data_pos,
+		    &ab->ftm_event_obj.eventdata[0])) {
+		ath12k_warn(ab, "failed to populate testmode event");
 		kfree_skb(nl_skb);
 		goto out;
 	}
 
 	cfg80211_testmode_event(nl_skb, GFP_ATOMIC);
-
 out:
 	spin_unlock_bh(&ar->data_lock);
+	return ret;
 
-	return consumed;
 }
-
 static int ath12k_tm_cmd_get_version(struct ath12k *ar, struct nlattr *tb[])
 {
 	struct sk_buff *skb;
@@ -133,16 +239,10 @@ static int ath12k_tm_cmd_get_version(str
 	if (!skb)
 		return -ENOMEM;
 
-	ret = nla_put_u32(skb, ATH12K_TM_ATTR_VERSION_MAJOR,
-			  ATH12K_TESTMODE_VERSION_MAJOR);
-	if (ret) {
-		kfree_skb(skb);
-		return ret;
-	}
-
-	ret = nla_put_u32(skb, ATH12K_TM_ATTR_VERSION_MINOR,
-			  ATH12K_TESTMODE_VERSION_MINOR);
-	if (ret) {
+	if (nla_put_u32(skb, ATH12K_TM_ATTR_VERSION_MAJOR,
+			ATH12K_TESTMODE_VERSION_MAJOR) ||
+	    nla_put_u32(skb, ATH12K_TM_ATTR_VERSION_MINOR,
+			ATH12K_TESTMODE_VERSION_MINOR)) {
 		kfree_skb(skb);
 		return ret;
 	}
@@ -150,6 +250,39 @@ static int ath12k_tm_cmd_get_version(str
 	return cfg80211_testmode_reply(skb);
 }
 
+static int ath12k_tm_cmd_testmode_start(struct ath12k *ar, struct nlattr *tb[])
+{
+	int ret;
+	ath12k_dbg(ar->ab, ATH12K_DBG_TESTMODE, " enter testmode cmd fw start\n");
+	mutex_lock(&ar->conf_mutex);
+
+	if (ar->state == ATH12K_STATE_TM) {
+		ret = -EALREADY;
+		goto err;
+	}
+
+	/* start utf only when the driver is not in use  */
+	if (ar->state != ATH12K_STATE_OFF) {
+		ret = -EBUSY;
+		goto err;
+	}
+
+	ar->ab->ftm_event_obj.eventdata =
+		kzalloc(ATH12K_FTM_EVENT_MAX_BUF_LENGTH, GFP_KERNEL);
+	if (!ar->ab->ftm_event_obj.eventdata) {
+		ret = -ENOMEM;
+		goto err;
+	}
+
+	ar->state = ATH12K_STATE_TM;
+	ar->ftm_msgref = 0;
+	mutex_unlock(&ar->conf_mutex);
+	ath12k_dbg(ar->ab, ATH12K_DBG_TESTMODE, " enter testmode cmd started\n");
+	return 0;
+err:
+	mutex_unlock(&ar->conf_mutex);
+	return ret;
+}
 static int ath12k_tm_cmd_wmi(struct ath12k *ar, struct nlattr *tb[])
 {
 	struct ath12k_pdev_wmi *wmi = ar->wmi;
@@ -161,11 +294,6 @@ static int ath12k_tm_cmd_wmi(struct ath1
 
 	mutex_lock(&ar->conf_mutex);
 
-	if (ar->state != ATH12K_STATE_ON) {
-		ret = -ENETDOWN;
-		goto out;
-	}
-
 	if (!tb[ATH12K_TM_ATTR_DATA]) {
 		ret = -EINVAL;
 		goto out;
@@ -178,6 +306,11 @@ static int ath12k_tm_cmd_wmi(struct ath1
 
 	buf = nla_data(tb[ATH12K_TM_ATTR_DATA]);
 	buf_len = nla_len(tb[ATH12K_TM_ATTR_DATA]);
+	if (!buf_len) {
+		ath12k_warn(ar->ab, "No data present in testmode command\n");
+		ret = -EINVAL;
+		goto out;
+	}
 	cmd_id = nla_get_u32(tb[ATH12K_TM_ATTR_WMI_CMDID]);
 
 	ptr = (u32 *)buf;
@@ -188,8 +321,8 @@ static int ath12k_tm_cmd_wmi(struct ath1
 		*ptr = ar->pdev->pdev_id;
 
 	ath12k_dbg(ar->ab, ATH12K_DBG_TESTMODE,
-		   "testmode cmd wmi cmd_id %d buf %pK buf_len %d\n",
-		   cmd_id, buf, buf_len);
+		   "testmode cmd wmi cmd_id %d  buf length %d\n",
+		   cmd_id, buf_len);
 
 	ath12k_dbg_dump(ar->ab, ATH12K_DBG_TESTMODE, NULL, "", buf, buf_len);
 
@@ -216,17 +349,98 @@ out:
 	return ret;
 }
 
+static int ath12k_tm_cmd_process_ftm(struct ath12k *ar, struct nlattr *tb[])
+{
+	struct ath12k_pdev_wmi *wmi = ar->wmi;
+	struct sk_buff *skb;
+	u32 cmd_id, buf_len, hdr_info;
+	int ret;
+	void *buf;
+
+	/* if buf_len is 0 no data is sent, return error */
+	u8 segnumber = 0, seginfo;
+	u16 chunk_len, total_bytes, num_segments;
+	u8 *bufpos;
+	struct wmi_ftm_cmd *ftm_cmd;
+	mutex_lock(&ar->conf_mutex);
+	ath12k_dbg(ar->ab, ATH12K_DBG_TESTMODE, "ar->state  %d\n", ar->state);
+	if (ar->state != ATH12K_STATE_TM) {
+		ret = -ENETDOWN;
+		goto out;
+	}
+
+	if (!tb[ATH12K_TM_ATTR_DATA]) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	buf = nla_data(tb[ATH12K_TM_ATTR_DATA]);
+	buf_len = nla_len(tb[ATH12K_TM_ATTR_DATA]);
+	cmd_id = WMI_PDEV_UTF_CMDID;
+	ath12k_dbg(ar->ab, ATH12K_DBG_TESTMODE,
+		"testmode cmd wmi cmd_id %d buf %pK buf_len %d\n",
+		cmd_id, buf, buf_len);
+	ath12k_dbg_dump(ar->ab, ATH12K_DBG_TESTMODE, NULL, "", buf, buf_len);
+	bufpos = buf;
+	total_bytes = buf_len;
+	num_segments = total_bytes / MAX_WMI_UTF_LEN;
+	if (buf_len - (num_segments * MAX_WMI_UTF_LEN))
+		num_segments++;
+
+	while (buf_len) {
+		if (buf_len > MAX_WMI_UTF_LEN)
+			chunk_len = MAX_WMI_UTF_LEN;	/* MAX message */
+		else
+			chunk_len = buf_len;
+
+		skb = ath12k_wmi_alloc_skb(wmi->wmi_ab, (chunk_len +
+					sizeof(struct wmi_ftm_cmd)));
+
+		if (!skb) {
+			ret = -ENOMEM;
+			goto out;
+		}
+
+		ftm_cmd = (struct wmi_ftm_cmd *)skb->data;
+		hdr_info = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_BYTE) |
+			FIELD_PREP(WMI_TLV_LEN, (chunk_len +
+				sizeof(struct wmi_ftm_seg_hdr)));
+		ftm_cmd->tlv_header = hdr_info;
+		ftm_cmd->seg_hdr.len = total_bytes;
+		ftm_cmd->seg_hdr.msgref = ar->ftm_msgref;
+		seginfo = FIELD_PREP(ATH12K_FTM_SEGHDR_TOTAL_SEGMENTS, num_segments) |
+			FIELD_PREP(ATH12K_FTM_SEGHDR_CURRENT_SEQ, segnumber);
+		ftm_cmd->seg_hdr.segmentinfo = seginfo;
+		segnumber++;
+		memcpy(&ftm_cmd->data, bufpos, chunk_len);
+		ret = ath12k_wmi_cmd_send(wmi, skb, cmd_id);
+		if (ret) {
+			ath12k_warn(ar->ab, "ftm wmi command fail: %d\n", ret);
+			goto out;
+		}
+
+		buf_len -= chunk_len;
+		bufpos += chunk_len;
+	}
+	++ar->ftm_msgref;
+	ret = 0;
+out:
+	mutex_unlock(&ar->conf_mutex);
+	return ret;
+}
 int ath12k_tm_cmd(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		  void *data, int len)
 {
 	struct ath12k_hw *ah = hw->priv;
 	struct ath12k *ar;
+	struct ath12k_base *ab;
 	struct nlattr *tb[ATH12K_TM_ATTR_MAX + 1];
 	int ret;
 
 	mutex_lock(&ah->conf_mutex);
 
 	ar = ath12k_get_ar_by_vif(hw, vif);
+	ab = ar->ab;
 	if (!ar) {
 		mutex_unlock(&ah->conf_mutex);
 		return -EINVAL;
@@ -243,10 +457,17 @@ int ath12k_tm_cmd(struct ieee80211_hw *h
 		return -EINVAL;
 
 	switch (nla_get_u32(tb[ATH12K_TM_ATTR_CMD])) {
-	case ATH12K_TM_CMD_GET_VERSION:
-		return ath12k_tm_cmd_get_version(ar, tb);
 	case ATH12K_TM_CMD_WMI:
 		return ath12k_tm_cmd_wmi(ar, tb);
+	case ATH12K_TM_CMD_TESTMODE_START:
+		return ath12k_tm_cmd_testmode_start(ar, tb);
+	case ATH12K_TM_CMD_GET_VERSION:
+		return ath12k_tm_cmd_get_version(ar, tb);
+	case ATH12K_TM_CMD_WMI_FTM:
+		set_bit(ATH12K_FLAG_FTM_SEGMENTED, &ab->dev_flags);
+		return ath12k_tm_cmd_process_ftm(ar, tb);
+	case ATH12K_TM_CMD_TESTMODE_STOP:
+		return 0;
 	default:
 		return -EOPNOTSUPP;
 	}
--- a/drivers/net/wireless/ath/ath12k/testmode.h
+++ b/drivers/net/wireless/ath/ath12k/testmode.h
@@ -5,21 +5,31 @@
  */
 
 #include "core.h"
+#include "hif.h"
 
 #ifdef CPTCFG_NL80211_TESTMODE
 
-bool ath12k_tm_event_wmi(struct ath12k *ar, u32 cmd_id, struct sk_buff *skb);
+void ath12k_tm_wmi_event_unsegmented(struct ath12k_base *ab, u32 cmd_id, struct sk_buff *skb);
+int ath12k_tm_process_event(struct ath12k_base *ab, u32 cmd_id,
+			    const struct wmi_ftm_event_msg *ftm_msg,
+			    u16 length);
 int ath12k_tm_cmd(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 		  void *data, int len);
 void ath12k_fwlog_write(struct ath12k_base *ab, u8 *data, int len);
 #else
 
-static inline bool ath12k_tm_event_wmi(struct ath12k *ar, u32 cmd_id,
-				       struct sk_buff *skb)
+static inline void ath12k_tm_wmi_event__unsegmented(struct ath12k_base *ab, u32 cmd_id,
+				                    struct sk_buff *skb)
 {
-	return false;
+	return;
 }
 
+static inline int ath12k_tm_process_event(struct ath12k_base *ab, u32 cmd_id,
+					  const struct wmi_ftm_event_msg *msg,
+					  u16 length)
+{
+	return 0;
+}
 static inline int ath12k_tm_cmd(struct ieee80211_hw *hw,
 				struct ieee80211_vif *vif,
 				void *data, int len)
--- a/drivers/net/wireless/ath/ath12k/testmode_i.h
+++ b/drivers/net/wireless/ath/ath12k/testmode_i.h
@@ -15,6 +15,7 @@
 #define ATH12K_TESTMODE_VERSION_MINOR 0
 
 #define ATH12K_TM_DATA_MAX_LEN		5000
+#define ATH12K_FTM_EVENT_MAX_BUF_LENGTH 2048
 
 enum ath12k_tm_attr {
 	__ATH12K_TM_ATTR_INVALID		= 0,
@@ -42,6 +43,12 @@ enum ath12k_tm_cmd {
 	 */
 	ATH12K_TM_CMD_GET_VERSION = 0,
 
+	/* Boots the UTF firmware, the netdev interface must be down at thetime. */
+	ATH12K_TM_CMD_TESTMODE_START = 1,
+
+	/* Shuts down the UTF firmware and puts the driver back into OFFstate.*/
+	ATH12K_TM_CMD_TESTMODE_STOP = 2,
+
 	/* The command used to transmit a WMI command to the firmware and
 	 * the event to receive WMI events from the firmware. Without
 	 * struct wmi_cmd_hdr header, only the WMI payload. Command id is
@@ -49,4 +56,11 @@ enum ath12k_tm_cmd {
 	 * ATH12K_TM_ATTR_DATA.
 	 */
 	ATH12K_TM_CMD_WMI = 3,
+
+	/* The command used to transmit a FTM WMI command to the firmware
+	* and the event to receive WMI events from the firmware.The data
+	* received  only contain the payload, Need to add the tlv
+	* header and send the cmd to fw with commandid WMI_PDEV_UTF_CMDID.
+	*/
+	ATH12K_TM_CMD_WMI_FTM = 4,
 };
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -8154,6 +8154,35 @@ ath12k_wmi_pktlog_decode_info(struct ath
 	kfree(tb);
 }
 
+static void ath12k_wmi_tm_event_segmented(struct ath12k_base *ab, u32 cmd_id,
+					struct sk_buff *skb)
+{
+	const void **tb;
+	const struct wmi_ftm_event_msg *ev;
+	u16 length;
+	int ret;
+
+	tb = ath12k_wmi_tlv_parse_alloc(ab, skb->data, skb->len, GFP_ATOMIC);
+
+	if (IS_ERR(tb)) {
+		ret = PTR_ERR(tb);
+		ath12k_warn(ab, "failed to parse ftm event tlv: %d\n", ret);
+		return;
+	}
+
+	ev = tb[WMI_TAG_ARRAY_BYTE];
+	if (!ev) {
+		ath12k_warn(ab, "failed to fetch ftm msg\n");
+		kfree(tb);
+		return;
+	}
+
+	length = skb->len - TLV_HDR_SIZE;
+	ret = ath12k_tm_process_event(ab, cmd_id, ev, length);
+	if (!ret)
+		ath12k_warn(ab, "Failed to process ftm event\n");
+	kfree(tb);
+}
 static void
 ath12k_wmi_pdev_temperature_event(struct ath12k_base *ab,
 				  struct sk_buff *skb)
@@ -9149,6 +9178,12 @@ static void ath12k_wmi_tlv_op_rx(struct
 	case WMI_OBSS_COLOR_COLLISION_DETECTION_EVENTID:
 		ath12k_wmi_obss_color_collision_event(ab, skb);
 		break;
+	case WMI_PDEV_UTF_EVENTID:
+		if (test_bit(ATH12K_FLAG_FTM_SEGMENTED, &ab->dev_flags))
+			ath12k_wmi_tm_event_segmented(ab, id, skb);
+		else
+			ath12k_tm_wmi_event_unsegmented(ab, id, skb);
+		break;
 	case WMI_STATS_CTRL_PATH_EVENTID:
 		ath12k_process_tpc_stats(ab, skb);
 		break;
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -3786,6 +3786,25 @@ struct wmi_get_pdev_temperature_cmd {
 	__le32 pdev_id;
 } __packed;
 
+#define MAX_WMI_UTF_LEN 252
+
+struct wmi_ftm_seg_hdr {
+	u32 len;
+	u32 msgref;
+	u32 segmentinfo;
+	u32 pdev_id;
+} __packed;
+
+struct wmi_ftm_cmd {
+	u32 tlv_header;
+	struct wmi_ftm_seg_hdr seg_hdr;
+	u8 data[];
+} __packed;
+
+struct wmi_ftm_event_msg {
+	struct wmi_ftm_seg_hdr seg_hdr;
+	u8 data[];
+} __packed;
 #define WMI_BEACON_TX_BUFFER_SIZE	512
 
 #define WMI_BEACON_EMA_PARAM_PERIODICITY_SHIFT         0
--- a/drivers/net/wireless/ath/ath12k/pci.c
+++ b/drivers/net/wireless/ath/ath12k/pci.c
@@ -1269,6 +1269,7 @@ static int ath12k_pci_probe(struct pci_d
 	ab_pci->ab = ab;
 	ab_pci->pdev = pdev;
 	ab->hif.ops = &ath12k_pci_hif_ops;
+	ab->fw_mode = ATH12K_FIRMWARE_MODE_NORMAL;
 	pci_set_drvdata(pdev, ab);
 	spin_lock_init(&ab_pci->window_lock);
 
