From 04b68c0c1720e22fd5daf25e500d9670699f991f Mon Sep 17 00:00:00 2001
From: Aishwarya R <quic_aisr@quicinc.com>
Date: Mon, 11 Apr 2022 12:54:38 +0530
Subject: [PATCH] ath12k: update all 6 GHZ reg rules in sband

Based on the power modes in 6 GHZ band, there can be total of 9
possible channel arrays in sband. This patch updates the 6G
sband with all possible 9 modes. The sband will be updated
with default values since we dont know the power mode during
sband setup (initial boot).

Once the FW sends the reg rules and regd is built, cfg80211
will update the sband as per the rules. To aid cfg80211 to
distinguish between the power mode, the ath11k updates the
power mode as well while building regulatory domain.

Signed-off-by: Aishwarya R <quic_aisr@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 24 ++++++++++++++-
 drivers/net/wireless/ath/ath12k/reg.c | 44 +++++++++++++++++++++------
 2 files changed, 58 insertions(+), 10 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 950f302..7282145 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -8911,11 +8911,24 @@ static void ath12k_mac_update_ch_list(struct ath12k *ar,
 				      struct ieee80211_supported_band *band,
 				      u32 freq_low, u32 freq_high)
 {
-	int i;
+	struct ieee80211_6ghz_channel *chan_6g;
+        int i, j;
 
 	if (!(freq_low && freq_high))
 		return;
 
+	if (band->band == NL80211_BAND_6GHZ) {
+                for (i = 0; i < NL80211_REG_NUM_POWER_MODES; i++) {
+                        chan_6g = band->chan_6g[i];
+                        for (j = 0; j < chan_6g->n_channels; j++) {
+                                if (chan_6g->channels[j].center_freq < freq_low ||
+                                    chan_6g->channels[j].center_freq > freq_high)
+                                        chan_6g->channels[j].flags |= IEEE80211_CHAN_DISABLED;
+                        }
+                }
+                return;
+        }
+
 	for (i = 0; i < band->n_channels; i++) {
 		if (band->channels[i].center_freq < freq_low ||
 		    band->channels[i].center_freq > freq_high)
@@ -9049,6 +9062,15 @@ static int ath12k_mac_setup_channels_rates(struct ath12k *ar,
 			ath12k_mac_update_ch_list(ar, band,
 						  reg_cap->low_5ghz_chan,
 						  reg_cap->high_5ghz_chan);
+
+			/* For 6G sband, the strcut channels and int numchannels will
+                        * have the default value. During ieee80211_hw_register(),
+                        * all sbands are parsed and at that time code can crash while
+                        * dereferencing the NULL pointer struct channel. Hence, we
+                        * assign the LPI AP channel to the default sband channel
+                        * to prevent APIs from breaking */
+                       band->n_channels = band->chan_6g[0]->n_channels;
+                       band->channels = band->chan_6g[0]->channels;
 		}
 	}
 
diff --git a/drivers/net/wireless/ath/ath12k/reg.c b/drivers/net/wireless/ath/ath12k/reg.c
index b75dd06..e135744 100644
--- a/drivers/net/wireless/ath/ath12k/reg.c
+++ b/drivers/net/wireless/ath/ath12k/reg.c
@@ -45,7 +45,8 @@ ath12k_ieee80211_ap_pwr_type_convert(enum ieee80211_ap_reg_power power_type)
 
 static struct cur_reg_rule
 *ath12k_get_active_6g_reg_rule(struct cur_regulatory_info *reg_info,
-                              u32 *max_bw_6g, int *max_elements)
+                              u32 *max_bw_6g, int *max_elements,
+			      enum nl80211_regulatory_power_modes *pwr_mode)
 {
        struct cur_reg_rule *reg_rule = NULL;
        u8 i = 0, j = 0;
@@ -56,6 +57,7 @@ static struct cur_reg_rule
                        reg_rule = reg_info->reg_rules_6g_ap_ptr[i];
                        *max_bw_6g = reg_info->max_bw_6g_ap[i];
                        reg_info->num_6g_reg_rules_ap[i] = 0;
+		       *pwr_mode = i;
                        return reg_rule;
                }
        }
@@ -69,6 +71,7 @@ static struct cur_reg_rule
                                                                      [j][i];
                                *max_bw_6g = reg_info->max_bw_6g_client[j][i];
                                reg_info->num_6g_reg_rules_cl[j][i] = 0;
+			       *pwr_mode = WMI_REG_CURRENT_MAX_AP_TYPE * (i + 1)  + j;
                                return reg_rule;
                        }
                }
@@ -372,6 +375,7 @@ ath12k_reg_can_intersect(struct ieee80211_reg_rule *rule1,
 {
 	u32 start_freq1, end_freq1;
 	u32 start_freq2, end_freq2;
+	u8 reg_6g_pwr_mode1, reg_6g_pwr_mode2;
 
 	start_freq1 = rule1->freq_range.start_freq_khz;
 	start_freq2 = rule2->freq_range.start_freq_khz;
@@ -379,6 +383,15 @@ ath12k_reg_can_intersect(struct ieee80211_reg_rule *rule1,
 	end_freq1 = rule1->freq_range.end_freq_khz;
 	end_freq2 = rule2->freq_range.end_freq_khz;
 
+        reg_6g_pwr_mode1 = rule1->mode;
+        reg_6g_pwr_mode2 = rule2->mode;
+
+        /* 6G reg rules can not intersect if power mode is not same.
+         * NOTE: For 2G/5G rules, it will be always 0.
+         */
+        if (reg_6g_pwr_mode1 != reg_6g_pwr_mode2)
+                return false;
+
 	if ((start_freq1 >= start_freq2 &&
 	     start_freq1 < end_freq2) ||
 	    (start_freq2 > start_freq1 &&
@@ -435,6 +448,11 @@ static void ath12k_reg_intersect_rules(struct ieee80211_reg_rule *rule1,
 	/* To be safe, lts use the max cac timeout of both rules */
 	new_rule->dfs_cac_ms = max_t(u32, rule1->dfs_cac_ms,
 				     rule2->dfs_cac_ms);
+	/* Intersection is only possible when both modes was same.
+         * Hence, we can use pwr mode from any rule
+         */
+        new_rule->mode = rule2->mode;
+
 }
 
 static struct ieee80211_regdomain *
@@ -529,13 +547,15 @@ ath12k_reg_adjust_bw(u16 start_freq, u16 end_freq, u16 max_bw)
 static void
 ath12k_reg_update_rule(struct ieee80211_reg_rule *reg_rule, u32 start_freq,
 		       u32 end_freq, u32 bw, u32 ant_gain, u32 reg_pwr,
-		       s8 psd, u32 reg_flags)
+		       s8 psd, u32 reg_flags,
+		       enum nl80211_regulatory_power_modes pwr_mode)
 {
 	reg_rule->freq_range.start_freq_khz = MHZ_TO_KHZ(start_freq);
 	reg_rule->freq_range.end_freq_khz = MHZ_TO_KHZ(end_freq);
 	reg_rule->freq_range.max_bandwidth_khz = MHZ_TO_KHZ(bw);
 	reg_rule->power_rule.max_antenna_gain = DBI_TO_MBI(ant_gain);
 	reg_rule->power_rule.max_eirp = DBM_TO_MBM(reg_pwr);
+	reg_rule->mode = pwr_mode;
 	reg_rule->psd = psd;
 	reg_rule->flags = reg_flags;
 }
@@ -558,7 +578,7 @@ ath12k_reg_update_weather_radar_band(struct ath12k_base *ab,
 	ath12k_reg_update_rule(regd->reg_rules + i, reg_rule->start_freq,
 			       ETSI_WEATHER_RADAR_BAND_LOW, bw,
 			       reg_rule->ant_gain, reg_rule->reg_power,
-			       reg_rule->psd_eirp, flags);
+			       reg_rule->psd_eirp, flags, 0);
 
 	ath12k_dbg(ab, ATH12K_DBG_REG,
 		   "\t%d. (%d - %d @ %d) (%d, %d) (%d ms) (FLAGS %d)\n",
@@ -580,7 +600,7 @@ ath12k_reg_update_weather_radar_band(struct ath12k_base *ab,
 	ath12k_reg_update_rule(regd->reg_rules + i,
 			       ETSI_WEATHER_RADAR_BAND_LOW, end_freq, bw,
 			       reg_rule->ant_gain, reg_rule->reg_power,
-			       flags);
+			       reg_rule->psd_eirp, flags, 0);
 
 	regd->reg_rules[i].dfs_cac_ms = ETSI_WEATHER_RADAR_BAND_CAC_TIMEOUT;
 
@@ -605,7 +625,7 @@ ath12k_reg_update_weather_radar_band(struct ath12k_base *ab,
 	ath12k_reg_update_rule(regd->reg_rules + i, ETSI_WEATHER_RADAR_BAND_HIGH,
 			       reg_rule->end_freq, bw,
 			       reg_rule->ant_gain, reg_rule->reg_power,
-			       flags);
+			       reg_rule->psd_eirp, flags, 0);
 
 	ath12k_dbg(ab, ATH12K_DBG_REG,
 		   "\t%d. (%d - %d @ %d) (%d, %d) (%d ms) (FLAGS %d)\n",
@@ -630,6 +650,7 @@ ath12k_reg_build_regd(struct ath12k_base *ab,
 	u32 flags, reg_6g_number = 0, max_bw_6g = 0;
 	char alpha2[3];
 	bool reg_6g_itr_set = false;
+	enum nl80211_regulatory_power_modes pwr_mode;
 
 	num_rules = reg_info->num_5g_reg_rules + reg_info->num_2g_reg_rules;
 
@@ -682,6 +703,7 @@ ath12k_reg_build_regd(struct ath12k_base *ab,
 			max_bw = min_t(u16, reg_rule->max_bw,
 				       reg_info->max_bw_2g);
 			flags = NL80211_RRF_NO_320MHZ;
+			pwr_mode = 0;
 		} else if (reg_info->num_5g_reg_rules &&
 			   (j < reg_info->num_5g_reg_rules)) {
 			reg_rule = reg_info->reg_rules_5g_ptr + j++;
@@ -705,10 +727,11 @@ ath12k_reg_build_regd(struct ath12k_base *ab,
 			 * per other BW rule flags we pass from here
 			 */
 			flags = NL80211_RRF_AUTO_BW | NL80211_RRF_NO_320MHZ;
+			pwr_mode = 0;
 		 } else if (reg_info->is_ext_reg_event && reg_6g_number) {
                          if (!reg_6g_itr_set) {
                                  reg_rule_6g = ath12k_get_active_6g_reg_rule(reg_info,
-                                                           &max_bw_6g, &max_elements);
+                                                           &max_bw_6g, &max_elements, &pwr_mode);
 
                                  if (!reg_rule_6g) {
                                          ath12k_warn(ab,
@@ -727,7 +750,10 @@ ath12k_reg_build_regd(struct ath12k_base *ab,
                                  if (reg_rule->psd_flag)
                                          flags |= NL80211_RRF_PSD;
 
-                                 ath12k_copy_reg_rule(&ab->reg_rule_6g, reg_rule);
+                                 if (reg_rule->end_freq <= ATH12K_MAX_6G_FREQ)
+                                         ath12k_copy_reg_rule(&ab->reg_rule_6g, reg_rule);
+                                 else if (reg_rule->start_freq >= ATH12K_MIN_6G_FREQ)
+                                         ath12k_copy_reg_rule(&ab->reg_rule_6g, reg_rule);
                          }
 
                          if (reg_6g_itr_set && k >= max_elements) {
@@ -773,11 +799,11 @@ ath12k_reg_build_regd(struct ath12k_base *ab,
 		}
 
 		if (reg_info->is_ext_reg_event) {
-			ath12k_dbg(ab, ATH12K_DBG_REG, "\t%d. (%d - %d @ %d) (%d, %d) (%d ms) (FLAGS %d) (%d, %d)\n",
+			ath12k_dbg(ab, ATH12K_DBG_REG, "\t%d. (%d - %d @ %d) (%d, %d) (%d ms) (FLAGS %d) (%d, %d) (6G_POWER_MODE: %d)\n",
 				   i + 1, reg_rule->start_freq, reg_rule->end_freq,
 				   max_bw, reg_rule->ant_gain, reg_rule->reg_power,
 				   tmp_regd->reg_rules[i].dfs_cac_ms,
-				   flags, reg_rule->psd_flag, reg_rule->psd_eirp);
+				   flags, reg_rule->psd_flag, reg_rule->psd_eirp, tmp_regd->reg_rules[i].mode);
 		} else {
 			ath12k_dbg(ab, ATH12K_DBG_REG,
 				   "\t%d. (%d - %d @ %d) (%d, %d) (%d ms) (FLAGS %d)\n",
-- 
2.17.1

