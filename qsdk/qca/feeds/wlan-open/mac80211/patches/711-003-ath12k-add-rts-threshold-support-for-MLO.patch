From 18604840b78e5557d4104a023f6e4ad6279cb867 Mon Sep 17 00:00:00 2001
From: Aaradhana Sahu <quic_aarasahu@quicinc.com>
Date: Fri, 10 Feb 2023 15:43:25 +0530
Subject: [PATCH] ath12k: add rts threshold support for MLO

Currently, all vaps rts threshold update when we run
"iw phy<x> set rts <rts threshold value|off>" for MLO.
But, should be update only for one vap not for all vaps,
this is happen because in MLO case we have only one phy.

So, add changes to support rts threshold by parsing link id
and moving iw phy command to iw dev command for MLO.

command:
iw dev wlan# set rts -l <link_id> <rts threshold|off>

Signed-off-by: Aaradhana Sahu <quic_aarasahu@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 34 +++++++++++++++++++++------
 1 file changed, 27 insertions(+), 7 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index f30403e..8755ee5 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -11672,25 +11672,45 @@ ath12k_set_vdev_param_to_all_vifs(struct ath12k *ar, int param, u32 value)
  * this is set interface specific to firmware from ath12k driver
  * TODO Move to link specific config
  */
-static int ath12k_mac_op_set_rts_threshold(struct ieee80211_hw *hw, u32 value)
+static int ath12k_mac_op_set_rts_threshold(struct ieee80211_hw *hw, u32 value,
+					    struct ieee80211_vif *vif, int link_id)
 {
 	struct ath12k_hw *ah = hw->priv;
+	struct ath12k_vif *ahvif;
 	struct ath12k *ar;
-	int i, ret;
+	struct ath12k_link_vif *arvif;
+	int ret = -1;
 	int param_id = WMI_VDEV_PARAM_RTS_THRESHOLD;
 
-	ar = ah->radio;
+	if (vif) {
+		mutex_lock(&ah->conf_mutex);
+		ahvif = ath12k_vif_to_ahvif(vif);
+		arvif = ahvif->link[link_id];
 
-	for (i = 0; i < ah->num_radio; i++) {
+		if (arvif == NULL || !arvif->is_created) {
+			ath12k_info(NULL,
+				    "bss info parameter changes %d cached to apply after vdev create on channel assign\n",
+				    param_id);
+			mutex_unlock(&ah->conf_mutex);
+			return ret;
+		}
+
+		ar = arvif->ar;
 		ret = ath12k_set_vdev_param_to_all_vifs(ar, param_id, value);
 		if (ret) {
 			ath12k_warn(ar->ab, "failed to set RTS config for all vdevs of pdev %d",
 				    ar->pdev->pdev_id);
-			break;
 		}
-		ar++;
-	}
 
+		mutex_unlock(&ah->conf_mutex);
+	} else {
+		ar = ah->radio;
+		ret = ath12k_set_vdev_param_to_all_vifs(ar, param_id, value);
+		if (ret) {
+			ath12k_warn(ar->ab, "failed to set RTS config for all vdevs of pdev %d",
+				    ar->pdev->pdev_id);
+		}
+	}
 	return ret;
 }
 
-- 
2.17.1

