From 0994588eeb523f375745c2b5189ea82f1e6df6e3 Mon Sep 17 00:00:00 2001
From: Rameshkumar Sundaram <quic_ramess@quicinc.com>
Date: Sat, 4 Mar 2023 11:44:34 +0530
Subject: [PATCH 1/4] wifi : cfg80211 : Add new attribute to pass TX link id of
 MLO MBSSID

For MLD if transmitting link of an MBSSID group is part of MLD then
link id of TX link BSS along with TX interface index has
to be specified to map non-tx link with right tx link of tx MLD.
Add new MBSSID NL attribute to get link id of transmitting vap link in case
TX vap is and MLD.

Signed-off-by: Rameshkumar Sundaram <quic_ramess@quicinc.com>
---
 include/net/cfg80211.h       |  2 ++
 include/uapi/linux/nl80211.h |  6 ++++++
 net/wireless/nl80211.c       | 13 +++++++++++++
 3 files changed, 21 insertions(+)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index 0c62d08..25367da 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -1209,11 +1209,13 @@ struct cfg80211_crypto_settings {
  * struct cfg80211_mbssid_config - AP settings for multi bssid
  *
  * @tx_wdev: pointer to the transmitted interface in the MBSSID set
+ * @tx_link_id: linkid of transmitting link if @tx_wdev is an MLD.
  * @index: index of this AP in the multi bssid group.
  * @ema: set to true if the beacons should be sent out in EMA mode.
  */
 struct cfg80211_mbssid_config {
 	struct wireless_dev *tx_wdev;
+	int tx_link_id;
 	u8 index;
 	bool ema;
 };
diff --git a/include/uapi/linux/nl80211.h b/include/uapi/linux/nl80211.h
index 40917db..cb637e3 100644
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@ -7919,6 +7919,11 @@ enum nl80211_sar_specs_attrs {
  *	Setting this flag is permitted only if the driver advertises EMA support
  *	by setting wiphy->ema_max_profile_periodicity to non-zero.
  *
+ * @NL80211_MBSSID_CONFIG_ATTR_TX_LINK_ID: Mandatory parameter for a non-transmitted profile
+ *	which provides the interface index (u32) of the transmitted profile which
+ * 	is an MLD. The link id must be valid in the wdev of given Transmitting interface
+ * 	index.
+ *
  * @__NL80211_MBSSID_CONFIG_ATTR_LAST: Internal
  * @NL80211_MBSSID_CONFIG_ATTR_MAX: highest attribute
  */
@@ -7930,6 +7935,7 @@ enum nl80211_mbssid_config_attributes {
 	NL80211_MBSSID_CONFIG_ATTR_INDEX,
 	NL80211_MBSSID_CONFIG_ATTR_TX_IFINDEX,
 	NL80211_MBSSID_CONFIG_ATTR_EMA,
+	NL80211_MBSSID_CONFIG_ATTR_TX_LINK_ID,
 
 	/* keep last */
 	__NL80211_MBSSID_CONFIG_ATTR_LAST,
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 06cbfba..2fac612 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -476,6 +476,8 @@ nl80211_mbssid_config_policy[NL80211_MBSSID_CONFIG_ATTR_MAX + 1] = {
 	[NL80211_MBSSID_CONFIG_ATTR_INDEX] = { .type = NLA_U8 },
 	[NL80211_MBSSID_CONFIG_ATTR_TX_IFINDEX] = { .type = NLA_U32 },
 	[NL80211_MBSSID_CONFIG_ATTR_EMA] = { .type = NLA_FLAG },
+	[NL80211_MBSSID_CONFIG_ATTR_TX_LINK_ID] = NLA_POLICY_RANGE(NLA_U8, 0,
+							IEEE80211_MLD_MAX_NUM_LINKS),
 };
 
 static const struct nla_policy
@@ -5855,6 +5857,7 @@ static int nl80211_parse_mbssid_config(struct wiphy *wiphy,
 				       u8 num_elems)
 {
 	struct nlattr *tb[NL80211_MBSSID_CONFIG_ATTR_MAX + 1];
+	struct nlattr *tx_link_id;
 
 	if (!wiphy->mbssid_max_interfaces)
 		return -EOPNOTSUPP;
@@ -5864,6 +5867,7 @@ static int nl80211_parse_mbssid_config(struct wiphy *wiphy,
 	    !tb[NL80211_MBSSID_CONFIG_ATTR_INDEX])
 		return -EINVAL;
 
+	tx_link_id = tb[NL80211_MBSSID_CONFIG_ATTR_TX_LINK_ID];
 	config->ema = nla_get_flag(tb[NL80211_MBSSID_CONFIG_ATTR_EMA]);
 	if (config->ema) {
 		if (!wiphy->ema_max_profile_periodicity)
@@ -5908,6 +5912,15 @@ static int nl80211_parse_mbssid_config(struct wiphy *wiphy,
 		return -EINVAL;
 	}
 
+	if (!config->tx_wdev->valid_links && tx_link_id)
+		return -EINVAL;
+
+	if (config->tx_wdev->valid_links &&
+	    (!tx_link_id ||
+	     !(config->tx_wdev->valid_links & BIT(nla_get_u8(tx_link_id)))))
+		return -ENOLINK;
+
+	config->tx_link_id = tx_link_id ? nla_get_u8(tx_link_id) : 0;
 	return 0;
 }
 
-- 
2.17.1

