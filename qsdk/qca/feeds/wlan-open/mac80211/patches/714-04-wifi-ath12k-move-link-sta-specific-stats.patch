From 8ea9a8f675d297d678b867eaa0f60bc447702a06 Mon Sep 17 00:00:00 2001
From: Sriram R <quic_srirrama@quicinc.com>
Date: Thu, 9 Feb 2023 14:34:20 +0530
Subject: [PATCH] ath12k: move link specific dp stats to link sta directory

Move the following stats to link sta specific under ieee80211_link_sta
directory.
	- ext_tx_stats
	- ext_rx_stats
	- driver rx packets flow
	- htt peer stats
	- peer pktlog

Note: remaining stats such as addba, delba, aggr_mode are common but
needs to be applied to all link stations on a common command in the
ieee80211_sta directory.

Signed-off-by: Sriram R <quic_srirrama@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/debugfs_sta.c | 387 +++++++++++++++---
 drivers/net/wireless/ath/ath12k/debugfs_sta.h |   3 +
 drivers/net/wireless/ath/ath12k/mac.c         |   1 +
 3 files changed, 323 insertions(+), 68 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/debugfs_sta.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs_sta.c
@@ -199,10 +199,13 @@ static ssize_t ath12k_dbg_sta_dump_tx_st
 					    char __user *user_buf,
 					    size_t count, loff_t *ppos)
 {
-	struct ieee80211_sta *sta = file->private_data;
+	struct ieee80211_link_sta *link_sta = file->private_data;
+	struct ieee80211_sta *sta = link_sta->sta;
+	u8 link_id = link_sta->link_id;
 	struct ath12k_sta *ahsta = (struct ath12k_sta *)sta->drv_priv;
-	struct ath12k_link_sta *arsta = &ahsta->deflink;
-	struct ath12k *ar = arsta->arvif->ar;
+	struct ath12k_hw *ah = ahsta->ahvif->ah;
+	struct ath12k_link_sta *arsta;
+	struct ath12k *ar;
 	struct ath12k_htt_data_stats *stats;
 	static const char *str_name[ATH12K_STATS_TYPE_MAX] = {"success", "fail",
 							      "retry", "ampdu"};
@@ -219,12 +222,32 @@ static ssize_t ath12k_dbg_sta_dump_tx_st
 			  [HAL_WBM_REL_HTT_TX_COMP_STATUS_MEC_NOTIFY] = "MEC notify pkt count"};
 	int idx;
 
-	if (!arsta->tx_stats || !arsta->wbm_tx_stats)
+	mutex_lock(&ah->conf_mutex);
+
+	if (!(BIT(link_id) & ahsta->links_map)) {
+		mutex_unlock(&ah->conf_mutex);
 		return -ENOENT;
+	}
+
+	arsta = ahsta->link[link_id];
+
+	if (!arsta || !arsta->arvif->ar) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
+
+	ar = arsta->arvif->ar;
+
+	if (!arsta->tx_stats || !arsta->wbm_tx_stats) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
 
 	buf = kzalloc(size, GFP_KERNEL);
-	if (!buf)
+	if (!buf) {
+		mutex_unlock(&ah->conf_mutex);
 		return -ENOMEM;
+	}
 
 	mutex_lock(&ar->conf_mutex);
 
@@ -377,6 +400,7 @@ static ssize_t ath12k_dbg_sta_dump_tx_st
 	kfree(buf);
 
 	mutex_unlock(&ar->conf_mutex);
+	mutex_unlock(&ah->conf_mutex);
 	return retval;
 }
 
@@ -391,11 +415,14 @@ static ssize_t ath12k_dbg_sta_dump_rx_st
 					    char __user *user_buf,
 					    size_t count, loff_t *ppos)
 {
-	struct ieee80211_sta *sta = file->private_data;
+	struct ieee80211_link_sta *link_sta = file->private_data;
+	struct ieee80211_sta *sta = link_sta->sta;
+	u8 link_id = link_sta->link_id;
 	struct ath12k_sta *ahsta = (struct ath12k_sta *)sta->drv_priv;
-	struct ath12k_link_sta *arsta = &ahsta->deflink;
-	struct ath12k *ar = arsta->arvif->ar;
-	struct ath12k_rx_peer_stats *rx_stats = arsta->rx_stats;
+	struct ath12k_hw *ah = ahsta->ahvif->ah;
+	struct ath12k_link_sta *arsta;
+	struct ath12k *ar;
+	struct ath12k_rx_peer_stats *rx_stats;
 	int len = 0, i, retval = 0;
 	const int size = 4 * 4096;
 	char *buf;
@@ -404,12 +431,34 @@ static ssize_t ath12k_dbg_sta_dump_rx_st
 					"1Mbps", "2Mbps", "5.5Mbps", "6Mbps",
 					"9Mbps", "11Mbps", "12Mbps", "18Mbps",
 					"24Mbps", "36 Mbps", "48Mbps", "54Mbps"};
-	if (!rx_stats)
+	mutex_lock(&ah->conf_mutex);
+
+	if (!(BIT(link_id) & ahsta->links_map)) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
+
+	arsta = ahsta->link[link_id];
+
+	if (!arsta || !arsta->arvif->ar) {
+		mutex_unlock(&ah->conf_mutex);
 		return -ENOENT;
+	}
+
+	ar = arsta->arvif->ar;
+
+	rx_stats = arsta->rx_stats;
+
+	if (!rx_stats) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
 
 	buf = kzalloc(size, GFP_KERNEL);
-	if (!buf)
+	if (!buf) {
+		mutex_unlock(&ah->conf_mutex);
 		return -ENOMEM;
+	}
 
 	mutex_lock(&ar->conf_mutex);
 	spin_lock_bh(&ar->ab->base_lock);
@@ -649,6 +698,7 @@ static ssize_t ath12k_dbg_sta_dump_rx_st
 	kfree(buf);
 
 	mutex_unlock(&ar->conf_mutex);
+	mutex_unlock(&ah->conf_mutex);
 	return retval;
 }
 
@@ -662,52 +712,97 @@ static const struct file_operations fops
 static int
 ath12k_dbg_sta_open_htt_peer_stats(struct inode *inode, struct file *file)
 {
-	struct ieee80211_sta *sta = inode->i_private;
+	struct ieee80211_link_sta *link_sta = inode->i_private;
+	struct ieee80211_sta *sta = link_sta->sta;
+	u8 link_id = link_sta->link_id;
 	struct ath12k_sta *ahsta = (struct ath12k_sta *)sta->drv_priv;
-	struct ath12k_link_sta *arsta = &ahsta->deflink;
-	struct ath12k *ar = arsta->arvif->ar;
+	struct ath12k_hw *ah = ahsta->ahvif->ah;
+	struct ath12k_link_sta *arsta;
+	struct ath12k *ar;
 	struct debug_htt_stats_req *stats_req;
-	int type = ar->debug.htt_stats.type;
+	int type;
 	int ret;
 
+	mutex_lock(&ah->conf_mutex);
+
+	if (!(BIT(link_id) & ahsta->links_map)) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
+
+	arsta = ahsta->link[link_id];
+
+	if (!arsta || !arsta->arvif->ar) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
+
+	ar = arsta->arvif->ar;
+
+	type = ar->debug.htt_stats.type;
 	if ((type != ATH12K_DBG_HTT_EXT_STATS_PEER_INFO &&
 	     type != ATH12K_DBG_HTT_EXT_PEER_CTRL_PATH_TXRX_STATS) ||
-	    type == ATH12K_DBG_HTT_EXT_STATS_RESET)
+	    type == ATH12K_DBG_HTT_EXT_STATS_RESET) {
+		mutex_unlock(&ah->conf_mutex);
 		return -EPERM;
+	}
 
 	stats_req = vzalloc(sizeof(*stats_req) + ATH12K_HTT_STATS_BUF_SIZE);
-	if (!stats_req)
+	if (!stats_req) {
+		mutex_unlock(&ah->conf_mutex);
 		return -ENOMEM;
+	}
 
 	mutex_lock(&ar->conf_mutex);
 	ar->debug.htt_stats.stats_req = stats_req;
 	stats_req->type = ATH12K_DBG_HTT_EXT_STATS_PEER_INFO;
-	memcpy(stats_req->peer_addr, sta->addr, ETH_ALEN);
+	memcpy(stats_req->peer_addr, link_sta->addr, ETH_ALEN);
 	ret = ath12k_debugfs_htt_stats_req(ar);
 	mutex_unlock(&ar->conf_mutex);
 	if (ret < 0)
 		goto out;
 
 	file->private_data = stats_req;
+	mutex_unlock(&ah->conf_mutex);
 	return 0;
 out:
 	vfree(stats_req);
 	ar->debug.htt_stats.stats_req = NULL;
+	mutex_unlock(&ah->conf_mutex);
 	return ret;
 }
 
 static int
 ath12k_dbg_sta_release_htt_peer_stats(struct inode *inode, struct file *file)
 {
-	struct ieee80211_sta *sta = inode->i_private;
+	struct ieee80211_link_sta *link_sta = inode->i_private;
+	struct ieee80211_sta *sta = link_sta->sta;
+	u8 link_id = link_sta->link_id;
 	struct ath12k_sta *ahsta = (struct ath12k_sta *)sta->drv_priv;
-	struct ath12k_link_sta *arsta = &ahsta->deflink;
-	struct ath12k *ar = arsta->arvif->ar;
+	struct ath12k_hw *ah = ahsta->ahvif->ah;
+	struct ath12k_link_sta *arsta;
+	struct ath12k *ar;
+
+	mutex_lock(&ah->conf_mutex);
+
+	if (!(BIT(link_id) & ahsta->links_map)) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
 
+	arsta = ahsta->link[link_id];
+
+	if (!arsta || !arsta->arvif->ar) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
+
+	ar = arsta->arvif->ar;
 	mutex_lock(&ar->conf_mutex);
 	vfree(file->private_data);
 	ar->debug.htt_stats.stats_req = NULL;
 	mutex_unlock(&ar->conf_mutex);
+	mutex_unlock(&ah->conf_mutex);
 
 	return 0;
 }
@@ -737,12 +832,31 @@ static ssize_t ath12k_dbg_sta_write_peer
 						const char __user *buf,
 						size_t count, loff_t *ppos)
 {
-	struct ieee80211_sta *sta = file->private_data;
+	struct ieee80211_link_sta *link_sta = file->private_data;
+	struct ieee80211_sta *sta = link_sta->sta;
+	u8 link_id = link_sta->link_id;
 	struct ath12k_sta *ahsta = (struct ath12k_sta *)sta->drv_priv;
-	struct ath12k_link_sta *arsta = &ahsta->deflink;
-	struct ath12k *ar = arsta->arvif->ar;
+	struct ath12k_hw *ah = ahsta->ahvif->ah;
+	struct ath12k_link_sta *arsta;
+	struct ath12k *ar;
 	int ret, enable;
 
+	mutex_lock(&ah->conf_mutex);
+
+	if (!(BIT(link_id) & ahsta->links_map)) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
+
+	arsta = ahsta->link[link_id];
+
+	if (!arsta || !arsta->arvif->ar) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
+
+	ar = arsta->arvif->ar;
+
 	mutex_lock(&ar->conf_mutex);
 
 	if (ar->state != ATH12K_STATE_ON) {
@@ -755,10 +869,10 @@ static ssize_t ath12k_dbg_sta_write_peer
 		goto out;
 
 	ar->debug.pktlog_peer_valid = enable;
-	memcpy(ar->debug.pktlog_peer_addr, sta->addr, ETH_ALEN);
+	memcpy(ar->debug.pktlog_peer_addr, link_sta->addr, ETH_ALEN);
 
 	/* Send peer based pktlog enable/disable */
-	ret = ath12k_wmi_pdev_peer_pktlog_filter(ar, sta->addr, enable);
+	ret = ath12k_wmi_pdev_peer_pktlog_filter(ar, link_sta->addr, enable);
 	if (ret) {
 		ath12k_warn(ar->ab, "failed to set peer pktlog filter %pM: %d\n",
 			    sta->addr, ret);
@@ -771,6 +885,7 @@ static ssize_t ath12k_dbg_sta_write_peer
 
 out:
 	mutex_unlock(&ar->conf_mutex);
+	mutex_unlock(&ah->conf_mutex);
 	return ret;
 }
 
@@ -778,18 +893,38 @@ static ssize_t ath12k_dbg_sta_read_peer_
 					       char __user *ubuf,
 					       size_t count, loff_t *ppos)
 {
-	struct ieee80211_sta *sta = file->private_data;
+	struct ieee80211_link_sta *link_sta = file->private_data;
+	struct ieee80211_sta *sta = link_sta->sta;
+	u8 link_id = link_sta->link_id;
 	struct ath12k_sta *ahsta = (struct ath12k_sta *)sta->drv_priv;
-	struct ath12k_link_sta *arsta = &ahsta->deflink;
-	struct ath12k *ar = arsta->arvif->ar;
+	struct ath12k_hw *ah = ahsta->ahvif->ah;
+	struct ath12k_link_sta *arsta;
+	struct ath12k *ar;
 	char buf[32] = {0};
 	int len;
 
+	mutex_lock(&ah->conf_mutex);
+
+	if (!(BIT(link_id) & ahsta->links_map)) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
+
+	arsta = ahsta->link[link_id];
+
+	if (!arsta || !arsta->arvif->ar) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
+
+	ar = arsta->arvif->ar;
+
 	mutex_lock(&ar->conf_mutex);
 	len = scnprintf(buf, sizeof(buf), "%08x %pM\n",
 			ar->debug.pktlog_peer_valid,
 			ar->debug.pktlog_peer_addr);
 	mutex_unlock(&ar->conf_mutex);
+	mutex_unlock(&ah->conf_mutex);
 
 	return simple_read_from_buffer(ubuf, count, ppos, buf, len);
 }
@@ -1028,10 +1163,13 @@ ath12k_write_htt_peer_stats_reset(struct
 				  const char __user *user_buf,
 				  size_t count, loff_t *ppos)
 {
-	struct ieee80211_sta *sta = file->private_data;
+	struct ieee80211_link_sta *link_sta = file->private_data;
+	struct ieee80211_sta *sta = link_sta->sta;
+	u8 link_id = link_sta->link_id;
 	struct ath12k_sta *ahsta = (struct ath12k_sta *)sta->drv_priv;
-	struct ath12k_link_sta *arsta = &ahsta->deflink;
-	struct ath12k *ar = arsta->arvif->ar;
+	struct ath12k_hw *ah = ahsta->ahvif->ah;
+	struct ath12k_link_sta *arsta;
+	struct ath12k *ar;
 	struct htt_ext_stats_cfg_params cfg_params = { 0 };
 	int ret;
 	u8 type;
@@ -1043,6 +1181,22 @@ ath12k_write_htt_peer_stats_reset(struct
 	if (!type)
 		return ret;
 
+	mutex_lock(&ah->conf_mutex);
+
+	if (!(BIT(link_id) & ahsta->links_map)) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
+
+	arsta = ahsta->link[link_id];
+
+	if (!arsta || !arsta->arvif->ar) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
+
+	ar = arsta->arvif->ar;
+
 	mutex_lock(&ar->conf_mutex);
 	cfg_params.cfg0 = HTT_STAT_PEER_INFO_MAC_ADDR;
 	cfg_params.cfg0 |= FIELD_PREP(GENMASK(15, 1),
@@ -1050,13 +1204,13 @@ ath12k_write_htt_peer_stats_reset(struct
 
 	cfg_params.cfg1 = HTT_STAT_DEFAULT_PEER_REQ_TYPE;
 
-	cfg_params.cfg2 |= FIELD_PREP(GENMASK(7, 0), sta->addr[0]);
-	cfg_params.cfg2 |= FIELD_PREP(GENMASK(15, 8), sta->addr[1]);
-	cfg_params.cfg2 |= FIELD_PREP(GENMASK(23, 16), sta->addr[2]);
-	cfg_params.cfg2 |= FIELD_PREP(GENMASK(31, 24), sta->addr[3]);
+	cfg_params.cfg2 |= FIELD_PREP(GENMASK(7, 0), link_sta->addr[0]);
+	cfg_params.cfg2 |= FIELD_PREP(GENMASK(15, 8), link_sta->addr[1]);
+	cfg_params.cfg2 |= FIELD_PREP(GENMASK(23, 16), link_sta->addr[2]);
+	cfg_params.cfg2 |= FIELD_PREP(GENMASK(31, 24), link_sta->addr[3]);
 
-	cfg_params.cfg3 |= FIELD_PREP(GENMASK(7, 0), sta->addr[4]);
-	cfg_params.cfg3 |= FIELD_PREP(GENMASK(15, 8), sta->addr[5]);
+	cfg_params.cfg3 |= FIELD_PREP(GENMASK(7, 0), link_sta->addr[4]);
+	cfg_params.cfg3 |= FIELD_PREP(GENMASK(15, 8), link_sta->addr[5]);
 
 	cfg_params.cfg3 |= ATH12K_HTT_PEER_STATS_RESET;
 
@@ -1067,10 +1221,12 @@ ath12k_write_htt_peer_stats_reset(struct
 	if (ret) {
 		ath12k_warn(ar->ab, "failed to send htt peer stats request: %d\n", ret);
 		mutex_unlock(&ar->conf_mutex);
+		mutex_unlock(&ah->conf_mutex);
 		return ret;
 	}
 
 	mutex_unlock(&ar->conf_mutex);
+	mutex_unlock(&ah->conf_mutex);
 
 	ret = count;
 
@@ -1089,20 +1245,43 @@ ath12k_dbg_sta_dump_driver_tx_pkts_flow(
 					const char __user *user_buf,
 					size_t count, loff_t *ppos)
 {
-	struct ieee80211_sta *sta = file->private_data;
+	struct ieee80211_link_sta *link_sta = file->private_data;
+	struct ieee80211_sta *sta = link_sta->sta;
+	u8 link_id = link_sta->link_id;
 	struct ath12k_sta *ahsta = (struct ath12k_sta *)sta->drv_priv;
-	struct ath12k_link_sta *arsta = &ahsta->deflink;
-	struct ath12k *ar = arsta->arvif->ar;
+	struct ath12k_hw *ah = ahsta->ahvif->ah;
+	struct ath12k_link_sta *arsta;
+	struct ath12k *ar;
 	int len = 0, ret_val;
 	const int size = ATH12K_DRV_TX_STATS_SIZE;
 	char *buf;
 
-	if (!arsta->tx_stats)
+	mutex_lock(&ah->conf_mutex);
+
+	if (!(BIT(link_id) & ahsta->links_map)) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
+
+	arsta = ahsta->link[link_id];
+
+	if (!arsta || !arsta->arvif->ar) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
+
+	ar = arsta->arvif->ar;
+
+	if (!arsta->tx_stats) {
+		mutex_unlock(&ah->conf_mutex);
 		return -ENOENT;
+	}
 
 	buf = kzalloc(ATH12K_DRV_TX_STATS_SIZE, GFP_KERNEL);
-	if (!buf)
+	if (!buf) {
+		mutex_unlock(&ah->conf_mutex);
 		return -ENOMEM;
+	}
 
 	mutex_lock(&ar->conf_mutex);
 	spin_lock_bh(&ar->ab->base_lock);
@@ -1121,6 +1300,7 @@ ath12k_dbg_sta_dump_driver_tx_pkts_flow(
 	kfree(buf);
 
 	mutex_unlock(&ar->conf_mutex);
+	mutex_unlock(&ah->conf_mutex);
 	return ret_val;
 }
 
@@ -1135,15 +1315,15 @@ static ssize_t ath12k_dbg_sta_reset_tx_s
 					     const char __user *buf,
 					     size_t count, loff_t *ppos)
 {
-	struct ieee80211_sta *sta = file->private_data;
+	struct ieee80211_link_sta *link_sta = file->private_data;
+	struct ieee80211_sta *sta = link_sta->sta;
+	u8 link_id = link_sta->link_id;
 	struct ath12k_sta *ahsta = (struct ath12k_sta *)sta->drv_priv;
-	struct ath12k_link_sta *arsta = &ahsta->deflink;
-	struct ath12k *ar = arsta->arvif->ar;
+	struct ath12k_hw *ah = ahsta->ahvif->ah;
+	struct ath12k_link_sta *arsta;
+	struct ath12k *ar;
 	int ret, reset;
 
-	if (!arsta->tx_stats || !arsta->wbm_tx_stats)
-		return -ENOENT;
-
 	ret = kstrtoint_from_user(buf, count, 0, &reset);
 	if (ret)
 		return ret;
@@ -1151,6 +1331,26 @@ static ssize_t ath12k_dbg_sta_reset_tx_s
 	if (!reset || reset > 1)
 		return -EINVAL;
 
+	mutex_lock(&ah->conf_mutex);
+
+	if (!(BIT(link_id) & ahsta->links_map)) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
+
+	arsta = ahsta->link[link_id];
+
+	if (!arsta || !arsta->arvif->ar) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
+
+	ar = arsta->arvif->ar;
+
+	if (!arsta->tx_stats || !arsta->wbm_tx_stats) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
 	spin_lock_bh(&ar->ab->base_lock);
 	memset(arsta->tx_stats, 0, sizeof(*arsta->tx_stats));
 	atomic_set(&arsta->drv_tx_pkts.pkts_in, 0);
@@ -1158,6 +1358,8 @@ static ssize_t ath12k_dbg_sta_reset_tx_s
 	memset(arsta->wbm_tx_stats->wbm_tx_comp_stats, 0, sizeof(*arsta->wbm_tx_stats));
 	spin_unlock_bh(&ar->ab->base_lock);
 
+	mutex_unlock(&ah->conf_mutex);
+
 	ret = count;
 	return ret;
 }
@@ -1174,21 +1376,45 @@ ath12k_dbg_sta_dump_driver_rx_pkts_flow(
 					char __user *user_buf,
 					size_t count, loff_t *ppos)
 {
-	struct ieee80211_sta *sta = file->private_data;
+	struct ieee80211_link_sta *link_sta = file->private_data;
+	struct ieee80211_sta *sta = link_sta->sta;
+	u8 link_id = link_sta->link_id;
 	struct ath12k_sta *ahsta = (struct ath12k_sta *)sta->drv_priv;
-	struct ath12k_link_sta *arsta = &ahsta->deflink;
-	struct ath12k *ar = arsta->arvif->ar;
-	struct ath12k_rx_peer_stats *rx_stats = arsta->rx_stats;
+	struct ath12k_hw *ah = ahsta->ahvif->ah;
+	struct ath12k_link_sta *arsta;
+	struct ath12k *ar;
+	struct ath12k_rx_peer_stats *rx_stats;
 	int len = 0, ret_val = 0;
 	const int size = 1024;
 	char *buf;
 
-	if (!rx_stats)
+	mutex_lock(&ah->conf_mutex);
+
+	if (!(BIT(link_id) & ahsta->links_map)) {
+		mutex_unlock(&ah->conf_mutex);
 		return -ENOENT;
+	}
+
+	arsta = ahsta->link[link_id];
+
+	if (!arsta || !arsta->arvif->ar) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
+
+	ar = arsta->arvif->ar;
+
+	rx_stats = arsta->rx_stats;
+	if (!rx_stats) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
 
 	buf = kzalloc(size, GFP_KERNEL);
-	if (!buf)
+	if (!buf) {
+		mutex_unlock(&ah->conf_mutex);
 		return -ENOMEM;
+	}
 
 	mutex_lock(&ar->conf_mutex);
 	spin_lock_bh(&ar->ab->base_lock);
@@ -1211,6 +1437,7 @@ ath12k_dbg_sta_dump_driver_rx_pkts_flow(
 	kfree(buf);
 
 	mutex_unlock(&ar->conf_mutex);
+	mutex_unlock(&ah->conf_mutex);
 	return ret_val;
 }
 
@@ -1225,15 +1452,15 @@ static ssize_t ath12k_dbg_sta_reset_rx_s
 					     const char __user *buf,
 					     size_t count, loff_t *ppos)
 {
-	struct ieee80211_sta *sta = file->private_data;
+	struct ieee80211_link_sta *link_sta = file->private_data;
+	struct ieee80211_sta *sta = link_sta->sta;
+	u8 link_id = link_sta->link_id;
 	struct ath12k_sta *ahsta = (struct ath12k_sta *)sta->drv_priv;
-	struct ath12k_link_sta *arsta = &ahsta->deflink;
-	struct ath12k *ar = arsta->arvif->ar;
+	struct ath12k_hw *ah = ahsta->ahvif->ah;
+	struct ath12k_link_sta *arsta;
+	struct ath12k *ar;
 	int ret, reset;
 
-	if (!arsta->rx_stats)
-		return -ENOENT;
-
 	ret = kstrtoint_from_user(buf, count, 0, &reset);
 	if (ret)
 		return ret;
@@ -1241,11 +1468,32 @@ static ssize_t ath12k_dbg_sta_reset_rx_s
 	if (!reset || reset > 1)
 		return -EINVAL;
 
+	mutex_lock(&ah->conf_mutex);
+
+	if (!(BIT(link_id) & ahsta->links_map)) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
+
+	arsta = ahsta->link[link_id];
+
+	if (!arsta || !arsta->arvif->ar) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
+
+	ar = arsta->arvif->ar;
+	if (!arsta->rx_stats) {
+		mutex_unlock(&ah->conf_mutex);
+		return -ENOENT;
+	}
+
 	spin_lock_bh(&ar->ab->base_lock);
 	memset(arsta->rx_stats, 0, sizeof(*arsta->rx_stats));
 	atomic_set(&arsta->drv_rx_pkts.pkts_frm_hw, 0);
 	atomic_set(&arsta->drv_rx_pkts.pkts_out, 0);
 	spin_unlock_bh(&ar->ab->base_lock);
+	mutex_unlock(&ah->conf_mutex);
 
 	ret = count;
 	return ret;
@@ -1261,49 +1509,53 @@ static const struct file_operations fops
 void ath12k_debugfs_sta_op_add(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			       struct ieee80211_sta *sta, struct dentry *dir)
 {
+	debugfs_create_file("aggr_mode", 0644, dir, sta, &fops_aggr_mode);
+	debugfs_create_file("addba", 0200, dir, sta, &fops_addba);
+	debugfs_create_file("addba_resp", 0200, dir, sta, &fops_addba_resp);
+	debugfs_create_file("delba", 0200, dir, sta, &fops_delba);
+}
+
+void ath12k_debugfs_link_sta_op_add(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+				    struct ieee80211_link_sta *link_sta, struct dentry *dir)
+{
+	u8 link_id = link_sta->link_id;
 	struct ath12k *ar;
 	struct ath12k_hw *ah = hw->priv;
 
 	mutex_lock(&ah->conf_mutex);
 
-	/* TODO for ML vifs */
-	ar = ath12k_get_ar_by_vif(hw, vif, 0);
+	ar = ath12k_get_ar_by_vif(hw, vif, link_id);
 	if (!ar) {
 		mutex_unlock(&ah->conf_mutex);
 		return;
 	}
 
 	if (ath12k_debugfs_is_extd_tx_stats_enabled(ar)) {
-		debugfs_create_file("tx_stats", 0400, dir, sta,
+		debugfs_create_file("tx_stats", 0400, dir, link_sta,
 				    &fops_tx_stats);
-		debugfs_create_file("reset_tx_stats", 0600, dir, sta,
+		debugfs_create_file("reset_tx_stats", 0600, dir, link_sta,
 				    &fops_reset_tx_stats);
-		debugfs_create_file("driver_tx_pkts_flow", 0400, dir, sta,
+		debugfs_create_file("driver_tx_pkts_flow", 0400, dir, link_sta,
 				    &fops_driver_tx_pkts_flow);
 	}
 	if (ath12k_debugfs_is_extd_rx_stats_enabled(ar)) {
-		debugfs_create_file("rx_stats", 0400, dir, sta,
+		debugfs_create_file("rx_stats", 0400, dir, link_sta,
 				    &fops_rx_stats);
-		debugfs_create_file("reset_rx_stats", 0600, dir, sta,
+		debugfs_create_file("reset_rx_stats", 0600, dir, link_sta,
 				    &fops_reset_rx_stats);
-		debugfs_create_file("driver_rx_pkts_flow", 0400, dir, sta,
+		debugfs_create_file("driver_rx_pkts_flow", 0400, dir, link_sta,
 				    &fops_driver_rx_pkts_flow);
 	}
 
-	debugfs_create_file("htt_peer_stats", 0400, dir, sta,
+	debugfs_create_file("htt_peer_stats", 0400, dir, link_sta,
 			    &fops_htt_peer_stats);
 
-	debugfs_create_file("peer_pktlog", 0644, dir, sta,
+	debugfs_create_file("peer_pktlog", 0644, dir, link_sta,
 			    &fops_peer_pktlog);
 
-	debugfs_create_file("aggr_mode", 0644, dir, sta, &fops_aggr_mode);
-	debugfs_create_file("addba", 0200, dir, sta, &fops_addba);
-	debugfs_create_file("addba_resp", 0200, dir, sta, &fops_addba_resp);
-	debugfs_create_file("delba", 0200, dir, sta, &fops_delba);
-
 	if (test_bit(WMI_TLV_SERVICE_PER_PEER_HTT_STATS_RESET,
 		     ar->ab->wmi_ab.svc_map))
-		debugfs_create_file("htt_peer_stats_reset", 0600, dir, sta,
+		debugfs_create_file("htt_peer_stats_reset", 0600, dir, link_sta,
 				    &fops_htt_peer_stats_reset);
 
 	mutex_unlock(&ah->conf_mutex);
--- a/drivers/net/wireless/ath/ath12k/debugfs_sta.h
+++ b/drivers/net/wireless/ath/ath12k/debugfs_sta.h
@@ -17,6 +17,8 @@
 
 void ath12k_debugfs_sta_op_add(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			       struct ieee80211_sta *sta, struct dentry *dir);
+void ath12k_debugfs_link_sta_op_add(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
+				    struct ieee80211_link_sta *link_sta, struct dentry *dir);
 void ath12k_debugfs_sta_add_tx_stats(struct ath12k_link_sta *arsta,
 				     struct ath12k_per_peer_tx_stats *peer_stats,
 				     u8 legacy_rate_idx);
@@ -26,6 +28,7 @@ void ath12k_debugfs_sta_update_txcompl(s
 #else /* CPTCFG_ATH12K_DEBUGFS */
 
 #define ath12k_debugfs_sta_op_add NULL
+#define ath12k_debugfs_link_sta_op_add NULL
 
 static inline void
 ath12k_debugfs_sta_add_tx_stats(struct ath12k_link_sta *arsta,
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -13488,6 +13488,7 @@ static const struct ieee80211_ops ath12k
 	CFG80211_TESTMODE_CMD(ath12k_tm_cmd)
 #ifdef CPTCFG_ATH12K_DEBUGFS
 	.sta_add_debugfs		= ath12k_debugfs_sta_op_add,
+	.link_sta_add_debugfs		= ath12k_debugfs_link_sta_op_add,
 #endif
 	.get_txpower			= ath12k_mac_op_get_txpower,
 	.set_radar_background		= ath12k_mac_op_set_radar_background,
