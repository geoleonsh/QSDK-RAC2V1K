From 3c4a011c43008e5b762abd7055dc96b00139815a Mon Sep 17 00:00:00 2001
From: Aaradhana Sahu <quic_aarasahu@quicinc.com>
Date: Wed, 28 Dec 2022 14:38:08 +0530
Subject: [PATCH] ath12k: enable backward compatibility to support legacy
 architecture

Currently, we are collecting dump through new structure
ath12k_coredump_ram_info, this structure is introduced for
MLO but it doesn't support legacy architecture.

So, enable backward compatibility to support legacy architecture
in dump collection.

Signed-off-by: Aaradhana Sahu <quic_aarasahu@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/coredump.c | 54 ++++++++++++++--------
 drivers/net/wireless/ath/ath12k/coredump.h |  2 +-
 2 files changed, 36 insertions(+), 20 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/coredump.c
+++ b/drivers/net/wireless/ath/ath12k/coredump.c
@@ -16,6 +16,8 @@
 #include "mhi.h"
 #include "debug.h"
 
+struct ath12k_coredump_segment_info ath12k_coredump_seg_info;
+EXPORT_SYMBOL(ath12k_coredump_seg_info);
 struct ath12k_coredump_info ath12k_coredump_ram_info;
 EXPORT_SYMBOL(ath12k_coredump_ram_info);
 
@@ -187,6 +189,7 @@ void ath12k_coredump_download_rddm(struc
 	enum ath12k_fw_crash_dump_type mem_type;
 	struct ath12k_coredump_segment_info *chip_seg;
 	int dump_count;
+	struct ath12k_hw_group *ag = ab->ag;
 
 	ath12k_mhi_coredump(mhi_ctrl, false);
 
@@ -279,26 +282,49 @@ void ath12k_coredump_download_rddm(struc
 
 	num_seg = num_seg - skip_count;
 	if(!ab->fw_recovery_support) {
-		dump_count = ath12k_coredump_ram_info.num_chip;
-		if (dump_count >= ATH12K_MAX_SOCS) {
-			ath12k_err(ab, "invalid chip number %d\n", dump_count);
-			return;
+		if (ag->mlo_capable) {
+			dump_count = atomic_read(&ath12k_coredump_ram_info.num_chip);
+			if (dump_count >= ATH12K_MAX_SOCS) {
+				ath12k_err(ab, "invalid chip number %d\n",
+					   dump_count);
+				return;
+			} else {
+				chip_seg = &ath12k_coredump_ram_info.chip_seg_info[dump_count];
+				chip_seg->chip_id = ar_pci->dev_id;
+				chip_seg->qrtr_id = ar_pci->ab->qmi.service_ins_id;
+				chip_seg->bus_id = pci_domain_nr(ar_pci->pdev->bus);
+				chip_seg->num_seg = num_seg;
+				chip_seg->seg = segment;
+				atomic_inc(&ath12k_coredump_ram_info.num_chip);
+			}
 		} else {
+			/* This part of code for 12.2 without mlo_capable=1 */
+			dump_count = atomic_read(&ath12k_coredump_ram_info.num_chip);
 			chip_seg = &ath12k_coredump_ram_info.chip_seg_info[dump_count];
 			chip_seg->chip_id = ar_pci->dev_id;
 			chip_seg->qrtr_id = ar_pci->ab->qmi.service_ins_id;
 			chip_seg->bus_id = pci_domain_nr(ar_pci->pdev->bus);
 			chip_seg->num_seg = num_seg;
 			chip_seg->seg = segment;
-			ath12k_coredump_ram_info.num_chip++;
-
-			if (ath12k_coredump_ram_info.num_chip >= ab->ag->num_started)
-				BUG_ON(1);
-			else
-				ath12k_info(ab,
-					    "%d chip dump collected and waiting for partner chips\n",
-					    ath12k_coredump_ram_info.num_chip);
+			atomic_inc(&ath12k_coredump_ram_info.num_chip);
 		}
+
+		chip_seg = &ath12k_coredump_seg_info;
+		chip_seg->chip_id = ar_pci->dev_id;
+		chip_seg->qrtr_id = ar_pci->ab->qmi.service_ins_id;
+		chip_seg->bus_id = pci_domain_nr(ar_pci->pdev->bus);
+		chip_seg->num_seg = num_seg;
+		chip_seg->seg = segment;
+
+		if (ag->mlo_capable &&
+		    (atomic_read(&ath12k_coredump_ram_info.num_chip) >= ab->ag->num_started))
+			BUG_ON(1);
+		else if (!ag->mlo_capable)
+			BUG_ON(1);
+		else
+			ath12k_info(ab,
+				    "%d chip dump collected and waiting for partner chips\n",
+				    atomic_read(&ath12k_coredump_ram_info.num_chip));
 	} else {
 		/* TODO dump collection for MLO when fw_recovery set */
 		ath12k_coredump_build_inline(ab, segment, num_seg);
--- a/drivers/net/wireless/ath/ath12k/coredump.h
+++ b/drivers/net/wireless/ath/ath12k/coredump.h
@@ -77,7 +77,7 @@ struct ath12k_coredump_segment_info {
 };
 
 struct ath12k_coredump_info {
-	u32 num_chip;
+	atomic_t num_chip;
 	struct ath12k_coredump_segment_info chip_seg_info[ATH12K_MAX_SOCS];
 };
 
