From ad203b17b874e56df722af350423f26e27cb7a4e Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Fri, 16 Dec 2022 17:15:44 +0530
Subject: [PATCH 4/4] ath12k: add critical update support during set beacon
 template

Critical Update (CU) is the explicit signaling for STA to notify any change
in BSS parameters, so that other STAs which are part of the same BSS
can take the corresponding action.

To indicate Critical Update during beacon template formation, two new TLV
tags - WMI_TAG_BCN_TMPL_ML_INFO_CMD and WMI_TAG_BCN_TMPL_ML_PARAMS_CMD
are introduced via which driver can let the target know about it.

WMI_TAG_BCN_TMPL_ML_PARAMS_CMD tag provides info about the partner links
where as WMI_TAG_BCN_TMPL_ML_INFO_CMD provides info about the impacted link.

Add support fill these new TLV tags during send beacon template event in
order to indicate CU to the target.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.h |  23 ++++
 drivers/net/wireless/ath/ath12k/wmi.c | 148 +++++++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/wmi.h |  35 ++++++
 3 files changed, 205 insertions(+), 1 deletion(-)

--- a/drivers/net/wireless/ath/ath12k/mac.h
+++ b/drivers/net/wireless/ath/ath12k/mac.h
@@ -138,6 +138,29 @@ struct ath12k_mac_num_chanctxs_arg {
 #define ATH12K_OBSS_PD_SRG_EN				BIT(30)
 #define ATH12K_OBSS_PD_NON_SRG_EN			BIT(31)
 
+/* Critical Update Category 1 : Inclusion of new IEs */
+#define ATH12K_CRITICAL_UPDATE_CAT_1  (IEEE80211_CU_INCLUDE_CSA_ELEM | \
+				       IEEE80211_CU_INCLUDE_ECSA_ELEM | \
+				       IEEE80211_CU_INCLUDE_QUIET_ELEM | \
+				       IEEE80211_CU_INCLUDE_WBCS_ELEM | \
+				       IEEE80211_CU_INCLUDE_CSW_ELEM | \
+				       IEEE80211_CU_INCLUDE_OMN_ELEM | \
+				       IEEE80211_CU_INCLUDE_Q_CHAN_ELEM | \
+				       IEEE80211_CU_INCLUDE_B_TWT_ELEM |\
+				       IEEE80211_CU_INCLUDE_B_TWT_EXIST_ELEM | \
+				       IEEE80211_CU_INCLUDE_BCCA_ELEM)
+
+/* Critical Update Category 2 : Modification of existing IEs */
+#define ATH12K_CRITICAL_UPDATE_CAT_2  (IEEE80211_CU_MODIFY_EDCA_PARAM_ELEM | \
+				       IEEE80211_CU_MODIFY_DSSS_PARAM_ELEM | \
+				       IEEE80211_CU_MODIFY_HT_OPER_ELEM | \
+				       IEEE80211_CU_MODIFY_VHT_OPER_ELEM | \
+				       IEEE80211_CU_MODIFY_HE_OPER_ELEM | \
+				       IEEE80211_CU_MODIFY_MU_EDCA_PARAM_ELEM | \
+				       IEEE80211_CU_MODIFY_SR_PARAM_ELEM | \
+				       IEEE80211_CU_MODIFY_UORA_PARAM_ELEM | \
+				       IEEE80211_CU_MODIFY_EHT_OPER_ELEM)
+
 extern const struct htt_rx_ring_tlv_filter ath12k_mac_mon_status_filter_default;
 
 void ath12k_mac_ap_ps_recalc(struct ath12k *ar);
@@ -182,5 +205,6 @@ struct ath12k *ath12k_get_ar_by_vif(stru
 int ath12k_mac_mlo_setup(struct ath12k_hw *ah);
 int ath12k_mac_mlo_ready(struct ath12k_hw *ah);
 int ath12k_mac_mlo_teardown(struct ath12k_hw *ah);
+struct ieee80211_bss_conf *ath12k_get_link_bss_conf(struct ath12k_link_vif *arvif);
 bool ath12k_mac_is_ml_arvif(struct ath12k_link_vif *arvif);
 #endif
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -1833,6 +1833,134 @@ int ath12k_wmi_send_bcn_offload_control_
 	return ret;
 }
 
+static void ath12k_wmi_bcn_fill_ml_info(struct ath12k_link_vif *arvif,
+				        struct wmi_bcn_tmpl_ml_info *ml_info)
+{
+	struct ath12k_base *ab = arvif->ar->ab;
+	struct ieee80211_bss_conf *link_conf;
+	u32 cu_flags;
+	u32 vdev_id = arvif->vdev_id;
+	u64 vdev_map_cat1 = 0;
+	u64 vdev_map_cat2 = 0;
+
+	rcu_read_lock();
+
+	link_conf = ath12k_get_link_bss_conf(arvif);
+	if (!link_conf) {
+		rcu_read_unlock();
+		goto err_fill_ml_info;
+	}
+
+	cu_flags = link_conf->critical_update_flag;
+	rcu_read_unlock();
+
+	ml_info->tlv_header = ath12k_wmi_tlv_cmd_hdr(WMI_TAG_BCN_TMPL_ML_INFO_CMD,
+						     sizeof(*ml_info));
+	ml_info->hw_link_id = cpu_to_le32(arvif->ar->pdev->hw_link_id);
+
+	if (cu_flags & ATH12K_CRITICAL_UPDATE_CAT_1)
+		set_bit(vdev_id, &vdev_map_cat1);
+
+	if (cu_flags & ATH12K_CRITICAL_UPDATE_CAT_2)
+		set_bit(vdev_id, &vdev_map_cat2);
+
+err_fill_ml_info:
+	ml_info->cu_vdev_map_cat1_lo =
+			   cpu_to_le32(ATH12K_GET_LOWER_32_BITS(vdev_map_cat1));
+	ml_info->cu_vdev_map_cat1_hi =
+			   cpu_to_le32(ATH12K_GET_UPPER_32_BITS(vdev_map_cat1));
+	ml_info->cu_vdev_map_cat2_lo =
+			   cpu_to_le32(ATH12K_GET_LOWER_32_BITS(vdev_map_cat2));
+	ml_info->cu_vdev_map_cat2_hi =
+			   cpu_to_le32(ATH12K_GET_UPPER_32_BITS(vdev_map_cat2));
+
+	ath12k_dbg(ab, ATH12K_DBG_WMI,
+		   "wmi CU filled ml info cat1_lo=0x%x cat1_hi=0x%x cat2_lo=0x%x cat2_hi=0x%x\n",
+		   ml_info->cu_vdev_map_cat1_lo, ml_info->cu_vdev_map_cat1_hi,
+		   ml_info->cu_vdev_map_cat2_lo, ml_info->cu_vdev_map_cat2_hi);
+}
+
+static void ath12k_wmi_fill_cu_arg(struct ath12k_link_vif *arvif,
+				   struct wmi_critical_update_arg *cu_arg)
+{
+	struct ath12k_base *ab = arvif->ar->ab;
+	struct wmi_bcn_tmpl_ml_info *ml_info;
+	int i;
+
+	if (!ath12k_mac_is_ml_arvif(arvif))
+		return;
+
+	/* Fill ML params
+	 * ML params should be filled for all partner links
+	 */
+	cu_arg->num_ml_params = 0;
+	/* TODO: Fill ML params. Will work without this info too */
+
+	/* Fill ML info
+	 * ML info should be filled for impacted link only
+	 */
+	cu_arg->num_ml_info = 1;
+	cu_arg->ml_info = (struct wmi_bcn_tmpl_ml_info *)
+			  kzalloc((cu_arg->num_ml_info * sizeof(*ml_info)),
+				  GFP_KERNEL);
+
+	if (!cu_arg->ml_info) {
+		ath12k_warn(ab, "wmi failed to get memory for ml info");
+		cu_arg->num_ml_info = 0;
+	} else {
+		for (i = 0; i < cu_arg->num_ml_info; i++) {
+			ml_info = &cu_arg->ml_info[i];
+			ath12k_wmi_bcn_fill_ml_info(arvif, ml_info);
+		}
+	}
+}
+
+static void *
+ath12k_wmi_append_critical_update_params(struct ath12k *ar, u32 vdev_id,
+					 void *ptr,
+					 struct wmi_critical_update_arg *cu_arg)
+{
+	struct wmi_bcn_tmpl_ml_params *ml_params;
+	struct wmi_bcn_tmpl_ml_info *ml_info;
+	void *start = ptr;
+	struct wmi_tlv *tlv;
+	size_t ml_params_len = cu_arg->num_ml_params * sizeof(*ml_params);
+	size_t ml_info_len = cu_arg->num_ml_info * sizeof(*ml_info);
+	int i;
+
+	/* Add ML params */
+	tlv = (struct wmi_tlv *)ptr;
+	tlv->header = ath12k_wmi_tlv_hdr(WMI_TAG_ARRAY_STRUCT, ml_params_len);
+	ml_params = (struct wmi_bcn_tmpl_ml_params *)tlv->value;
+
+	for (i = 0; i < cu_arg->num_ml_params; i++)
+		memcpy(&ml_params[i], &cu_arg->ml_params[i],
+		       sizeof(*ml_params));
+
+	if (cu_arg->num_ml_params)
+		kfree(cu_arg->ml_params);
+
+	ptr += TLV_HDR_SIZE + ml_params_len;
+
+	/* Add ML info */
+	tlv = (struct wmi_tlv *)ptr;
+	tlv->header = ath12k_wmi_tlv_hdr(WMI_TAG_ARRAY_STRUCT, ml_info_len);
+	ml_info = (struct wmi_bcn_tmpl_ml_info *)tlv->value;
+
+	for (i = 0; i < cu_arg->num_ml_info; i++)
+		memcpy(&ml_info[i], &cu_arg->ml_info[i],
+		       sizeof(*ml_info));
+
+	if (cu_arg->num_ml_info)
+		kfree(cu_arg->ml_info);
+
+	ptr += TLV_HDR_SIZE + ml_info_len;
+
+	ath12k_dbg(ar->ab, ATH12K_DBG_WMI, "wmi %ld bytes of additional data filled for CU\n",
+		    (unsigned long)(ptr - start));
+	return ptr;
+}
+
 int ath12k_wmi_bcn_tmpl(struct ath12k *ar, u32 vdev_id,
 			struct ieee80211_mutable_offsets *offs,
 			struct sk_buff *bcn, u32 ema_params)
@@ -1845,12 +1973,32 @@ int ath12k_wmi_bcn_tmpl(struct ath12k *a
 	void *ptr;
 	int ret, len;
 	size_t aligned_len = roundup(bcn->len, 4);
-
-	len = sizeof(*cmd) + sizeof(*bcn_prb_info) + TLV_HDR_SIZE + aligned_len;
+	struct ath12k_link_vif *arvif = ath12k_mac_get_arvif(ar, vdev_id);
+	struct wmi_critical_update_arg cu_arg = {
+						 .num_ml_params = 0,
+						 .ml_params = NULL,
+						 .num_ml_info = 0,
+						 .ml_info = NULL,
+						};
+
+	if (WARN_ON(!arvif))
+		return -EINVAL;
+
+	ath12k_wmi_fill_cu_arg(arvif, &cu_arg);
+
+	len = sizeof(*cmd) + sizeof(*bcn_prb_info) + TLV_HDR_SIZE + aligned_len +
+	      TLV_HDR_SIZE + (sizeof(struct wmi_bcn_tmpl_ml_params) * cu_arg.num_ml_params) +
+	      TLV_HDR_SIZE + (sizeof(struct wmi_bcn_tmpl_ml_info) * cu_arg.num_ml_info);
 
 	skb = ath12k_wmi_alloc_skb(wmi->wmi_ab, len);
-	if (!skb)
+	if (!skb) {
+		if (cu_arg.num_ml_params)
+			kfree(cu_arg.ml_params);
+		if (cu_arg.num_ml_info)
+			kfree(cu_arg.ml_info);
+
 		return -ENOMEM;
+	}
 
 	cmd = (struct wmi_bcn_tmpl_cmd *)skb->data;
 	cmd->tlv_header = ath12k_wmi_tlv_cmd_hdr(WMI_TAG_BCN_TMPL_CMD,
@@ -1879,6 +2027,11 @@ int ath12k_wmi_bcn_tmpl(struct ath12k *a
 	tlv->header = ath12k_wmi_tlv_hdr(WMI_TAG_ARRAY_BYTE, aligned_len);
 	memcpy(tlv->value, bcn->data, bcn->len);
 
+	ptr += (TLV_HDR_SIZE + aligned_len);
+
+	ptr = ath12k_wmi_append_critical_update_params(ar, vdev_id, ptr,
+						       &cu_arg);
+
 	ret = ath12k_wmi_cmd_send(wmi, skb, WMI_BCN_TMPL_CMDID);
 	if (ret) {
 		ath12k_warn(ar->ab, "failed to send WMI_BCN_TMPL_CMDID\n");
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -1952,6 +1952,8 @@ enum wmi_tlv_tag {
 	WMI_TAG_TPC_STATS_REG_PWR_ALLOWED,
 	WMI_TAG_TPC_STATS_RATES_ARRAY,
 	WMI_TAG_TPC_STATS_CTL_PWR_TABLE_EVENT,
+	WMI_TAG_BCN_TMPL_ML_PARAMS_CMD = 0x3E6,
+	WMI_TAG_BCN_TMPL_ML_INFO_CMD = 0x436,
 	WMI_TAG_CTRL_PATH_CMD_FIXED_PARAM = 0x442,
 	WMI_TAG_CTRL_PATH_EVENT_FIXED_PARAM,
 	WMI_TAG_MAX
@@ -6391,6 +6393,39 @@ struct wmi_pdev_mvr_resp_event_parse {
 	u32 vdev_id_bm[];
 } __packed;
 
+struct wmi_bcn_tmpl_ml_params {
+	__le32 tlv_header;
+	__le32 vdev_id;
+	__le32 hw_link_id;
+	__le32 beacon_interval;
+	__le32 csa_switch_count_offset;
+	__le32 ext_csa_switch_count_offset;
+	__le32 per_sta_profile_offset;
+	__le32 quiet_ie_offset;
+	__le32 is_other_ie_present;
+} __packed;
+
+struct wmi_bcn_tmpl_ml_info {
+	__le32 tlv_header;
+	__le32 hw_link_id;
+	__le32 cu_vdev_map_cat1_lo;
+	__le32 cu_vdev_map_cat1_hi;
+	__le32 cu_vdev_map_cat2_lo;
+	__le32 cu_vdev_map_cat2_hi;
+} __packed;
+
+struct wmi_critical_update_arg {
+	u16 num_ml_params;
+	struct wmi_bcn_tmpl_ml_params *ml_params;
+	u16 num_ml_info;
+	struct wmi_bcn_tmpl_ml_info *ml_info;
+};
+
+#define ATH12K_LOWER_32_MASK			GENMASK_ULL(31, 0)
+#define ATH12K_UPPER_32_MASK			GENMASK_ULL(63, 32)
+#define ATH12K_GET_LOWER_32_BITS(val)		(val & ATH12K_LOWER_32_MASK)
+#define ATH12K_GET_UPPER_32_BITS(val)		((val & ATH12K_UPPER_32_MASK) >> 32)
+
 #define ATH12K_FW_STATS_BUF_SIZE (1024 * 1024)
 
 void ath12k_wmi_init_qcn9274(struct ath12k_base *ab,
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -584,7 +584,7 @@ static u8 ath12k_mac_bitrate_to_rate(int
 	       (ath12k_mac_bitrate_is_cck(bitrate) ? BIT(7) : 0);
 }
 
-static struct
+struct
 ieee80211_bss_conf *ath12k_get_link_bss_conf(struct ath12k_link_vif *arvif)
 {
 	struct ieee80211_vif *vif = arvif->ahvif->vif;
