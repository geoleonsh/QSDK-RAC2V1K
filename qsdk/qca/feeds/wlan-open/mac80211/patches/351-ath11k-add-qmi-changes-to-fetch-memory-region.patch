From f5798c9b0fb16c8943a96017a3c9dd5007f4208a Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Thu, 7 Apr 2022 21:05:05 +0530
Subject: [PATCH] ath11k: add qmi changes to fetch memory region

Add qmi changes to fectch various memory region
as per the upstream dtsi changes.

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/core.c | 10 ++++++++
 drivers/net/wireless/ath/ath11k/hw.h   |  5 ++++
 drivers/net/wireless/ath/ath11k/qmi.c  | 46 +++++++++++++++++++---------------
 drivers/net/wireless/ath/ath11k/qmi.h  | 23 +++++++++++------
 4 files changed, 56 insertions(+), 28 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -168,6 +168,9 @@ static const struct ath11k_hw_params ath
 		.max_tx_ring = DP_TCL_NUM_RING_MAX + 1,
 		.reo_status_poll = false,
 		.num_vdevs_peers = ath11k_vdevs_peers,
+		.m3_offset = ATH11K_QMI_IPQ8074_M3_DUMP_OFFSET,
+		.caldb_offset = ATH11K_QMI_IPQ8074_CALDB_OFFSET,
+		.bdf_offset = ATH11K_QMI_IPQ8074_BDF_OFFSET,
 	},
 	{
 		.hw_rev = ATH11K_HW_IPQ6018_HW10,
@@ -251,6 +254,9 @@ static const struct ath11k_hw_params ath
 		.max_tx_ring = DP_TCL_NUM_RING_MAX + 1,
 		.reo_status_poll = false,
 		.num_vdevs_peers = ath11k_vdevs_peers,
+		.m3_offset = ATH11K_QMI_IPQ6018_M3_DUMP_OFFSET,
+		.caldb_offset = ATH11K_QMI_IPQ6018_CALDB_OFFSET,
+		.bdf_offset = ATH11K_QMI_IPQ6018_BDF_OFFSET,
 	},
 	{
 		.name = "qca6390 hw2.0",
@@ -418,6 +424,10 @@ static const struct ath11k_hw_params ath
 		.max_tx_ring = DP_TCL_NUM_RING_MAX + 1,
 		.reo_status_poll = false,
 		.num_vdevs_peers = ath11k_vdevs_peers,
+		.m3_offset = ATH11K_QMI_QCN9074_M3_OFFSET,
+		.caldb_offset = ATH11K_QMI_QCN9074_CALDB_OFFSET,
+		.qdss_offset = ATH11K_QMI_QCN9074_QDSS_OFFSET,
+		.pageable_offset = ATH11K_QMI_QCN9074_PAGEABLE_OFFSET,
 	},
 	{
 		.name = "wcn6855 hw2.0",
@@ -721,6 +731,9 @@ static const struct ath11k_hw_params ath
 		 * max cfr payload(4096 bytes)
 		 */
 		.cfr_stream_buf_size = 4292,
+		.m3_offset = ATH11K_QMI_IPQ5018_M3_OFFSET,
+		.qdss_offset = ATH11K_QMI_IPQ5018_QDSS_OFFSET,
+		.caldb_offset = ATH11K_QMI_IPQ5018_CALDB_OFFSET,
 	},
 	{
 		.hw_rev = ATH11K_HW_QCN6122,
@@ -860,6 +873,9 @@ static const struct ath11k_hw_params ath
 		.hybrid_bus_type = false,
 		.fixed_fw_mem = false,
 		.support_off_channel_tx = false,
+		.m3_offset = ATH11K_QMI_IPQ9574_M3_OFFSET,
+		.caldb_offset = ATH11K_QMI_IPQ9574_CALDB_OFFSET,
+		.bdf_offset = ATH11K_QMI_IPQ9574_BDF_OFFSET,
 	},
 };
 
--- a/drivers/net/wireless/ath/ath11k/hw.h
+++ b/drivers/net/wireless/ath/ath11k/hw.h
@@ -250,6 +250,11 @@ struct ath11k_hw_params {
 	bool internal_pci;
 	u8 ce_window;
 	u8 dp_window;
+	u32 bdf_offset;
+	u32 m3_offset;
+	u32 caldb_offset;
+	u32 qdss_offset;
+	u32 pageable_offset;
 };
 
 struct ath11k_hw_ops {
--- a/drivers/net/wireless/ath/ath11k/qmi.c
+++ b/drivers/net/wireless/ath/ath11k/qmi.c
@@ -2865,24 +2865,27 @@ static int ath11k_qmi_assign_target_mem_
 	int i, idx, ret;
 	u32 addr = 0;
 
+	hremote_node = of_parse_phandle(dev->of_node, "memory-region", 0);
+	if (hremote_node) {
+		ret = of_address_to_resource(hremote_node, 0, &res);
+		of_node_put(hremote_node);
+		if (ret)
+			ath11k_dbg(ab, ATH11K_DBG_QMI,
+				   "qmi fail to get reg from hremote\n");
+	} else {
+		ath11k_dbg(ab, ATH11K_DBG_QMI,
+			   "qmi fail to get hremote_node\n");
+	}
+
 	for (i = 0, idx = 0; i < ab->qmi.mem_seg_count; i++) {
 		switch (ab->qmi.target_mem[i].type) {
 		case HOST_DDR_REGION_TYPE:
-			hremote_node = of_parse_phandle(dev->of_node, "memory-region", 0);
 			if (!hremote_node) {
 				ath11k_dbg(ab, ATH11K_DBG_QMI,
 					   "qmi fail to get hremote_node\n");
 				return -ENODEV;
 			}
 
-			ret = of_address_to_resource(hremote_node, 0, &res);
-			of_node_put(hremote_node);
-			if (ret) {
-				ath11k_dbg(ab, ATH11K_DBG_QMI,
-					   "qmi fail to get reg from hremote\n");
-				return ret;
-			}
-
 			if (res.end - res.start + 1 < ab->qmi.target_mem[i].size) {
 				ath11k_dbg(ab, ATH11K_DBG_QMI,
 					   "qmi fail to assign memory of sz\n");
@@ -2909,6 +2912,9 @@ static int ath11k_qmi_assign_target_mem_
 			idx++;
 			break;
 		case BDF_MEM_REGION_TYPE:
+			if (hremote_node)
+				ab->hw_params.bdf_addr =
+					res.start + ab->hw_params.bdf_offset;
 			if (!of_property_read_u32(ab->dev->of_node, "qcom,bdf-addr",
 						  &addr))
 				ab->hw_params.bdf_addr = (u32)addr;
@@ -2924,10 +2930,10 @@ static int ath11k_qmi_assign_target_mem_
 			    ab->enable_cold_boot_cal) {
 				if (hremote_node) {
 					ab->qmi.target_mem[idx].paddr =
-							res.start + host_ddr_sz;
+							res.start + ab->hw_params.caldb_offset;
 				} else if (ath11k_host_ddr_addr) {
-					ab->qmi.target_mem[idx].paddr = ath11k_host_ddr_addr +
-						ATH11K_HOST_DDR_CALDB_OFFSET;
+					ab->qmi.target_mem[idx].paddr =
+						ath11k_host_ddr_addr + ab->hw_params.caldb_offset;
 				} else if (of_property_read_u32(ab->dev->of_node,
 								"qcom,caldb-addr",
 								&addr)) {
@@ -2937,7 +2943,7 @@ static int ath11k_qmi_assign_target_mem_
 						ATH11K_QMI_CALDB_ADDRESS;
 				}
 
-				ab->qmi.target_mem[idx].iaddr =
+				ab->qmi.target_mem[idx].vaddr =
 						ioremap(ab->qmi.target_mem[idx].paddr,
 							ab->qmi.target_mem[i].size);
 			} else {
@@ -2962,10 +2968,10 @@ static int ath11k_qmi_assign_target_mem_
 			ab->qmi.target_mem[idx].type = ab->qmi.target_mem[i].type;
 			if (hremote_node) {
 				ab->qmi.target_mem[idx].paddr =
-					res.start + ATH11K_HOST_DDR_M3_OFFSET;
+					res.start + ab->hw_params.m3_offset;
 			} else if (ath11k_host_ddr_addr) {
 				ab->qmi.target_mem[idx].paddr =
-					ath11k_host_ddr_addr + ATH11K_HOST_DDR_M3_OFFSET;
+					ath11k_host_ddr_addr + ab->hw_params.m3_offset;
 			} else {
 				ab->qmi.target_mem[idx].paddr = ab->hw_params.m3_addr;
 			}
@@ -2977,10 +2983,10 @@ static int ath11k_qmi_assign_target_mem_
 			break;
 		case PAGEABLE_MEM_TYPE:
 			if (hremote_node) {
-				addr = res.start + ATH11K_HOST_DDR_PAGEABLE_OFFSET;
+				addr = res.start + ab->hw_params.pageable_offset;
 			} else if (ath11k_host_ddr_addr) {
 				addr = ath11k_host_ddr_addr +
-				       ATH11K_HOST_DDR_PAGEABLE_OFFSET;
+				       ab->hw_params.pageable_offset;
 			} else {
 				ath11k_dbg(ab, ATH11K_DBG_QMI,
 					   "pageable-addr is not in dt\n");
@@ -4051,10 +4057,9 @@ int ath11k_qmi_pci_alloc_qdss_mem(struct
 			}
 
 			if (ath11k_host_ddr_addr)
-				addr = ath11k_host_ddr_addr +
-					ATH11K_HOST_DDR_QDSS_OFFSET;
+				addr = ath11k_host_ddr_addr + ab->hw_params.qdss_offset;
 			else
-				addr = res.start + ATH11K_HOST_DDR_QDSS_OFFSET;
+				addr = res.start + ab->hw_params.qdss_offset;
 
 			ab->qmi.qdss_mem[i].paddr = (phys_addr_t)addr;
 			ab->qmi.qdss_mem[i].vaddr =
--- a/drivers/net/wireless/ath/ath11k/qmi.h
+++ b/drivers/net/wireless/ath/ath11k/qmi.h
@@ -35,24 +35,42 @@
 #define ATH11K_QMI_DEFAULT_QDSS_CONFIG_FILE_NAME "qdss_trace_config.bin"
 
 #ifdef CPTCFG_ATH11K_MEM_PROFILE_512M
-#define ATH11K_HOST_DDR_M3_OFFSET              0xC00000
-#define ATH11K_HOST_DDR_QDSS_OFFSET            0xD00000
-#define ATH11K_HOST_DDR_CALDB_OFFSET           0xE00000
-#define ATH11K_HOST_DDR_PAGEABLE_OFFSET        0x1600000
+#define ATH11K_QMI_QCN9074_M3_OFFSET           0xC00000
+#define ATH11K_QMI_QCN9074_QDSS_OFFSET         0xD00000
+#define ATH11K_QMI_QCN9074_CALDB_OFFSET        0xE00000
+#define ATH11K_QMI_QCN9074_PAGEABLE_OFFSET     0x1600000
 #define ATH11K_QMI_IPQ8074_M3_DUMP_ADDRESS     0x4E800000
 #define ATH11K_QMI_IPQ6018_M3_DUMP_ADDRESS     0x4E300000
+#define ATH11K_QMI_IPQ8074_M3_DUMP_OFFSET      0x3800000
+#define ATH11K_QMI_IPQ6018_M3_DUMP_OFFSET      0x3800000
 #else
-#define ATH11K_HOST_DDR_M3_OFFSET              0x2300000
-#define ATH11K_HOST_DDR_QDSS_OFFSET            0x2400000
-#define ATH11K_HOST_DDR_CALDB_OFFSET           0x2500000
-#define ATH11K_HOST_DDR_PAGEABLE_OFFSET        0x2D00000
+#define ATH11K_QMI_QCN9074_M3_OFFSET           0x2300000
+#define ATH11K_QMI_QCN9074_QDSS_OFFSET         0x2400000
+#define ATH11K_QMI_QCN9074_CALDB_OFFSET        0x2500000
+#define ATH11K_QMI_QCN9074_PAGEABLE_OFFSET     0x2D00000
 #define ATH11K_QMI_IPQ8074_M3_DUMP_ADDRESS     0x51000000
 #define ATH11K_QMI_IPQ6018_M3_DUMP_ADDRESS     0x50100000
+#define ATH11K_QMI_IPQ8074_M3_DUMP_OFFSET      0x6000000
+#define ATH11K_QMI_IPQ6018_M3_DUMP_OFFSET      0x5600000
 #endif
 
 #define ATH11K_QMI_IPQ5018_M3_DUMP_ADDRESS     0x4C800000
 #define ATH11K_QMI_M3_DUMP_SIZE		       0x100000
 
+#define ATH11K_QMI_IPQ8074_CALDB_OFFSET		0xA00000
+#define ATH11K_QMI_IPQ8074_BDF_OFFSET		0xC0000
+#define ATH11K_QMI_IPQ6018_CALDB_OFFSET		0xA00000
+#define ATH11K_QMI_IPQ6018_BDF_OFFSET		0xC0000
+#define ATH11K_QMI_IPQ5018_M3_OFFSET		0xD00000
+#define ATH11K_QMI_IPQ5018_QDSS_OFFSET		0xE00000
+#define ATH11K_QMI_IPQ5018_CALDB_OFFSET		0xF00000
+#define ATH11K_QMI_QCN6122_M3_OFFSET		0xD00000
+#define ATH11K_QMI_QCN6122_QDSS_OFFSET		0xE00000
+#define ATH11K_QMI_QCN6122_CALDB_OFFSET		0xF00000
+#define ATH11K_QMI_IPQ9574_CALDB_OFFSET		0xA00000
+#define ATH11K_QMI_IPQ9574_BDF_OFFSET		0xC0000
+#define ATH11K_QMI_IPQ9574_M3_OFFSET		0xD00000
+
 #define QMI_WLFW_REQUEST_MEM_IND_V01		0x0035
 #define QMI_WLFW_FW_MEM_READY_IND_V01		0x0037
 #define QMI_WLFW_COLD_BOOT_CAL_DONE_IND_V01	0x0021
