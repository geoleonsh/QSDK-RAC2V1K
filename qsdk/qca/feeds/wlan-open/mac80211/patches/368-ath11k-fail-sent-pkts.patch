From fe3b72176e72b1b0ccfd969447ce8519f8274457 Mon Sep 17 00:00:00 2001
From: saleemuddin shaik <quic_saleemud@quicinc.com>
Date: Sat, 4 Mar 2023 14:11:03 +0530
Subject: ath11k: add statistic support for counting wmm failed sent
 packets.

if the acknowledgement is not received for the packets sent in the air,
then incrementing the drop packets are counted based on WMM categories.

Signed-off-by: saleemuddin shaik <quic_saleemud@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/core.h    |  1 +
 drivers/net/wireless/ath/ath11k/debugfs.c | 12 ++++++++++++
 drivers/net/wireless/ath/ath11k/dp_tx.c   |  6 ++++++
 3 files changed, 19 insertions(+)

diff --git a/drivers/net/wireless/ath/ath11k/core.h b/drivers/net/wireless/ath/ath11k/core.h
index a68eedf..1b5d938 100644
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -856,6 +856,7 @@ struct ath11k_wmm_stats {
 	int rx_type;
 	u64 total_wmm_tx_pkts[WME_NUM_AC];
 	u64 total_wmm_rx_pkts[WME_NUM_AC];
+	u64 total_wmm_tx_drop[WME_NUM_AC];
 };
 
 #define ATH11K_FLUSH_TIMEOUT (5 * HZ)
diff --git a/drivers/net/wireless/ath/ath11k/debugfs.c b/drivers/net/wireless/ath/ath11k/debugfs.c
index 84e3bd9..a0ca4b9 100644
--- a/drivers/net/wireless/ath/ath11k/debugfs.c
+++ b/drivers/net/wireless/ath/ath11k/debugfs.c
@@ -875,6 +875,7 @@ static ssize_t ath11k_read_wmm_stats(struct file *file,
 	ssize_t retval;
 	u64 total_wmm_sent_pkts = 0;
 	u64 total_wmm_received_pkts = 0;
+	u64 total_wmm_fail_sent = 0;
 
 	buf = kzalloc(size, GFP_KERNEL);
 	if (!buf)
@@ -884,12 +885,15 @@ static ssize_t ath11k_read_wmm_stats(struct file *file,
 	for (count = 0; count < WME_NUM_AC; count++) {
 		total_wmm_sent_pkts += ar->wmm_stats.total_wmm_tx_pkts[count];
 		total_wmm_received_pkts += ar->wmm_stats.total_wmm_rx_pkts[count];
+		total_wmm_fail_sent += ar->wmm_stats.total_wmm_tx_drop[count];
 	}
 
 	len += scnprintf(buf + len, size - len, "total number of wmm_sent: %llu\n",
 			 total_wmm_sent_pkts);
 	len += scnprintf(buf + len, size - len, "total number of wmm_received: %llu\n",
 			 total_wmm_received_pkts);
+	len += scnprintf(buf + len, size - len, "total number of wmm_fail_sent: %llu\n",
+			 total_wmm_fail_sent);
 	len += scnprintf(buf + len, size - len, "num of be wmm_sent: %llu\n",
 			 ar->wmm_stats.total_wmm_tx_pkts[WME_AC_BE]);
 	len += scnprintf(buf + len, size - len, "num of bk wmm_sent: %llu\n",
@@ -906,6 +910,14 @@ static ssize_t ath11k_read_wmm_stats(struct file *file,
 			 ar->wmm_stats.total_wmm_rx_pkts[WME_AC_VI]);
 	len += scnprintf(buf + len, size - len, "num of vo wmm_received: %llu\n",
 			 ar->wmm_stats.total_wmm_rx_pkts[WME_AC_VO]);
+	len += scnprintf(buf + len, size - len, "num of be wmm_tx_dropped: %llu\n",
+			 ar->wmm_stats.total_wmm_tx_drop[WME_AC_BE]);
+	len += scnprintf(buf + len, size - len, "num of bk wmm_tx_dropped: %llu\n",
+			 ar->wmm_stats.total_wmm_tx_drop[WME_AC_BK]);
+	len += scnprintf(buf + len, size - len, "num of vi wmm_tx_dropped: %llu\n",
+			 ar->wmm_stats.total_wmm_tx_drop[WME_AC_VI]);
+	len += scnprintf(buf + len, size - len, "num of vo wmm_tx_dropped: %llu\n",
+			 ar->wmm_stats.total_wmm_tx_drop[WME_AC_VO]);
 
 	mutex_unlock(&ar->conf_mutex);
 
diff --git a/drivers/net/wireless/ath/ath11k/dp_tx.c b/drivers/net/wireless/ath/ath11k/dp_tx.c
index 15ed9d1..d939f42 100644
--- a/drivers/net/wireless/ath/ath11k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath11k/dp_tx.c
@@ -829,6 +829,12 @@ static void ath11k_dp_tx_complete_msdu(struct ath11k *ar,
 
 	ath11k_dp_tx_status_parse(ab, tx_status, &ts);
 
+	ar->wmm_stats.tx_type = ath11k_tid_to_ac(ts.tid > ATH11K_DSCP_PRIORITY ? 0:ts.tid);
+	if (ar->wmm_stats.tx_type) {
+		if (ts.status != HAL_WBM_TQM_REL_REASON_FRAME_ACKED)
+			ar->wmm_stats.total_wmm_tx_drop[ar->wmm_stats.tx_type]++;
+	}
+
 	if (unlikely(!rcu_access_pointer(ab->pdevs_active[ar->pdev_idx]))) {
 		dev_kfree_skb_any(msdu);
 		return;
-- 
2.17.1

