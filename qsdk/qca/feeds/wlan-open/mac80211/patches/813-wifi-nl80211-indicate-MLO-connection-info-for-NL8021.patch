From c2bc42c217f7e48269b07c08dcce38460f950eb6 Mon Sep 17 00:00:00 2001
From: Wen Gong <quic_wgong@quicinc.com>
Date: Thu, 15 Sep 2022 23:46:50 -0400
Subject: [PATCH 107/112] wifi: nl80211: indicate MLO connection info for
 NL80211_CMD_ASSOCIATE

Add MLO connection information during association

Signed-off-by: Wen Gong <quic_wgong@quicinc.com>
Signed-off-by: Amutha Ravikumar <quic_aravikum@quicinc.com>
---
 net/wireless/mlme.c    |  2 +-
 net/wireless/nl80211.c | 60 ++++++++++++++++++++++++++++++++++++------
 net/wireless/nl80211.h |  3 ++-
 3 files changed, 55 insertions(+), 10 deletions(-)

diff --git a/net/wireless/mlme.c b/net/wireless/mlme.c
index 81d3f40d6235..346e7c03a7a9 100644
--- a/net/wireless/mlme.c
+++ b/net/wireless/mlme.c
@@ -89,7 +89,7 @@ void cfg80211_rx_assoc_resp(struct net_device *dev,
 		return;
 	}
 
-	nl80211_send_rx_assoc(rdev, dev, data);
+	nl80211_send_rx_assoc(rdev, dev, data, &cr);
 	/* update current_bss etc., consumes the bss reference */
 	__cfg80211_connect_result(dev, &cr, cr.status == WLAN_STATUS_SUCCESS);
 }
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 9b342e96abd3..47ef25c9b106 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -17694,12 +17694,26 @@ static void nl80211_send_mlme_event(struct cfg80211_registered_device *rdev,
 				    const u8 *buf, size_t len,
 				    enum nl80211_commands cmd, gfp_t gfp,
 				    int uapsd_queues, const u8 *req_ies,
-				    size_t req_ies_len, bool reconnect)
+				    size_t req_ies_len, bool reconnect,
+				    struct cfg80211_connect_resp_params *cr)
 {
 	struct sk_buff *msg;
 	void *hdr;
+	unsigned int link;
+	size_t link_info_size = 0;
 
-	msg = nlmsg_new(100 + len + req_ies_len, gfp);
+	if (cr && cr->valid_links) {
+		for_each_valid_link(cr, link) {
+			/* Nested attribute header */
+			link_info_size += NLA_HDRLEN;
+			/* Link ID */
+			link_info_size += nla_total_size(sizeof(u8));
+			link_info_size += cr->links[link].addr ?
+					  nla_total_size(ETH_ALEN) : 0;
+		}
+	}
+
+	msg = nlmsg_new(100 + len + req_ies_len + link_info_size, gfp);
 	if (!msg)
 		return;
 
@@ -17732,6 +17746,34 @@ static void nl80211_send_mlme_event(struct cfg80211_registered_device *rdev,
 		nla_nest_end(msg, nla_wmm);
 	}
 
+	if (cr && cr->valid_links) {
+		int i = 1;
+		struct nlattr *nested;
+
+		nested = nla_nest_start(msg, NL80211_ATTR_MLO_LINKS);
+		if (!nested)
+			goto nla_put_failure;
+
+		for_each_valid_link(cr, link) {
+			struct nlattr *nested_mlo_links;
+
+			nested_mlo_links = nla_nest_start(msg, i);
+			if (!nested_mlo_links)
+				goto nla_put_failure;
+
+			if (nla_put_u8(msg, NL80211_ATTR_MLO_LINK_ID, link) ||
+			    (cr->links[link].addr &&
+			     nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN,
+				     cr->links[link].addr)))
+				goto nla_put_failure;
+
+			nla_nest_end(msg, nested_mlo_links);
+			i++;
+		}
+		nla_nest_end(msg, nested);
+	}
+
+
 	genlmsg_end(msg, hdr);
 
 	genlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,
@@ -17748,17 +17790,19 @@ void nl80211_send_rx_auth(struct cfg80211_registered_device *rdev,
 {
 	nl80211_send_mlme_event(rdev, netdev, buf, len,
 				NL80211_CMD_AUTHENTICATE, gfp, -1, NULL, 0,
-				false);
+				false, NULL);
 }
 
 void nl80211_send_rx_assoc(struct cfg80211_registered_device *rdev,
 			   struct net_device *netdev,
-			   struct cfg80211_rx_assoc_resp *data)
+			   struct cfg80211_rx_assoc_resp *data,
+			   struct cfg80211_connect_resp_params *cr)
 {
 	nl80211_send_mlme_event(rdev, netdev, data->buf, data->len,
 				NL80211_CMD_ASSOCIATE, GFP_KERNEL,
 				data->uapsd_queues,
-				data->req_ies, data->req_ies_len, false);
+				data->req_ies, data->req_ies_len, false,
+				cr);
 }
 
 void nl80211_send_deauth(struct cfg80211_registered_device *rdev,
@@ -17767,7 +17811,7 @@ void nl80211_send_deauth(struct cfg80211_registered_device *rdev,
 {
 	nl80211_send_mlme_event(rdev, netdev, buf, len,
 				NL80211_CMD_DEAUTHENTICATE, gfp, -1, NULL, 0,
-				reconnect);
+				reconnect, NULL);
 }
 
 void nl80211_send_disassoc(struct cfg80211_registered_device *rdev,
@@ -17776,7 +17820,7 @@ void nl80211_send_disassoc(struct cfg80211_registered_device *rdev,
 {
 	nl80211_send_mlme_event(rdev, netdev, buf, len,
 				NL80211_CMD_DISASSOCIATE, gfp, -1, NULL, 0,
-				reconnect);
+				reconnect, NULL);
 }
 
 void cfg80211_rx_unprot_mlme_mgmt(struct net_device *dev, const u8 *buf,
@@ -17807,7 +17851,7 @@ void cfg80211_rx_unprot_mlme_mgmt(struct net_device *dev, const u8 *buf,
 
 	trace_cfg80211_rx_unprot_mlme_mgmt(dev, buf, len);
 	nl80211_send_mlme_event(rdev, dev, buf, len, cmd, GFP_ATOMIC, -1,
-				NULL, 0, false);
+				NULL, 0, false, NULL);
 }
 EXPORT_SYMBOL(cfg80211_rx_unprot_mlme_mgmt);
 
diff --git a/net/wireless/nl80211.h b/net/wireless/nl80211.h
index 0278d817bb02..56d4b89bbea7 100644
--- a/net/wireless/nl80211.h
+++ b/net/wireless/nl80211.h
@@ -60,7 +60,8 @@ void nl80211_send_rx_auth(struct cfg80211_registered_device *rdev,
 			  const u8 *buf, size_t len, gfp_t gfp);
 void nl80211_send_rx_assoc(struct cfg80211_registered_device *rdev,
 			   struct net_device *netdev,
-			   struct cfg80211_rx_assoc_resp *data);
+			   struct cfg80211_rx_assoc_resp *data,
+			   struct cfg80211_connect_resp_params *cr);
 void nl80211_send_deauth(struct cfg80211_registered_device *rdev,
 			 struct net_device *netdev,
 			 const u8 *buf, size_t len,
-- 
2.31.1

