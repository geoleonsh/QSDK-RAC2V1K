From 580cb5e6c0a0416062e30acd76a8ffb49f02555d Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Sat, 7 Jan 2023 22:56:24 +0530
Subject: [PATCH] mac80211: pass channel info in AWGN event

Currently during AWGN event, drivers only passes the
ieee80211_hw on which AWGN interference is detected and
the interference bitmap. The worker, iterates over each
channel contexts avaiable under the hardware and expects
only 1 channel contexts to be present. Then, with this
channel context it executes further steps.

However, with MLO, there can be more than 1 channel contexts
available under the hardware hence while iterating, it is
important to know on which channel AWGN interference was
detected.

Add logic to pass channel info as well in the AWGN detcted
event and use it properly to process further in the AWGN
event.

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 drivers/net/wireless/ath/ath11k/wmi.c |  3 ++-
 drivers/net/wireless/ath/ath12k/wmi.c |  3 ++-
 include/net/mac80211.h                |  5 ++++-
 net/mac80211/ieee80211_i.h            |  1 +
 net/mac80211/util.c                   | 28 ++++++++++++++++++++++-----
 5 files changed, 32 insertions(+), 8 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/wmi.c
+++ b/drivers/net/wireless/ath/ath11k/wmi.c
@@ -9757,7 +9757,8 @@ ath11k_wmi_dcs_awgn_interference_event(s
 	}
 	ar->awgn_chandef = *chandef;
 
-	ieee80211_awgn_detected(ar->hw, awgn_info.chan_bw_interference_bitmap);
+	ieee80211_awgn_detected(ar->hw, awgn_info.chan_bw_interference_bitmap,
+				NULL);
 
 	spin_lock_bh(&ar->data_lock);
 	/* Incase of mesh intf presence, dont set in prog as there will be no
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -9091,7 +9091,8 @@ ath12k_wmi_dcs_awgn_interference_event(s
         }
         ar->awgn_chandef = *chandef;
 
-        ieee80211_awgn_detected(ah->hw, awgn_info.chan_bw_interference_bitmap);
+	ieee80211_awgn_detected(ah->hw, awgn_info.chan_bw_interference_bitmap,
+				chandef->chan);
 
         spin_lock_bh(&ar->data_lock);
         ar->awgn_intf_handling_in_prog = true;
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -6612,8 +6612,11 @@ void ieee80211_channel_switch_disconnect
  *
  * @hw: pointer as obtained from ieee80211_alloc_hw()
  * @chan_bw_interference_bitmap : awgn interference bitmap
+ * @awgn_channel: Channel pointer on which AWGN is detected. Mandatory to pass
+ *	for MLO drivers. For non-MLO %NULL can be passed
  */
-void ieee80211_awgn_detected(struct ieee80211_hw *hw, u32 chan_bw_interference_bitmap);
+void ieee80211_awgn_detected(struct ieee80211_hw *hw, u32 chan_bw_interference_bitmap,
+			     struct ieee80211_channel *awgn_channel);
 
 /**
  * ieee80211_request_smps - request SM PS transition
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -1302,6 +1302,12 @@ struct channel_radar_info {
 	struct ieee80211_channel *radar_channel;
 };
 
+struct channel_awgn_info {
+	struct list_head list;
+	struct ieee80211_channel *awgn_channel;
+	u32 chan_bw_interference_bitmap;
+};
+
 struct ieee80211_local {
 	/* embed the driver visible part.
 	 * don't cast (use the static inlines below), but we keep
@@ -1590,10 +1596,11 @@ struct ieee80211_local {
 
 	struct mac80211_memory_stats memory_stats;
 	struct work_struct awgn_detected_work;
-	u32 chan_bw_interference_bitmap;
 
 	bool enable_tx_latency_stats;
 
+	struct list_head awgn_info_list;
+
 	/* extended capabilities provided by mac80211 */
 	u8 ext_capa[8];
 };
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -4307,11 +4307,12 @@ void ieee80211_dfs_cac_cancel(struct iee
 	mutex_unlock(&local->mtx);
 }
 
-void ieee80211_awgn_detected_work(struct work_struct *work)
+static void ieee80211_awgn_detected_processing(struct ieee80211_local *local,
+					       u32 interference_bitmap,
+					       struct ieee80211_channel *awgn_channel)
 {
-	struct ieee80211_local *local =
-		container_of(work, struct ieee80211_local, awgn_detected_work);
 	struct cfg80211_chan_def chandef = local->hw.conf.chandef;
+	struct cfg80211_chan_def *awgn_chandef = NULL;
 	struct ieee80211_chanctx *ctx;
 	int num_chanctx = 0;
 
@@ -4322,15 +4323,52 @@ void ieee80211_awgn_detected_work(struct
 
 		num_chanctx++;
 		chandef = ctx->conf.def;
+
+		if (awgn_channel &&
+		    (chandef.chan == awgn_channel))
+			awgn_chandef = &ctx->conf.def;
 	}
 	mutex_unlock(&local->chanctx_mtx);
 
-	if (num_chanctx > 1)
-		/* XXX: multi-channel is not supported yet */
-		WARN_ON_ONCE(1);
-	else
+	if (num_chanctx > 1) {
+		if (local->hw.wiphy->flags & WIPHY_FLAG_SUPPORTS_MLO) {
+			if (WARN_ON(!awgn_chandef))
+				return;
+
+			cfg80211_awgn_event(local->hw.wiphy, awgn_chandef,
+					    GFP_KERNEL,
+					    interference_bitmap);
+		} else {
+			/* XXX: multi-channel is not supported yet */
+			WARN_ON_ONCE(1);
+		}
+	} else {
 		cfg80211_awgn_event(local->hw.wiphy, &chandef, GFP_KERNEL,
-				    local->chan_bw_interference_bitmap);
+				    interference_bitmap);
+	}
+}
+
+void ieee80211_awgn_detected_work(struct work_struct *work)
+{
+	struct ieee80211_local *local =
+		container_of(work, struct ieee80211_local, awgn_detected_work);
+	struct channel_awgn_info *awgn_info, *temp;
+	u32 chan_bw_interference_bitmap;
+	struct ieee80211_channel *awgn_channel;
+
+	if (WARN_ON(list_empty(&local->awgn_info_list)))
+		return;
+
+	list_for_each_entry_safe(awgn_info, temp, &local->awgn_info_list, list) {
+		chan_bw_interference_bitmap = awgn_info->chan_bw_interference_bitmap;
+		awgn_channel = awgn_info->awgn_channel;
+
+		ieee80211_awgn_detected_processing(local, chan_bw_interference_bitmap,
+						   awgn_channel);
+
+		list_del(&awgn_info->list);
+		kfree(awgn_info);
+	}
 }
 
 static void
@@ -4438,11 +4476,21 @@ void ieee80211_radar_detected_bitmap(str
 }
 EXPORT_SYMBOL(ieee80211_radar_detected_bitmap);
 
-void ieee80211_awgn_detected(struct ieee80211_hw *hw, u32 chan_bw_interference_bitmap)
+void ieee80211_awgn_detected(struct ieee80211_hw *hw, u32 chan_bw_interference_bitmap,
+			     struct ieee80211_channel *awgn_channel)
 {
 	struct ieee80211_local *local = hw_to_local(hw);
+	struct channel_awgn_info *awgn_info;
+
+	awgn_info = kzalloc(sizeof(*awgn_info), GFP_ATOMIC);
+	if (!awgn_info)
+		return;
+
+	INIT_LIST_HEAD(&awgn_info->list);
+	awgn_info->chan_bw_interference_bitmap = chan_bw_interference_bitmap;
+	awgn_info->awgn_channel = awgn_channel;
 
-	local->chan_bw_interference_bitmap = chan_bw_interference_bitmap;
+	list_add_tail(&awgn_info->list, &local->awgn_info_list);
 	schedule_work(&local->awgn_detected_work);
 }
 EXPORT_SYMBOL(ieee80211_awgn_detected);
--- a/net/mac80211/main.c
+++ b/net/mac80211/main.c
@@ -820,6 +820,7 @@ struct ieee80211_hw *ieee80211_alloc_hw_
 		  ieee80211_dfs_radar_detected_work);
 	INIT_WORK(&local->awgn_detected_work,
 		  ieee80211_awgn_detected_work);
+	INIT_LIST_HEAD(&local->awgn_info_list);
 
 	INIT_WORK(&local->reconfig_filter, ieee80211_reconfig_filter);
 	local->smps_mode = IEEE80211_SMPS_OFF;
