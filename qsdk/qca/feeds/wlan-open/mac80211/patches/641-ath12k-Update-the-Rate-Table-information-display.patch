From 76932ff4c5623d92596bce02fd5fcf636e70c089 Mon Sep 17 00:00:00 2001
From: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
Date: Thu, 23 Jun 2022 15:00:09 -0700
Subject: [PATCH 1/2] ath12k: Update the Rate Table information display

Change the format of Peer Rate Table information display
to accommodate all bandwidth,mcs,gi,nss combinations

Change-Id: I007877c16e839696035c554bbd07bd632123e974
Signed-off-by: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h        |   2 +-
 drivers/net/wireless/ath/ath12k/debugfs_sta.c | 114 +++++++++++++++---
 drivers/net/wireless/ath/ath12k/dp_mon.c      |  23 +---
 3 files changed, 104 insertions(+), 35 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -349,7 +349,7 @@ struct ath12k_rx_peer_rate_stats {
 	u64 bw_count[HAL_RX_BW_MAX];
 	u64 gi_count[HAL_RX_GI_MAX];
 	u64 legacy_count[HAL_RX_MAX_NUM_LEGACY_RATES];
-	u64 rx_rate[ATH12K_RX_RATE_TABLE_11AX_NUM];
+	u64 rx_rate[HAL_RX_BW_MAX][HAL_RX_GI_MAX][HAL_RX_MAX_NSS][HAL_RX_MAX_MCS_HT + 1];
 };
 
 struct ath12k_rx_peer_stats {
--- a/drivers/net/wireless/ath/ath12k/dp_mon.c
+++ b/drivers/net/wireless/ath/ath12k/dp_mon.c
@@ -3264,7 +3264,6 @@ ath12k_dp_mon_rx_update_peer_rate_table_
 					      struct hal_rx_user_status *user_stats,
 					      u32 num_msdu)
 {
-	u32 rate_idx = 0;
 	u32 mcs_idx = (user_stats) ? user_stats->mcs : ppdu_info->mcs;
 	u32 nss_idx = (user_stats) ? user_stats->nss - 1 : ppdu_info->nss - 1;
 	u32 bw_idx = ppdu_info->bw;
@@ -3275,27 +3274,15 @@ ath12k_dp_mon_rx_update_peer_rate_table_
 		return;
 	}
 
-	if (ppdu_info->preamble_type == HAL_RX_PREAMBLE_11N ||
-	    ppdu_info->preamble_type == HAL_RX_PREAMBLE_11AC) {
-		rate_idx = mcs_idx * 8 + 8 * 10 * nss_idx;
-		rate_idx += bw_idx * 2 + gi_idx;
-	} else if (ppdu_info->preamble_type == HAL_RX_PREAMBLE_11AX) {
+	if (ppdu_info->preamble_type == HAL_RX_PREAMBLE_11AX ||
+	    ppdu_info->preamble_type == HAL_RX_PREAMBLE_11BE)
 		gi_idx = ath12k_he_gi_to_nl80211_he_gi(ppdu_info->gi);
-		rate_idx = mcs_idx * 12 + 12 * 12 * nss_idx;
-		rate_idx += bw_idx * 3 + gi_idx;
-	} else if (ppdu_info->preamble_type == HAL_RX_PREAMBLE_11BE) {
-		gi_idx = ath12k_he_gi_to_nl80211_he_gi(ppdu_info->gi);
-		rate_idx = mcs_idx * 12 + 12 * 12 * nss_idx;
-		rate_idx += bw_idx * 3 + gi_idx;
-	} else {
-		return;
-	}
 
-	rx_stats->pkt_stats.rx_rate[rate_idx] += num_msdu;
+	rx_stats->pkt_stats.rx_rate[bw_idx][gi_idx][nss_idx][mcs_idx] += num_msdu;
 	if (user_stats)
-		rx_stats->byte_stats.rx_rate[rate_idx] += user_stats->mpdu_ok_byte_count;
+		rx_stats->byte_stats.rx_rate[bw_idx][gi_idx][nss_idx][mcs_idx] += user_stats->mpdu_ok_byte_count;
 	else
-		rx_stats->byte_stats.rx_rate[rate_idx] += ppdu_info->mpdu_len;
+		rx_stats->byte_stats.rx_rate[bw_idx][gi_idx][nss_idx][mcs_idx] += ppdu_info->mpdu_len;
 }
 
 static void ath12k_dp_mon_rx_update_peer_su_stats(struct ath12k *ar,
--- a/drivers/net/wireless/ath/ath12k/debugfs_sta.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs_sta.c
@@ -381,8 +381,7 @@ static ssize_t ath12k_dbg_sta_dump_rx_st
 	int len = 0, i, retval = 0;
 	const int size = 4 * 4096;
 	char *buf;
-	int he_rates_avail;
-	int rate_table_len;
+	int mcs = 0, bw = 0, nss = 0, gi = 0, bw_num = 0, num_run, found;
 	static const char *legacy_rate_str[HAL_RX_MAX_NUM_LEGACY_RATES] = {
 					"1Mbps", "2Mbps", "5.5Mbps", "6Mbps",
 					"9Mbps", "11Mbps", "12Mbps", "18Mbps",
@@ -394,9 +393,6 @@ static ssize_t ath12k_dbg_sta_dump_rx_st
 	if (!buf)
 		return -ENOMEM;
 
-	he_rates_avail = (rx_stats->pream_cnt[HAL_RX_PREAMBLE_11AX] > 1) ? 1 : 0;
-	rate_table_len = he_rates_avail ? ATH12K_RX_RATE_TABLE_11AX_NUM :
-					      ATH12K_RX_RATE_TABLE_NUM;
 	mutex_lock(&ar->conf_mutex);
 	spin_lock_bh(&ar->ab->base_lock);
 
@@ -420,10 +416,10 @@ static ssize_t ath12k_dbg_sta_dump_rx_st
 	len += scnprintf(buf + len, size - len, "Num of MPDUs with FCS error: %llu\n",
 			 rx_stats->num_mpdu_fcs_err);
 	len += scnprintf(buf + len, size - len,
-			 "preamble: 11A %llu 11B %llu 11N %llu 11AC %llu 11AX %llu\n",
+			 "preamble: 11A %llu 11B %llu 11N %llu 11AC %llu 11AX %llu 11BE%llu\n",
 			 rx_stats->pream_cnt[0], rx_stats->pream_cnt[1],
 			 rx_stats->pream_cnt[2], rx_stats->pream_cnt[3],
-			 rx_stats->pream_cnt[4]);
+			 rx_stats->pream_cnt[4], rx_stats->pream_cnt[6]);
 	len += scnprintf(buf + len, size - len,
 			 "reception type: SU %llu MU_MIMO %llu MU_OFDMA %llu MU_OFDMA_MIMO %llu\n",
 			 rx_stats->reception_type[0], rx_stats->reception_type[1],
@@ -478,10 +474,51 @@ static ssize_t ath12k_dbg_sta_dump_rx_st
 			 rx_stats->pkt_stats.bw_count[3],
 			 rx_stats->pkt_stats.bw_count[4]);
 	len += scnprintf(buf + len, size - len, "\nRate Table (packets):\n");
-	for (i = 0; i < rate_table_len; i++)
-		len += scnprintf(buf + len, size - len, "%10llu%s",
-				rx_stats->pkt_stats.rx_rate[i],
-				(i + 1) % (he_rates_avail ? 12 : 8) ? "\t" : "\n");
+	num_run = HAL_RX_BW_MAX * HAL_RX_GI_MAX * HAL_RX_MAX_NSS;
+
+	for (i = 0; i < num_run; i++) {
+		found = 0;
+		for (mcs = 0; mcs < (HAL_RX_MAX_MCS_HT + 1); mcs++)
+			if (rx_stats->pkt_stats.rx_rate[bw][gi][nss][mcs]) {
+				found = 1;
+				break;
+			}
+
+		if (found) {
+			switch (bw) {
+			case 0:
+				bw_num = 20;
+				break;
+			case 1:
+				bw_num = 40;
+				break;
+			case 2:
+				bw_num = 80;
+				break;
+			case 3:
+				bw_num = 160;
+				break;
+			case 4:
+				bw_num = 320;
+				break;
+			}
+			len += scnprintf(buf + len, size - len, "\n%d Mhz gi %d us %dx%d : ",
+					 bw_num, gi, nss + 1, nss + 1);
+			for (mcs = 0; mcs < (HAL_RX_MAX_MCS_HT + 1); mcs++) {
+				if (rx_stats->pkt_stats.rx_rate[bw][gi][nss][mcs])
+					len += scnprintf(buf + len, size - len, " %d:%llu",
+							 mcs, rx_stats->pkt_stats.rx_rate[bw][gi][nss][mcs]);
+			}
+		}
+		if (nss++ >= HAL_RX_MAX_NSS - 1) {
+			nss = 0;
+			if (gi++ >= HAL_RX_GI_MAX - 1) {
+				gi = 0;
+				if (bw < HAL_RX_BW_MAX - 1)
+					bw++;
+			}
+		}
+	}
 
 	len += scnprintf(buf + len, size - len, "\nRX success byte stats:\n");
 	len += scnprintf(buf + len, size - len, "\nEHT byte stats:\n");
@@ -528,10 +565,55 @@ static ssize_t ath12k_dbg_sta_dump_rx_st
 			 rx_stats->byte_stats.bw_count[3],
 			 rx_stats->byte_stats.bw_count[4]);
 	len += scnprintf(buf + len, size - len, "\nRate Table (bytes):\n");
-	for (i = 0; i < rate_table_len; i++)
-		len += scnprintf(buf + len, size - len, "%10llu%s",
-				rx_stats->byte_stats.rx_rate[i],
-				(i + 1) % (he_rates_avail ? 12 : 8) ? "\t" : "\n");
+
+
+	bw = 0;
+	gi = 0;
+	nss = 0;
+	for (i = 0; i < num_run; i++) {
+		found = 0;
+		for (mcs = 0; mcs < (HAL_RX_MAX_MCS_HT + 1); mcs++)
+			if (rx_stats->byte_stats.rx_rate[bw][gi][nss][mcs]) {
+				found = 1;
+				break;
+			}
+
+		if (found) {
+			switch (bw) {
+			case 0:
+				bw_num = 20;
+				break;
+			case 1:
+				bw_num = 40;
+				break;
+			case 2:
+				bw_num = 80;
+				break;
+			case 3:
+				bw_num = 160;
+				break;
+			case 4:
+				bw_num = 320;
+				break;
+			}
+			len += scnprintf(buf + len, size - len, "\n%d Mhz gi %d us %dx%d : ",
+					 bw_num, gi, nss + 1, nss + 1);
+			for (mcs = 0; mcs < (HAL_RX_MAX_MCS_HT + 1); mcs++) {
+				if (rx_stats->byte_stats.rx_rate[bw][gi][nss][mcs])
+					len += scnprintf(buf + len, size - len, " %d:%llu", mcs, rx_stats->byte_stats.rx_rate[bw][gi][nss][mcs]);
+			}
+		}
+
+		if (nss++ >= HAL_RX_MAX_NSS - 1) {
+			nss = 0;
+			if (gi++ >= HAL_RX_GI_MAX - 1) {
+				gi = 0;
+				if (bw < HAL_RX_BW_MAX - 1)
+					bw++;
+			}
+		}
+	}
+	len += scnprintf(buf + len, size - len, "\n");
 	len += scnprintf(buf + len, size - len,
 			 "\nDCM: %llu\nRU26:  %llu\nRU52:  %llu\nRU106: %llu\nRU242: %llu\nRU484: %llu\nRU996: %llu\n",
 			 rx_stats->dcm_count, rx_stats->ru_alloc_cnt[0],
