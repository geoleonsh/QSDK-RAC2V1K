Author: Ermine Jose <quic_erminejo@quicinc.com>
Subject: uboot-envtools : Bad-Block handling

Fixed offset length calculation if bad block present
Added provision to skip bad block during read/write
of the environment partition variables

Change-Id: Iea0368f3513cb59bb9b649a9ca0e2f62ba36c22c
Signed-off-by: Ermine Jose <quic_erminejo@quicinc.com>
---

Index: u-boot-2021.10/tools/env/fw_env.c
===================================================================
--- u-boot-2022.10.orig/tools/env/fw_env.c
+++ u-boot-2022.10/tools/env/fw_env.c
@@ -888,6 +888,20 @@ static int flash_bad_block(int fd, uint8
 	return 0;
 }
 
+int find_mtd_size(int fd)
+{
+	struct mtd_info_user mtdinfo;
+	int size=0;
+
+	if(ioctl(fd, MEMGETINFO, &mtdinfo) == -1) {
+		return size;
+	}
+
+	size = mtdinfo.size;
+
+	return size;
+}
+
 /*
  * Read data from flash at an offset into a provided buffer. On NAND it skips
  * bad blocks but makes sure it stays within ENVSECTORS (dev) starting from
@@ -900,11 +914,13 @@ static int flash_read_buf(int dev, int f
 				   0 on NOR */
 	size_t processed = 0;	/* progress counter */
 	size_t readlen = count;	/* current read length */
+	off_t top_of_range;	/* end of the last block we may use */
 	off_t block_seek;	/* offset inside the current block to the start
 				   of the data */
 	loff_t blockstart;	/* running start of the current block -
 				   MEMGETBADBLOCK needs 64 bits */
 	int rc;
+	int size;
 
 	blockstart = (offset / DEVESIZE(dev)) * DEVESIZE(dev);
 
@@ -918,11 +934,19 @@ static int flash_read_buf(int dev, int f
 		 */
 		blocklen = DEVESIZE(dev);
 
+		/*
+		 * To calculate the top of the range, we have to use the
+		 * global DEVOFFSET (dev), which can be different from offset
+		 */
+		top_of_range = ((DEVOFFSET(dev) / blocklen) +
+				ENVSECTORS (dev)) * blocklen;
+
 		/* Limit to one block for the first read */
 		if (readlen > blocklen - block_seek)
 			readlen = blocklen - block_seek;
 	} else {
 		blocklen = 0;
+		top_of_range = offset + count;
 	}
 
 	/* This only runs once on NOR flash */
@@ -931,7 +955,11 @@ static int flash_read_buf(int dev, int f
 		if (rc < 0)	/* block test failed */
 			return -1;
 
-		if (blockstart + block_seek + readlen > environment_end(dev)) {
+		if (rc)
+			top_of_range += readlen;
+
+		size = find_mtd_size(fd);
+		if ((blockstart + block_seek + readlen > top_of_range) || (size > 0 && top_of_range > size)) {
 			/* End of range is reached */
 			fprintf(stderr, "Too few good blocks within range\n");
 			return -1;
@@ -998,16 +1026,19 @@ static int flash_write_buf(int dev, int
 				   below offset */
 	off_t block_seek;	/* offset inside the erase block to the start
 				   of the data */
+	off_t top_of_range;     /* end of the lst block we may use */
 	loff_t blockstart;	/* running start of the current block -
 				   MEMGETBADBLOCK needs 64 bits */
 	int was_locked = 0;	/* flash lock flag */
 	int rc;
+	int size;
 
 	/*
 	 * For mtd devices only offset and size of the environment do matter
 	 */
 	if (DEVTYPE(dev) == MTD_ABSENT) {
 		blocklen = count;
+		top_of_range = DEVOFFSET(dev) + count;
 		erase_len = blocklen;
 		blockstart = DEVOFFSET(dev);
 		block_seek = 0;
@@ -1015,10 +1046,13 @@ static int flash_write_buf(int dev, int
 	} else {
 		blocklen = DEVESIZE(dev);
 
+		top_of_range = ((DEVOFFSET(dev) / blocklen) +
+				ENVSECTORS(dev)) * blocklen;
+
 		erase_offset = DEVOFFSET(dev);
 
 		/* Maximum area we may use */
-		erase_len = environment_end(dev) - erase_offset;
+		erase_len = top_of_range - erase_offset;
 
 		blockstart = erase_offset;
 
@@ -1093,7 +1127,11 @@ static int flash_write_buf(int dev, int
 		if (rc < 0)	/* block test failed */
 			return rc;
 
-		if (blockstart + erasesize > environment_end(dev)) {
+		if (rc)
+			top_of_range += blocklen;
+
+		size = find_mtd_size(fd);
+		if ((blockstart + erasesize > top_of_range) || (size > 0 && top_of_range > size)) {
 			fprintf(stderr, "End of range reached, aborting\n");
 			return -1;
 		}
