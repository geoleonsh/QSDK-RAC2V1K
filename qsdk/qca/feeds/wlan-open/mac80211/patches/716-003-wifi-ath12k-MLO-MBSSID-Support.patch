From 2cf8da1bdedcacb42cd9edb9b22f83ac974c97c0 Mon Sep 17 00:00:00 2001
From: Rameshkumar Sundaram <quic_ramess@quicinc.com>
Date: Tue, 28 Feb 2023 00:49:14 +0530
Subject: [PATCH 3/4] wifi: ath12k: MLO MBSSID Support

Add changes to fetch transmitting links BSS of and MBSSID
group bases on mbssid_tx_vif and mbssid_tx_vif_linkid information
stored in every link.

Fetch beacons based on Tx vif and tx vif linkid for any non-tx
vdev's link BSS.

Save vdev id of transmitting vdev for non-tx vdevs in
local structure and use the same to update CU cat1 flag
for all non-tx mld vif as part of TX vdev BCN_TMP,
if it occurs for a TX vif link BSS (Since they are on same radio).
FW will take care of updating CU for partner link.

ToDo: Handle Vdev synchronization for Multi Link MLO+MBSSID.

Signed-off-by: Rameshkumar Sundaram <quic_ramess@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |   1 +
 drivers/net/wireless/ath/ath12k/mac.c  | 208 +++++++++++++++++--------
 drivers/net/wireless/ath/ath12k/wmi.c  |  26 +++-
 3 files changed, 165 insertions(+), 70 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index 235a5d9..0f4c09a 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -360,6 +360,7 @@ struct ath12k_link_vif {
 	struct work_struct update_bcn_template_work;
 	u64 obss_color_bitmap;
 	struct work_struct update_obss_color_notify_work;
+	u32 tx_vdev_id;
 	u8 link_id;
 	struct ath12k_vif *ahvif;
 
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index 3c63fd0..ce5923c 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -1550,20 +1550,37 @@ static int ath12k_mac_setup_bcn_tmpl_ema(struct ath12k_link_vif *arvif)
 	struct ath12k_link_vif *tx_arvif;
 	struct ath12k_vif *tx_ahvif, *ahvif = arvif->ahvif;
 	struct ieee80211_ema_beacons *beacons;
+	struct ieee80211_bss_conf *link;
 	u8 i = 0;
 	int ret = 0;
 	bool found_vdev = false;
 
-	if (!ahvif->vif->mbssid_tx_vif)
+	rcu_read_lock();
+	link = ath12k_get_link_bss_conf(arvif);
+	if (!link->mbssid_tx_vif) {
+		rcu_read_unlock();
 		return -1;
-
-	/* FIXME there could be multiple tx link vifs, so this basically
-	 * requires change for MLO
+	}
+	tx_ahvif = (void *)link->mbssid_tx_vif->drv_priv;
+	if (!tx_ahvif) {
+		rcu_read_unlock();
+		return -ENOLINK;
+	}
+	/* both TX an NON_TX arvif's should be under same ar and hw
+	 * hence current acquired lock's should suffice for opertaing
+	 * with tx arvif also
 	 */
-	tx_ahvif = (void *) ahvif->vif->mbssid_tx_vif->drv_priv;
-	tx_arvif = &tx_ahvif->deflink;
+	lockdep_assert_held(&tx_ahvif->ah->conf_mutex);
+	tx_arvif = tx_ahvif->link[link->mbssid_tx_vif_linkid];
+	if (!tx_arvif) {
+		rcu_read_unlock();
+		return -ENOLINK;
+	}
+	lockdep_assert_held(&tx_arvif->ar->conf_mutex);
 	beacons = ieee80211_beacon_get_template_ema_list(tx_arvif->ar->ah->hw,
-							 tx_ahvif->vif, 0);
+							 tx_ahvif->vif,
+							 tx_arvif->link_id);
+	rcu_read_unlock();
 	if (!beacons || !beacons->cnt) {
 		ath12k_warn(arvif->ar->ab,
 			    "failed to get ema beacon templates from mac80211\n");
@@ -1604,21 +1621,36 @@ static int ath12k_mac_setup_bcn_tmpl_non_ema(struct ath12k_link_vif *arvif)
 {
 	struct ath12k_link_vif *tx_arvif = arvif;
 	struct ath12k_vif *tx_ahvif = arvif->ahvif;
-	struct ath12k_vif *ahvif = arvif->ahvif;
 	struct ieee80211_mutable_offsets offs = {};
 	struct sk_buff *bcn;
+	struct ieee80211_bss_conf *link;
 	int ret;
 
-	/* FIXME there could be multiple tx link vifs, so this basically
-	 * requires change for MLO
-	 */
-	if (ahvif->vif->mbssid_tx_vif) {
-		tx_ahvif = (void *) ahvif->vif->mbssid_tx_vif->drv_priv;
-		tx_arvif = &tx_ahvif->deflink;
+	rcu_read_lock();
+	link = ath12k_get_link_bss_conf(arvif);
+	if (!link) {
+		rcu_read_unlock();
+		return -ENOLINK;
 	}
 
-	bcn = ieee80211_beacon_get_template(tx_arvif->ar->ah->hw, ahvif->vif,
-					    &offs, arvif->link_id);
+	if (link->mbssid_tx_vif) {
+		tx_ahvif = (void *)link->mbssid_tx_vif->drv_priv;
+		if (!tx_ahvif) {
+			rcu_read_unlock();
+			return -ENOLINK;
+		}
+		lockdep_assert_held(&tx_ahvif->ah->conf_mutex);
+		tx_arvif = tx_ahvif->link[link->mbssid_tx_vif_linkid];
+	}
+
+	if (!tx_arvif) {
+		rcu_read_unlock();
+		return -ENOLINK;
+	}
+	lockdep_assert_held(&tx_arvif->ar->conf_mutex);
+	bcn = ieee80211_beacon_get_template(tx_arvif->ar->ah->hw, tx_ahvif->vif,
+					    &offs, tx_arvif->link_id);
+	rcu_read_unlock();
 	if (!bcn) {
 		ath12k_warn(arvif->ar->ab,
 			    "failed to get beacon template from mac80211\n");
@@ -1634,7 +1666,7 @@ static int ath12k_mac_setup_bcn_tmpl_non_ema(struct ath12k_link_vif *arvif)
 
 	ret = __ath12k_mac_setup_bcn_tmpl(tx_arvif, bcn, offs, 0, 0);
 	if (ret)
-		ath12k_warn(arvif->ar->ab,
+		ath12k_warn(tx_arvif->ar->ab,
 			    "failed to submit beacon template command: %d\n",
 			    ret);
 
@@ -1644,21 +1676,30 @@ static int ath12k_mac_setup_bcn_tmpl_non_ema(struct ath12k_link_vif *arvif)
 
 static int ath12k_mac_setup_bcn_tmpl(struct ath12k_link_vif *arvif)
 {
-	struct ath12k_vif *ahvif = arvif->ahvif;
-	struct ieee80211_vif *vif = ahvif->vif;
+	struct ath12k_vif *tx_ahvif, *ahvif = arvif->ahvif;
+	struct ieee80211_bss_conf *link;
+	bool is_ema;
 
 	if (ahvif->vdev_type != WMI_VDEV_TYPE_AP)
 		return 0;
 
-	/* FIXME there could be multiple tx link vifs, so this basically
-	 * requires change for MLO. For simpler case mbssid_tx_vif is NULL
-	 */
-	if (vif->mbssid_tx_vif &&
-	    ahvif != (void *)vif->mbssid_tx_vif->drv_priv &&
-	    arvif->is_up)
-		return 0;
+	rcu_read_lock();
+	link = ath12k_get_link_bss_conf(arvif);
+	if (!link) {
+		rcu_read_unlock();
+		return -ENOLINK;
+	}
+	if (link->mbssid_tx_vif) {
+		tx_ahvif = (void *)link->mbssid_tx_vif->drv_priv;
+		if (ahvif != tx_ahvif && arvif->is_up) {
+			rcu_read_unlock();
+			return 0;
+		}
+	}
+	is_ema = link->ema_ap;
+	rcu_read_unlock();
 
-	if (vif->bss_conf.ema_ap)
+	if (is_ema)
 		return ath12k_mac_setup_bcn_tmpl_ema(arvif);
 	else
 		return ath12k_mac_setup_bcn_tmpl_non_ema(arvif);
@@ -1690,7 +1731,7 @@ void ath12k_mac_bcn_tx_event(struct ath12k_link_vif *arvif)
 
 	arvif->bcca_zero_sent = false;
 
-	if (link_conf->color_change_active && !vif->bss_conf.ema_ap)
+	if (link_conf->color_change_active && !link_conf->ema_ap)
 		ieee80211_beacon_update_cntdwn(vif, arvif->link_id);
 	ieee80211_queue_work(ar->ah->hw, &arvif->update_bcn_template_work);
 }
@@ -1702,17 +1743,28 @@ static void ath12k_control_beaconing(struct ath12k_link_vif *arvif,
 	struct ath12k_vif *ahvif = arvif->ahvif;
 	struct ath12k_vif *tx_ahvif = NULL;
 	struct ath12k_link_vif *tx_arvif = NULL;
+	struct ieee80211_bss_conf *link;
 	int ret = 0;
 	struct vdev_up_params params = { 0 };
 
-	/* FIXME there could be multiple tx link vifs, so this basically
-	 * requires change for MLO. For Non MLO no change in behavior
-	 */
-	if (ahvif->vif->mbssid_tx_vif) {
-		tx_ahvif = (void *) ahvif->vif->mbssid_tx_vif->drv_priv;
-		tx_arvif = &tx_ahvif->deflink;
+	rcu_read_lock();
+	link = ath12k_get_link_bss_conf(arvif);
+	if (!link) {
+		rcu_read_unlock();
+		return;
+	}
+
+	if (link->mbssid_tx_vif) {
+		tx_ahvif = (void *)link->mbssid_tx_vif->drv_priv;
+		if (tx_ahvif) {
+			lockdep_assert_held(&tx_ahvif->ah->conf_mutex);
+			tx_arvif = tx_ahvif->link[link->mbssid_tx_vif_linkid];
+			if (tx_arvif)
+				lockdep_assert_held(&tx_arvif->ar->conf_mutex);
+		}
 	}
 
+	rcu_read_unlock();
 	lockdep_assert_held(&arvif->ar->conf_mutex);
 
 	if (!info->enable_beacon) {
@@ -3886,9 +3938,9 @@ static void ath12k_bss_assoc(struct ath12k *ar,
 static void ath12k_bss_disassoc(struct ath12k *ar,
 				struct ath12k_link_vif *arvif)
 {
-	struct ath12k_vif *ahvif = arvif->ahvif;
 	struct ath12k_vif *tx_ahvif;
 	struct ath12k_link_vif *tx_arvif;
+	struct ieee80211_bss_conf *link;
 	int ret;
 
 	lockdep_assert_held(&ar->conf_mutex);
@@ -3903,15 +3955,26 @@ static void ath12k_bss_disassoc(struct ath12k *ar,
 
 	arvif->is_up = false;
 
-	/* FIXME mbssid for MLO */
-	if (ahvif->vif->mbssid_tx_vif) {
-		tx_ahvif = (void *) ahvif->vif->mbssid_tx_vif->drv_priv;
-		tx_arvif = &tx_ahvif->deflink;
-		if (tx_arvif != arvif)
-			tx_arvif->nontransmitting_vif_count--;
+	rcu_read_lock();
+	link = ath12k_get_link_bss_conf(arvif);
+	if (!link)
+		goto unlock;
+
+	if (link->mbssid_tx_vif) {
+		tx_ahvif = (void *)link->mbssid_tx_vif->drv_priv;
+		if (!tx_ahvif)
+			goto unlock;
+		lockdep_assert_held(&tx_ahvif->ah->conf_mutex);
+		tx_arvif = tx_ahvif->link[link->mbssid_tx_vif_linkid];
+		if (!tx_arvif)
+			goto unlock;
+		lockdep_assert_held(&tx_arvif->ar->conf_mutex);
+		tx_arvif->nontransmitting_vif_count--;
 	}
 
 	/* TODO: cancel connection_loss_work */
+unlock:
+	rcu_read_unlock();
 }
 
 static u32 ath12k_mac_get_rate_hw_value(int bitrate)
@@ -8938,6 +9001,7 @@ static int ath12k_mac_setup_vdev_params_mbssid(struct ath12k_link_vif *arvif,
 {
 	struct ath12k *ar = arvif->ar;
 	struct ath12k_link_vif *tx_arvif;
+	struct ath12k_vif *tx_ahvif;
 	struct ieee80211_vif *tx_vif;
 	struct ieee80211_bss_conf *link_conf;
 
@@ -8952,15 +9016,25 @@ static int ath12k_mac_setup_vdev_params_mbssid(struct ath12k_link_vif *arvif,
 	}
 
 	*tx_vdev_id = 0;
-	/* FIXME MBSSID with MLO */
-	tx_vif = arvif->ahvif->vif->mbssid_tx_vif;
+	tx_vif = link_conf->mbssid_tx_vif;
 	if (!tx_vif) {
 		*flags = WMI_HOST_VDEV_FLAGS_NON_MBSSID_AP;
 		rcu_read_unlock();
 		return 0;
 	}
 
-	tx_arvif = &ath12k_vif_to_ahvif(tx_vif)->deflink;
+	tx_ahvif = ath12k_vif_to_ahvif(tx_vif);
+	if (!tx_ahvif) {
+		rcu_read_unlock();
+		return -EINVAL;
+	}
+	lockdep_assert_held(&tx_ahvif->ah->conf_mutex);
+	tx_arvif = tx_ahvif->link[link_conf->mbssid_tx_vif_linkid];
+	if (!tx_arvif) {
+		rcu_read_unlock();
+		return -EINVAL;
+	}
+	lockdep_assert_held(&tx_arvif->ar->conf_mutex);
 
 	if (link_conf->nontransmitted) {
 		if (ar->ah->hw->wiphy != ieee80211_vif_to_wdev(tx_vif)->wiphy) {
@@ -8976,6 +9050,7 @@ static int ath12k_mac_setup_vdev_params_mbssid(struct ath12k_link_vif *arvif,
 		rcu_read_unlock();
 		return -EINVAL;
 	}
+	arvif->tx_vdev_id = *tx_vdev_id;
 
 	if (link_conf->ema_ap)
 		*flags |= WMI_HOST_VDEV_FLAGS_EMA_MODE;
@@ -9206,6 +9281,9 @@ static int ath12k_mac_vdev_create(struct ath12k *ar, struct ath12k_link_vif *arv
 	vdev_id = __ffs64(ab->free_vdev_map);
 
 	arvif->vdev_id = vdev_id;
+	/* Assume it as non-mbssid initially, well overwrite it later.
+	 */
+	arvif->tx_vdev_id = vdev_id;
 	ahvif->vdev_subtype = WMI_VDEV_SUBTYPE_NONE;
 	arvif->ar = ar;
 
@@ -10304,6 +10382,7 @@ static int ath12k_vdev_restart_sequence(struct ath12k_link_vif *arvif,
 	struct ath12k *ar = arvif->ar;
 	struct ath12k_link_vif *tx_arvif;
 	struct ath12k_vif *tx_ahvif;
+	struct ieee80211_bss_conf *link;
 	struct ieee80211_chanctx_conf old_chanctx;
 	struct vdev_up_params params = { 0 };
 	int ret = -EINVAL;
@@ -10350,15 +10429,16 @@ beacon_tmpl_setup:
 	params.vdev_id = arvif->vdev_id;
 	params.aid = ahvif->aid;
 	params.bssid = arvif->bssid;
-	if (ahvif->vif->mbssid_tx_vif) {
-		tx_ahvif = (void *) ahvif->vif->mbssid_tx_vif->drv_priv;
-		/* TODO ML mbssid changes */
-		tx_arvif = &tx_ahvif->deflink;
+	rcu_read_lock();
+	link = rcu_dereference(ahvif->vif->link_conf[arvif->link_id]);
+	if (link->mbssid_tx_vif) {
+		tx_ahvif = (void *)link->mbssid_tx_vif->drv_priv;
+		tx_arvif = tx_ahvif->link[link->mbssid_tx_vif_linkid];
 		params.tx_bssid = tx_arvif->bssid;
 		params.profile_idx = ahvif->vif->bss_conf.bssid_index;
 		params.profile_count = tx_arvif->nontransmitting_vif_count;
 	}
-
+	rcu_read_unlock();
 	ret = ath12k_wmi_vdev_up(arvif->ar, &params);
 	if (ret) {
 		ath12k_warn(ar->ab, "failed to bring vdev up %d: %d\n",
@@ -10756,7 +10836,7 @@ ath12k_mac_update_vif_chan(struct ath12k *ar,
 {
 	struct ath12k_base *ab = ar->ab;
 	struct ath12k_link_vif *arvif, *tx_arvif;
-	struct ath12k_vif *ahvif;
+	struct ath12k_vif *ahvif, *tx_ahvif = NULL;
 	int ret;
 	int i, trans_vdev_index;
 	u64 vif_down_failed_map = 0;
@@ -10794,11 +10874,11 @@ ath12k_mac_update_vif_chan(struct ath12k *ar,
 		if (!arvif->is_up)
 			continue;
 
-		if (ahvif->vif->mbssid_tx_vif &&
-		    ahvif == (struct ath12k_vif *)ahvif->vif->mbssid_tx_vif->drv_priv) {
-			tx_vif = ahvif->vif->mbssid_tx_vif;
-			/* TODO ML mbssid changes */
-			tx_arvif = &ath12k_vif_to_ahvif(tx_vif)->deflink;
+		if (vifs[i].link_conf->mbssid_tx_vif &&
+		    ahvif == (struct ath12k_vif *)vifs[i].link_conf->mbssid_tx_vif->drv_priv) {
+			tx_vif = vifs[i].link_conf->mbssid_tx_vif;
+			tx_ahvif = ath12k_vif_to_ahvif(tx_vif);
+			tx_arvif = tx_ahvif->link[vifs[i].link_conf->mbssid_tx_vif_linkid];
 			trans_vdev_index = i;
 		}
 
@@ -10831,7 +10911,7 @@ ath12k_mac_update_vif_chan(struct ath12k *ar,
 		if (WARN_ON(!arvif))
 			continue;
 
-		if (ahvif->vif->mbssid_tx_vif &&
+		if (vifs[i].link_conf->mbssid_tx_vif &&
 		    arvif == tx_arvif)
 			continue;
 
@@ -10852,8 +10932,8 @@ ath12k_mac_update_vif_chan_mvr(struct ath12k *ar,
 			       int n_vifs)
 {
 	struct ath12k_base *ab = ar->ab;
-	struct ath12k_link_vif *arvif, *tx_arvif;
-	struct ath12k_vif *ahvif;
+	struct ath12k_link_vif *arvif, *tx_arvif = NULL;
+	struct ath12k_vif *ahvif, *tx_ahvif = NULL;
 	struct cfg80211_chan_def *chandef;
 	struct ieee80211_vif *tx_vif;
 	int ret, i, time_left, trans_vdev_index, vdev_idx, n_vdevs = 0;
@@ -10886,11 +10966,11 @@ ath12k_mac_update_vif_chan_mvr(struct ath12k *ar,
 		if (!arvif->is_started)
 			continue;
 
-		if (ahvif->vif->mbssid_tx_vif &&
-		    ahvif == (struct ath12k_vif *)ahvif->vif->mbssid_tx_vif->drv_priv) {
-			tx_vif = ahvif->vif->mbssid_tx_vif;
-			/* TODO ML mbssid changes */
-			tx_arvif = &ath12k_vif_to_ahvif(tx_vif)->deflink;
+		if (vifs[i].link_conf->mbssid_tx_vif &&
+		    ahvif == (struct ath12k_vif *)vifs[i].link_conf->mbssid_tx_vif->drv_priv) {
+			tx_vif = vifs[i].link_conf->mbssid_tx_vif;
+			tx_ahvif = ath12k_vif_to_ahvif(tx_vif);
+			tx_arvif = tx_ahvif->link[vifs[i].link_conf->mbssid_tx_vif_linkid];
 			trans_vdev_index = i;
 		}
 
@@ -10952,7 +11032,7 @@ ath12k_mac_update_vif_chan_mvr(struct ath12k *ar,
 
 		vdev_idx = -1;
 
-		if (ahvif->vif->mbssid_tx_vif && arvif == tx_arvif)
+		if (vifs[i].link_conf->mbssid_tx_vif && arvif == tx_arvif)
 			continue;
 
 		if (arvif->mvr_processing) {
diff --git a/drivers/net/wireless/ath/ath12k/wmi.c b/drivers/net/wireless/ath/ath12k/wmi.c
index 97288a3..0e25cc7 100644
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -2081,7 +2081,8 @@ int ath12k_wmi_send_bcn_offload_control_cmd(struct ath12k *ar,
 }
 
 static void ath12k_wmi_bcn_fill_ml_info(struct ath12k_link_vif *arvif,
-				        struct wmi_bcn_tmpl_ml_info *ml_info)
+					struct wmi_bcn_tmpl_ml_info *ml_info,
+					u64 non_tx_ml_vdev_bmap)
 {
 	struct ath12k_base *ab = arvif->ar->ab;
 	struct ieee80211_bss_conf *link_conf;
@@ -2105,8 +2106,13 @@ static void ath12k_wmi_bcn_fill_ml_info(struct ath12k_link_vif *arvif,
 						     sizeof(*ml_info));
 	ml_info->hw_link_id = cpu_to_le32(arvif->ar->pdev->hw_link_id);
 
-	if (cu_flags & ATH12K_CRITICAL_UPDATE_CAT_1)
+	/* if this is cu cat 1 for tx vdev, then it applies to all
+	 * non-tx vdevs as well set all non-tx mld's vdev id in bitmap
+	 */
+	if (cu_flags & ATH12K_CRITICAL_UPDATE_CAT_1) {
 		set_bit(vdev_id, &vdev_map_cat1);
+		vdev_map_cat1 |= non_tx_ml_vdev_bmap;
+	}
 
 	if (cu_flags & ATH12K_CRITICAL_UPDATE_CAT_2)
 		set_bit(vdev_id, &vdev_map_cat2);
@@ -2122,19 +2128,27 @@ err_fill_ml_info:
 			   cpu_to_le32(ATH12K_GET_UPPER_32_BITS(vdev_map_cat2));
 
 	ath12k_dbg(ab, ATH12K_DBG_WMI,
-		   "wmi CU filled ml info cat1_lo=0x%x cat1_hi=0x%x cat2_lo=0x%x cat2_hi=0x%x\n",
+		   "wmi CU filled ml info cat1_lo=0x%x cat1_hi=0x%x cat2_lo=0x%x cat2_hi=0x%x non_tx_ml_bmap=%llu\n",
 		   ml_info->cu_vdev_map_cat1_lo, ml_info->cu_vdev_map_cat1_hi,
-		   ml_info->cu_vdev_map_cat2_lo, ml_info->cu_vdev_map_cat2_hi);
+		   ml_info->cu_vdev_map_cat2_lo, ml_info->cu_vdev_map_cat2_hi,
+		   non_tx_ml_vdev_bmap);
 }
 
 static void ath12k_wmi_fill_cu_arg(struct ath12k_link_vif *arvif,
 				   struct wmi_critical_update_arg *cu_arg)
 {
 	struct ath12k_base *ab = arvif->ar->ab;
+	struct ath12k_link_vif *arvif_iter;
 	struct wmi_bcn_tmpl_ml_info *ml_info;
 	int i;
+	u64 non_tx_ml_vdev_bmap = 0;
 
-	if (!ath12k_mac_is_ml_arvif(arvif))
+	list_for_each_entry(arvif_iter, &arvif->ar->arvifs, list) {
+		if (arvif_iter != arvif && arvif_iter->tx_vdev_id == arvif->vdev_id &&
+		    ath12k_mac_is_ml_arvif(arvif_iter))
+			set_bit(arvif_iter->vdev_id, &non_tx_ml_vdev_bmap);
+	}
+	if (!ath12k_mac_is_ml_arvif(arvif) && !non_tx_ml_vdev_bmap)
 		return;
 
 	/* Fill ML params
@@ -2157,7 +2171,7 @@ static void ath12k_wmi_fill_cu_arg(struct ath12k_link_vif *arvif,
 	} else {
 		for (i = 0; i < cu_arg->num_ml_info; i++) {
 			ml_info = &cu_arg->ml_info[i];
-			ath12k_wmi_bcn_fill_ml_info(arvif, ml_info);
+			ath12k_wmi_bcn_fill_ml_info(arvif, ml_info, non_tx_ml_vdev_bmap);
 		}
 	}
 }
-- 
2.17.1

