From 9c6529996df6279ddb59410cea7bc98248fffa61 Mon Sep 17 00:00:00 2001
From: Aditya Kumar Singh <quic_adisi@quicinc.com>
Date: Thu, 26 May 2022 12:43:08 +0530
Subject: [PATCH] iw: add support for 6 GHz in iw reg get command

Currently, iw reg get command was not displaying information about
Power Mode and Power Spectral Density (PSD) values for the 6 GHz
regulatory rules.

Added support to display the Power Mode and PSD values for 6 GHz
regulatory rules.

Sample Output:
phy#2 (self-managed)
country US: DFS-FCC
        (2402 - 2472 @ 40), (6, 30), (N/A)
        (5170 - 5250 @ 80), (N/A, 30), (N/A), AUTO-BW
        (5250 - 5330 @ 80), (N/A, 24), (0 ms), DFS, AUTO-BW
        (5490 - 5730 @ 160), (N/A, 24), (0 ms), DFS, AUTO-BW
        (5735 - 5895 @ 160), (N/A, 30), (N/A), AUTO-BW
        (5945 - 7125 @ 160), (N/A, 30), (N/A), (LPI), (PSD: 5 dBm), NO-OUTDOOR, AUTO-BW
        (5945 - 7125 @ 160), (N/A, 24), (N/A), (REGULAR_LPI), (PSD: -1 dBm), NO-OUTDOOR, AUTO-BW
        (5945 - 6425 @ 160), (N/A, 30), (N/A), (REGULAR_SP), (PSD: 17 dBm), AUTO-BW
        (6525 - 6865 @ 160), (N/A, 30), (N/A), (REGULAR_SP), (PSD: 17 dBm), AUTO-BW
        (5945 - 7125 @ 160), (N/A, 30), (N/A), (SUBORDINATE_LPI), (PSD: 5 dBm), NO-OUTDOOR, AUTO-BW
        (5945 - 6425 @ 160), (N/A, 30), (N/A), (SUBORDINATE_SP), (PSD: 17 dBm), AUTO-BW
        (6525 - 6865 @ 160), (N/A, 30), (N/A), (SUBORDINATE_SP), (PSD: 17 dBm), AUTO-BW

Signed-off-by: Aditya Kumar Singh <quic_adisi@quicinc.com>
---
 nl80211.h | 24 ++++++++++++++++++++++++
 reg.c     | 40 ++++++++++++++++++++++++++++++++++++++++
 2 files changed, 64 insertions(+)

--- a/nl80211.h
+++ b/nl80211.h
@@ -3935,6 +3935,20 @@ enum nl80211_band_attr {
 
 #define NL80211_BAND_ATTR_HT_CAPA NL80211_BAND_ATTR_HT_CAPA
 
+enum nl80211_regulatory_power_modes {
+	NL80211_REG_AP_LPI,
+	NL80211_REG_AP_SP,
+	NL80211_REG_AP_VLP,
+	NL80211_REG_REGULAR_CLIENT_LPI,
+	NL80211_REG_REGULAR_CLIENT_SP,
+	NL80211_REG_REGULAR_CLIENT_VLP,
+	NL80211_REG_SUBORDINATE_CLIENT_LPI,
+	NL80211_REG_SUBORDINATE_CLIENT_SP,
+	NL80211_REG_SUBORDINATE_CLIENT_VLP,
+
+	NL80211_REG_NUM_POWER_MODES,
+};
+
 /**
  * enum nl80211_wmm_rule - regulatory wmm rule
  *
@@ -4165,6 +4179,10 @@ enum nl80211_reg_type {
  * 	a given frequency range. The value is in mBm (100 * dBm).
  * @NL80211_ATTR_DFS_CAC_TIME: DFS CAC time in milliseconds.
  *	If not present or 0 default CAC time will be used.
+ * @NL80211_ATTR_POWER_RULE_PSD: power spectral density (in dBm).
+ *	This could be negative.
+ * @NL80211_ATTR_REG_POWER_MODE: 6 GHZ power mode. Referenced from &enum
+ *	nl80211_regulatory_power_modes.
  * @NL80211_REG_RULE_ATTR_MAX: highest regulatory rule attribute number
  *	currently defined
  * @__NL80211_REG_RULE_ATTR_AFTER_LAST: internal use
@@ -4182,6 +4200,10 @@ enum nl80211_reg_rule_attr {
 
 	NL80211_ATTR_DFS_CAC_TIME,
 
+	NL80211_ATTR_POWER_RULE_PSD,
+
+	NL80211_ATTR_REG_POWER_MODE,
+
 	/* keep last */
 	__NL80211_REG_RULE_ATTR_AFTER_LAST,
 	NL80211_REG_RULE_ATTR_MAX = __NL80211_REG_RULE_ATTR_AFTER_LAST - 1
@@ -4264,6 +4286,7 @@ enum nl80211_sched_scan_match_attr {
  * @NL80211_RRF_NO_160MHZ: 160MHz operation not allowed
  * @NL80211_RRF_NO_HE: HE operation not allowed
  * @NL80211_RRF_NO_320MHZ: 320MHz operation not allowed
+ * @NL80211_RRF_PSD: channels has power spectral density value
  */
 enum nl80211_reg_rule_flags {
 	NL80211_RRF_NO_OFDM		= 1<<0,
@@ -4283,6 +4306,7 @@ enum nl80211_reg_rule_flags {
 	NL80211_RRF_NO_160MHZ		= 1<<16,
 	NL80211_RRF_NO_HE		= 1<<17,
 	NL80211_RRF_NO_320MHZ		= 1<<18,
+	NL80211_RRF_PSD                 = 1<<19,
 };
 
 #define NL80211_RRF_PASSIVE_SCAN	NL80211_RRF_NO_IR
--- a/reg.c
+++ b/reg.c
@@ -111,6 +111,34 @@ COMMAND(reg, set, "<ISO/IEC 3166-1 alpha
 	NL80211_CMD_REQ_SET_REG, 0, CIB_NONE, handle_reg_set,
 	"Notify the kernel about the current regulatory domain.");
 
+static const char *reg_6ghz_mode_to_str(enum nl80211_regulatory_power_modes reg_6ghz_power_mode)
+{
+	switch (reg_6ghz_power_mode) {
+	case NL80211_REG_AP_LPI:
+		return "LPI";
+	case NL80211_REG_AP_SP:
+		return "SP";
+	case NL80211_REG_AP_VLP:
+		return "VLP";
+	case NL80211_REG_REGULAR_CLIENT_LPI:
+		return "REGULAR_LPI";
+	case NL80211_REG_REGULAR_CLIENT_SP:
+		return "REGULAR_SP";
+	case NL80211_REG_REGULAR_CLIENT_VLP:
+		return "REGULAR_VLP";
+	case NL80211_REG_SUBORDINATE_CLIENT_LPI:
+		return "SUBORDINATE_LPI";
+	case NL80211_REG_SUBORDINATE_CLIENT_SP:
+		return "SUBORDINATE_SP";
+	case NL80211_REG_SUBORDINATE_CLIENT_VLP:
+		return "SUBORDINATE_VLP";
+	default:
+		return "unknown";
+	}
+
+	return "unknown";
+}
+
 static int print_reg_handler(struct nl_msg *msg, void *arg)
 {
 #define PARSE_FLAG(nl_flag, string_value)  do { \
@@ -132,6 +160,8 @@ static int print_reg_handler(struct nl_m
 		[NL80211_ATTR_POWER_RULE_MAX_ANT_GAIN]	= { .type = NLA_U32 },
 		[NL80211_ATTR_POWER_RULE_MAX_EIRP]	= { .type = NLA_U32 },
 		[NL80211_ATTR_DFS_CAC_TIME]		= { .type = NLA_U32 },
+		[NL80211_ATTR_POWER_RULE_PSD]		= { .type = NLA_U8 },
+		[NL80211_ATTR_REG_POWER_MODE]		= { .type = NLA_U8 },
 	};
 
 	nla_parse(tb_msg, NL80211_ATTR_MAX, genlmsg_attrdata(gnlh, 0),
@@ -164,6 +194,7 @@ static int print_reg_handler(struct nl_m
 
 	nla_for_each_nested(nl_rule, tb_msg[NL80211_ATTR_REG_RULES], rem_rule) {
 		struct nlattr *tb_rule[NL80211_REG_RULE_ATTR_MAX + 1];
+		enum nl80211_regulatory_power_modes reg_6ghz_power_mode;
 		__u32 flags, start_freq_khz, end_freq_khz, max_bw_khz, max_ant_gain_mbi, max_eirp_mbm;
 
 		nla_parse(tb_rule, NL80211_REG_RULE_ATTR_MAX, nla_data(nl_rule), nla_len(nl_rule), reg_rule_policy);
@@ -196,6 +227,15 @@ static int print_reg_handler(struct nl_m
 			continue;
 		}
 
+		/* If reg rule is for 6 GHz, display power mode */
+		if (start_freq_khz >= 5925000 && end_freq_khz <= 7125000 && tb_rule[NL80211_ATTR_REG_POWER_MODE]) {
+			reg_6ghz_power_mode = nla_get_u8(tb_rule[NL80211_ATTR_REG_POWER_MODE]);
+			printf(", (%s)", reg_6ghz_mode_to_str(reg_6ghz_power_mode));
+		}
+
+		if (flags && NL80211_RRF_PSD && tb_rule[NL80211_ATTR_POWER_RULE_PSD])
+			printf(", (PSD: %d dBm)", (__s8)nla_get_u8(tb_rule[NL80211_ATTR_POWER_RULE_PSD]));
+
 		/* Sync this output format to match that of dbparse.py from wireless-regdb.git */
 		PARSE_FLAG(NL80211_RRF_NO_OFDM, "NO-OFDM");
 		PARSE_FLAG(NL80211_RRF_NO_CCK, "NO-CCK");
