From 72d09c249a454f0007c744a46956316af0075f4e Mon Sep 17 00:00:00 2001
From: P Praneesh <quic_ppranees@quicinc.com>
Date: Tue, 28 Mar 2023 22:14:37 +0530
Subject: wifi: ath12k: avoid dma sync cpu during dp_tx

dma_map_single performs sync cpu which consumes more CPU
cycles. Avoid this unnecessary dma_direct_map_page call
by passing DMA_ATTR_SKIP_CPU_SYNC parameter to dma_map_single_attrs.
Before this function call, dma range is cleaned to avoid stale
value in cache.

With this change, observed 500MBPS improvement in 2 link MLO UDP DL.

Signed-off-by: P Praneesh <quic_ppranees@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_tx.c | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -11,6 +11,7 @@
 #include "hw.h"
 #include "peer.h"
 #include <linux/dma-mapping.h>
+#include <asm/cacheflush.h>
 
 static enum hal_tcl_encap_type
 ath12k_dp_tx_get_encap_type(struct ath12k_link_vif *arvif, struct sk_buff *skb)
@@ -183,8 +184,10 @@ int ath12k_dp_tx_direct(struct ath12k_li
 		ab->soc_stats.tx_err.txbuf_na[ring_id]++;
 		return -ENOSPC;
 	}
-	paddr = dma_map_single(dev, skb->data, 256,
-			       DMA_TO_DEVICE);
+
+	dmac_clean_range_no_dsb(skb->data, skb->data + 256);
+	paddr = dma_map_single_attrs(dev, skb->data, 256,
+				     DMA_TO_DEVICE, DMA_ATTR_SKIP_CPU_SYNC);
 	if (unlikely(dma_mapping_error(dev, paddr))) {
 		atomic_inc(&ab->soc_stats.tx_err.misc_fail);
 		ath12k_warn(ab, "failed to DMA map data Tx buffer\n");
@@ -564,8 +567,10 @@ ath12k_dp_tx_htt_tx_complete_buf(struct
 	struct ath12k_skb_cb *skb_cb;
 	struct ath12k *ar;
 	struct ieee80211_vif *vif;
+	unsigned long attrs = 0;
 	struct ath12k_vif *ahvif;
 	u8 flags = 0;
+	bool drop_disable = false;
 
 	skb_cb = ATH12K_SKB_CB(msdu);
 	info = IEEE80211_SKB_CB(msdu);
@@ -579,17 +584,25 @@ ath12k_dp_tx_htt_tx_complete_buf(struct
 	if (atomic_dec_and_test(&ar->dp.num_tx_pending))
 		wake_up(&ar->dp.tx_empty_waitq);
 
-	dma_unmap_single(ab->dev, skb_cb->paddr, msdu->len, DMA_TO_DEVICE);
+	flags = skb_cb->flags;
+	drop_disable = (ab->stats_disable && !(flags & ATH12K_SKB_TX_STATUS));
+
+	/* If drop disable case, avoid cpu_sync since we are not passed
+	 * the skb to mac80211
+	 */
+	if (drop_disable)
+		attrs |= DMA_ATTR_SKIP_CPU_SYNC;
+
+	dma_unmap_single_attrs(ab->dev, skb_cb->paddr, msdu->len, DMA_TO_DEVICE, attrs);
+
 	if (unlikely(skb_ext_desc)) {
-		dma_unmap_single(ab->dev, skb_cb->paddr_ext_desc,
-				 skb_ext_desc->len, DMA_TO_DEVICE);
+		dma_unmap_single_attrs(ab->dev, skb_cb->paddr_ext_desc,
+				       skb_ext_desc->len, DMA_TO_DEVICE, attrs);
 		dev_kfree_skb_any(skb_ext_desc);
 	}
 
-	flags = skb_cb->flags;
-
 	/* Free skb here if stats is disabled */
-	if (ab->stats_disable && !(flags & ATH12K_SKB_TX_STATUS)) {
+	if (drop_disable) {
 		if (msdu->destructor) {
 			msdu->wifi_acked_valid = 1;
 			msdu->wifi_acked = ts->acked;
