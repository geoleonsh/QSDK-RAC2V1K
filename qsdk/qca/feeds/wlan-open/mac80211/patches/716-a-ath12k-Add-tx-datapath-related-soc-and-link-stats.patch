From 9e1755c16893db73dbfcfa30c3636ea8d76b701d Mon Sep 17 00:00:00 2001
From: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
Date: Mon, 27 Feb 2023 02:02:52 -0800
Subject: [PATCH 1/2] ath12k: Add tx datapath related soc and link stats

The soc and link related transmit datapath stats helps
understand the different metrics and helps in debug

Signed-off-by: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
Signed-off-by: Sidhanta Sahu <quic_sidhanta@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h     |  12 ++
 drivers/net/wireless/ath/ath12k/debugfs.c  | 217 ++++++++++++++++++++-
 drivers/net/wireless/ath/ath12k/dp.h       |  16 +-
 drivers/net/wireless/ath/ath12k/dp_tx.c    |  53 +++--
 drivers/net/wireless/ath/ath12k/hal_desc.h |   5 +
 drivers/net/wireless/ath/ath12k/mac.c      |   2 +-
 6 files changed, 285 insertions(+), 20 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index 1d3a4f0..e21d360 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -351,6 +351,7 @@ struct ath12k_link_vif {
 	struct ath12k_reg_tpc_power_info reg_tpc_info;
 	u8 vdev_stats_id;
 	struct ath12k_fw_vdev_ol_stats vdev_stats;
+	struct host_link_stats link_stats;
 	u8 nontransmitting_vif_count;
 	bool bcca_zero_sent;
 	bool do_not_send_tmpl;
@@ -405,6 +406,9 @@ struct ath12k_vif {
 	u8 num_vdev_started;
 	struct ath12k_vif_cache cache[IEEE80211_MLD_MAX_NUM_LINKS];
 	u8 last_scan_link;
+#ifdef CPTCFG_ATH12K_DEBUGFS
+	struct dentry *debugfs_linkstats;
+#endif /* CPTCFG_ATH12K_DEBUGFS */
 };
 
 struct ath12k_vif_iter {
@@ -1046,6 +1050,14 @@ struct ath12k_soc_dp_stats {
 	u32 mon_drop_desc;
 	u32 hal_reo_cmd_drain;
 	u32 reo_cmd_cache_error;
+	u32 mcast_enqueued;
+	u32 ucast_enqueued;
+	u32 mcast_reinject;
+	u32 wbm_rel_source[HAL_WBM_REL_SRC_MODULE_MAX];
+	u32 tqm_rel_reason[MAX_TQM_RELEASE_REASON];
+	u32 fw_tx_status[MAX_FW_TX_STATUS];
+	u32 tx_enqueued[MAX_TCL_RING];
+	u32 tx_completed[MAX_TCL_RING];
 	struct ath12k_soc_dp_tx_err_stats tx_err;
 	struct ath12k_dp_ring_bp_stats bp_stats;
 };
diff --git a/drivers/net/wireless/ath/ath12k/debugfs.c b/drivers/net/wireless/ath/ath12k/debugfs.c
index cabb64d..a7b2e8c 100644
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -1489,6 +1489,59 @@ static ssize_t ath12k_debugfs_dump_soc_dp_stats(struct file *file,
 			"\nREO_CMD_CACHE_FLUSH Failure: %u\n",
 			soc_stats->reo_cmd_cache_error);
 
+	len += scnprintf(buf + len, size - len,
+			"\nmcast reinject: %u\n",
+			soc_stats->mcast_reinject);
+
+	len += scnprintf(buf + len, size - len,
+			"\nwbm_rel_source: 0:%u 1:%u 2:%u 3:%u 4:%u\n",
+			soc_stats->wbm_rel_source[0],
+			soc_stats->wbm_rel_source[1],
+			soc_stats->wbm_rel_source[2],
+			soc_stats->wbm_rel_source[3],
+			soc_stats->wbm_rel_source[4]);
+
+	len += scnprintf(buf + len, size - len,
+			"\ntqm_rel_reason: 0:%u 1:%u 2:%u 3:%u 4:%u 5:%u 6:%u 7:%u 8:%u 9:%u 10:%u 11:%u 12:%u 13:%u\n",
+			soc_stats->tqm_rel_reason[0],
+			soc_stats->tqm_rel_reason[1],
+			soc_stats->tqm_rel_reason[2],
+			soc_stats->tqm_rel_reason[3],
+			soc_stats->tqm_rel_reason[4],
+			soc_stats->tqm_rel_reason[5],
+			soc_stats->tqm_rel_reason[6],
+			soc_stats->tqm_rel_reason[7],
+			soc_stats->tqm_rel_reason[8],
+			soc_stats->tqm_rel_reason[9],
+			soc_stats->tqm_rel_reason[10],
+			soc_stats->tqm_rel_reason[11],
+			soc_stats->tqm_rel_reason[12],
+			soc_stats->tqm_rel_reason[13]);
+
+	len += scnprintf(buf + len, size - len,
+			"\nfw_tx_status: 0:%u 1:%u 2:%u 3:%u 4:%u 5:%u 6:%u\n",
+			soc_stats->fw_tx_status[0],
+			soc_stats->fw_tx_status[1],
+			soc_stats->fw_tx_status[2],
+			soc_stats->fw_tx_status[3],
+			soc_stats->fw_tx_status[4],
+			soc_stats->fw_tx_status[5],
+			soc_stats->fw_tx_status[6]);
+
+	len += scnprintf(buf + len, size - len,
+			"\ntx_enqueued: 0:%u 1:%u 2:%u 3:%u\n",
+			soc_stats->tx_enqueued[0],
+			soc_stats->tx_enqueued[1],
+			soc_stats->tx_enqueued[2],
+			soc_stats->tx_enqueued[3]);
+
+	len += scnprintf(buf + len, size - len,
+			"\ntx_completed: 0:%u 1:%u 2:%u 3:%u\n",
+			soc_stats->tx_completed[0],
+			soc_stats->tx_completed[1],
+			soc_stats->tx_completed[2],
+			soc_stats->tx_completed[3]);
+
 	len += ath12k_debugfs_dump_soc_ring_bp_stats(ab, buf + len, size - len);
 
 	if (len > size)
@@ -1499,8 +1552,32 @@ static ssize_t ath12k_debugfs_dump_soc_dp_stats(struct file *file,
 	return retval;
 }
 
+static ssize_t
+ath12k_debugfs_write_soc_dp_stats(struct file *file,
+				  const char __user *user_buf,
+				  size_t count, loff_t *ppos)
+{
+	struct ath12k_base *ab = file->private_data;
+	struct ath12k_soc_dp_stats *soc_stats = &ab->soc_stats;
+	char buf[20] = {0};
+	int ret;
+
+	if (count > 20)
+		return -EFAULT;
+
+	ret = copy_from_user(buf, user_buf, count);
+	if (ret)
+		return -EFAULT;
+
+	if (strstr(buf, "reset"))
+		memset(soc_stats, 0, sizeof(struct ath12k_soc_dp_stats));
+
+	return count;
+}
+
 static const struct file_operations fops_soc_dp_stats = {
 	.read = ath12k_debugfs_dump_soc_dp_stats,
+	.write = ath12k_debugfs_write_soc_dp_stats,
 	.open = simple_open,
 	.owner = THIS_MODULE,
 	.llseek = default_llseek,
@@ -4058,6 +4135,105 @@ static const struct file_operations ath12k_fops_twt_resume_dialog = {
 	.open = simple_open
 };
 
+static int ath12k_open_link_stats(struct inode *inode, struct file *file)
+{
+	struct ath12k_vif *ahvif = inode->i_private;
+	struct ath12k_hw *ah = ahvif->ah;
+	struct host_link_stats *linkstat = NULL;
+	size_t len = 0, buf_len = PAGE_SIZE * 2;
+	char *buf;
+	int link_id;
+
+	if (!ahvif)
+		return -EINVAL;
+
+	buf = kzalloc(buf_len, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	file->private_data = buf;
+
+	mutex_lock(&ah->conf_mutex);
+	for_each_set_bit(link_id, &ahvif->links_map,
+			 IEEE80211_MLD_MAX_NUM_LINKS) {
+		if (ahvif->link[link_id])
+			linkstat = &ahvif->link[link_id]->link_stats;
+		else
+			break;
+
+		len += scnprintf(buf + len, buf_len - len,
+				 "link[%d] tx_enqueued  = %d\n",
+				 link_id, linkstat->tx_enqueued);
+		len += scnprintf(buf + len, buf_len - len,
+				 "link[%d] tx_completed = %d\n",
+				 link_id, linkstat->tx_completed);
+		len += scnprintf(buf + len, buf_len - len,
+				 "link[%d] tx_bcast_mcast = %d\n",
+				 link_id, linkstat->tx_bcast_mcast);
+		len += scnprintf(buf + len, buf_len - len,
+				 "link[%d] tx_dropped = %d\n",
+				 link_id, linkstat->tx_dropped);
+		len += scnprintf(buf + len, buf_len - len,
+				"link[%d] tx_encap_type = 0:%d 1:%d 2:%d 3:%d\n",
+				link_id, linkstat->tx_encap_type[0],
+				linkstat->tx_encap_type[1],
+				linkstat->tx_encap_type[2],
+				linkstat->tx_encap_type[3]);
+		len += scnprintf(buf + len, buf_len - len,
+				"link[%d] tx_encrypt_type = 0:%d 1:%d 2:%d " \
+				"3:%d 4:%d 5:%d 6:%d 7:%d 8:%d 9:%d 10:%d 11:%d\n",
+				link_id, linkstat->tx_encrypt_type[0],
+				linkstat->tx_encrypt_type[1],
+				linkstat->tx_encrypt_type[2],
+				linkstat->tx_encrypt_type[3],
+				linkstat->tx_encrypt_type[4],
+				linkstat->tx_encrypt_type[5],
+				linkstat->tx_encrypt_type[6],
+				linkstat->tx_encrypt_type[7],
+				linkstat->tx_encrypt_type[8],
+				linkstat->tx_encrypt_type[9],
+				linkstat->tx_encrypt_type[10],
+				linkstat->tx_encrypt_type[11]);
+		len += scnprintf(buf + len, buf_len - len,
+				"link[%d] tx_desc_type = 0:%d 1:%d\n",
+				link_id, linkstat->tx_desc_type[0],
+				linkstat->tx_desc_type[1]);
+
+		len += scnprintf(buf + len, buf_len - len,
+				"------------------------------------------------------\n");
+	}
+	mutex_unlock(&ah->conf_mutex);
+	return 0;
+}
+
+static int ath12k_release_link_stats(struct inode *inode, struct file *file)
+{
+	char *buf = file->private_data;
+
+	kfree(buf);
+	return 0;
+}
+
+static ssize_t ath12k_read_link_stats(struct file *file,
+						char __user *user_buf,
+						size_t count, loff_t *ppos)
+{
+	const char *buf = file->private_data;
+	size_t len = strlen(buf);
+	int ret;
+
+	ret = simple_read_from_buffer(user_buf, count, ppos, buf, len);
+	return ret;
+}
+
+static const struct file_operations ath12k_fops_link_stats = {
+	.open = ath12k_open_link_stats,
+	.release = ath12k_release_link_stats,
+	.read = ath12k_read_link_stats,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
 int ath12k_debugfs_add_interface(struct ath12k_link_vif *arvif)
 {
 	struct ath12k_vif *ahvif = arvif->ahvif;
@@ -4122,6 +4298,29 @@ int ath12k_debugfs_add_interface(struct ath12k_link_vif *arvif)
 		}
 	}
 
+	if (ahvif->debugfs_linkstats)
+		goto exit;
+
+	ahvif->debugfs_linkstats = debugfs_create_file("link_stats",
+						       0200,
+						       vif->debugfs_dir,
+						       ahvif,
+						       &ath12k_fops_link_stats);
+	if (!ahvif->debugfs_linkstats ||
+	    IS_ERR(ahvif->debugfs_linkstats)) {
+		ath12k_warn(arvif->ar->ab,
+			    "failed to create link_stats file");
+		debugfs_remove_recursive(arvif->debugfs_twt);
+		arvif->debugfs_twt = NULL;
+
+		if (hw->wiphy->num_hw) {
+			debugfs_remove(arvif->debugfs_rtsthreshold);
+			arvif->debugfs_rtsthreshold = NULL;
+		}
+
+		ahvif->debugfs_linkstats = NULL;
+	}
+
 exit:
 	return ret;
 }
@@ -4132,21 +4331,27 @@ void ath12k_debugfs_remove_interface(struct ath12k_link_vif *arvif)
 	struct ieee80211_vif *vif = ahvif->vif;
 	u8 link_id = arvif->link_id;
 
-	if (!arvif->debugfs_twt)
-		return;
-
-	if (!arvif->debugfs_rtsthreshold)
-		return;
-
 	if (!vif || !vif->link_debugfs[link_id]) {
 		arvif->debugfs_twt = NULL;
 		arvif->debugfs_rtsthreshold = NULL;
+		ahvif->debugfs_linkstats = NULL;
 		return;
 	}
 
+	if (ahvif->debugfs_linkstats) {
+		debugfs_remove(ahvif->debugfs_linkstats);
+		ahvif->debugfs_linkstats = NULL;
+	}
+
+	if (!arvif->debugfs_twt)
+		return;
+
 	debugfs_remove_recursive(arvif->debugfs_twt);
 	arvif->debugfs_twt = NULL;
 
+	if (!arvif->debugfs_rtsthreshold)
+		return;
+
 	debugfs_remove(arvif->debugfs_rtsthreshold);
 	arvif->debugfs_rtsthreshold = NULL;
 }
diff --git a/drivers/net/wireless/ath/ath12k/dp.h b/drivers/net/wireless/ath/ath12k/dp.h
index 3409c35..2c23c1f 100644
--- a/drivers/net/wireless/ath/ath12k/dp.h
+++ b/drivers/net/wireless/ath/ath12k/dp.h
@@ -6,7 +6,7 @@
 
 #ifndef ATH12K_DP_H
 #define ATH12K_DP_H
-
+#include "core.h"
 #include "hal_rx.h"
 #include "hw.h"
 
@@ -258,6 +258,10 @@ struct ath12k_pdev_dp {
 /* Invalid TX Bank ID value */
 #define DP_INVALID_BANK_ID -1
 
+#define MAX_TQM_RELEASE_REASON 14
+#define MAX_FW_TX_STATUS 7
+#define MAX_TCL_RING 4
+
 struct ath12k_dp_tx_bank_profile {
 	u8 is_configured;
 	u32 num_users;
@@ -308,6 +312,16 @@ struct ath12k_reo_q_addr_lut {
 	u32 *vaddr;
 };
 
+struct host_link_stats {
+	u32 tx_enqueued;
+	u32 tx_completed;
+	u32 tx_bcast_mcast;
+	u32 tx_dropped;
+	u32 tx_encap_type[HAL_TCL_ENCAP_TYPE_MAX];
+	u32 tx_encrypt_type[HAL_ENCRYPT_TYPE_MAX];
+	u32 tx_desc_type[HAL_TCL_DESC_TYPE_MAX];
+};
+
 struct ath12k_dp {
 	struct ath12k_base *ab;
 	u8 num_bank_profiles;
diff --git a/drivers/net/wireless/ath/ath12k/dp_tx.c b/drivers/net/wireless/ath/ath12k/dp_tx.c
index e150831..6628e5e 100644
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -412,6 +412,10 @@ tcl_ring_sel:
 		goto fail_unmap_dma_ext_desc;
 	}
 
+	ab->soc_stats.tx_enqueued[ti.ring_id]++;
+	arvif->link_stats.tx_encap_type[ti.encap_type]++;
+	arvif->link_stats.tx_encrypt_type[ti.encrypt_type]++;
+	arvif->link_stats.tx_desc_type[ti.type]++;
 	ath12k_hal_tx_cmd_desc_setup(ab, hal_tcl_desc, &ti);
 
 	ath12k_hal_srng_access_end(ab, tcl_ring);
@@ -420,7 +424,7 @@ tcl_ring_sel:
 
 	ath12k_dbg_dump(ab, ATH12K_DBG_DP_TX, NULL, "dp tx msdu: ",
 			skb->data, skb->len);
-
+	arvif->link_stats.tx_enqueued++;
 	atomic_inc(&ar->dp.num_tx_pending);
 
 	return 0;
@@ -440,6 +444,7 @@ fail_remove_tx_buf:
 	if (ti.pkt_offset)
 		skb_pull(skb, ti.pkt_offset);
 
+	arvif->link_stats.tx_dropped++;
 	if (tcl_ring_retry)
 		goto tcl_ring_sel;
 
@@ -483,12 +488,14 @@ ath12k_dp_tx_htt_tx_complete_buf(struct ath12k_base *ab,
 	struct ath12k_skb_cb *skb_cb;
 	struct ath12k *ar;
 	struct ieee80211_vif *vif;
+	struct ath12k_vif *ahvif;
 	u8 flags = 0;
 
 	skb_cb = ATH12K_SKB_CB(msdu);
 	info = IEEE80211_SKB_CB(msdu);
 
 	ar = skb_cb->ar;
+	ab->soc_stats.tx_completed[tx_ring->tcl_data_ring_id]++;
 
 	if (atomic_dec_and_test(&ar->dp.num_tx_pending))
 		wake_up(&ar->dp.tx_empty_waitq);
@@ -522,6 +529,14 @@ ath12k_dp_tx_htt_tx_complete_buf(struct ath12k_base *ab,
 	}
 
 	vif = skb_cb->vif;
+	ahvif = (void *)vif->drv_priv;
+	if (ahvif->links_map & BIT(skb_cb->link_id))
+		ahvif->link[skb_cb->link_id]->link_stats.tx_completed++;
+	else
+		ath12k_warn(ab,
+			    "invalid linkid 0x%X in htt tx complete buf linkmap 0x%X\n",
+			    skb_cb->link_id,
+			    ahvif->links_map);
 
 	memset(&info->status, 0, sizeof(info->status));
 
@@ -551,18 +566,20 @@ ath12k_dp_tx_process_htt_tx_complete(struct ath12k_base *ab,
 {
 	struct htt_tx_wbm_completion *status_desc;
 	struct ath12k_dp_htt_wbm_tx_status ts = {0};
-	enum hal_wbm_htt_tx_comp_status wbm_status;
+	int htt_status;
 
 	status_desc = desc + HTT_TX_WBM_COMP_STATUS_OFFSET;
 
-	wbm_status = u32_get_bits(status_desc->info0,
+	htt_status = u32_get_bits(status_desc->info0,
 				  HTT_TX_WBM_COMP_INFO0_STATUS);
 
-	switch (wbm_status) {
-	case HAL_WBM_REL_HTT_TX_COMP_STATUS_OK:
+	ab->soc_stats.fw_tx_status[htt_status]++;
+
+	switch (htt_status) {
 	case HAL_WBM_REL_HTT_TX_COMP_STATUS_DROP:
 	case HAL_WBM_REL_HTT_TX_COMP_STATUS_TTL:
-		ts.acked = (wbm_status == HAL_WBM_REL_HTT_TX_COMP_STATUS_OK);
+	case HAL_WBM_REL_HTT_TX_COMP_STATUS_OK:
+		ts.acked = (htt_status == HAL_WBM_REL_HTT_TX_COMP_STATUS_OK);
 		ts.ack_rssi = u32_get_bits(status_desc->info2,
 					   HTT_TX_WBM_COMP_INFO2_ACK_RSSI);
 		ath12k_dp_tx_htt_tx_complete_buf(ab, msdu, tx_ring, &ts, skb_ext_desc);
@@ -577,7 +594,7 @@ ath12k_dp_tx_process_htt_tx_complete(struct ath12k_base *ab,
 		 */
 		break;
 	default:
-		ath12k_warn(ab, "Unknown htt tx status %d\n", wbm_status);
+		ath12k_warn(ab, "Unknown htt tx status %d\n", htt_status);
 		break;
 	}
 }
@@ -743,10 +760,9 @@ static void ath12k_dp_tx_complete_msdu(struct ath12k *ar,
 				       struct sk_buff *msdu,
 				       struct hal_wbm_release_ring *tx_status,
 				       enum hal_wbm_rel_src_module buf_rel_source,
-				       struct sk_buff *skb_ext_desc)
+				       struct sk_buff *skb_ext_desc, int ring)
 {
 	struct ieee80211_tx_status status = { 0 };
-
 	struct ath12k_base *ab = ar->ab;
 	struct ieee80211_tx_info *info;
 	struct ath12k_skb_cb *skb_cb;
@@ -757,6 +773,7 @@ static void ath12k_dp_tx_complete_msdu(struct ath12k *ar,
 	enum hal_wbm_tqm_rel_reason rel_status;
 	enum hal_wbm_htt_tx_comp_status wbm_status;
 	struct ieee80211_vif *vif;
+	struct ath12k_vif *ahvif;
 	u8 flags = 0;
 
 
@@ -766,7 +783,7 @@ static void ath12k_dp_tx_complete_msdu(struct ath12k *ar,
 	}
 
 	skb_cb = ATH12K_SKB_CB(msdu);
-
+	ab->soc_stats.tx_completed[ring]++;
 	dma_unmap_single_attrs(ab->dev, skb_cb->paddr, msdu->len, DMA_TO_DEVICE,
 			     DMA_ATTR_SKIP_CPU_SYNC);
 	if (unlikely(skb_cb->paddr_ext_desc)) {
@@ -812,6 +829,14 @@ static void ath12k_dp_tx_complete_msdu(struct ath12k *ar,
 			       tx_status->info0);
 
 	vif = skb_cb->vif;
+	ahvif = (void *)vif->drv_priv;
+	if (ahvif->links_map & BIT(skb_cb->link_id))
+		ahvif->link[skb_cb->link_id]->link_stats.tx_completed++;
+	else
+		ath12k_warn(ar->ab,
+			    "invalid linkid 0x%X in tx complete msdu linkmap 0x%X\n",
+			    skb_cb->link_id,
+			    ahvif->links_map);
 
 	info = IEEE80211_SKB_CB(msdu);
 	memset(&info->status, 0, sizeof(info->status));
@@ -985,11 +1010,13 @@ void ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id)
 		ath12k_dp_tx_release_txbuf(dp, tx_desc, tx_desc->pool_id);
 		buf_rel_source = FIELD_GET(HAL_WBM_RELEASE_INFO0_REL_SRC_MODULE,
 					   tx_status->info0);
+		ab->soc_stats.wbm_rel_source[buf_rel_source]++;
 		if (unlikely(buf_rel_source == HAL_WBM_REL_SRC_MODULE_FW)) {
 			ath12k_dp_tx_process_htt_tx_complete(ab,
 							     (void *)tx_status,
 							     mac_id, msdu,
-							     tx_ring, skb_ext_desc);
+							     tx_ring,
+							     skb_ext_desc);
 			continue;
 		}
 
@@ -998,7 +1025,9 @@ void ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id)
 		if (atomic_dec_and_test(&ar->dp.num_tx_pending))
 			wake_up(&ar->dp.tx_empty_waitq);
 
-		ath12k_dp_tx_complete_msdu(ar, msdu, tx_status, buf_rel_source, skb_ext_desc);
+		ath12k_dp_tx_complete_msdu(ar, msdu, tx_status,
+					   buf_rel_source, skb_ext_desc,
+					   tx_ring->tcl_data_ring_id);
 	}
 }
 
diff --git a/drivers/net/wireless/ath/ath12k/hal_desc.h b/drivers/net/wireless/ath/ath12k/hal_desc.h
index fc02e06..21ea8fc 100644
--- a/drivers/net/wireless/ath/ath12k/hal_desc.h
+++ b/drivers/net/wireless/ath/ath12k/hal_desc.h
@@ -1251,6 +1251,7 @@ struct hal_reo_flush_cache {
 
 #define HAL_TCL_DATA_CMD_INFO5_RING_ID			GENMASK(27, 20)
 #define HAL_TCL_DATA_CMD_INFO5_LOOPING_COUNT		GENMASK(31, 28)
+#define HAL_ENCRYPT_TYPE_MAX 12
 
 enum hal_encrypt_type {
 	HAL_ENCRYPT_TYPE_WEP_40,
@@ -1272,11 +1273,13 @@ enum hal_tcl_encap_type {
 	HAL_TCL_ENCAP_TYPE_NATIVE_WIFI,
 	HAL_TCL_ENCAP_TYPE_ETHERNET,
 	HAL_TCL_ENCAP_TYPE_802_3 = 3,
+	HAL_TCL_ENCAP_TYPE_MAX
 };
 
 enum hal_tcl_desc_type {
 	HAL_TCL_DESC_TYPE_BUFFER,
 	HAL_TCL_DESC_TYPE_EXT_DESC,
+	HAL_TCL_DESC_TYPE_MAX,
 };
 
 enum hal_wbm_htt_tx_comp_status {
@@ -1286,6 +1289,7 @@ enum hal_wbm_htt_tx_comp_status {
 	HAL_WBM_REL_HTT_TX_COMP_STATUS_REINJ,
 	HAL_WBM_REL_HTT_TX_COMP_STATUS_INSPECT,
 	HAL_WBM_REL_HTT_TX_COMP_STATUS_MEC_NOTIFY,
+	HAL_WBM_REL_HTT_TX_COMP_STATUS_VDEVID_MISMATCH,
 	HAL_WBM_REL_HTT_TX_COMP_STATUS_MAX,
 };
 
@@ -1794,6 +1798,7 @@ enum hal_wbm_rel_src_module {
 	HAL_WBM_REL_SRC_MODULE_REO,
 	HAL_WBM_REL_SRC_MODULE_FW,
 	HAL_WBM_REL_SRC_MODULE_SW,
+	HAL_WBM_REL_SRC_MODULE_MAX,
 };
 
 enum hal_wbm_rel_desc_type {
diff --git a/drivers/net/wireless/ath/ath12k/mac.c b/drivers/net/wireless/ath/ath12k/mac.c
index ed5c470..f8652df 100644
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -8498,6 +8498,7 @@ static void ath12k_mac_op_tx(struct ieee80211_hw *hw,
 	}
 
 	arvif = ahvif->link[link];
+	skb_cb->link_id = link;
 
 	if (!arvif || !arvif->ar) {
 		ieee80211_free_txskb(hw, skb);
@@ -8522,7 +8523,6 @@ static void ath12k_mac_op_tx(struct ieee80211_hw *hw,
 	} else if (ieee80211_is_mgmt(hdr->frame_control)) {
 		frm_type = FIELD_GET(IEEE80211_FCTL_STYPE, hdr->frame_control);
 		is_prb_rsp = ieee80211_is_probe_resp(hdr->frame_control);
-		skb_cb->link_id = link;
 		ret = ath12k_mac_mgmt_tx(ar, skb, is_prb_rsp);
 		if (ret) {
 			if (ret != -EBUSY)
-- 
2.17.1

