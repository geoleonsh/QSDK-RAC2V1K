From 4eac23e7b738f462d7c1b208118dbb3bca2beebe Mon Sep 17 00:00:00 2001
From: Nagarajan Maran <quic_nmaran@quicinc.com>
Date: Mon, 7 Nov 2022 02:28:19 +0530
Subject: [PATCH] ath12k: radar-bitmap generation durin DFS radar detection

Signed-off-by: Nagarajan Maran <quic_nmaran@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 27 ++++++++++++
 drivers/net/wireless/ath/ath12k/mac.h |  1 +
 drivers/net/wireless/ath/ath12k/wmi.c | 59 ++++++++++++++++++++++++++-
 3 files changed, 86 insertions(+), 1 deletion(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -13307,3 +13307,30 @@ void ath12k_mac_destroy(struct ath12k_hw
 		ag->ah[i] = NULL;
 	}
 }
+
+u16 ath12k_calculate_subchannel_count(enum nl80211_chan_width width) {
+	u16 width_num = 0;
+
+	switch (width) {
+	case NL80211_CHAN_WIDTH_20_NOHT:
+	case NL80211_CHAN_WIDTH_20:
+		width_num = 20;
+		break;
+	case NL80211_CHAN_WIDTH_40:
+		width_num = 40;
+		break;
+	case NL80211_CHAN_WIDTH_80:
+	case NL80211_CHAN_WIDTH_80P80:
+		width_num = 80;
+		break;
+	case NL80211_CHAN_WIDTH_160:
+		width_num = 160;
+		break;
+	case NL80211_CHAN_WIDTH_320:
+		width_num = 320;
+		break;
+	default:
+		break;
+	}
+	return width_num/20;
+}
--- a/drivers/net/wireless/ath/ath12k/wmi.c
+++ b/drivers/net/wireless/ath/ath12k/wmi.c
@@ -8085,6 +8085,71 @@ ath12k_wmi_pdev_csa_switch_count_status_
 	kfree(tb);
 }
 
+static void ath12k_dfs_calculate_subchannels(struct ath12k_base *ab, const struct wmi_pdev_radar_ev *radar)
+{
+	struct ath12k *ar;
+	u32 center_freq;
+	enum nl80211_chan_width width;
+	u32 radar_found_freq, sub_channel_cfreq, radar_found_freq_low, radar_found_freq_high;
+	u16 radar_bitmap = 0, subchannel_count;
+	int i;
+	struct cfg80211_chan_def *chandef;
+	struct ath12k_mac_any_chandef_arg arg;
+
+	ar = ath12k_mac_get_ar_by_pdev_id(ab, radar->pdev_id);
+
+	arg.ar = ar;
+	arg.def = NULL;
+	ieee80211_iter_chan_contexts_atomic(ar->ah->hw, ath12k_mac_get_any_chandef_iter,
+					    &arg);
+	chandef = arg.def;
+	if (!chandef) {
+		ath12k_err(ab, "Channel information not available\n");
+		return;
+	}
+
+	ath12k_dbg(ab, ATH12K_DBG_WMI, " Operating freq:%u center_freq1:%u, center_freq2:%u",
+		   chandef->chan->center_freq, chandef->center_freq1,chandef->center_freq2);
+
+	width = chandef->width;
+	subchannel_count = ath12k_calculate_subchannel_count(width);
+	if (!subchannel_count)
+	{
+		ath12k_warn(ab, "invalid subchannel count for bandwith=%d\n",width);
+		goto mark_radar;
+	}
+
+	center_freq = chandef->center_freq1;
+
+	radar_found_freq = center_freq + radar->freq_offset;
+
+	radar_found_freq_high = radar_found_freq_low = radar_found_freq;
+
+	if (radar->is_chirp) {
+		radar_found_freq_high = radar_found_freq_high + 10;
+		radar_found_freq_low  = radar_found_freq_low  - 10;
+	}
+
+	sub_channel_cfreq = center_freq - ((subchannel_count-1) * 10);
+
+	for(i=0; i < subchannel_count; i++) {
+		if (sub_channel_cfreq >= 5260 &&
+		    ((radar_found_freq_low >= sub_channel_cfreq-10 &&
+		    radar_found_freq_low <= sub_channel_cfreq+10) ||
+		    (radar_found_freq_high >= sub_channel_cfreq-10 &&
+		    radar_found_freq_high <= sub_channel_cfreq+10)))
+			radar_bitmap |= 1 << i;
+
+		sub_channel_cfreq += 20;
+	}
+
+	ath12k_dbg(ab, ATH12K_DBG_WMI, "radar_bitmap:%0x and subchannel_count:%d",
+		   radar_bitmap,subchannel_count);
+
+mark_radar:
+	ieee80211_radar_detected_bitmap(ar->ah->hw,radar_bitmap);
+}
+
 static void
 ath12k_wmi_pdev_dfs_radar_detected_event(struct ath12k_base *ab, struct sk_buff *skb)
 {
@@ -8128,7 +8193,7 @@ ath12k_wmi_pdev_dfs_radar_detected_event
 	if (ar->dfs_block_radar_events)
 		ath12k_info(ab, "DFS Radar detected, but ignored as requested\n");
 	else
-		ieee80211_radar_detected(ar->ah->hw);
+		ath12k_dfs_calculate_subchannels(ab, ev);
 
 exit:
 	kfree(tb);
--- a/drivers/net/wireless/ath/ath12k/mac.h
+++ b/drivers/net/wireless/ath/ath12k/mac.h
@@ -173,4 +173,5 @@ int ath12k_mac_mlo_setup(struct ath12k_h
 int ath12k_mac_mlo_ready(struct ath12k_hw *ah);
 int ath12k_mac_mlo_teardown(struct ath12k_hw *ah);
 bool ath12k_mac_is_ml_arvif(struct ath12k_link_vif *arvif);
+u16 ath12k_calculate_subchannel_count(enum nl80211_chan_width width);
 #endif
