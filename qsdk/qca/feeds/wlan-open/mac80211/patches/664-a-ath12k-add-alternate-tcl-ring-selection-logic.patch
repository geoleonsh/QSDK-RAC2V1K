From b2651ffcc40450710e4a47d1ff42432b6d2ba7f4 Mon Sep 17 00:00:00 2001
From: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
Date: Wed, 10 Aug 2022 11:01:09 -0700
Subject: [PATCH 01/12] ath12k: add alternate tcl ring selection logic

When TX buffers are not available on one TCL ring, chose an
altrernate tcl ring for transmitting the packet and drop the
packet when tx buffers are not available in all the 4 TCL rings.

Signed-off-by: Pradeep Kumar Chitrapu <quic_pradeepc@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp_tx.c | 37 +++++++++++++------------
 1 file changed, 20 insertions(+), 17 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/dp_tx.c b/drivers/net/wireless/ath/ath12k/dp_tx.c
index 8d36b8d9e1ab..38fdb2220ff2 100644
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -76,31 +76,31 @@ enum hal_encrypt_type ath12k_dp_tx_get_encrypt_type(u32 cipher)
 
 static void ath12k_dp_tx_release_txbuf(struct ath12k_dp *dp,
 				       struct ath12k_tx_desc_info *tx_desc,
-				       u8 pool_id)
+				       u8 ring_id)
 {
-	spin_lock_bh(&dp->tx_desc_lock[pool_id]);
+	spin_lock_bh(&dp->tx_desc_lock[ring_id]);
 	tx_desc->skb = NULL;
-	list_move_tail(&tx_desc->list, &dp->tx_desc_free_list[pool_id]);
-	spin_unlock_bh(&dp->tx_desc_lock[pool_id]);
+	list_move_tail(&tx_desc->list, &dp->tx_desc_free_list[ring_id]);
+	spin_unlock_bh(&dp->tx_desc_lock[ring_id]);
 }
 
 static struct ath12k_tx_desc_info *ath12k_dp_tx_assign_buffer(struct ath12k_dp *dp,
-							      u8 pool_id)
+							      u8 ring_id)
 {
 	struct ath12k_tx_desc_info *desc = NULL;
 
-	spin_lock_bh(&dp->tx_desc_lock[pool_id]);
-	desc = list_first_entry_or_null(&dp->tx_desc_free_list[pool_id],
+	spin_lock_bh(&dp->tx_desc_lock[ring_id]);
+	desc = list_first_entry_or_null(&dp->tx_desc_free_list[ring_id],
 					struct ath12k_tx_desc_info,
 					list);
 	if (!desc) {
-		spin_unlock_bh(&dp->tx_desc_lock[pool_id]);
+		spin_unlock_bh(&dp->tx_desc_lock[ring_id]);
 		ath12k_warn(dp->ab, "failed to allocate data Tx buffer\n");
 		return NULL;
 	}
 
-	list_move_tail(&desc->list, &dp->tx_desc_used_list[pool_id]);
-	spin_unlock_bh(&dp->tx_desc_lock[pool_id]);
+	list_move_tail(&desc->list, &dp->tx_desc_used_list[ring_id]);
+	spin_unlock_bh(&dp->tx_desc_lock[ring_id]);
 
 	return desc;
 }
@@ -136,7 +136,6 @@ int ath12k_dp_tx(struct ath12k *ar, struct ath12k_vif *arvif,
 	struct ieee80211_hdr *hdr = (void *)skb->data;
 	struct dp_tx_ring *tx_ring;
 	void *hal_tcl_desc;
-	u8 pool_id;
 	u8 hal_ring_id;
 	int ret;
 	u8 ring_selector = 0, ring_map = 0;
@@ -150,8 +149,6 @@ int ath12k_dp_tx(struct ath12k *ar, struct ath12k_vif *arvif,
 	    !ieee80211_is_data(hdr->frame_control))
 		return -ENOTSUPP;
 
-	pool_id = skb_get_queue_mapping(skb) & (ATH12K_HW_MAX_QUEUES - 1);
-
 	/* Let the default ring selection be based on current processor
 	 * number, where one of the 3 tcl rings are selected based on
 	 * the smp_processor_id(). In case that ring
@@ -170,9 +167,15 @@ tcl_ring_sel:
 
 	tx_ring = &dp->tx_ring[ti.ring_id];
 
-	tx_desc = ath12k_dp_tx_assign_buffer(dp, pool_id);
-	if (!tx_desc)
-		return -ENOMEM;
+	tx_desc = ath12k_dp_tx_assign_buffer(dp, ti.ring_id);
+	if (!tx_desc) {
+		if (ring_map == (BIT(DP_TCL_NUM_RING_MAX) - 1))
+			return -ENOSPC;
+
+		/* Check if the next ring is available */
+		ring_selector++;
+		goto tcl_ring_sel;
+	}
 
 	ti.bank_id = arvif->bank_id;
 
@@ -344,7 +347,7 @@ fail_unmap_dma:
 			 sizeof(struct hal_tx_msdu_ext_desc), DMA_TO_DEVICE);
 
 fail_remove_tx_buf:
-	ath12k_dp_tx_release_txbuf(dp, tx_desc, pool_id);
+	ath12k_dp_tx_release_txbuf(dp, tx_desc, ti.ring_id);
 	if (tcl_ring_retry)
 		goto tcl_ring_sel;
 
-- 
2.17.1

