From 4324b3cc7f27371428c233af74a052cd027f661f Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Fri, 4 Nov 2022 17:12:09 +0530
Subject: [PATCH] wifi: ath12k: Add partner Rxdma buffer processing in DP Rx
 path

In MLO enabled setup, we can expect partner SoC Rxdma buffers enqueued
to primary UMAC REO ring. So we need to get the partner radio information through
source link information and use for sw cookie conversion if hw conversion fails.

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h  |  1 +
 drivers/net/wireless/ath/ath12k/dp_rx.c | 72 ++++++++++++++++---------
 drivers/net/wireless/ath/ath12k/mac.c   | 18 +++++++
 3 files changed, 66 insertions(+), 25 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -1033,6 +1033,7 @@ struct ath12k_hw_group {
 	unsigned long dev_flags;
 	struct ath12k_hw *ah[ATH12K_GROUP_MAX_RADIO];
 	struct ath12k_base *ab[ATH12K_MAX_SOCS];
+	struct ath12k __rcu *hw_links[ATH12K_GROUP_MAX_RADIO];
 	struct ath12k_mlo_memory mlo_mem;
 	struct mutex mutex_lock;
 };
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -3081,10 +3081,11 @@ static void ath12k_dp_rx_process_receive
 int ath12k_dp_rx_process(struct ath12k_base *ab, int ring_id,
 			 struct napi_struct *napi, int budget)
 {
+	struct ath12k_base *src_ab;
 	struct ath12k_rx_desc_info *desc_info;
 	struct ath12k_dp *dp = &ab->dp;
 	struct dp_rxdma_ring *rx_ring = &dp->rx_refill_buf_ring;
-	int num_buffs_reaped = 0;
+	int i, num_buffs_reaped[ATH12K_MAX_SOCS] = { };
 	struct sk_buff_head msdu_list;
 	struct ath12k_skb_rxcb *rxcb;
 	int total_msdu_reaped = 0;
@@ -3098,6 +3099,7 @@ int ath12k_dp_rx_process(struct ath12k_b
 	struct ath12k_link_sta *arsta = NULL;
 	struct ath12k_peer *peer = NULL;
 	struct ath12k *ar;
+	u8 hw_link_id;
 
 	__skb_queue_head_init(&msdu_list);
 
@@ -3116,17 +3118,39 @@ try_again:
 		cookie = u32_get_bits(desc.buf_addr_info.info1,
 				      BUFFER_ADDR_INFO1_SW_COOKIE);
 
-		mac_id = u32_get_bits(desc.info0,
-				      HAL_REO_DEST_RING_INFO0_SRC_LINK_ID);
-
-		ar = ab->pdevs[mac_id].ar;
+		hw_link_id = u32_get_bits(desc.info0,
+					  HAL_REO_DEST_RING_INFO0_SRC_LINK_ID);
 
 		desc_va = ((u64)desc.buf_va_hi << 32 | desc.buf_va_lo);
 		desc_info = (struct ath12k_rx_desc_info *)((unsigned long)desc_va);
 
+		rcu_read_lock();
+
+		if (hw_link_id < ATH12K_GROUP_MAX_RADIO)
+			ar = rcu_dereference(ab->ag->hw_links[hw_link_id]);
+		else
+			ar = NULL;
+
+		if (!ar) {
+			rcu_read_unlock();
+
+			ab->soc_stats.hal_reo_error[dp->reo_dst_ring[ring_id].ring_id]++;
+			ath12k_warn(ab, "Rx with invalid/inactive hw_link_id %d cookie 0x%x\n", hw_link_id, cookie);
+
+			if (desc_info) {
+				dev_kfree_skb_any(desc_info->skb);
+				desc_info->skb = NULL;
+			}
+			continue;
+		}
+
+		mac_id = ar->pdev_idx;
+		src_ab = ar->ab;
+		rcu_read_unlock();
+
 		/* retry manual desc retrieval */
 		if (!desc_info) {
-			desc_info = ath12k_dp_get_rx_desc(ab, cookie);
+			desc_info = ath12k_dp_get_rx_desc(src_ab, cookie);
 			if (!desc_info) {
 				ath12k_warn(ab, "Rx with invalid buf cookie 0x%x\n", cookie);
 				continue;
@@ -3139,16 +3163,16 @@ try_again:
 		msdu = desc_info->skb;
 		desc_info->skb = NULL;
 
-		spin_lock_bh(&dp->rx_desc_lock);
-		list_move_tail(&desc_info->list, &dp->rx_desc_free_list);
-		spin_unlock_bh(&dp->rx_desc_lock);
+		spin_lock_bh(&src_ab->dp.rx_desc_lock);
+		list_move_tail(&desc_info->list, &src_ab->dp.rx_desc_free_list);
+		spin_unlock_bh(&src_ab->dp.rx_desc_lock);
 
 		rxcb = ATH12K_SKB_RXCB(msdu);
-		dma_unmap_single(ab->dev, rxcb->paddr,
+		dma_unmap_single(src_ab->dev, rxcb->paddr,
 				 msdu->len + skb_tailroom(msdu),
 				 DMA_FROM_DEVICE);
 
-		num_buffs_reaped++;
+		num_buffs_reaped[src_ab->chip_id]++;
 
 		push_reason = u32_get_bits(desc.info0,
 					   HAL_REO_DEST_RING_INFO0_PUSH_REASON);
@@ -3173,13 +3197,13 @@ try_again:
 
 		if (ath12k_debugfs_is_extd_rx_stats_enabled(ar) && rxcb->peer_id) {
 			rcu_read_lock();
-			spin_lock_bh(&ab->base_lock);
-			peer = ath12k_peer_find_by_id(ab, rxcb->peer_id);
+			spin_lock_bh(&src_ab->base_lock);
+			peer = ath12k_peer_find_by_id(src_ab, rxcb->peer_id);
 			if (peer && peer->sta) {
 				ahsta = (struct ath12k_sta *)peer->sta->drv_priv;
 				arsta = &ahsta->deflink;
 			}
-			spin_unlock_bh(&ab->base_lock);
+			spin_unlock_bh(&src_ab->base_lock);
 			if (arsta)
 				atomic_inc(&arsta->drv_rx_pkts.pkts_frm_hw);
 			rcu_read_unlock();
@@ -3216,9 +3240,20 @@ try_again:
 	if (!total_msdu_reaped)
 		goto exit;
 
-	/* TODO: Move to implicit BM? */
-	ath12k_dp_rx_bufs_replenish(ab, rx_ring, num_buffs_reaped,
-				    ab->hw_params->hal_params->rx_buf_rbm, true);
+	for (i = 0; i < ab->ag->num_chip; i++) {
+		if (!num_buffs_reaped[i])
+			continue;
+
+		src_ab = ab->ag->ab[i];
+		if (!src_ab)
+			continue;
+
+		rx_ring = &src_ab->dp.rx_refill_buf_ring;
+
+		/* TODO: Move to implicit BM? */
+		ath12k_dp_rx_bufs_replenish(src_ab, rx_ring, num_buffs_reaped[i],
+					    src_ab->hw_params->hal_params->rx_buf_rbm, true);
+	}
 
 	ath12k_dp_rx_process_received_packets(ab, napi, &msdu_list,
 					      ring_id);
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -12969,8 +12969,17 @@ static int ath12k_mac_setup(struct ath12
 {
 	struct ath12k *ar;
 	struct ath12k_pdev *pdev;
+	 struct ath12k_hw_group *ag = ab->ag;
+	u16 hw_link_id;
 
 	pdev = &ab->pdevs[mac_id];
+	hw_link_id = pdev->hw_link_id;
+
+	if (hw_link_id >= ATH12K_GROUP_MAX_RADIO) {
+		ath12k_err(ab, "HW link id %d is not supported\n", hw_link_id);
+		return -ENOENT;
+	}
+
 	ar = ath12k_mac_get_ar(ah, link_id);
 	if (!ar)
 		return -EINVAL;
@@ -13017,6 +13026,7 @@ static int ath12k_mac_setup(struct ath12
 	clear_bit(MONITOR_VDEV_STARTED, &ar->monitor_flags);
 	ar->monitor_vdev_id = -1;
 	clear_bit(MONITOR_VDEV_CREATED, &ar->monitor_flags);
+	rcu_assign_pointer(ag->hw_links[hw_link_id], ar);
 
 	return 0;
 }
@@ -13131,6 +13141,7 @@ void ath12k_mac_destroy(struct ath12k_hw
 	struct ath12k_pdev *pdev;
 	struct ieee80211_ops *ops;
 	int i, j;
+	u16 hw_link_id;
 
 	if (!ah)
 		return;
@@ -13142,6 +13153,13 @@ void ath12k_mac_destroy(struct ath12k_hw
 
 		for (j = 0; j < ab->num_radios; j++) {
 			pdev = &ab->pdevs[j];
+			hw_link_id = pdev->hw_link_id;
+
+			if (hw_link_id < ATH12K_GROUP_MAX_RADIO) {
+				rcu_assign_pointer(ag->hw_links[hw_link_id], NULL);
+				synchronize_rcu();
+			}
+
 			ar = pdev->ar;
 			if (!ar)
 				continue;
