From 830eb6a14ee7641f3dd5899d67d23f5ecaeef4bd Mon Sep 17 00:00:00 2001
From: Karthik M <quic_karm@quicinc.com>
Date: Fri, 24 Jun 2022 11:33:20 +0530
Subject: [PATCH] cfg80211: Skip punctured channel validation for 5GHz

Avoid channel validation of sub channels that are punctured.
5G 240Mhz channel is 320-80 channel. Avoid validating punctured
80Mhz channel in the 320Mhz bandwidth

Signed-off-by: Ramya Gnanasekar <quic_rgnanase@quicinc.com>
Signed-off-by: Karthik M <quic_karm@quicinc.com>
---
 include/net/cfg80211.h |  2 +-
 net/mac80211/vht.c     |  8 +++---
 net/wireless/chan.c    | 72 ++++++++++++++++++++++++++++++++++++++------------
 net/wireless/reg.c     |  3 ++-
 4 files changed, 63 insertions(+), 22 deletions(-)

--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -4888,7 +4888,7 @@ struct ieee80211_iface_combination {
 	 * @radar_detect_widths:
 	 * bitmap of channel widths supported for radar detection
 	 */
-	u8 radar_detect_widths;
+	u32 radar_detect_widths;
 
 	/**
 	 * @radar_detect_regions:
--- a/net/mac80211/vht.c
+++ b/net/mac80211/vht.c
@@ -339,8 +339,12 @@ ieee80211_sta_cap_rx_bw(struct link_sta_
 		rcu_read_lock();
 		link_conf = rcu_dereference(sdata->vif.link_conf[link_id]);
 
+		/* TODO: 5GHz is reusing the same PHY capability
+		 * to advertise the 320MHz support. Removind band
+		 * specific check for now.
+		 */
 		if (eht_cap->has_eht &&
-		    link_conf->chandef.chan->band == NL80211_BAND_6GHZ) {
+		    link_conf->chandef.chan->band != NL80211_BAND_6GHZ) {
 			info = eht_cap->eht_cap_elem.phy_cap_info[0];
 
 			if (info & IEEE80211_EHT_PHY_CAP0_320MHZ_IN_6GHZ) {
--- a/net/wireless/chan.c
+++ b/net/wireless/chan.c
@@ -15,6 +15,12 @@
 #include "core.h"
 #include "rdev-ops.h"
 
+/* 5GHz 320MHz support */
+#define FIXED_PUNCTURE_PATTERN 0xF000
+#define CENTER_FREQ_5G_240MHZ  5650
+#define DISABLED_SUB_CHAN(freq, start_freq, ru_punct_bitmap) \
+ ((1 << (freq - start_freq)/MHZ_TO_KHZ(20)) & ru_punct_bitmap)
+
 static bool cfg80211_valid_60g_freq(u32 freq)
 {
 	return freq >= 58320 && freq <= 70200;
@@ -627,7 +633,8 @@ static u32 cfg80211_get_end_freq(u32 cen
 
 static int cfg80211_get_chans_dfs_required(struct wiphy *wiphy,
 					    u32 center_freq,
-					    u32 bandwidth)
+					    u32 bandwidth,
+					    u32 ru_punct_bitmap)
 {
 	struct ieee80211_channel *c;
 	u32 freq, start_freq, end_freq;
@@ -636,6 +643,8 @@ static int cfg80211_get_chans_dfs_requir
 	end_freq = cfg80211_get_end_freq(center_freq, bandwidth);
 
 	for (freq = start_freq; freq <= end_freq; freq += MHZ_TO_KHZ(20)) {
+		if (DISABLED_SUB_CHAN(freq, start_freq, ru_punct_bitmap))
+			continue;
 		c = ieee80211_get_channel_khz(wiphy, freq);
 		if (!c)
 			return -EINVAL;
@@ -668,7 +677,7 @@ int cfg80211_chandef_dfs_required(struct
 
 		ret = cfg80211_get_chans_dfs_required(wiphy,
 					ieee80211_chandef_to_khz(chandef),
-					width);
+					width, chandef->ru_punct_bitmap);
 		if (ret < 0)
 			return ret;
 		else if (ret > 0)
@@ -679,7 +688,7 @@ int cfg80211_chandef_dfs_required(struct
 
 		ret = cfg80211_get_chans_dfs_required(wiphy,
 					MHZ_TO_KHZ(chandef->center_freq2),
-					width);
+					width, chandef->ru_punct_bitmap);
 		if (ret < 0)
 			return ret;
 		else if (ret > 0)
@@ -704,9 +713,20 @@ int cfg80211_chandef_dfs_required(struct
 }
 EXPORT_SYMBOL(cfg80211_chandef_dfs_required);
 
+bool cfg80211_valid_240mhz_freq(const struct cfg80211_chan_def *chandef)
+{
+	if (chandef->width == NL80211_CHAN_WIDTH_320 &&
+	    chandef->center_freq1 == CENTER_FREQ_5G_240MHZ &&
+	    ((chandef->ru_punct_bitmap & FIXED_PUNCTURE_PATTERN) == FIXED_PUNCTURE_PATTERN)) {
+		return true;
+	}
+	return false;
+}
+
 static int cfg80211_get_chans_dfs_usable(struct wiphy *wiphy,
 					 u32 center_freq,
-					 u32 bandwidth)
+					 u32 bandwidth,
+					 u32 ru_punct_bitmap)
 {
 	struct ieee80211_channel *c;
 	u32 freq, start_freq, end_freq;
@@ -722,6 +742,8 @@ static int cfg80211_get_chans_dfs_usable
 	 * (require CAC). Allow DFS and non-DFS channel mix.
 	 */
 	for (freq = start_freq; freq <= end_freq; freq += MHZ_TO_KHZ(20)) {
+		if (DISABLED_SUB_CHAN(freq, start_freq, ru_punct_bitmap))
+			continue;
 		c = ieee80211_get_channel_khz(wiphy, freq);
 		if (!c)
 			return -EINVAL;
@@ -756,7 +778,7 @@ bool cfg80211_chandef_dfs_usable(struct
 
 	r1 = cfg80211_get_chans_dfs_usable(wiphy,
 					   MHZ_TO_KHZ(chandef->center_freq1),
-					   width);
+					   width, chandef->ru_punct_bitmap);
 
 	if (r1 < 0)
 		return false;
@@ -766,7 +788,7 @@ bool cfg80211_chandef_dfs_usable(struct
 		WARN_ON(!chandef->center_freq2);
 		r2 = cfg80211_get_chans_dfs_usable(wiphy,
 					MHZ_TO_KHZ(chandef->center_freq2),
-					width);
+					width, chandef->ru_punct_bitmap);
 		if (r2 < 0)
 			return false;
 		break;
@@ -950,7 +972,8 @@ bool cfg80211_any_wiphy_oper_chan(struct
 
 static bool cfg80211_get_chans_dfs_available(struct wiphy *wiphy,
 					     u32 center_freq,
-					     u32 bandwidth)
+					     u32 bandwidth,
+					     u32 ru_punct_bitmap)
 {
 	struct ieee80211_channel *c;
 	u32 freq, start_freq, end_freq;
@@ -968,6 +991,8 @@ static bool cfg80211_get_chans_dfs_avail
 	 * had gone through CAC return false
 	 */
 	for (freq = start_freq; freq <= end_freq; freq += MHZ_TO_KHZ(20)) {
+		if (DISABLED_SUB_CHAN(freq, start_freq, ru_punct_bitmap))
+			continue;
 		c = ieee80211_get_channel_khz(wiphy, freq);
 		if (!c)
 			return false;
@@ -999,7 +1024,7 @@ static bool cfg80211_chandef_dfs_availab
 
 	r = cfg80211_get_chans_dfs_available(wiphy,
 					     MHZ_TO_KHZ(chandef->center_freq1),
-					     width);
+					     width, chandef->ru_punct_bitmap);
 
 	/* If any of channels unavailable for cf1 just return */
 	if (!r)
@@ -1010,7 +1035,7 @@ static bool cfg80211_chandef_dfs_availab
 		WARN_ON(!chandef->center_freq2);
 		r = cfg80211_get_chans_dfs_available(wiphy,
 					MHZ_TO_KHZ(chandef->center_freq2),
-					width);
+					width, chandef->ru_punct_bitmap);
 		break;
 	default:
 		WARN_ON(chandef->center_freq2);
@@ -1022,7 +1047,8 @@ static bool cfg80211_chandef_dfs_availab
 
 static unsigned int cfg80211_get_chans_dfs_cac_time(struct wiphy *wiphy,
 						    u32 center_freq,
-						    u32 bandwidth)
+						    u32 bandwidth,
+						    u32 ru_punct_bitmap)
 {
 	struct ieee80211_channel *c;
 	u32 start_freq, end_freq, freq;
@@ -1032,6 +1058,8 @@ static unsigned int cfg80211_get_chans_d
 	end_freq = cfg80211_get_end_freq(center_freq, bandwidth);
 
 	for (freq = start_freq; freq <= end_freq; freq += MHZ_TO_KHZ(20)) {
+		if (DISABLED_SUB_CHAN(freq, start_freq, ru_punct_bitmap))
+			continue;
 		c = ieee80211_get_channel_khz(wiphy, freq);
 		if (!c)
 			return 0;
@@ -1065,21 +1093,22 @@ cfg80211_chandef_dfs_cac_time(struct wip
 
 	t1 = cfg80211_get_chans_dfs_cac_time(wiphy,
 					     MHZ_TO_KHZ(chandef->center_freq1),
-					     width);
+					     width, chandef->ru_punct_bitmap);
 
 	if (!chandef->center_freq2)
 		return t1;
 
 	t2 = cfg80211_get_chans_dfs_cac_time(wiphy,
 					     MHZ_TO_KHZ(chandef->center_freq2),
-					     width);
+					     width, chandef->ru_punct_bitmap);
 
 	return max(t1, t2);
 }
 
 static bool cfg80211_secondary_chans_ok(struct wiphy *wiphy,
 					u32 center_freq, u32 bandwidth,
-					u32 prohibited_flags)
+					u32 prohibited_flags,
+					u32 ru_punct_bitmap)
 {
 	struct ieee80211_channel *c;
 	u32 freq, start_freq, end_freq;
@@ -1088,6 +1117,8 @@ static bool cfg80211_secondary_chans_ok(
 	end_freq = cfg80211_get_end_freq(center_freq, bandwidth);
 
 	for (freq = start_freq; freq <= end_freq; freq += MHZ_TO_KHZ(20)) {
+		if (DISABLED_SUB_CHAN(freq, start_freq, ru_punct_bitmap))
+			continue;
 		c = ieee80211_get_channel_khz(wiphy, freq);
 		if (!c || c->flags & prohibited_flags)
 			return false;
@@ -1266,10 +1297,14 @@ bool cfg80211_chandef_usable(struct wiph
 		prohibited_flags |= IEEE80211_CHAN_NO_320MHZ;
 		width = 320;
 
-		if (chandef->chan->band != NL80211_BAND_6GHZ)
+		if ((chandef->chan->band != NL80211_BAND_6GHZ) &&
+		    (!cfg80211_valid_240mhz_freq(chandef)))
 			return false;
 
-		sband = wiphy->bands[NL80211_BAND_6GHZ];
+		if (cfg80211_valid_240mhz_freq(chandef))
+			sband = wiphy->bands[NL80211_BAND_5GHZ];
+		else
+			sband = wiphy->bands[NL80211_BAND_6GHZ];
 		if (!sband)
 			return false;
 
@@ -1314,14 +1349,16 @@ bool cfg80211_chandef_usable(struct wiph
 
 	if (!cfg80211_secondary_chans_ok(wiphy,
 					 ieee80211_chandef_to_khz(chandef),
-					 width, prohibited_flags))
+					 width, prohibited_flags,
+					 chandef->ru_punct_bitmap))
 		return false;
 
 	if (!chandef->center_freq2)
 		return true;
 	return cfg80211_secondary_chans_ok(wiphy,
 					   MHZ_TO_KHZ(chandef->center_freq2),
-					   width, prohibited_flags);
+					   width, prohibited_flags,
+					   chandef->ru_punct_bitmap);
 }
 EXPORT_SYMBOL(cfg80211_chandef_usable);
 
--- a/net/wireless/reg.c
+++ b/net/wireless/reg.c
@@ -1790,7 +1790,8 @@ static uint32_t reg_rule_to_chan_bw_flag
 			bw_flags |= IEEE80211_CHAN_NO_80MHZ;
 		if (max_bandwidth_khz < MHZ_TO_KHZ(160))
 			bw_flags |= IEEE80211_CHAN_NO_160MHZ;
-		if (max_bandwidth_khz < MHZ_TO_KHZ(320))
+		if ((max_bandwidth_khz < MHZ_TO_KHZ(320)) &&
+		    (max_bandwidth_khz < MHZ_TO_KHZ(240)))
 			bw_flags |= IEEE80211_CHAN_NO_320MHZ;
 	}
 	return bw_flags;
