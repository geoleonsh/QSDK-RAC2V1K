From 9f49c1672ef95835c530443efc7235e4c0950fc1 Mon Sep 17 00:00:00 2001
From: Sidhanta Sahu <quic_sidhanta@quicinc.com>
Date: Tue, 18 Oct 2022 17:37:31 -0700
Subject: [PATCH] mac80211: Fix Channel Switch Announcement 6 GHz

STA fails to switch to new bandwidth or channel when CSA is trigerred from AP.
STA parses the new channel def using wide channel switch IE and regulatory
power mode in 6GHz. In presence of wide channel switch IE, CSA chandef needs to
be updated.

Signed-off-by: Sidhanta Sahu <quic_sidhanta@quicinc.com>
---
 include/linux/ieee80211.h    |  4 +++
 include/uapi/linux/nl80211.h |  4 +++
 net/mac80211/ieee80211_i.h   |  5 ++++
 net/mac80211/spectmgmt.c     | 46 +++++++++++++++++++++++--------
 net/mac80211/util.c          | 53 ++++++++++++++++++++++++++++++++++++
 net/wireless/util.c          |  1 +
 6 files changed, 102 insertions(+), 11 deletions(-)

--- a/include/linux/ieee80211.h
+++ b/include/linux/ieee80211.h
@@ -1700,6 +1700,10 @@ struct ieee80211_ht_operation {
 	u8 basic_set[16];
 } __packed;
 
+/* Determine primary channel index */
+#define PRIMARY_CENTER_CHAN_IDX(chan, ccfs_idx, bw)	\
+		((chan > ccfs_idx) ? ccfs_idx + (bw/20) : ccfs_idx - (bw/20))
+
 /* for ht_param */
 #define IEEE80211_HT_PARAM_CHA_SEC_OFFSET		0x03
 #define		IEEE80211_HT_PARAM_CHA_SEC_NONE		0x00
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@ -4110,6 +4110,10 @@ enum nl80211_band_attr {
 
 #define NL80211_BAND_ATTR_HT_CAPA NL80211_BAND_ATTR_HT_CAPA
 
+#define NL80211_NUM_POWER_MODES_PER_IFTYPE	3
+#define GET_POWER_MODE_FOR_NON_AP_STA(pwr_mode_usr, pwr_mode_bcn)	\
+	(NL80211_NUM_POWER_MODES_PER_IFTYPE * (1 + pwr_mode_usr) + pwr_mode_bcn)
+
 enum nl80211_regulatory_power_modes {
 	NL80211_REG_AP_LPI,
 	NL80211_REG_AP_SP,
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -2464,6 +2464,11 @@ void ieee80211_chandef_eht_oper(struct i
 				const struct ieee80211_eht_operation *eht_oper,
 				bool support_160, bool support_320,
 				struct cfg80211_chan_def *chandef);
+struct ieee80211_channel
+*ieee80211_get_channel_6ghz_pwr_mode(const struct ieee80211_sub_if_data *sdata,
+				     const struct ieee80211_he_operation *he_oper,
+				     const int new_chan_idx);
+
 bool ieee80211_chandef_he_6ghz_oper(struct ieee80211_sub_if_data *sdata,
 				    const struct ieee80211_he_operation *he_oper,
 				    const struct ieee80211_eht_operation *eht_oper,
--- a/net/mac80211/spectmgmt.c
+++ b/net/mac80211/spectmgmt.c
@@ -40,7 +40,7 @@ int ieee80211_parse_ch_switch_ie(struct
 	struct ieee80211_eht_operation eht_oper;
 	struct ieee80211_eht_operation_info eht_oper_info;
 	int secondary_channel_offset = -1;
-	u8 new_seg1, new_chan_width;
+	u8 new_seg0, new_seg1, new_chan_width;
 
 	memset(csa_ie, 0, sizeof(*csa_ie));
 
@@ -89,8 +89,17 @@ int ieee80211_parse_ch_switch_ie(struct
 				elems->mesh_chansw_params_ie->mesh_reason);
 	}
 
-	new_freq = ieee80211_channel_to_frequency(new_chan_no, new_band);
-	new_chan = ieee80211_get_channel(sdata->local->hw.wiphy, new_freq);
+	if (new_band == NL80211_BAND_6GHZ) {
+		new_chan = ieee80211_get_channel_6ghz_pwr_mode(sdata,
+							elems->he_operation,
+							new_chan_no);
+	} else {
+		new_freq = ieee80211_channel_to_frequency(new_chan_no,
+							  new_band);
+		new_chan = ieee80211_get_channel(sdata->local->hw.wiphy,
+						 new_freq);
+	}
+
 	if (!new_chan || new_chan->flags & IEEE80211_CHAN_DISABLED) {
 		sdata_info(sdata,
 			   "BSS %pM switches to unsupported channel (%d MHz), disconnecting\n",
@@ -140,13 +149,13 @@ int ieee80211_parse_ch_switch_ie(struct
 	}
 
 	if (wide_bw_chansw_ie) {
+		new_seg0 = wide_bw_chansw_ie->new_center_freq_seg0;
 		new_seg1 = wide_bw_chansw_ie->new_center_freq_seg1;
 		new_chan_width = wide_bw_chansw_ie->new_channel_width;
-		if (current_band == NL80211_BAND_6GHZ &&
-		    new_chan_width == IEEE80211_EHT_OPER_CHAN_WIDTH_320MHZ) {
+		if (new_band == NL80211_BAND_6GHZ) {
 			he_6ghz_oper.primary = new_chan_no;
 			he_6ghz_oper.control = new_chan_width;
-			he_6ghz_oper.ccfs0 = wide_bw_chansw_ie->new_center_freq_seg0;
+			he_6ghz_oper.ccfs0 = new_seg0;
 			he_6ghz_oper.ccfs1 = new_seg1;
 
 			he_oper.he_oper_params = u32_encode_bits(1,
@@ -156,11 +165,26 @@ int ieee80211_parse_ch_switch_ie(struct
 			he_oper.optional[2] = he_6ghz_oper.ccfs0;
 			he_oper.optional[3] = he_6ghz_oper.ccfs1;
 
-			eht_oper_info.control = (eht_oper.params &
-						 IEEE80211_EHT_OPER_CHAN_WIDTH) |
-						 new_chan_width;
-			eht_oper_info.ccfs0 = wide_bw_chansw_ie->new_center_freq_seg0;
-			eht_oper_info.ccfs1 = wide_bw_chansw_ie->new_center_freq_seg1;
+			eht_oper.params |= IEEE80211_EHT_OPER_INFO_PRESENT;
+			eht_oper_info.control = (new_chan_width &
+						 IEEE80211_EHT_OPER_CHAN_WIDTH);
+			eht_oper_info.ccfs0 = new_seg0;
+			eht_oper_info.ccfs1 = new_seg1;
+
+			if (new_chan_width == IEEE80211_EHT_OPER_CHAN_WIDTH_160MHZ) {
+				eht_oper_info.ccfs0 =
+					PRIMARY_CENTER_CHAN_IDX(new_chan_no,
+								new_seg0, 160);
+				eht_oper_info.ccfs1 = new_seg0;
+			}
+
+			if (new_chan_width == IEEE80211_EHT_OPER_CHAN_WIDTH_320MHZ) {
+				eht_oper_info.ccfs0 =
+					PRIMARY_CENTER_CHAN_IDX(new_chan_no,
+								new_seg0, 320);
+				eht_oper_info.ccfs1 = new_seg0;
+			}
+
 			eht_oper.optional[0] = eht_oper_info.control;
 			eht_oper.optional[1] = eht_oper_info.ccfs0;
 			eht_oper.optional[2] = eht_oper_info.ccfs1;
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -3641,6 +3641,59 @@ void ieee80211_chandef_eht_oper(struct i
 	}
 }
 
+struct ieee80211_channel
+*ieee80211_get_channel_6ghz_pwr_mode(const struct ieee80211_sub_if_data *sdata,
+				     const struct ieee80211_he_operation *he_oper,
+				     const int new_chan_idx)
+{
+	enum nl80211_iftype iftype = ieee80211_vif_type_p2p(&sdata->vif);
+	enum nl80211_regulatory_power_modes mode;
+	struct ieee80211_channel *new_chan;
+	const struct ieee80211_he_6ghz_oper *he_6ghz_oper;
+	u8 reg_info;
+	u8 reg_6g_power_mode;
+	u32 new_freq;
+
+
+	he_6ghz_oper = ieee80211_he_6ghz_oper(he_oper);
+
+	if (!he_6ghz_oper) {
+		sdata_info(sdata,
+			   "HE 6GHz operation missing (on Channel: %d), expect issues\n",
+			   new_chan_idx);
+		return false;
+	}
+	/* 6G Power mode present in the beacon */
+	reg_info = (he_6ghz_oper->control & IEEE80211_HE_6GHZ_OPER_CTRL_REG_INFO) >>
+		   IEEE80211_HE_6GHZ_OPER_CTRL_REG_INFO_LSB;
+
+	/* 6G Power mode configured by the user */
+	reg_6g_power_mode = sdata->wdev.reg_6g_power_mode;
+
+	/**
+	 * For AP/AP_VLAN/MESH_POINT interfaces, the 6G power mode depends on the
+	 * mode configured by user (LPI/SP/VLP). For other interfaces (for ex STA)
+	 * mode depends on the power mode present in beacon as well as power mode
+	 * configured by the user for that interface
+	 */
+	if (iftype == NL80211_IFTYPE_AP || iftype == NL80211_IFTYPE_AP_VLAN ||
+	    iftype == NL80211_IFTYPE_MESH_POINT) {
+		mode = reg_6g_power_mode;
+	} else
+		mode = GET_POWER_MODE_FOR_NON_AP_STA(reg_6g_power_mode, reg_info);
+
+	/*
+	 * The EHT operation IE does not contain the primary channel so the
+	 * primary channel frequency should be taken from the 6 GHz operation
+	 * information.
+	 */
+	new_freq = ieee80211_channel_to_frequency(new_chan_idx,
+						  NL80211_BAND_6GHZ);
+	new_chan = ieee80211_get_6g_channel_khz(sdata->local->hw.wiphy,
+						MHZ_TO_KHZ(new_freq), mode);
+	return new_chan;
+}
+
 bool ieee80211_chandef_he_6ghz_oper(struct ieee80211_sub_if_data *sdata,
 				    const struct ieee80211_he_operation *he_oper,
 				    const struct ieee80211_eht_operation *eht_oper,
--- a/net/wireless/util.c
+++ b/net/wireless/util.c
@@ -1811,6 +1811,7 @@ bool ieee80211_operating_class_to_band(u
 		*band = NL80211_BAND_5GHZ;
 		return true;
 	case 131 ... 135:
+	case 137:
 		*band = NL80211_BAND_6GHZ;
 		return true;
 	case 81:
--- a/net/wireless/scan.c
+++ b/net/wireless/scan.c
@@ -1283,7 +1283,7 @@ static int cmp_bss(struct cfg80211_bss *
 	const u8 *ie2 = NULL;
 	int i, r;
 
-	if (a->channel != b->channel)
+	if (!cfg80211_channel_identical(a->channel, b->channel))
 		return b->channel->center_freq - a->channel->center_freq;
 
 	a_ies = rcu_access_pointer(a->ies);
