From 8903b905962c705a1dc46eed60c162b7346497f9 Mon Sep 17 00:00:00 2001
From: Lavanya Suresh <lavaks@codeaurora.org>
Date: Thu, 6 May 2021 13:31:49 +0530
Subject: [PATCH] mac80211: Add support to handle AWGN interference for 6G

On receiving AWGN interference indication, mac80211 triggers actions
to bringdown the interface and indicates the same to userspace using
existing NL80211_CMD_STOP_AP interface, so as to avoid transmission
in that channel.

Signed-off-by: Lavanya Suresh <lavaks@codeaurora.org>
---
 include/net/mac80211.h     |  7 +++++++
 net/mac80211/ieee80211_i.h |  4 ++++
 net/mac80211/iface.c       |  2 ++
 net/mac80211/util.c        | 26 ++++++++++++++++++++++++++
 4 files changed, 39 insertions(+)

--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -6407,6 +6407,13 @@ void ieee80211_channel_switch_disconnect
 					 bool block_tx);
 
 /**
+ * ieee80211_awgn_detected - inform that awgn interference is detected
+ *
+ * @vif: &struct ieee80211_vif pointer from the add_interface callback.
+ */
+void ieee80211_awgn_detected(struct ieee80211_vif *vif);
+
+/**
  * ieee80211_request_smps - request SM PS transition
  * @vif: &struct ieee80211_vif pointer from the add_interface callback.
  * @link_id: link ID for MLO, or 0
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -978,6 +978,8 @@ struct ieee80211_link_data {
 
 	struct cfg80211_chan_def csa_chandef;
 
+	struct work_struct awgn_detected_work;
+
 	struct work_struct color_change_finalize_work;
 
 	/* context reservation -- protected with chanctx_mtx */
@@ -1918,6 +1920,8 @@ int ieee80211_mgmt_tx_cancel_wait(struct
 void ieee80211_csa_finalize_work(struct work_struct *work);
 int ieee80211_channel_switch(struct wiphy *wiphy, struct net_device *dev,
 			     struct cfg80211_csa_settings *params);
+/* awgn interference handling */
+void ieee80211_awgn_interference_detected_work(struct work_struct *work);
 
 /* color change handling */
 void ieee80211_color_change_finalize_work(struct work_struct *work);
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -400,6 +400,8 @@ static void ieee80211_link_init(struct i
 
 	INIT_WORK(&link->csa_finalize_work,
 		  ieee80211_csa_finalize_work);
+	INIT_WORK(&sdata->awgn_detected_work,
+		  ieee80211_awgn_interference_detected_work);
 	INIT_WORK(&link->color_change_finalize_work,
 		  ieee80211_color_change_finalize_work);
 	INIT_LIST_HEAD(&link->assigned_chanctx_list);
@@ -717,6 +719,7 @@ static void ieee80211_do_stop(struct iee
 	sdata_unlock(sdata);
 
 	cancel_work_sync(&sdata->deflink.csa_finalize_work);
+	cancel_work_sync(&sdata->awgn_detected_work);
 	cancel_work_sync(&sdata->deflink.color_change_finalize_work);
 
 	cancel_delayed_work_sync(&sdata->deflink.dfs_cac_timer_work);
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -4187,6 +4187,32 @@ ieee80211_conn_flags_t ieee80211_chandef
 	return ret;
 }
 
+void ieee80211_awgn_interference_detected_work(struct work_struct *work)
+{
+	struct ieee80211_sub_if_data *sdata =
+		container_of(work, struct ieee80211_sub_if_data, awgn_detected_work);
+
+	sdata_lock(sdata);
+
+	if (!ieee80211_sdata_running(sdata))
+		goto unlock;
+
+	cfg80211_stop_iface(sdata->local->hw.wiphy, &sdata->wdev,
+			    GFP_KERNEL);
+
+unlock:
+	sdata_unlock(sdata);
+}
+
+void ieee80211_awgn_detected(struct ieee80211_vif *vif)
+{
+	struct ieee80211_sub_if_data *sdata = vif_to_sdata(vif);
+
+	ieee80211_queue_work(&sdata->local->hw,
+			     &sdata->awgn_detected_work);
+}
+EXPORT_SYMBOL(ieee80211_awgn_detected);
+
 /*
  * Returns true if smps_mode_new is strictly more restrictive than
  * smps_mode_old.
