From 4ef4904e460d4d4896f5fa20266d932e7d26b1b6 Mon Sep 17 00:00:00 2001
From: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
Date: Tue, 7 Mar 2023 01:52:02 -0800
Subject: [PATCH 2/6] ath12k: Optimize the tx completion
 routine

Use cached descriptor for WBM2SW completion and avoid unnecessary
if checks

Signed-off-by: Balamurugan Mahalingam <quic_bmahalin@quicinc.com>
Signed-off-by: Ramanathan Choodamani <quic_rchoodam@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp.c       |  2 +-
 drivers/net/wireless/ath/ath12k/dp_tx.c    | 21 ++++++++++-----------
 drivers/net/wireless/ath/ath12k/hal_desc.h |  3 ++-
 3 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/dp.c b/drivers/net/wireless/ath/ath12k/dp.c
index 9db59ae..b662a99 100644
--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -247,9 +247,9 @@ int ath12k_dp_srng_setup(struct ath12k_base *ab, struct dp_srng *ring,
 		/* Allocate the reo dst and tx completion rings from cacheable memory */
 		switch (type) {
 		case HAL_REO_DST:
+		case HAL_WBM2SW_RELEASE:
 			cached = true;
 			break;
-		case HAL_WBM2SW_RELEASE:
 		default:
 			cached = false;
 		}
diff --git a/drivers/net/wireless/ath/ath12k/dp_tx.c b/drivers/net/wireless/ath/ath12k/dp_tx.c
index 6af847d..bd6f220 100644
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -983,7 +983,7 @@ int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
 	u64 desc_va;
 	int valid_entries;
 	int workdone = 0;
-	struct hal_wbm_completion_ring_tx tx_status = { 0 };
+	struct hal_wbm_completion_ring_tx *tx_status;
 	enum hal_wbm_rel_src_module buf_rel_source;
 
 
@@ -1001,18 +1001,17 @@ int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
 		if (!ath12k_dp_tx_completion_valid(desc))
 			continue;
 
-		memcpy(&tx_status, desc,
-				sizeof(struct hal_wbm_completion_ring_tx));
+		tx_status = desc;
 
 
-		if (likely(FIELD_GET(HAL_WBM_COMPL_TX_INFO0_CC_DONE, tx_status.info0))) {
+		if (likely(HAL_WBM_COMPL_TX_INFO0_CC_DONE & tx_status->info0)) {
 			/* HW done cookie conversion */
-			desc_va = ((u64)tx_status.buf_va_hi << 32 |
-					tx_status.buf_va_lo);
+			desc_va = ((u64)tx_status->buf_va_hi << 32 |
+					tx_status->buf_va_lo);
 			tx_desc = (struct ath12k_tx_desc_info *)((unsigned long)desc_va);
 		} else {
 			/* SW does cookie conversion to VA */
-			desc_id = u32_get_bits(tx_status.buf_va_hi,
+			desc_id = u32_get_bits(tx_status->buf_va_hi,
 					       BUFFER_ADDR_INFO1_SW_COOKIE);
 
 			tx_desc = ath12k_dp_get_tx_desc(ab, desc_id);
@@ -1029,12 +1028,12 @@ int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
 		 * to reduce contention
 		 */
 		ath12k_dp_tx_release_txbuf(dp, tx_desc, tx_desc->pool_id);
-		buf_rel_source = FIELD_GET(HAL_WBM_RELEASE_INFO0_REL_SRC_MODULE,
-					   tx_status.info0);
+		/* Find the HAL_WBM_RELEASE_INFO0_REL_SRC_MODULE value */
+		buf_rel_source = tx_status->info0 & HAL_WBM_RELEASE_INFO0_REL_SRC_MASK;
 		ab->soc_stats.wbm_rel_source[buf_rel_source]++;
 		if (unlikely(buf_rel_source == HAL_WBM_REL_SRC_MODULE_FW)) {
 			ath12k_dp_tx_process_htt_tx_complete(ab,
-							     (void *)&tx_status,
+							     (void *)tx_status,
 							     mac_id, msdu,
 							     tx_ring,
 							     skb_ext_desc,
@@ -1047,7 +1046,7 @@ int ath12k_dp_tx_completion_handler(struct ath12k_base *ab, int ring_id,
 		if (atomic_dec_and_test(&ar->dp.num_tx_pending))
 			wake_up(&ar->dp.tx_empty_waitq);
 
-		ath12k_dp_tx_complete_msdu(ar, msdu, &tx_status,
+		ath12k_dp_tx_complete_msdu(ar, msdu, tx_status,
 					   buf_rel_source, skb_ext_desc,
 					   tx_ring->tcl_data_ring_id);
 		budget--;
diff --git a/drivers/net/wireless/ath/ath12k/hal_desc.h b/drivers/net/wireless/ath/ath12k/hal_desc.h
index 8f04d10..8e5eaae 100644
--- a/drivers/net/wireless/ath/ath12k/hal_desc.h
+++ b/drivers/net/wireless/ath/ath12k/hal_desc.h
@@ -1885,7 +1885,7 @@ struct hal_wbm_completion_ring_rx {
 #define HAL_WBM_COMPL_TX_INFO0_TQM_RELEASE_REASON	GENMASK(16, 13)
 #define HAL_WBM_COMPL_TX_INFO0_RBM_OVERRIDE_VLD		BIT(17)
 #define HAL_WBM_COMPL_TX_INFO0_SW_COOKIE_LO		GENMASK(29, 18)
-#define HAL_WBM_COMPL_TX_INFO0_CC_DONE			BIT(30)
+#define HAL_WBM_COMPL_TX_INFO0_CC_DONE			0x40000000
 #define HAL_WBM_COMPL_TX_INFO0_WBM_INTERNAL_ERROR	BIT(31)
 
 #define HAL_WBM_COMPL_TX_INFO1_TQM_STATUS_NUMBER	GENMASK(23, 0)
@@ -1982,6 +1982,7 @@ struct hal_wbm_release_ring_cc_rx {
 	u32 info1;
 } __packed;
 
+#define HAL_WBM_RELEASE_INFO0_REL_SRC_MASK		0x7
 #define HAL_WBM_RELEASE_INFO0_REL_SRC_MODULE		GENMASK(2, 0)
 #define HAL_WBM_RELEASE_INFO0_BM_ACTION			GENMASK(5, 3)
 #define HAL_WBM_RELEASE_INFO0_DESC_TYPE			GENMASK(8, 6)
-- 
2.7.4

