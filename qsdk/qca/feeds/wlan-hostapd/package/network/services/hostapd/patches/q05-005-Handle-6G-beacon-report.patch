From ae828ad3c5970dcc53590e5e964826ae58a63e19 Mon Sep 17 00:00:00 2001
From: Amutha Ravikumar <quic_aravikum@quicinc.com>
Date: Fri, 31 Mar 2023 10:06:15 +0530
Subject: wpa_supplicant: fix 6 GHz beacon report not updated

Currently, verify_80mhz() and verify_160mhz() APIs were failing in 6GHz case.
Fixed this by checking HE phy capability fields for 6 GHz to confirm
operating bandwidth is 80 MHz/160 MHz.

Add support for 320 MHz to handle beacon report.

Signed-off-by: Amutha Ravikumar <quic_aravikum@quicinc.com>
---
 src/common/ieee802_11_common.c |  3 ++
 wpa_supplicant/op_classes.c    | 86 ++++++++++++++++++++++++++++++++--
 wpa_supplicant/rrm.c           |  6 +++
 3 files changed, 92 insertions(+), 3 deletions(-)

--- a/src/common/ieee802_11_common.c
+++ b/src/common/ieee802_11_common.c
@@ -2074,6 +2074,9 @@ const struct oper_class_map global_op_cl
 	{ HOSTAPD_MODE_IEEE80211A, 135, 1, 233, 16, BW80P80, NO_P2P_SUPP },
 	{ HOSTAPD_MODE_IEEE80211A, 136, 2, 2, 4, BW20, NO_P2P_SUPP },
 
+	/* EHT320 support */
+	{ HOSTAPD_MODE_IEEE80211A, 137, 1, 233, 32, BW320, NO_P2P_SUPP },
+
 	/*
 	 * IEEE Std 802.11ad-2012 and P802.ay/D5.0 60 GHz operating classes.
 	 * Class 180 has the legacy channels 1-6. Classes 181-183 include
--- a/wpa_supplicant/op_classes.c
+++ b/wpa_supplicant/op_classes.c
@@ -22,7 +22,8 @@ static enum chan_allowed allow_channel(s
 				       unsigned int *flags)
 {
 	int i;
-	bool is_6ghz = op_class >= 131 && op_class <= 136;
+	/* Verify till operating class (137) to support 6GHz 320 MHz case */
+	bool is_6ghz = op_class >= 131 && op_class <= 137;
 
 	for (i = 0; i < mode->num_channels; i++) {
 		bool chan_is_6ghz;
@@ -102,6 +103,13 @@ static enum chan_allowed verify_80mhz(st
 		if (allow_channel(mode, op_class, adj_chan, &flags) ==
 		    NOT_ALLOWED)
 			return NOT_ALLOWED;
+		/* Check HE PHY capability flag for oper bw in 6 GHz */
+		if (is_6ghz_op_class(op_class) &&
+		    (!(mode->he_capab[WPAS_MODE_INFRA].phy_cap[HE_PHYCAP_CHANNEL_WIDTH_SET_IDX] &
+		     HE_PHYCAP_CHANNEL_WIDTH_SET_40MHZ_80MHZ_IN_5G))) {
+			return NOT_ALLOWED;
+		}
+
 
 		if (!(flags & HOSTAPD_CHAN_VHT_80MHZ_SUBCHANNEL))
 			return NOT_ALLOWED;
@@ -172,6 +180,13 @@ static enum chan_allowed verify_160mhz(s
 		    NOT_ALLOWED)
 			return NOT_ALLOWED;
 
+		/* Check HE PHY capability flag for oper bw in 6 GHz */
+		if (is_6ghz_op_class(op_class) &&
+		    (!(mode->he_capab[WPAS_MODE_INFRA].phy_cap[HE_PHYCAP_CHANNEL_WIDTH_SET_IDX] &
+		    HE_PHYCAP_CHANNEL_WIDTH_SET_160MHZ_IN_5G))) {
+			return NOT_ALLOWED;
+		}
+
 		if (!(flags & HOSTAPD_CHAN_VHT_80MHZ_SUBCHANNEL) ||
 		    !(flags & HOSTAPD_CHAN_VHT_160MHZ_SUBCHANNEL))
 			return NOT_ALLOWED;
@@ -186,7 +201,64 @@ static enum chan_allowed verify_160mhz(s
 	return ALLOWED;
 }
 
+static int get_center_320mhz(struct hostapd_hw_modes *mode, u8 channel,
+                             const u8 *center_channels, size_t num_chan)
+{
+	unsigned int i;
+	if (mode->mode != HOSTAPD_MODE_IEEE80211A) {
+		return 0;
+	}
+	for (i = 0; i < num_chan; i++) {
+		/*
+		 * In 320 MHz, the bandwidth "spans" 60 channels (e.g., 1-61),
+		 * so the center channel is 30 channels away from the start/end.
+		 */
+		if (channel >= center_channels[i] - 30 &&
+		    channel <= center_channels[i] + 30) {
+			return center_channels[i];
+		}
+	}
+	return 0;
+}
+
+static enum chan_allowed verify_320mhz(struct hostapd_hw_modes *mode,
+                                       u8 op_class, u8 channel)
+{
+	u8 center_chan;
+	unsigned int i;
+	unsigned int no_ir = 0;
+	const u8 *center_channels;
+	size_t num_chan;
+	const u8 center_channels_6ghz[] = { 31, 63, 95, 127, 159, 191 };
+
+	if (!is_6ghz_op_class(op_class))
+		return NOT_ALLOWED;
+
+	center_channels = center_channels_6ghz;
+	num_chan = ARRAY_SIZE(center_channels_6ghz);
+
+	center_chan = get_center_320mhz(mode, channel, center_channels,
+					num_chan);
+	if (!center_chan)
+		return NOT_ALLOWED;
+
+	/* Check all the channels are available */
+	for (i = 0; i < 16; i++) {
+		unsigned int flags;
+		u8 adj_chan = center_chan - 30 + i * 4;
 
+		if (allow_channel(mode, op_class, adj_chan, &flags) ==
+		    NOT_ALLOWED)
+			return NOT_ALLOWED;
+
+		if (flags & HOSTAPD_CHAN_NO_IR)
+			no_ir = 1;
+
+		if (no_ir)
+			return NO_IR;
+	}
+	return ALLOWED;
+}
 enum chan_allowed verify_channel(struct hostapd_hw_modes *mode, u8 op_class,
 				 u8 channel, u8 bw)
 {
@@ -228,6 +300,8 @@ enum chan_allowed verify_channel(struct
 		 * result and use only the 80 MHz specific version.
 		 */
 		res2 = res = verify_80mhz(mode, op_class, channel);
+	} else if (bw == 320) {
+		res2 = res = verify_320mhz(mode, op_class, channel);
 	}
 
 	if (res == NOT_ALLOWED || res2 == NOT_ALLOWED)
--- a/wpa_supplicant/rrm.c
+++ b/wpa_supplicant/rrm.c
@@ -515,6 +515,8 @@ static int * wpas_add_channels(const str
 		num_primary_channels = 4;
 	else if (op->bw == BW160)
 		num_primary_channels = 8;
+	else if (op->bw == BW320)
+		num_primary_channels = 16;
 	else
 		num_primary_channels = 1;
 
@@ -561,6 +563,7 @@ static int * wpas_op_class_freqs(const s
 	u8 channels_80mhz_6ghz[] = { 7, 23, 39, 55, 71, 87, 103, 119, 135, 151,
 				     167, 183, 199, 215 };
 	u8 channels_160mhz_6ghz[] = { 15, 47, 79, 111, 143, 175, 207 };
+	u8 channels_320mhz_6ghz[] = {31, 63, 95, 127, 159, 191};
 	const u8 *channels = NULL;
 	size_t num_chan = 0;
 	bool is_6ghz = is_6ghz_op_class(op->op_class);
@@ -579,6 +582,9 @@ static int * wpas_op_class_freqs(const s
 			channels_160mhz_5ghz;
 		num_chan =  is_6ghz ? ARRAY_SIZE(channels_160mhz_6ghz) :
 			ARRAY_SIZE(channels_160mhz_5ghz);
+	} else if (op->bw == BW320 && is_6ghz) {
+		channels = channels_320mhz_6ghz;
+		num_chan = ARRAY_SIZE(channels_320mhz_6ghz);
 	}
 
 	return wpas_add_channels(op, mode, channels, num_chan);
--- a/src/common/ieee802_11_common.h
+++ b/src/common/ieee802_11_common.h
@@ -336,7 +336,7 @@ struct oper_class_map {
 	u8 max_chan;
 	u8 inc;
 	enum { BW20, BW40PLUS, BW40MINUS, BW40, BW80, BW2160, BW160, BW80P80,
-	       BW4320, BW6480, BW8640} bw;
+	       BW4320, BW6480, BW8640, BW320} bw;
 	enum { P2P_SUPP, NO_P2P_SUPP } p2p;
 };
 
