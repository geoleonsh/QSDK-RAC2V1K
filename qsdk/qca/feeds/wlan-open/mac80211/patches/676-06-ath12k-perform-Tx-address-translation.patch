From f4b2d84b5ab4820d2a66b388c2c17c2a755af010 Mon Sep 17 00:00:00 2001
From: Sriram R <quic_srirrama@quicinc.com>
Date: Sat, 5 Nov 2022 13:14:14 +0530
Subject: [PATCH] ath12k: perform Tx address translation

When the link id is mentioned in the tx control info,
use it to convert the RA/TA to the corresponding
link sta and link vif address before transmission.

For eth data frames, always enqueue the frame on the
primary link/umac.

TODO: nwifi/raw data frame handling

Signed-off-by: Sriram R <quic_srirrama@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 64 +++++++++++++++++++++++++++
 1 file changed, 64 insertions(+)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -7723,6 +7723,75 @@ static int ath12k_mac_mgmt_tx(struct ath
 	return 0;
 }
 
+static u8 ath12k_mac_get_tx_link(struct ieee80211_sta *sta, struct ieee80211_vif *vif,
+				 u8 link, struct sk_buff *skb, u32 info_flags)
+{
+	struct ath12k_sta *ahsta;
+	struct ath12k_vif *ahvif = ath12k_vif_to_ahvif(vif);
+	struct ieee80211_link_sta *link_sta;
+	struct ieee80211_bss_conf *bss_conf;
+	struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
+
+	/* Use the link id passed or the default vif link */
+	if (!sta) {
+		if (link != IEEE80211_LINK_UNSPECIFIED)
+			return link;
+
+		return ahvif->deflink.link_id;
+	}
+
+	ahsta = (struct ath12k_sta *)sta->drv_priv;
+
+	/* use default */
+	if (!sta->mlo)
+		return ahsta->deflink.link_id;
+
+	/* enqueue eth data frames on assoc link */
+	if (info_flags & IEEE80211_TX_CTL_HW_80211_ENCAP)
+		return ahsta->assoc_link_id;
+
+	/* 802.11 frame cases */
+	if (link == IEEE80211_LINK_UNSPECIFIED)
+		link = ahsta->deflink.link_id;
+
+	/* Perform address conversion for ML STA Tx */
+	bss_conf = rcu_dereference(vif->link_conf[link]);
+	link_sta = rcu_dereference(sta->link[link]);
+	if (bss_conf && link_sta) {
+		ether_addr_copy(hdr->addr1, link_sta->addr);
+		ether_addr_copy(hdr->addr2, bss_conf->addr);
+	} else if (bss_conf) {
+		/* In certain cases where a ML sta associated and added subset of links
+		 * on which the ML AP is active, but now sends some frame (ex Probe request)
+		 * on a different link which is active in our MLD but was not added during
+		 * previous association, we can still honor the Tx to that ML STA via the
+		 * requested link.
+		 * The control would reach here in such case only when that link address
+		 * is same as the MLD address or in worst case clients used MLD address at TA wrongly
+		 * which would have helped identify the ML sta object and pass it here.
+		 * If the link address of that STA is different from MLD address, then
+		 * the sta object would be NULL and control wont reach here but return at the
+		 * start of the function itself with !sta check. Also this would not need any
+		 * translation at hdr->addr1 from MLD to link address since the RA is the
+		 * MLD address (same as that link address ideally) already.
+		 */
+		ether_addr_copy(hdr->addr2, bss_conf->addr);
+
+		ath12k_dbg(NULL, ATH12K_DBG_MAC,
+			   "unable to determine link sta addr for translation - Frame control %x link %d sta links %x ahsta links %x\n",
+			   hdr->frame_control, link, sta->valid_links, ahsta->links_map);
+	} else {
+		ath12k_err(NULL, "unable to determine Tx link for frame %x link %d\n vif links %x sta links %x ahvif links %x ahsta links %x",
+			   hdr->frame_control, link, vif->valid_links,
+			   sta->valid_links, ahvif->links_map, ahsta->links_map);
+		link = IEEE80211_MLD_MAX_NUM_LINKS;
+	}
+
+	/* todo nwifi/raw data frames */
+	return link;
+
+}
+
 static void ath12k_mac_op_tx(struct ieee80211_hw *hw,
 			     struct ieee80211_tx_control *control,
 			     struct sk_buff *skb)
@@ -7731,10 +7800,9 @@ static void ath12k_mac_op_tx(struct ieee
 	struct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);
 	struct ieee80211_vif *vif = info->control.vif;
 	struct ath12k_vif *ahvif = ath12k_vif_to_ahvif(vif);
-	/* TODO extend link specific */
-	struct ath12k_link_vif *arvif = &ahvif->deflink;
-	struct ath12k *ar = arvif->ar;
-	struct ath12k_hw *ah = ar->ah;
+	struct ath12k_link_vif *arvif;
+	struct ath12k *ar;
+	struct ath12k_hw *ah;
 	struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
 	struct ieee80211_key_conf *key = info->control.hw_key;
 	struct ath12k_mgmt_frame_stats *mgmt_stats = &ahvif->mgmt_stats;
@@ -7745,20 +7813,39 @@ static void ath12k_mac_op_tx(struct ieee
 	bool is_prb_rsp;
 	u16 frm_type = 0;
 	int ret;
+ 	u8 link = u32_get_bits(info->control.flags, IEEE80211_TX_CTRL_MLO_LINK);
 
 	if (ahvif->vdev_type == WMI_VDEV_TYPE_MONITOR) {
-		ieee80211_free_txskb(ah->hw, skb);
+		ieee80211_free_txskb(hw, skb);
 		return;
 	}
 
+	memset(skb_cb, 0, sizeof(*skb_cb));
+	skb_cb->vif = vif;
+
+	/* handle only for MLO case, use deflink for non MLO case */
+	if (vif->valid_links) {
+		link = ath12k_mac_get_tx_link(sta, vif, link, skb, info_flags);
+
+		if (link >= IEEE80211_MLD_MAX_NUM_LINKS) {
+			ieee80211_free_txskb(hw, skb);
+			return;
+		}
+		if (WARN_ON(!ahvif->link[link])) {
+			ieee80211_free_txskb(hw, skb);
+			return;
+		}
+		arvif = ahvif->link[link];
+		ar = arvif->ar;
+	}
+
+	ah = ar->ah;
+
 	if (unlikely(test_bit(ATH12K_FLAG_CRASH_FLUSH, &ar->ab->dev_flags))) {
 		ieee80211_free_txskb(ar->ah->hw, skb);
 		return;
 	}
 
-	memset(skb_cb, 0, sizeof(*skb_cb));
-	skb_cb->vif = vif;
-
 	if (key) {
 		skb_cb->cipher = key->cipher;
 		skb_cb->flags |= ATH12K_SKB_CIPHER_SET;
