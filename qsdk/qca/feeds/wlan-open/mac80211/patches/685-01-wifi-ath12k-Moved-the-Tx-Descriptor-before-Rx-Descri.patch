From 7f06cfda943121374126a07b1cfe58d5540bf7c8 Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Thu, 27 Oct 2022 17:14:06 +0530
Subject: [PATCH] wifi: ath12k: Moved the Tx Descriptor before Rx
 Descriptor in the SPT

Here the plan is to move the Rx descriptor behind the Tx descriptor.
It will help in placing the Partner chip Rx descriptor based on the chip id.

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/dp.c | 63 +++++++++++++++-------------
 drivers/net/wireless/ath/ath12k/dp.h |  6 ++-
 2 files changed, 40 insertions(+), 29 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/dp.c
+++ b/drivers/net/wireless/ath/ath12k/dp.c
@@ -1238,7 +1238,6 @@ static void ath12k_dp_cc_cleanup(struct
 		dp->spt_info[i].vaddr = NULL;
 	}
 
-	dp->tx_spt_pages = NULL;
 	kfree(dp->spt_info);
 }
 
@@ -1374,37 +1373,12 @@ static int ath12k_dp_cc_desc_init(struct
 	struct ath12k_dp *dp = &ab->dp;
 	struct ath12k_rx_desc_info *rx_descs;
 	struct ath12k_tx_desc_info *tx_descs;
+	struct ath12k_spt_info *tx_spt_pages, *rx_spt_pages;
 	u32 i, j, pool_id, tx_spt_page;
 	u32 ppt_idx;
 
-	spin_lock_bh(&dp->rx_desc_lock);
-
-	/* First ATH12K_NUM_RX_SPT_PAGES of allocated SPT pages are used for RX */
-	for (i = 0; i < ATH12K_NUM_RX_SPT_PAGES; i++) {
-		rx_descs = kcalloc(ATH12K_MAX_SPT_ENTRIES, sizeof(*rx_descs),
-				   GFP_ATOMIC);
-
-		if (!rx_descs) {
-			spin_unlock_bh(&dp->rx_desc_lock);
-			return -ENOMEM;
-		}
-
-		dp->spt_info->rxbaddr[i] = &rx_descs[0];
-
-		for (j = 0; j < ATH12K_MAX_SPT_ENTRIES; j++) {
-			rx_descs[j].cookie = ath12k_dp_cc_cookie_gen(i, j);
-			rx_descs[j].magic = ATH12K_DP_RX_DESC_MAGIC;
-			list_add_tail(&rx_descs[j].list, &dp->rx_desc_free_list);
-
-			/* Update descriptor VA in SPT */
-			*(struct ath12k_rx_desc_info **)((u8 *)dp->spt_info[i].vaddr +
-				(j * sizeof(u64))) = &rx_descs[j];
-		}
-	}
-
-	spin_unlock_bh(&dp->rx_desc_lock);
 	/* pointer to start of TX pages */
-	dp->tx_spt_pages = &dp->spt_info[ATH12K_NUM_RX_SPT_PAGES];
+	tx_spt_pages = &dp->spt_info[ATH12K_TX_SPT_PAGE_OFFSET];
 
 	for (pool_id = 0; pool_id < ATH12K_HW_MAX_QUEUES; pool_id++) {
 		spin_lock_bh(&dp->tx_desc_lock[pool_id]);
@@ -1422,7 +1396,7 @@ static int ath12k_dp_cc_desc_init(struct
 			dp->spt_info->txbaddr[tx_spt_page] = &tx_descs[0];
 
 			for (j = 0; j < ATH12K_MAX_SPT_ENTRIES; j++) {
-				ppt_idx = ATH12K_NUM_RX_SPT_PAGES + tx_spt_page;
+				ppt_idx = ATH12K_TX_SPT_PAGE_OFFSET + tx_spt_page;
 				tx_descs[j].desc_id = ath12k_dp_cc_cookie_gen(ppt_idx, j);
 				tx_descs[j].pool_id = pool_id;
 				list_add_tail(&tx_descs[j].list,
@@ -1430,12 +1404,44 @@ static int ath12k_dp_cc_desc_init(struct
 
 				/* Update descriptor VA in SPT */
 				*(struct ath12k_tx_desc_info **)
-					((u8 *)dp->tx_spt_pages[tx_spt_page].vaddr +
+					((u8 *)tx_spt_pages[tx_spt_page].vaddr +
 					 (j * sizeof(u64))) = &tx_descs[j];
 			}
 		}
 		spin_unlock_bh(&dp->tx_desc_lock[pool_id]);
 	}
+
+	spin_lock_bh(&dp->rx_desc_lock);
+
+	/* pointer to start of RX pages */
+	rx_spt_pages = &dp->spt_info[ATH12K_RX_SPT_PAGE_OFFSET];
+
+	/* First ATH12K_NUM_RX_SPT_PAGES of allocated SPT pages are used for RX */
+	for (i = 0; i < ATH12K_NUM_RX_SPT_PAGES; i++) {
+		rx_descs = kcalloc(ATH12K_MAX_SPT_ENTRIES, sizeof(*rx_descs),
+				   GFP_ATOMIC);
+
+		if (!rx_descs) {
+			spin_unlock_bh(&dp->rx_desc_lock);
+			return -ENOMEM;
+		}
+
+		dp->spt_info->rxbaddr[i] = &rx_descs[0];
+
+		for (j = 0; j < ATH12K_MAX_SPT_ENTRIES; j++) {
+			ppt_idx = ATH12K_RX_SPT_PAGE_OFFSET + i;
+			rx_descs[j].cookie = ath12k_dp_cc_cookie_gen(ppt_idx, j);
+			rx_descs[j].magic = ATH12K_DP_RX_DESC_MAGIC;
+			list_add_tail(&rx_descs[j].list, &dp->rx_desc_free_list);
+
+			/* Update descriptor VA in SPT */
+			*(struct ath12k_rx_desc_info **)((u8 *)rx_spt_pages[i].vaddr +
+				(j * sizeof(u64))) = &rx_descs[j];
+		}
+	}
+
+	spin_unlock_bh(&dp->rx_desc_lock);
+
 	return 0;
 }
 
--- a/drivers/net/wireless/ath/ath12k/dp.h
+++ b/drivers/net/wireless/ath/ath12k/dp.h
@@ -215,7 +215,9 @@ struct ath12k_pdev_dp {
 #define ATH12K_TX_SPT_PAGES_PER_POOL (ATH12K_NUM_POOL_TX_DESC / \
 					  ATH12K_MAX_SPT_ENTRIES)
 #define ATH12K_NUM_TX_SPT_PAGES	(ATH12K_TX_SPT_PAGES_PER_POOL * ATH12K_HW_MAX_QUEUES)
-#define ATH12K_NUM_SPT_PAGES	(ATH12K_NUM_RX_SPT_PAGES + ATH12K_NUM_TX_SPT_PAGES)
+#define ATH12K_TX_SPT_PAGE_OFFSET 0
+#define ATH12K_RX_SPT_PAGE_OFFSET ATH12K_NUM_TX_SPT_PAGES
+#define ATH12K_NUM_SPT_PAGES	(ATH12K_NUM_TX_SPT_PAGES + ATH12K_NUM_RX_SPT_PAGES)
 
 /* The SPT pages are divided for RX and TX, first block for RX
  * and remaining for TX
@@ -341,8 +343,6 @@ struct ath12k_dp {
 	struct ath12k_hp_update_timer tx_ring_timer[DP_TCL_NUM_RING_MAX];
 	struct ath12k_spt_info *spt_info;
 	u32 num_spt_pages;
-	/* start address of TX SPT pages */
-	struct ath12k_spt_info *tx_spt_pages;
 	struct list_head rx_desc_free_list;
 	struct list_head rx_desc_used_list;
 	/* protects the free and used desc list */
