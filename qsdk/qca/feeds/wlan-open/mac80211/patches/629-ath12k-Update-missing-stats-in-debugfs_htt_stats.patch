From 9c36079c97b12ccd29c8951b5858c370c4a8e111 Mon Sep 17 00:00:00 2001
From: Dinesh Karthikeyan <quic_dinek@quicinc.com>
Date: Mon, 18 Apr 2022 17:41:38 +0530
Subject: [PATCH] ath12k: Update missing stats in debugfs_htt_stats

Configure missing parameters for ath12k and add them to
debugfs_htt_stats.

Signed-off-by: Dinesh Karthikeyan <quic_dinek@quicinc.com>
---
 .../net/wireless/ath/ath12k/debugfs_htt_stats.c    | 506 ++++++++++++++++++---
 .../net/wireless/ath/ath12k/debugfs_htt_stats.h    | 243 +++++++++-
 drivers/net/wireless/ath/ath12k/dp.h               |   3 +-
 3 files changed, 665 insertions(+), 87 deletions(-)

Index: backports-20220404-5.4.164-f40abb4788/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.c
===================================================================
--- backports-20220404-5.4.164-f40abb4788.orig/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.c	2022-05-10 12:40:45.643065009 +0530
+++ backports-20220404-5.4.164-f40abb4788/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.c	2022-05-10 12:44:31.769302756 +0530
@@ -77,6 +77,10 @@
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_PDEV_STATS_CMN_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "mac_id = %u\n",
 			 u32_get_bits(mac_id_word, HTT_STATS_MAC_ID));
+	len += scnprintf(buf + len, buf_len - len, "comp_delivered = %u\n",
+			 htt_stats_buf->comp_delivered);
+	len += scnprintf(buf + len, buf_len - len, "self_triggers = %u\n",
+			 htt_stats_buf->self_triggers);
 	len += scnprintf(buf + len, buf_len - len, "hw_queued = %u\n",
 			 htt_stats_buf->hw_queued);
 	len += scnprintf(buf + len, buf_len - len, "hw_reaped = %u\n",
@@ -91,6 +95,8 @@
 			 htt_stats_buf->hw_filt);
 	len += scnprintf(buf + len, buf_len - len, "tx_abort = %u\n",
 			 htt_stats_buf->tx_abort);
+	len += scnprintf(buf + len, buf_len - len, "ppdu_ok = %u\n",
+			 htt_stats_buf->ppdu_ok);
 	len += scnprintf(buf + len, buf_len - len, "mpdu_requeued = %u\n",
 			 htt_stats_buf->mpdu_requed);
 	len += scnprintf(buf + len, buf_len - len, "tx_xretry = %u\n",
@@ -105,6 +111,8 @@
 			 htt_stats_buf->cont_xretry);
 	len += scnprintf(buf + len, buf_len - len, "tx_timeout = %u\n",
 			 htt_stats_buf->tx_timeout);
+	len += scnprintf(buf + len, buf_len - len, "tx_time_dur_data = %u\n",
+			 htt_stats_buf->tx_time_dur_data);
 	len += scnprintf(buf + len, buf_len - len, "pdev_resets = %u\n",
 			 htt_stats_buf->pdev_resets);
 	len += scnprintf(buf + len, buf_len - len, "phy_underrun = %u\n",
@@ -119,8 +127,26 @@
 			 htt_stats_buf->seq_completed);
 	len += scnprintf(buf + len, buf_len - len, "seq_restarted = %u\n",
 			 htt_stats_buf->seq_restarted);
-	len += scnprintf(buf + len, buf_len - len, "mu_seq_posted = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "seq_txop_repost_stop = %u\n",
+			 htt_stats_buf->seq_txop_repost_stop);
+	len += scnprintf(buf + len, buf_len - len, "next_seq_cancel = %u\n",
+			 htt_stats_buf->next_seq_cancel);
+	len += scnprintf(buf + len, buf_len - len, "dl_mu_mimo_seq_posted = %u\n",
 			 htt_stats_buf->mu_seq_posted);
+	len += scnprintf(buf + len, buf_len - len, "dl_mu_ofdma_seq_posted = %u\n",
+			 htt_stats_buf->mu_ofdma_seq_posted);
+	len += scnprintf(buf + len, buf_len - len, "ul_mu_mimo_seq_posted = %u\n",
+			 htt_stats_buf->ul_mumimo_seq_posted);
+	len += scnprintf(buf + len, buf_len - len, "ul_mu_ofdma_seq_posted = %u\n",
+			 htt_stats_buf->ul_ofdma_seq_posted);
+	len += scnprintf(buf + len, buf_len - len, "mu_mimo_peer_blacklisted = %u\n",
+			 htt_stats_buf->num_mu_peer_blacklisted);
+	len += scnprintf(buf + len, buf_len - len, "seq_qdepth_repost_stop = %u\n",
+			 htt_stats_buf->seq_qdepth_repost_stop);
+	len += scnprintf(buf + len, buf_len - len, "seq_min_msdu_repost_stop = %u\n",
+			 htt_stats_buf->seq_min_msdu_repost_stop);
+	len += scnprintf(buf + len, buf_len - len, "mu_seq_min_msdu_repost_stop = %u\n",
+			 htt_stats_buf->mu_seq_min_msdu_repost_stop);
 	len += scnprintf(buf + len, buf_len - len, "seq_switch_hw_paused = %u\n",
 			 htt_stats_buf->seq_switch_hw_paused);
 	len += scnprintf(buf + len, buf_len - len, "next_seq_posted_dsr = %u\n",
@@ -137,6 +163,8 @@
 			 htt_stats_buf->mpdu_removed_tqm);
 	len += scnprintf(buf + len, buf_len - len, "msdu_removed_tqm = %u\n",
 			 htt_stats_buf->msdu_removed_tqm);
+	len += scnprintf(buf + len, buf_len - len, "remove_mpdus_max_retries = %u\n",
+			 htt_stats_buf->remove_mpdus_max_retries);
 	len += scnprintf(buf + len, buf_len - len, "mpdus_sw_flush = %u\n",
 			 htt_stats_buf->mpdus_sw_flush);
 	len += scnprintf(buf + len, buf_len - len, "mpdus_hw_filter = %u\n",
@@ -175,6 +203,8 @@
 			 htt_stats_buf->tx_active_dur_us_low);
 	len += scnprintf(buf + len, buf_len - len, "tx_active_dur_us_high = %u\n",
 			 htt_stats_buf->tx_active_dur_us_high);
+	len += scnprintf(buf + len, buf_len - len, "fes_offsets_err_cnt = %u\n",
+			 htt_stats_buf->fes_offsets_err_cnt);
 
 	stats_req->buf_len = len;
 }
@@ -389,10 +419,32 @@
 			 htt_stats_buf->rx_abort);
 	len += scnprintf(buf + len, buf_len - len, "rx_abort_fail_count = %u\n",
 			 htt_stats_buf->rx_abort_fail_count);
+	len += scnprintf(buf + len, buf_len - len, "rx_flush_cnt = %u\n",
+			 htt_stats_buf->rx_flush_cnt);
 	len += scnprintf(buf + len, buf_len - len, "warm_reset = %u\n",
 			 htt_stats_buf->warm_reset);
 	len += scnprintf(buf + len, buf_len - len, "cold_reset = %u\n",
 			 htt_stats_buf->cold_reset);
+	len += scnprintf(buf + len, buf_len - len, "mac_cold_reset_restore_cal = %u\n",
+			 htt_stats_buf->mac_cold_reset_restore_cal);
+	len += scnprintf(buf + len, buf_len - len, "mac_cold_reset = %u\n",
+			 htt_stats_buf->mac_cold_reset);
+	len += scnprintf(buf + len, buf_len - len, "mac_warm_reset = %u\n",
+			 htt_stats_buf->mac_warm_reset);
+	len += scnprintf(buf + len, buf_len - len, "mac_only_reset = %u\n",
+			 htt_stats_buf->mac_only_reset);
+	len += scnprintf(buf + len, buf_len - len, "phy_warm_reset = %u\n",
+			 htt_stats_buf->phy_warm_reset);
+	len += scnprintf(buf + len, buf_len - len, "phy_warm_reset_ucode_trig = %u\n",
+			 htt_stats_buf->phy_warm_reset_ucode_trig);
+	len += scnprintf(buf + len, buf_len - len, "mac_warm_reset_restore_cal = %u\n",
+			 htt_stats_buf->mac_warm_reset_restore_cal);
+	len += scnprintf(buf + len, buf_len - len, "mac_sfm_reset = %u\n",
+			 htt_stats_buf->mac_sfm_reset);
+	len += scnprintf(buf + len, buf_len - len, "phy_warm_reset_m3_ssr = %u\n",
+			 htt_stats_buf->phy_warm_reset_m3_ssr);
+	len += scnprintf(buf + len, buf_len - len, "fw_rx_rings_reset = %u\n",
+			 htt_stats_buf->fw_rx_rings_reset);
 	len += scnprintf(buf + len, buf_len - len, "tx_flush = %u\n",
 			 htt_stats_buf->tx_flush);
 	len += scnprintf(buf + len, buf_len - len, "tx_glb_reset = %u\n",
@@ -401,6 +453,56 @@
 			 htt_stats_buf->tx_txq_reset);
 	len += scnprintf(buf + len, buf_len - len, "rx_timeout_reset = %u\n",
 			 htt_stats_buf->rx_timeout_reset);
+	len += scnprintf(buf + len, buf_len - len, "PDEV_PHY_WARM_RESET_REASONS:\n");
+	len += scnprintf(buf + len, buf_len - len, "phy_warm_reset_reason_phy_m3 = %u\n",
+			 htt_stats_buf->phy_warm_reset_reason_phy_m3);
+	len += scnprintf(buf + len, buf_len - len,
+			 "phy_warm_reset_reason_tx_hw_stuck = %u\n",
+			 htt_stats_buf->phy_warm_reset_reason_tx_hw_stuck);
+	len += scnprintf(buf + len, buf_len - len,
+			 "phy_warm_reset_reason_num_cca_rx_frame_stuck = %u\n",
+			 htt_stats_buf->phy_warm_reset_reason_num_cca_rx_frame_stuck);
+	len += scnprintf(buf + len, buf_len - len,
+			 "phy_warm_reset_reason_wal_rx_recovery_rst_rx_busy = %u\n",
+			 htt_stats_buf->phy_warm_reset_reason_wal_rx_recovery_rst_rx_busy);
+	len += scnprintf(buf + len, buf_len - len,
+			 "phy_warm_reset_reason_wal_rx_recovery_rst_mac_hang = %u\n",
+			 htt_stats_buf->phy_warm_reset_reason_wal_rx_recovery_rst_mac_hang);
+	len += scnprintf(buf + len, buf_len - len,
+			 "phy_warm_reset_reason_mac_reset_converted_phy_reset = %u\n",
+			 htt_stats_buf->phy_warm_reset_reason_mac_reset_converted_phy_reset);
+	len += scnprintf(buf + len, buf_len - len,
+			 "phy_warm_reset_reason_tx_lifetime_expiry_cca_stuck = %u\n",
+			 htt_stats_buf->phy_warm_reset_reason_tx_lifetime_expiry_cca_stuck);
+	len += scnprintf(buf + len, buf_len - len,
+			 "phy_warm_reset_reason_tx_consecutive_flush9_war = %u\n",
+			 htt_stats_buf->phy_warm_reset_reason_tx_consecutive_flush9_war);
+	len += scnprintf(buf + len, buf_len - len,
+			 "phy_warm_reset_reason_tx_hwsch_reset_war = %u\n",
+			 htt_stats_buf->phy_warm_reset_reason_tx_hwsch_reset_war);
+	len += scnprintf(buf + len, buf_len - len,
+			 "phy_warm_reset_reason_hwsch_wdog_or_cca_wdog_war = %u\n\n",
+			 htt_stats_buf->phy_warm_reset_reason_hwsch_wdog_or_cca_wdog_war);
+
+	len += scnprintf(buf + len, buf_len - len, "WAL_RX_RECOVERY_STATS:\n");
+	len += scnprintf(buf + len, buf_len - len,
+			 "wal_rx_recovery_rst_mac_hang_count = %u\n",
+			 htt_stats_buf->wal_rx_recovery_rst_mac_hang_count);
+	len += scnprintf(buf + len, buf_len - len,
+			 "wal_rx_recovery_rst_known_sig_count = %u\n",
+			 htt_stats_buf->wal_rx_recovery_rst_known_sig_count);
+	len += scnprintf(buf + len, buf_len - len,
+			 "wal_rx_recovery_rst_no_rx_count = %u\n",
+			 htt_stats_buf->wal_rx_recovery_rst_no_rx_count);
+	len += scnprintf(buf + len, buf_len - len,
+			 "wal_rx_recovery_rst_no_rx_consecutive_count = %u\n",
+			 htt_stats_buf->wal_rx_recovery_rst_no_rx_consecutive_count);
+	len += scnprintf(buf + len, buf_len - len,
+			 "wal_rx_recovery_rst_rx_busy_count = %u\n",
+			 htt_stats_buf->wal_rx_recovery_rst_rx_busy_count);
+	len += scnprintf(buf + len, buf_len - len,
+			 "wal_rx_recovery_rst_phy_mac_hang_count = %u\n",
+			 htt_stats_buf->wal_rx_recovery_rst_phy_mac_hang_count);
 
 	stats_req->buf_len = len;
 }
@@ -621,6 +723,8 @@
 	len += scnprintf(buf + len, buf_len - len, "transmitted_ppdu_bytes = %llu\n",
 			 htt_stats_buf->ppdu_transmitted_bytes_low |
 			 ((u64)htt_stats_buf->ppdu_transmitted_bytes_high << 32));
+	len += scnprintf(buf + len, buf_len - len, "remove_mpdus_max_retries = %u\n",
+			 htt_stats_buf->remove_mpdus_max_retries);
 	len += scnprintf(buf + len, buf_len - len, "ttl_removed_count = %u\n",
 			 htt_stats_buf->peer_ttl_removed_count);
 	len += scnprintf(buf + len, buf_len - len, "inactive_time = %u\n",
@@ -652,7 +756,7 @@
 	len += scnprintf(buf + len, buf_len - len, "ast_idx = %u\n",
 			 u32_get_bits(ast_idx, HTT_PEER_DETAILS_AST_IDX));
 	len += scnprintf(buf + len, buf_len - len,
-			 "mac_addr = %02x:%02x:%02x:%02x:%02x:%02x",
+			 "mac_addr = %02x:%02x:%02x:%02x:%02x:%02x\n",
 			 u32_get_bits(mac_addr, HTT_MAC_ADDR_L32_0),
 			 u32_get_bits(mac_addr, HTT_MAC_ADDR_L32_1),
 			 u32_get_bits(mac_addr, HTT_MAC_ADDR_L32_2),
@@ -778,6 +882,12 @@
 				   HTT_RX_PEER_STATS_NUM_BW_COUNTERS, "\n");
 	}
 
+	for (j = 0; j < HTT_RX_PEER_STATS_NUM_SPATIAL_STREAMS; j++) {
+		len += scnprintf(buf + len, buf_len - len, "\nrssi_chain_ext[%u] = ", j);
+		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rssi_chain_ext[j], NULL,
+				   HTT_RX_PEER_STATS_NUM_BW_EXT_COUNTERS, "\n");
+	}
+
 	for (j = 0; j < HTT_RX_PEER_STATS_NUM_GI_COUNTERS; j++) {
 		len += scnprintf(buf + len, buf_len - len, "rx_gi[%u] = %s\n",
 				 j, rx_gi[j]);
@@ -788,6 +898,37 @@
 	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_pream, "rx_pream",
 			   HTT_RX_PDEV_STATS_NUM_PREAMBLE_TYPES, "\n");
 
+	len += scnprintf(buf + len, buf_len - len, "\nrx_ulofdma_non_data_ppdu = %u\n",
+			 htt_stats_buf->rx_ulofdma_non_data_ppdu);
+	len += scnprintf(buf + len, buf_len - len, "rx_ulofdma_data_ppdu = %u\n",
+			 htt_stats_buf->rx_ulofdma_data_ppdu);
+	len += scnprintf(buf + len, buf_len - len, "rx_ulofdma_mpdu_ok = %u\n",
+			 htt_stats_buf->rx_ulofdma_mpdu_ok);
+	len += scnprintf(buf + len, buf_len - len, "rx_ulofdma_mpdu_fail = %u\n",
+			 htt_stats_buf->rx_ulofdma_mpdu_fail);
+	len += scnprintf(buf + len, buf_len - len, "rx_ulmumimo_non_data_ppdu = %u\n",
+			 htt_stats_buf->rx_ulmumimo_non_data_ppdu);
+	len += scnprintf(buf + len, buf_len - len, "rx_ulmumimo_data_ppdu = %u\n",
+			 htt_stats_buf->rx_ulmumimo_data_ppdu);
+	len += scnprintf(buf + len, buf_len - len, "rx_ulmumimo_mpdu_ok = %u\n",
+			 htt_stats_buf->rx_ulmumimo_mpdu_ok);
+	len += scnprintf(buf + len, buf_len - len, "rx_ulmumimo_mpdu_fail = %u\n",
+			 htt_stats_buf->rx_ulmumimo_mpdu_fail);
+
+	len += scnprintf(buf + len, buf_len - len, "rx_ul_fd_rssi = ");
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_ul_fd_rssi, NULL,
+			   HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS, "\n");
+
+	len += scnprintf(buf + len, buf_len - len, "\nper_chain_rssi_pkt_type = %#x",
+			 htt_stats_buf->per_chain_rssi_pkt_type);
+
+	for (j = 0; j < HTT_RX_PEER_STATS_NUM_SPATIAL_STREAMS; j++) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "\nrx_per_chain_rssi_in_dbm[%u] = ", j);
+		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_per_chain_rssi_in_dbm[j],
+				   NULL, HTT_RX_PEER_STATS_NUM_BW_COUNTERS, "\n");
+	}
+
 	stats_req->buf_len = len;
 
 fail:
@@ -1189,6 +1330,20 @@
 			 htt_stats_buf->delayed_bar_6);
 	len += scnprintf(buf + len, buf_len - len, "delayed_bar_7 = %u\n",
 			 htt_stats_buf->delayed_bar_7);
+	len += scnprintf(buf + len, buf_len - len, "bar_with_tqm_head_seq_num = %u\n",
+			 htt_stats_buf->bar_with_tqm_head_seq_num);
+	len += scnprintf(buf + len, buf_len - len, "bar_with_tid_seq_num = %u\n",
+			 htt_stats_buf->bar_with_tid_seq_num);
+	len += scnprintf(buf + len, buf_len - len, "su_sw_rts_queued = %u\n",
+			 htt_stats_buf->su_sw_rts_queued);
+	len += scnprintf(buf + len, buf_len - len, "su_sw_rts_tried = %u\n",
+			 htt_stats_buf->su_sw_rts_tried);
+	len += scnprintf(buf + len, buf_len - len, "su_sw_rts_err = %u\n",
+			 htt_stats_buf->su_sw_rts_err);
+	len += scnprintf(buf + len, buf_len - len, "su_sw_rts_flushed = %u\n",
+			 htt_stats_buf->su_sw_rts_flushed);
+	len += scnprintf(buf + len, buf_len - len, "su_sw_rts_rcvd_cts_diff_bw = %u\n",
+			 htt_stats_buf->su_sw_rts_rcvd_cts_diff_bw);
 
 	stats_req->buf_len = len;
 }
@@ -1203,20 +1358,34 @@
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_SELFGEN_AC_STATS_TLV:\n");
-	len += scnprintf(buf + len, buf_len - len, "ac_su_ndpa = %u\n",
-			 htt_stats_buf->ac_su_ndpa);
-	len += scnprintf(buf + len, buf_len - len, "ac_su_ndp = %u\n",
-			 htt_stats_buf->ac_su_ndp);
-	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndpa = %u\n",
-			 htt_stats_buf->ac_mu_mimo_ndpa);
-	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndp = %u\n",
-			 htt_stats_buf->ac_mu_mimo_ndp);
-	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_1 = %u\n",
-			 htt_stats_buf->ac_mu_mimo_brpoll_1);
-	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_2 = %u\n",
-			 htt_stats_buf->ac_mu_mimo_brpoll_2);
-	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_3 = %u\n",
-			 htt_stats_buf->ac_mu_mimo_brpoll_3);
+	len += scnprintf(buf + len, buf_len - len, "ac_su_ndpa_queued = %u\n",
+			   htt_stats_buf->ac_su_ndpa_queued);
+	len += scnprintf(buf + len, buf_len - len, "ac_su_ndpa_tried = %u",
+			   htt_stats_buf->ac_su_ndpa);
+	len += scnprintf(buf + len, buf_len - len, "ac_su_ndp_queued = %u\n",
+			   htt_stats_buf->ac_su_ndp_queued);
+	len += scnprintf(buf + len, buf_len - len, "ac_su_ndp_tried = %u",
+			   htt_stats_buf->ac_su_ndp);
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndpa_queued = %u\n",
+			   htt_stats_buf->ac_mu_mimo_ndpa_queued);
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndpa_tried = %u",
+			   htt_stats_buf->ac_mu_mimo_ndpa);
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndp_queued = %u\n",
+			   htt_stats_buf->ac_mu_mimo_ndp_queued);
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndp_tried = %u",
+			   htt_stats_buf->ac_mu_mimo_ndp);
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_1_queued = %u\n",
+			   htt_stats_buf->ac_mu_mimo_brpoll_1_queued);
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_1_tried = %u",
+			   htt_stats_buf->ac_mu_mimo_brpoll_1);
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_2_queued = %u\n",
+			   htt_stats_buf->ac_mu_mimo_brpoll_2_queued);
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_2_tried = %u",
+			   htt_stats_buf->ac_mu_mimo_brpoll_2);
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_3_queued = %u\n",
+			   htt_stats_buf->ac_mu_mimo_brpoll_3_queued);
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brpoll_3_tried = %u\n",
+			   htt_stats_buf->ac_mu_mimo_brpoll_3);
 
 	stats_req->buf_len = len;
 }
@@ -1231,28 +1400,33 @@
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_SELFGEN_AX_STATS_TLV:\n");
-	len += scnprintf(buf + len, buf_len - len, "ax_su_ndpa = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "ax_su_ndpa_queued = %u\n",
+			 htt_stats_buf->ax_su_ndpa_queued);
+	len += scnprintf(buf + len, buf_len - len, "ax_su_ndpa_tried = %u\n",
 			 htt_stats_buf->ax_su_ndpa);
-	len += scnprintf(buf + len, buf_len - len, "ax_su_ndp = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "ax_su_ndp_queued = %u\n",
+			 htt_stats_buf->ax_su_ndp_queued);
+	len += scnprintf(buf + len, buf_len - len, "ax_su_ndp_tried = %u\n",
 			 htt_stats_buf->ax_su_ndp);
-	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_ndpa = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_ndpa_queued = %u\n",
+			 htt_stats_buf->ax_mu_mimo_ndpa_queued);
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_ndpa_tried = %u\n",
 			 htt_stats_buf->ax_mu_mimo_ndpa);
-	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_ndp = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_ndp_queued = %u\n",
+			 htt_stats_buf->ax_mu_mimo_ndp_queued);
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_ndp_tried = %u\n",
 			 htt_stats_buf->ax_mu_mimo_ndp);
-	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_1 = %u\n",
-			 htt_stats_buf->ax_mu_mimo_brpoll_1);
-	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_2 = %u\n",
-			 htt_stats_buf->ax_mu_mimo_brpoll_2);
-	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_3 = %u\n",
-			 htt_stats_buf->ax_mu_mimo_brpoll_3);
-	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_4 = %u\n",
-			 htt_stats_buf->ax_mu_mimo_brpoll_4);
-	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_5 = %u\n",
-			 htt_stats_buf->ax_mu_mimo_brpoll_5);
-	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_6 = %u\n",
-			 htt_stats_buf->ax_mu_mimo_brpoll_6);
-	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brpoll_7 = %u\n",
-			 htt_stats_buf->ax_mu_mimo_brpoll_7);
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_brpoll_queued,
+			   "ax_mu_mimo_brpollX_queued",
+			   HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS - 1, "\n");
+
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_brpoll,
+			   "ax_mu_mimo_brpollX_tried",
+			   HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS - 1, "\n");
+
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_ul_mumimo_trigger,
+			   "ax_ul_mumimo_trigger",
+			   HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS, "\n");
 	len += scnprintf(buf + len, buf_len - len, "ax_basic_trigger = %u\n",
 			 htt_stats_buf->ax_basic_trigger);
 	len += scnprintf(buf + len, buf_len - len, "ax_bsr_trigger = %u\n",
@@ -1277,18 +1451,32 @@
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_SELFGEN_AC_ERR_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "ac_su_ndp_err = %u\n",
 			 htt_stats_buf->ac_su_ndp_err);
+	len += scnprintf(buf + len, buf_len - len, "ac_su_ndp_flushed = %u\n",
+			 htt_stats_buf->ac_su_ndp_flushed);
 	len += scnprintf(buf + len, buf_len - len, "ac_su_ndpa_err = %u\n",
 			 htt_stats_buf->ac_su_ndpa_err);
+	len += scnprintf(buf + len, buf_len - len, "ac_su_ndpa_flushed = %u\n",
+			 htt_stats_buf->ac_su_ndpa_flushed);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndpa_err = %u\n",
 			 htt_stats_buf->ac_mu_mimo_ndpa_err);
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndpa_flushed = %u\n",
+			 htt_stats_buf->ac_mu_mimo_ndpa_flushed);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndp_err = %u\n",
 			 htt_stats_buf->ac_mu_mimo_ndp_err);
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_ndp_flushed = %u\n",
+			 htt_stats_buf->ac_mu_mimo_ndp_flushed);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brp1_err = %u\n",
 			 htt_stats_buf->ac_mu_mimo_brp1_err);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brp2_err = %u\n",
 			 htt_stats_buf->ac_mu_mimo_brp2_err);
 	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brp3_err = %u\n",
 			 htt_stats_buf->ac_mu_mimo_brp3_err);
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brp1_flushed = %u\n",
+			 htt_stats_buf->ac_mu_mimo_brp1_flushed);
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brp2_flushed = %u\n",
+			 htt_stats_buf->ac_mu_mimo_brp2_flushed);
+	len += scnprintf(buf + len, buf_len - len, "ac_mu_mimo_brp3_flushed = %u\n",
+			 htt_stats_buf->ac_mu_mimo_brp3_flushed);
 
 	stats_req->buf_len = len;
 }
@@ -1305,26 +1493,37 @@
 	len += scnprintf(buf + len, buf_len - len, "HTT_TX_SELFGEN_AX_ERR_STATS_TLV:\n");
 	len += scnprintf(buf + len, buf_len - len, "ax_su_ndp_err = %u\n",
 			 htt_stats_buf->ax_su_ndp_err);
+	len += scnprintf(buf + len, buf_len - len, "ax_su_ndp_flushed = %u\n",
+			 htt_stats_buf->ax_su_ndp_flushed);
 	len += scnprintf(buf + len, buf_len - len, "ax_su_ndpa_err = %u\n",
 			 htt_stats_buf->ax_su_ndpa_err);
+	len += scnprintf(buf + len, buf_len - len, "ax_su_ndpa_flushed = %u\n",
+			 htt_stats_buf->ax_su_ndpa_flushed);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_ndpa_err = %u\n",
 			 htt_stats_buf->ax_mu_mimo_ndpa_err);
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_ndpa_flushed = %u\n",
+			 htt_stats_buf->ax_mu_mimo_ndpa_flushed);
 	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_ndp_err = %u\n",
 			 htt_stats_buf->ax_mu_mimo_ndp_err);
-	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp1_err = %u\n",
-			 htt_stats_buf->ax_mu_mimo_brp1_err);
-	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp2_err = %u\n",
-			 htt_stats_buf->ax_mu_mimo_brp2_err);
-	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp3_err = %u\n",
-			 htt_stats_buf->ax_mu_mimo_brp3_err);
-	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp4_err = %u\n",
-			 htt_stats_buf->ax_mu_mimo_brp4_err);
-	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp5_err = %u\n",
-			 htt_stats_buf->ax_mu_mimo_brp5_err);
-	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp6_err = %u\n",
-			 htt_stats_buf->ax_mu_mimo_brp6_err);
-	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_brp7_err = %u\n",
-			 htt_stats_buf->ax_mu_mimo_brp7_err);
+	len += scnprintf(buf + len, buf_len - len, "ax_mu_mimo_ndp_flushed = %u\n",
+			 htt_stats_buf->ax_mu_mimo_ndp_flushed);
+
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_brp_err,
+			   "ax_mu_mimo_brpX_err",
+			   HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS - 1, "\n");
+
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_brpoll_flushed,
+			   "ax_mu_mimo_brpollX_flushed",
+			   HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS - 1, "\n");
+
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_brp_err_num_cbf_received,
+			   "ax_mu_mimo_num_cbf_rcvd_on_brp_err",
+			   HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS, "\n");
+
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_ul_mumimo_trigger_err,
+			   "ax_ul_mumimo_trigger_err",
+			   HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS, "\n");
+
 	len += scnprintf(buf + len, buf_len - len, "ax_basic_trigger_err = %u\n",
 			 htt_stats_buf->ax_basic_trigger_err);
 	len += scnprintf(buf + len, buf_len - len, "ax_bsr_trigger_err = %u\n",
@@ -1646,6 +1845,22 @@
 			 htt_stats_buf->notify_sched);
 	len += scnprintf(buf + len, buf_len - len, "dur_based_sendn_term = %u\n",
 			 htt_stats_buf->dur_based_sendn_term);
+	len += scnprintf(buf + len, buf_len - len, "su_notify2_sched = %u\n",
+			 htt_stats_buf->su_notify2_sched);
+	len += scnprintf(buf + len, buf_len - len, "su_optimal_queued_msdus_sched = %u\n",
+			 htt_stats_buf->su_optimal_queued_msdus_sched);
+	len += scnprintf(buf + len, buf_len - len, "su_delay_timeout_sched = %u\n",
+			 htt_stats_buf->su_delay_timeout_sched);
+	len += scnprintf(buf + len, buf_len - len, "su_min_txtime_sched_delay = %u\n",
+			 htt_stats_buf->su_min_txtime_sched_delay);
+	len += scnprintf(buf + len, buf_len - len, "su_no_delay = %u\n",
+			 htt_stats_buf->su_no_delay);
+	len += scnprintf(buf + len, buf_len - len, "num_supercycles = %u\n",
+			 htt_stats_buf->num_supercycles);
+	len += scnprintf(buf + len, buf_len - len, "num_subcycles_with_sort = %u\n",
+			 htt_stats_buf->num_subcycles_with_sort);
+	len += scnprintf(buf + len, buf_len - len, "num_subcycles_no_sort = %u\n",
+			 htt_stats_buf->num_subcycles_no_sort);
 
 	stats_req->buf_len = len;
 }
@@ -1804,8 +2019,9 @@
 	stats_req->buf_len = len;
 }
 
-static inline void htt_print_tx_tqm_cmn_stats_tlv(const void *tag_buf,
-						  struct debug_htt_stats_req *stats_req)
+static inline void
+htt_print_tx_tqm_cmn_stats_tlv(const void *tag_buf, u16 tag_len,
+			       struct debug_htt_stats_req *stats_req)
 {
 	const struct htt_tx_tqm_cmn_stats_tlv *htt_stats_buf = tag_buf;
 	u8 *buf = stats_req->buf;
@@ -1830,6 +2046,21 @@
 			 htt_stats_buf->drop_notification);
 	len += scnprintf(buf + len, buf_len - len, "desc_threshold = %u\n",
 			 htt_stats_buf->desc_threshold);
+	len += scnprintf(buf + len, buf_len - len, "hwsch_tqm_invalid_status = %u\n",
+			 htt_stats_buf->hwsch_tqm_invalid_status);
+	len += scnprintf(buf + len, buf_len - len, "missed_tqm_gen_mpdus = %u\n",
+			 htt_stats_buf->missed_tqm_gen_mpdus);
+
+	if (tag_len > (offsetof(struct htt_tx_tqm_cmn_stats_tlv, tqm_active_tids) -
+		       offsetof(struct htt_tx_tqm_cmn_stats_tlv, mac_id__word))) {
+		len += scnprintf(buf + len, buf_len - len, "active_tqm_tids = %u\n",
+				 htt_stats_buf->tqm_active_tids);
+		len += scnprintf(buf + len, buf_len - len, "inactive_tqm_tids = %u\n",
+				 htt_stats_buf->tqm_inactive_tids);
+		len += scnprintf(buf + len, buf_len - len,
+				 "tqm_active_msduq_flows = %u\n",
+				 htt_stats_buf->tqm_active_msduq_flows);
+	}
 
 	stats_req->buf_len = len;
 }
@@ -1849,6 +2080,54 @@
 			 htt_stats_buf->q_not_empty_failure);
 	len += scnprintf(buf + len, buf_len - len, "add_msdu_failure = %u\n",
 			 htt_stats_buf->add_msdu_failure);
+	len += scnprintf(buf + len, buf_len - len, "TQM_ERROR_RESET_STATS:\n");
+	len += scnprintf(buf + len, buf_len - len, "tqm_cache_ctl_err = %u\n",
+			   htt_stats_buf->tqm_cache_ctl_err);
+	len += scnprintf(buf + len, buf_len - len, "tqm_soft_reset = %u\n",
+			   htt_stats_buf->tqm_soft_reset);
+	len += scnprintf(buf + len, buf_len - len,
+			   "tqm_reset_total_num_in_use_link_descs = %u\n",
+			   htt_stats_buf->tqm_reset_total_num_in_use_link_descs);
+	len += scnprintf(buf + len, buf_len - len,
+			   "tqm_reset_worst_case_num_lost_link_descs = %u\n",
+			   htt_stats_buf->tqm_reset_worst_case_num_lost_link_descs);
+	len += scnprintf(buf + len, buf_len - len,
+			 "tqm_reset_worst_case_num_lost_host_tx_bufs_count = %u\n",
+			 htt_stats_buf->tqm_reset_worst_case_num_lost_host_tx_bufs_count);
+	len += scnprintf(buf + len, buf_len - len,
+			   "tqm_reset_num_in_use_link_descs_internal_tqm = %u\n",
+			   htt_stats_buf->tqm_reset_num_in_use_link_descs_internal_tqm);
+	len += scnprintf(buf + len, buf_len - len,
+		      "tqm_reset_num_in_use_link_descs_wbm_idle_link_ring = %u\n",
+		      htt_stats_buf->tqm_reset_num_in_use_link_descs_wbm_idle_link_ring);
+	len += scnprintf(buf + len, buf_len - len,
+			   "tqm_reset_time_to_tqm_hang_delta_ms = %u\n",
+			   htt_stats_buf->tqm_reset_time_to_tqm_hang_delta_ms);
+	len += scnprintf(buf + len, buf_len - len, "tqm_reset_recovery_time_ms = %u\n",
+			   htt_stats_buf->tqm_reset_recovery_time_ms);
+	len += scnprintf(buf + len, buf_len - len, "tqm_reset_num_peers_hdl = %u\n",
+			   htt_stats_buf->tqm_reset_num_peers_hdl);
+	len += scnprintf(buf + len, buf_len - len,
+			   "tqm_reset_cumm_dirty_hw_mpduq_proc_cnt = %u\n",
+			   htt_stats_buf->tqm_reset_cumm_dirty_hw_mpduq_proc_cnt);
+	len += scnprintf(buf + len, buf_len - len,
+			   "tqm_reset_cumm_dirty_hw_msduq_proc = %u\n",
+			   htt_stats_buf->tqm_reset_cumm_dirty_hw_msduq_proc);
+	len += scnprintf(buf + len, buf_len - len,
+			   "tqm_reset_flush_cache_cmd_su_cnt = %u\n",
+			   htt_stats_buf->tqm_reset_flush_cache_cmd_su_cnt);
+	len += scnprintf(buf + len, buf_len - len,
+			   "tqm_reset_flush_cache_cmd_other_cnt = %u\n",
+			   htt_stats_buf->tqm_reset_flush_cache_cmd_other_cnt);
+	len += scnprintf(buf + len, buf_len - len,
+			   "tqm_reset_flush_cache_cmd_trig_type = %u\n",
+			   htt_stats_buf->tqm_reset_flush_cache_cmd_trig_type);
+	len += scnprintf(buf + len, buf_len - len,
+			   "tqm_reset_flush_cache_cmd_trig_cfg = %u\n",
+			   htt_stats_buf->tqm_reset_flush_cache_cmd_trig_cfg);
+	len += scnprintf(buf + len, buf_len - len,
+			   "tqm_reset_flush_cache_cmd_skip_cmd_status_null = %u\n",
+			   htt_stats_buf->tqm_reset_flush_cache_cmd_skip_cmd_status_null);
 
 	stats_req->buf_len = len;
 }
@@ -1916,6 +2195,16 @@
 			 htt_stats_buf->g1_packets);
 	len += scnprintf(buf + len, buf_len - len, "g2_packets = %u\n",
 			 htt_stats_buf->g2_packets);
+	len += scnprintf(buf + len, buf_len - len, "rc4_packets = %u\n",
+			   htt_stats_buf->rc4_packets);
+	len += scnprintf(buf + len, buf_len - len, "eap_packets = %u\n",
+			   htt_stats_buf->eap_packets);
+	len += scnprintf(buf + len, buf_len - len, "eapol_start_packets = %u\n",
+			   htt_stats_buf->eapol_start_packets);
+	len += scnprintf(buf + len, buf_len - len, "eapol_logoff_packets = %u\n",
+			   htt_stats_buf->eapol_logoff_packets);
+	len += scnprintf(buf + len, buf_len - len, "eapol_encap_asf_packets = %u\n",
+			   htt_stats_buf->eapol_encap_asf_packets);
 
 	stats_req->buf_len = len;
 }
@@ -1957,6 +2246,18 @@
 			 htt_stats_buf->ipv6_jumbogram_zero_length);
 	len += scnprintf(buf + len, buf_len - len, "qos_to_non_qos_in_prog = %u\n",
 			 htt_stats_buf->qos_to_non_qos_in_prog);
+	len += scnprintf(buf + len, buf_len - len, "ap_bcast_mcast_eapol = %u\n",
+			   htt_stats_buf->ap_bcast_mcast_eapol);
+	len += scnprintf(buf + len, buf_len - len, "unicast_on_ap_bss_peer = %u\n",
+			   htt_stats_buf->unicast_on_ap_bss_peer);
+	len += scnprintf(buf + len, buf_len - len, "ap_vdev_invalid = %u\n",
+			   htt_stats_buf->ap_vdev_invalid);
+	len += scnprintf(buf + len, buf_len - len, "incomplete_llc = %u\n",
+			   htt_stats_buf->incomplete_llc);
+	len += scnprintf(buf + len, buf_len - len, "eapol_duplicate_m3 = %u\n",
+			   htt_stats_buf->eapol_duplicate_m3);
+	len += scnprintf(buf + len, buf_len - len, "eapol_duplicate_m4 = %u\n",
+			   htt_stats_buf->eapol_duplicate_m4);
 
 	stats_req->buf_len = len;
 }
@@ -2181,6 +2482,12 @@
 			 htt_stats_buf->wbm2fw_entry_count);
 	len += scnprintf(buf + len, buf_len - len, "invalid_pdev = %u\n",
 			 htt_stats_buf->invalid_pdev);
+	len += scnprintf(buf + len, buf_len - len, "tcl_res_addrx_timeout = %u\n",
+			 htt_stats_buf->tcl_res_addrx_timeout);
+	len += scnprintf(buf + len, buf_len - len, "invalid_vdev = %u\n",
+			 htt_stats_buf->invalid_vdev);
+	len += scnprintf(buf + len, buf_len - len, "invalid_tcl_exp_frame_desc = %u\n",
+			 htt_stats_buf->invalid_tcl_exp_frame_desc);
 
 	stats_req->buf_len = len;
 }
@@ -2532,7 +2839,8 @@
 				 j, tx_gi[j]);
 		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ac_mu_mimo_tx_gi[j],
 				   NULL, HTT_TX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
-
+		PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->ax_mu_mimo_tx_gi_ext[j],
+				   NULL, HTT_TX_PDEV_STATS_NUM_EXTRA_MCS_COUNTERS, "\n");
 	}
 
 	/* AX MU-MIMO GI Stats */
@@ -2763,6 +3071,22 @@
 					 htt_stats_buf->rx_per_chain_rssi_in_dbm[j][i]);
 		len += scnprintf(buf + len, buf_len - len, "\n");
 	}
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_11ax_dl_ofdma_mcs,
+			   "rx_11ax_dl_ofdma_mcs",
+			   HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS, "\n");
+
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_11ax_dl_ofdma_ru,
+			   "rx_11ax_dl_ofdma_ru",
+			   HTT_RX_PDEV_STATS_NUM_RU_SIZE_COUNTERS, "\n");
+
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_ulofdma_non_data_nusers,
+			   "rx_ulofdma_non_data_nusers",
+			   HTT_RX_PDEV_MAX_OFDMA_NUM_USER, "\n");
+
+	PRINT_ARRAY_TO_BUF(buf, len, htt_stats_buf->rx_ulofdma_data_nusers,
+			   "rx_ulofdma_data_nusers",
+			   HTT_RX_PDEV_MAX_OFDMA_NUM_USER, "\n");
+
 	len += scnprintf(buf + len, buf_len - len, "\n");
 
 	stats_req->buf_len = len;
@@ -3157,7 +3481,7 @@
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
 	len += scnprintf(buf + len, buf_len - len,
-			 "|%10u| %10u| %10u| %11u| %10u| %11u| %18u| %10u|",
+			 "|%10u| %10u| %10u| %11u| %10u| %11u| %18u| %10u|\n",
 			 htt_stats_buf->tx_frame_usec,
 			 htt_stats_buf->rx_frame_usec,
 			 htt_stats_buf->rx_clear_usec,
@@ -3272,10 +3596,28 @@
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
-	len += scnprintf(buf + len, buf_len - len, "OBSS Tx success PPDU = %u\n",
-			 htt_stats_buf->num_obss_tx_ppdu_success);
-	len += scnprintf(buf + len, buf_len - len, "OBSS Tx failures PPDU = %u\n",
-			 htt_stats_buf->num_obss_tx_ppdu_failure);
+	len += scnprintf(buf + len, buf_len - len, "HTT_PDEV_OBSS_PD_STATS_TLV:\n");
+	/*
+	 * Successful/Failure OBSS Transmission stats are omitted out as they
+	 * are not supported in the current chipsets.
+	 */
+	len += scnprintf(buf + len, buf_len - len, "num_spatial_reuse_tx = %u\n",
+			 htt_stats_buf->num_sr_tx_transmissions);
+	len += scnprintf(buf + len, buf_len - len,
+			 "num_spatial_reuse_opportunities = %u\n",
+			 htt_stats_buf->num_spatial_reuse_opportunities);
+	len += scnprintf(buf + len, buf_len - len, "num_non_srg_opportunities = %u\n",
+			 htt_stats_buf->num_non_srg_opportunities);
+	len += scnprintf(buf + len, buf_len - len, "num_non_srg_ppdu_tried = %u\n",
+			 htt_stats_buf->num_non_srg_ppdu_tried);
+	len += scnprintf(buf + len, buf_len - len, "num_non_srg_ppdu_success = %u\n",
+			 htt_stats_buf->num_non_srg_ppdu_success);
+	len += scnprintf(buf + len, buf_len - len, "num_psr_opportunities = %u\n",
+			 htt_stats_buf->num_psr_opportunities);
+	len += scnprintf(buf + len, buf_len - len, "num_psr_ppdu_tried = %u\n",
+			 htt_stats_buf->num_psr_ppdu_tried);
+	len += scnprintf(buf + len, buf_len - len, "num_psr_ppdu_success = %u\n",
+			 htt_stats_buf->num_psr_ppdu_success);
 
 	stats_req->buf_len = len;
 }
@@ -3287,27 +3629,33 @@
 			(struct debug_htt_stats_req *)data;
 	struct htt_ring_backpressure_stats_tlv *htt_stats_buf =
 			(struct htt_ring_backpressure_stats_tlv *)tag_buf;
-	int i;
 	u8 *buf = stats_req->buf;
 	u32 len = stats_req->buf_len;
 	u32 buf_len = ATH12K_HTT_STATS_BUF_SIZE;
 
 	len += scnprintf(buf + len, buf_len - len, "pdev_id = %u\n",
 			 htt_stats_buf->pdev_id);
-	len += scnprintf(buf + len, buf_len - len, "current_head_idx = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "Head_idx = %u\n",
 			 htt_stats_buf->current_head_idx);
-	len += scnprintf(buf + len, buf_len - len, "current_tail_idx = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "Tail_idx = %u\n",
 			 htt_stats_buf->current_tail_idx);
-	len += scnprintf(buf + len, buf_len - len, "num_htt_msgs_sent = %u\n",
+	len += scnprintf(buf + len, buf_len - len, "Num Backpressure Msgs sent = %u\n",
 			 htt_stats_buf->num_htt_msgs_sent);
 	len += scnprintf(buf + len, buf_len - len,
 			 "backpressure_time_ms = %u\n",
 			 htt_stats_buf->backpressure_time_ms);
 
-	for (i = 0; i < 5; i++)
-		len += scnprintf(buf + len, buf_len - len,
-				 "backpressure_hist_%u = %u\n",
-				 i + 1, htt_stats_buf->backpressure_hist[i]);
+	len += scnprintf(buf + len, buf_len - len, "Ring Backpressure Histogram\n");
+	len += scnprintf(buf + len, buf_len - len,
+			 "100ms to 200ms = %u, 200ms to 300ms = %u, 300ms to 400ms = %u\n",
+			 htt_stats_buf->backpressure_hist[0],
+			 htt_stats_buf->backpressure_hist[1],
+			 htt_stats_buf->backpressure_hist[2]);
+
+ 	len += scnprintf(buf + len, buf_len - len,
+			 "400ms to 500 ms = %u, Above 500ms = %u\n",
+			 htt_stats_buf->backpressure_hist[3],
+			 htt_stats_buf->backpressure_hist[4]);
 
 	len += scnprintf(buf + len, buf_len - len,
 			 "============================");
@@ -3995,7 +4343,7 @@
 		break;
 
 	case HTT_STATS_TX_TQM_CMN_TAG:
-		htt_print_tx_tqm_cmn_stats_tlv(tag_buf, stats_req);
+		htt_print_tx_tqm_cmn_stats_tlv(tag_buf, len, stats_req);
 		break;
 
 	case HTT_STATS_TX_TQM_PDEV_TAG:
Index: backports-20220404-5.4.164-f40abb4788/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.h
===================================================================
--- backports-20220404-5.4.164-f40abb4788.orig/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.h	2022-05-10 12:40:45.643065009 +0530
+++ backports-20220404-5.4.164-f40abb4788/drivers/net/wireless/ath/ath12k/debugfs_htt_stats.h	2022-05-10 12:46:04.868576815 +0530
@@ -220,6 +220,27 @@
 
 	u32 tx_active_dur_us_low;
 	u32 tx_active_dur_us_high;
+	u32 remove_mpdus_max_retries;
+	u32 comp_delivered;
+	u32 ppdu_ok;
+	u32 self_triggers;
+	u32 tx_time_dur_data;
+	u32 seq_qdepth_repost_stop;
+	u32 mu_seq_min_msdu_repost_stop;
+	u32 seq_min_msdu_repost_stop;
+	u32 seq_txop_repost_stop;
+	u32 next_seq_cancel;
+	u32 fes_offsets_err_cnt;
+	u32 num_mu_peer_blacklisted;
+	u32 mu_ofdma_seq_posted;
+	u32 ul_mumimo_seq_posted;
+	u32 ul_ofdma_seq_posted;
+
+	u32 thermal_suspend_cnt;
+	u32 dfs_suspend_cnt;
+	u32 tx_abort_suspend_cnt;
+	u32 tgt_specific_opaque_txq_suspend_info;
+	u32 last_suspend_reason;
 };
 
 /* NOTE: Variable length TLV, use length spec to infer array size */
@@ -302,6 +323,33 @@
 	u32    tx_glb_reset;
 	u32    tx_txq_reset;
 	u32    rx_timeout_reset;
+	u32    mac_cold_reset_restore_cal;
+	u32    mac_cold_reset;
+	u32    mac_warm_reset;
+	u32    mac_only_reset;
+	u32    phy_warm_reset;
+	u32    phy_warm_reset_ucode_trig;
+	u32    mac_warm_reset_restore_cal;
+	u32    mac_sfm_reset;
+	u32    phy_warm_reset_m3_ssr;
+	u32    phy_warm_reset_reason_phy_m3;
+	u32    phy_warm_reset_reason_tx_hw_stuck;
+	u32    phy_warm_reset_reason_num_cca_rx_frame_stuck;
+	u32    phy_warm_reset_reason_wal_rx_recovery_rst_rx_busy;
+	u32    phy_warm_reset_reason_wal_rx_recovery_rst_mac_hang;
+	u32    phy_warm_reset_reason_mac_reset_converted_phy_reset;
+	u32    wal_rx_recovery_rst_mac_hang_count;
+	u32    wal_rx_recovery_rst_known_sig_count;
+	u32    wal_rx_recovery_rst_no_rx_count;
+	u32    wal_rx_recovery_rst_no_rx_consecutive_count;
+	u32    wal_rx_recovery_rst_rx_busy_count;
+	u32    wal_rx_recovery_rst_phy_mac_hang_count;
+	u32    rx_flush_cnt;
+	u32    phy_warm_reset_reason_tx_lifetime_expiry_cca_stuck;
+	u32    phy_warm_reset_reason_tx_consecutive_flush9_war;
+	u32    phy_warm_reset_reason_tx_hwsch_reset_war;
+	u32    phy_warm_reset_reason_hwsch_wdog_or_cca_wdog_war;
+	u32    fw_rx_rings_reset;
 };
 
 struct htt_hw_stats_whal_tx_tlv {
@@ -431,6 +479,7 @@
 	u32 ppdu_transmitted_bytes_high;
 	u32 peer_ttl_removed_count;
 	u32 inactive_time;
+	u32 remove_mpdus_max_retries;
 };
 
 #define HTT_PEER_DETAILS_VDEV_ID	GENMASK(7, 0)
@@ -459,8 +508,11 @@
 };
 
 #define HTT_TX_PEER_STATS_NUM_MCS_COUNTERS        12
+#define HTT_TX_PEER_STATS_NUM_EXTRA_MCS_COUNTERS   2
 #define HTT_TX_PEER_STATS_NUM_GI_COUNTERS          4
 #define HTT_TX_PEER_STATS_NUM_DCM_COUNTERS         5
+#define HTT_RX_PEER_STATS_NUM_BW_EXT_COUNTERS      4
+#define HTT_RX_PDEV_STATS_NUM_BW_EXT_COUNTERS      4
 #define HTT_TX_PEER_STATS_NUM_BW_COUNTERS          4
 #define HTT_TX_PEER_STATS_NUM_SPATIAL_STREAMS      8
 #define HTT_TX_PEER_STATS_NUM_PREAMBLE_TYPES       HTT_STATS_PREAM_COUNT
@@ -491,6 +543,7 @@
 };
 
 #define HTT_RX_PEER_STATS_NUM_MCS_COUNTERS        12
+#define HTT_RX_PEER_STATS_NUM_EXTRA_MCS_COUNTERS   2
 #define HTT_RX_PEER_STATS_NUM_GI_COUNTERS          4
 #define HTT_RX_PEER_STATS_NUM_DCM_COUNTERS         5
 #define HTT_RX_PEER_STATS_NUM_BW_COUNTERS          4
@@ -523,6 +576,27 @@
 	/* Counters to track number of rx packets in each GI in each mcs (0-11) */
 	u32 rx_gi[HTT_RX_PEER_STATS_NUM_GI_COUNTERS]
 		 [HTT_RX_PEER_STATS_NUM_MCS_COUNTERS];
+	u32 rx_ulofdma_non_data_ppdu;
+	u32 rx_ulofdma_data_ppdu;
+	u32 rx_ulofdma_mpdu_ok;
+	u32 rx_ulofdma_mpdu_fail;
+	s8  rx_ul_fd_rssi[HTT_RX_PEER_STATS_NUM_SPATIAL_STREAMS];
+
+	u32 per_chain_rssi_pkt_type;
+	s8  rx_per_chain_rssi_in_dbm[HTT_RX_PEER_STATS_NUM_SPATIAL_STREAMS]
+				    [HTT_RX_PEER_STATS_NUM_BW_COUNTERS];
+	u32 rx_ulmumimo_non_data_ppdu;
+	u32 rx_ulmumimo_data_ppdu;
+	u32 rx_ulmumimo_mpdu_ok;
+	u32 rx_ulmumimo_mpdu_fail;
+	u8  rssi_chain_ext[HTT_RX_PEER_STATS_NUM_SPATIAL_STREAMS]
+			  [HTT_RX_PEER_STATS_NUM_BW_EXT_COUNTERS];
+
+	/* Stats for MCS 12/13 */
+	u32 rx_mcs_ext[HTT_RX_PEER_STATS_NUM_EXTRA_MCS_COUNTERS];
+	u32 rx_stbc_ext[HTT_RX_PEER_STATS_NUM_EXTRA_MCS_COUNTERS];
+	u32 rx_gi_ext[HTT_RX_PEER_STATS_NUM_GI_COUNTERS]
+		     [HTT_RX_PEER_STATS_NUM_EXTRA_MCS_COUNTERS];
 };
 
 enum htt_peer_stats_req_mode {
@@ -539,6 +613,7 @@
 	HTT_TX_TID_STATS_TLV         = 4,
 	HTT_RX_TID_STATS_TLV         = 5,
 	HTT_MSDU_FLOW_STATS_TLV      = 6,
+	HTT_PEER_SCHED_STATS_TLV     = 7,
 
 	HTT_PEER_STATS_MAX_TLV       = 31,
 };
@@ -659,6 +734,10 @@
 };
 
 /* == TX SELFGEN STATS == */
+#define HTT_TX_PDEV_STATS_NUM_AC_MUMIMO_USER_STATS    4
+#define HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS    8
+#define HTT_TX_PDEV_STATS_NUM_OFDMA_USER_STATS       74
+#define HTT_TX_PDEV_STATS_NUM_UL_MUMIMO_USER_STATS    8
 struct htt_tx_selfgen_cmn_stats_tlv {
 	u32 mac_id__word;
 	u32 su_bar;
@@ -672,6 +751,13 @@
 	u32 delayed_bar_5; /* MU user 5 */
 	u32 delayed_bar_6; /* MU user 6 */
 	u32 delayed_bar_7; /* MU user 7 */
+	u32 bar_with_tqm_head_seq_num;
+	u32 bar_with_tid_seq_num;
+	u32 su_sw_rts_queued;
+	u32 su_sw_rts_tried;
+	u32 su_sw_rts_err;
+	u32 su_sw_rts_flushed;
+	u32 su_sw_rts_rcvd_cts_diff_bw;
 };
 
 struct htt_tx_selfgen_ac_stats_tlv {
@@ -680,9 +766,16 @@
 	u32 ac_su_ndp;
 	u32 ac_mu_mimo_ndpa;
 	u32 ac_mu_mimo_ndp;
-	u32 ac_mu_mimo_brpoll_1; /* MU user 1 */
-	u32 ac_mu_mimo_brpoll_2; /* MU user 2 */
-	u32 ac_mu_mimo_brpoll_3; /* MU user 3 */
+	u32 ac_mu_mimo_brpoll_1;
+	u32 ac_mu_mimo_brpoll_2;
+	u32 ac_mu_mimo_brpoll_3;
+	u32 ac_su_ndpa_queued;
+	u32 ac_su_ndp_queued;
+	u32 ac_mu_mimo_ndpa_queued;
+	u32 ac_mu_mimo_ndp_queued;
+	u32 ac_mu_mimo_brpoll_1_queued;
+	u32 ac_mu_mimo_brpoll_2_queued;
+	u32 ac_mu_mimo_brpoll_3_queued;
 };
 
 struct htt_tx_selfgen_ax_stats_tlv {
@@ -691,17 +784,29 @@
 	u32 ax_su_ndp;
 	u32 ax_mu_mimo_ndpa;
 	u32 ax_mu_mimo_ndp;
-	u32 ax_mu_mimo_brpoll_1; /* MU user 1 */
-	u32 ax_mu_mimo_brpoll_2; /* MU user 2 */
-	u32 ax_mu_mimo_brpoll_3; /* MU user 3 */
-	u32 ax_mu_mimo_brpoll_4; /* MU user 4 */
-	u32 ax_mu_mimo_brpoll_5; /* MU user 5 */
-	u32 ax_mu_mimo_brpoll_6; /* MU user 6 */
-	u32 ax_mu_mimo_brpoll_7; /* MU user 7 */
+	union {
+		struct {
+			/* deprecated old names */
+			u32 ax_mu_mimo_brpoll_1;
+			u32 ax_mu_mimo_brpoll_2;
+			u32 ax_mu_mimo_brpoll_3;
+			u32 ax_mu_mimo_brpoll_4;
+			u32 ax_mu_mimo_brpoll_5;
+			u32 ax_mu_mimo_brpoll_6;
+			u32 ax_mu_mimo_brpoll_7;
+		};
+		u32 ax_mu_mimo_brpoll[HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS - 1];
+	};
 	u32 ax_basic_trigger;
 	u32 ax_bsr_trigger;
 	u32 ax_mu_bar_trigger;
 	u32 ax_mu_rts_trigger;
+	u32 ax_su_ndpa_queued;
+	u32 ax_su_ndp_queued;
+	u32 ax_mu_mimo_ndpa_queued;
+	u32 ax_mu_mimo_ndp_queued;
+	u32 ax_mu_mimo_brpoll_queued[HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS - 1];
+	u32 ax_ul_mumimo_trigger[HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS];
 };
 
 struct htt_tx_selfgen_ac_err_stats_tlv {
@@ -713,6 +818,13 @@
 	u32 ac_mu_mimo_brp1_err;
 	u32 ac_mu_mimo_brp2_err;
 	u32 ac_mu_mimo_brp3_err;
+	u32 ac_su_ndp_flushed;
+	u32 ac_su_ndpa_flushed;
+	u32 ac_mu_mimo_ndpa_flushed;
+	u32 ac_mu_mimo_ndp_flushed;
+	u32 ac_mu_mimo_brp1_flushed;
+	u32 ac_mu_mimo_brp2_flushed;
+	u32 ac_mu_mimo_brp3_flushed;
 };
 
 struct htt_tx_selfgen_ax_err_stats_tlv {
@@ -721,17 +833,31 @@
 	u32 ax_su_ndpa_err;
 	u32 ax_mu_mimo_ndpa_err;
 	u32 ax_mu_mimo_ndp_err;
-	u32 ax_mu_mimo_brp1_err;
-	u32 ax_mu_mimo_brp2_err;
-	u32 ax_mu_mimo_brp3_err;
-	u32 ax_mu_mimo_brp4_err;
-	u32 ax_mu_mimo_brp5_err;
-	u32 ax_mu_mimo_brp6_err;
-	u32 ax_mu_mimo_brp7_err;
+	union {
+		struct {
+			/* deprecated old names */
+			u32 ax_mu_mimo_brp1_err;
+			u32 ax_mu_mimo_brp2_err;
+			u32 ax_mu_mimo_brp3_err;
+			u32 ax_mu_mimo_brp4_err;
+			u32 ax_mu_mimo_brp5_err;
+			u32 ax_mu_mimo_brp6_err;
+			u32 ax_mu_mimo_brp7_err;
+		};
+	u32 ax_mu_mimo_brp_err[HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS - 1];
+};
 	u32 ax_basic_trigger_err;
 	u32 ax_bsr_trigger_err;
 	u32 ax_mu_bar_trigger_err;
 	u32 ax_mu_rts_trigger_err;
+	u32 ax_ulmumimo_trigger_err;
+	u32 ax_mu_mimo_brp_err_num_cbf_received[HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS];
+	u32 ax_su_ndpa_flushed;
+	u32 ax_su_ndp_flushed;
+	u32 ax_mu_mimo_ndpa_flushed;
+	u32 ax_mu_mimo_ndp_flushed;
+	u32 ax_mu_mimo_brpoll_flushed[HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS - 1];
+	u32 ax_ul_mumimo_trigger_err[HTT_TX_PDEV_STATS_NUM_AX_MUMIMO_USER_STATS];
 };
 
 /* == TX MU STATS == */
@@ -871,6 +997,14 @@
 	u32 num_tqm_sched_algo_trigger;
 	u32 notify_sched;
 	u32 dur_based_sendn_term;
+	u32 su_notify2_sched;
+	u32 su_optimal_queued_msdus_sched;
+	u32 su_delay_timeout_sched;
+	u32 su_min_txtime_sched_delay;
+	u32 su_no_delay;
+	u32 num_supercycles;
+	u32 num_subcycles_with_sort;
+	u32 num_subcycles_no_sort;
 };
 
 struct htt_stats_tx_sched_cmn_tlv {
@@ -960,6 +1094,11 @@
 	u32 q_not_empty;
 	u32 drop_notification;
 	u32 desc_threshold;
+	u32 hwsch_tqm_invalid_status;
+	u32 missed_tqm_gen_mpdus;
+	u32 tqm_active_tids;
+	u32 tqm_inactive_tids;
+	u32 tqm_active_msduq_flows;
 };
 
 struct htt_tx_tqm_error_stats_tlv {
@@ -967,6 +1106,24 @@
 	u32 q_empty_failure;
 	u32 q_not_empty_failure;
 	u32 add_msdu_failure;
+	/* TQM reset debug stats */
+	u32 tqm_cache_ctl_err;
+	u32 tqm_soft_reset;
+	u32 tqm_reset_total_num_in_use_link_descs;
+	u32 tqm_reset_worst_case_num_lost_link_descs;
+	u32 tqm_reset_worst_case_num_lost_host_tx_bufs_count;
+	u32 tqm_reset_num_in_use_link_descs_internal_tqm;
+	u32 tqm_reset_num_in_use_link_descs_wbm_idle_link_ring;
+	u32 tqm_reset_time_to_tqm_hang_delta_ms;
+	u32 tqm_reset_recovery_time_ms;
+	u32 tqm_reset_num_peers_hdl;
+	u32 tqm_reset_cumm_dirty_hw_mpduq_proc_cnt;
+	u32 tqm_reset_cumm_dirty_hw_msduq_proc;
+	u32 tqm_reset_flush_cache_cmd_su_cnt;
+	u32 tqm_reset_flush_cache_cmd_other_cnt;
+	u32 tqm_reset_flush_cache_cmd_trig_type;
+	u32 tqm_reset_flush_cache_cmd_trig_cfg;
+	u32 tqm_reset_flush_cache_cmd_skip_cmd_status_null;
 };
 
 /* == TQM CMDQ stats == */
@@ -997,6 +1154,11 @@
 	u32 m4_packets;
 	u32 g1_packets;
 	u32 g2_packets;
+	u32 rc4_packets;
+	u32 eap_packets;
+	u32 eapol_start_packets;
+	u32 eapol_logoff_packets;
+	u32 eapol_encap_asf_packets;
 };
 
 struct htt_tx_de_classify_failed_stats_tlv {
@@ -1013,6 +1175,12 @@
 	u32 fse_tid_override;
 	u32 ipv6_jumbogram_zero_length;
 	u32 qos_to_non_qos_in_prog;
+	u32 ap_bcast_mcast_eapol;
+	u32 unicast_on_ap_bss_peer;
+	u32 ap_vdev_invalid;
+	u32 incomplete_llc;
+	u32 eapol_duplicate_m3;
+	u32 eapol_duplicate_m4;
 };
 
 struct htt_tx_de_classify_stats_tlv {
@@ -1112,6 +1280,9 @@
 	u32   tcl_res_invalid_addrx;
 	u32   wbm2fw_entry_count;
 	u32   invalid_pdev;
+	u32   tcl_res_addrx_timeout;
+	u32   invalid_vdev;
+	u32   invalid_tcl_exp_frame_desc;
 };
 
 /* == RING-IF STATS == */
@@ -1538,6 +1709,20 @@
 	u32 per_chain_rssi_pkt_type;
 	s8 rx_per_chain_rssi_in_dbm[HTT_RX_PDEV_STATS_NUM_SPATIAL_STREAMS]
 				   [HTT_RX_PDEV_STATS_NUM_BW_COUNTERS];
+	u32 rx_su_ndpa;
+	u32 rx_11ax_su_txbf_mcs[HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS];
+	u32 rx_mu_ndpa;
+	u32 rx_11ax_mu_txbf_mcs[HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS];
+	u32 rx_br_poll;
+	u32 rx_11ax_dl_ofdma_mcs[HTT_RX_PDEV_STATS_NUM_MCS_COUNTERS];
+	u32 rx_11ax_dl_ofdma_ru[HTT_RX_PDEV_STATS_NUM_RU_SIZE_COUNTERS];
+
+	u32 rx_ulmumimo_non_data_ppdu[HTT_RX_PDEV_MAX_ULMUMIMO_NUM_USER];
+	u32 rx_ulmumimo_data_ppdu[HTT_RX_PDEV_MAX_ULMUMIMO_NUM_USER];
+	u32 rx_ulmumimo_mpdu_ok[HTT_RX_PDEV_MAX_ULMUMIMO_NUM_USER];
+	u32 rx_ulmumimo_mpdu_fail[HTT_RX_PDEV_MAX_ULMUMIMO_NUM_USER];
+	u32 rx_ulofdma_non_data_nusers[HTT_RX_PDEV_MAX_OFDMA_NUM_USER];
+	u32 rx_ulofdma_data_nusers[HTT_RX_PDEV_MAX_OFDMA_NUM_USER];
 };
 
 struct htt_rx_pdev_rate_ext_stats_tlv {
Index: backports-20220404-5.4.164-f40abb4788/drivers/net/wireless/ath/ath12k/dp.h
===================================================================
--- backports-20220404-5.4.164-f40abb4788.orig/drivers/net/wireless/ath/ath12k/dp.h	2022-05-10 12:40:45.643065009 +0530
+++ backports-20220404-5.4.164-f40abb4788/drivers/net/wireless/ath/ath12k/dp.h	2022-05-10 12:40:45.643065009 +0530
@@ -1902,12 +1902,13 @@
  *   4 bit htt_tx_tid_stats_tlv/htt_tx_tid_stats_v1_tlv
  *   5 bit htt_rx_tid_stats_tlv
  *   6 bit htt_msdu_flow_stats_tlv
+ *   7 bit htt_peer_sched_stats_tlv
  * @config_param2: [Bit31 : Bit0] mac_addr31to0
  * @config_param3: [Bit15 : Bit0] mac_addr47to32
  *                [Bit31 : Bit16] reserved
  */
 #define HTT_STAT_PEER_INFO_MAC_ADDR BIT(0)
-#define HTT_STAT_DEFAULT_PEER_REQ_TYPE 0x7f
+#define HTT_STAT_DEFAULT_PEER_REQ_TYPE 0xff
 
 /* Used to set different configs to the specified stats type.*/
 struct htt_ext_stats_cfg_params {
