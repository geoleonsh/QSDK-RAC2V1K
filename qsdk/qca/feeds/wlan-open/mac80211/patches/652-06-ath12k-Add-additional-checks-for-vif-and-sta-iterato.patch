From 77dfb0bd2c002a07a1f8896fc0abefc27e5a914e Mon Sep 17 00:00:00 2001
From: Sriram R <quic_srirrama@quicinc.com>
Date: Wed, 29 Dec 2021 12:53:17 +0530
Subject: [PATCH 07/10] ath12k: Add additional checks for vif and sta iterators

Since vifs and stas of different radios are added to same
local list in mac80211, additional checks needs to be done
in driver to ensure we are processing the intended vif
and sta corresponding to the radio.

Signed-off-by: Sriram R <quic_srirrama@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h |  1 +
 drivers/net/wireless/ath/ath12k/mac.c  | 22 ++++++++++++++++++----
 2 files changed, 19 insertions(+), 4 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -348,6 +348,7 @@ struct ath12k_vif {
 
 struct ath12k_vif_iter {
 	u32 vdev_id;
+	struct ath12k *ar;
 	struct ath12k_vif *arvif;
 };
 
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -578,7 +578,8 @@ static void ath12k_get_arvif_iter(void *
 	struct ath12k_vif_iter *arvif_iter = data;
 	struct ath12k_vif *arvif = (void *)vif->drv_priv;
 
-	if (arvif->vdev_id == arvif_iter->vdev_id)
+	if ((arvif->vdev_id == arvif_iter->vdev_id) &&
+	    (arvif->ar == arvif_iter->ar))
 		arvif_iter->arvif = arvif;
 }
 
@@ -589,6 +590,7 @@ struct ath12k_vif *ath12k_mac_get_arvif(
 
 	memset(&arvif_iter, 0, sizeof(struct ath12k_vif_iter));
 	arvif_iter.vdev_id = vdev_id;
+	arvif_iter.ar = ar;
 
 	flags = IEEE80211_IFACE_ITER_RESUME_ALL;
 	ieee80211_iterate_active_interfaces_atomic(ar->hw,
@@ -7916,15 +7918,18 @@ struct ath12k_mac_change_chanctx_arg {
 	struct ieee80211_vif_chanctx_switch *vifs;
 	int n_vifs;
 	int next_vif;
+	struct ath12k *ar;
 };
 
 static void
 ath12k_mac_change_chanctx_cnt_iter(void *data, u8 *mac,
 				   struct ieee80211_vif *vif)
 {
+	struct ath12k_vif *arvif = ath12k_vif_to_arvif(vif);
 	struct ath12k_mac_change_chanctx_arg *arg = data;
 
-	if (rcu_access_pointer(vif->bss_conf.chanctx_conf) != arg->ctx)
+	if ((rcu_access_pointer(vif->bss_conf.chanctx_conf) != arg->ctx) ||
+	    (arvif->ar != arg->ar))
 		return;
 
 	arg->n_vifs++;
@@ -7934,11 +7939,13 @@ static void
 ath12k_mac_change_chanctx_fill_iter(void *data, u8 *mac,
 				    struct ieee80211_vif *vif)
 {
+	struct ath12k_vif *arvif = ath12k_vif_to_arvif(vif);
 	struct ath12k_mac_change_chanctx_arg *arg = data;
 	struct ieee80211_chanctx_conf *ctx;
 
 	ctx = rcu_access_pointer(vif->bss_conf.chanctx_conf);
-	if (ctx != arg->ctx)
+	if ((ctx != arg->ctx) ||
+	    (arvif->ar != arg->ar))
 		return;
 
 	if (WARN_ON(arg->next_vif == arg->n_vifs))
@@ -8140,7 +8147,7 @@ static void
 ath12k_mac_update_active_vif_chan(struct ath12k *ar,
 				  struct ieee80211_chanctx_conf *ctx)
 {
-	struct ath12k_mac_change_chanctx_arg arg = { .ctx = ctx };
+	struct ath12k_mac_change_chanctx_arg arg = { .ctx = ctx, .ar = ar };
 
 	lockdep_assert_held(&ar->conf_mutex);
 
@@ -9581,6 +9588,9 @@ static void ath12k_mac_set_bitrate_mask_
 	struct ath12k_sta *arsta = (struct ath12k_sta *)sta->drv_priv;
 	struct ath12k *ar = arvif->ar;
 
+	if (arsta->arvif != arvif)
+		return;
+
 	spin_lock_bh(&ar->data_lock);
 	arsta->changed |= IEEE80211_RC_SUPP_RATES_CHANGED;
 	spin_unlock_bh(&ar->data_lock);
@@ -9591,10 +9601,14 @@ static void ath12k_mac_set_bitrate_mask_
 static void ath12k_mac_disable_peer_fixed_rate(void *data,
 					       struct ieee80211_sta *sta)
 {
+	struct ath12k_sta *arsta = (struct ath12k_sta *)sta->drv_priv;
 	struct ath12k_vif *arvif = data;
 	struct ath12k *ar = arvif->ar;
 	int ret;
 
+	if (arsta->arvif != arvif)
+		return;
+
 	ret = ath12k_wmi_set_peer_param(ar, sta->addr,
 					arvif->vdev_id,
 					WMI_PEER_PARAM_FIXED_RATE,
