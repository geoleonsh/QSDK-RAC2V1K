From 393bd5e4e5fb1fdf5b3b29a1836fc85be7f67b6e Mon Sep 17 00:00:00 2001
From: Sivashankari Madhavan <quic_sivamadh@quicinc.com>
Date: Tue, 16 May 2023 17:44:14 +0530
Subject: [PATCH] hostapd: Fix incorrect channel and bandwidth display in
 hostapd_cli command

When getting the hardware feature data, returning the hardware
modes for all the radios for a specific phy. In this case, always
referring to the first mode info is an issue.

Fix it by displaying channels for a corresponding radio and
supporting the 5.9ghz, 6ghz channel bandwidth display.

Signed-off-by: Sivashankari Madhavan <quic_sivamadh@quicinc.com>
---
 hostapd/ctrl_iface.c | 120 ++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 112 insertions(+), 8 deletions(-)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index a20e234..27007e5 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -3332,7 +3332,8 @@ static int hostapd_5ghz_vht_80_channel_bw(struct hostapd_hw_modes *mode,
 {
 	int k, m, ok, allowed[][4] = {{36, 40, 44, 48}, {52, 56, 60, 64},
 				      {100, 104, 108, 112}, {116, 120, 124, 128},
-				      {132, 136, 140, 144}, {149, 153, 157, 161}};
+				      {132, 136, 140, 144}, {149, 153, 157, 161},
+				      {165, 169, 173, 177}};
 	struct hostapd_channel_data *chan = &mode->channels[channel_idx];
 
 	ok = 0;
@@ -3364,7 +3365,8 @@ static bool hostapd_5ghz_vht_160_channel_bw(struct hostapd_hw_modes *mode,
 					    int channel_idx)
 {
 	int k, m, ok, allowed[][8] = {{36, 40, 44, 48, 52, 56, 60, 64},
-				      {100, 104, 108, 112, 116, 120, 124, 128}};
+				      {100, 104, 108, 112, 116, 120, 124, 128},
+				      {149, 153, 157, 161, 165, 169, 173, 177}};
 	struct hostapd_channel_data *chan = &mode->channels[channel_idx];
 
 	ok = 0;
@@ -3396,7 +3398,7 @@ static int hostapd_5ghz_ht_40_channel_bw(struct hostapd_hw_modes *mode,
 {
 
 	int  k, ok, allowed[] = {36, 44, 52, 60, 100, 108, 116, 124, 132, 140,
-				 149, 157, 184, 192};
+				 149, 157, 165, 173, 184, 192};
 	struct hostapd_channel_data *chan = &mode->channels[channel_idx];
 
 	if (!((chan->flag & HOSTAPD_CHAN_HT40MINUS) ||
@@ -3483,6 +3485,88 @@ static int hostapd_5ghz_channel_bw(struct hostapd_hw_modes *mode,
 	return len;
 }
 
+static bool hostapd_is_6ghz_channel_supported_bw(int channel_idx,
+						int total_channals,
+						int bw)
+{
+	int bw_size = 20;
+
+	if (total_channals < channel_idx)
+		return 0;
+
+	if (channel_idx <= (total_channals - (total_channals % (bw/bw_size))))
+		return 1;
+
+	return 0;
+}
+
+static int hostapd_6ghz_channel_bw(struct hostapd_hw_modes *mode,
+                                   char *buf, size_t buflen)
+{
+	struct hostapd_channel_data *chan = NULL;
+        int j, ret, len = 0, total_valid_chnls = 0;
+        char temp_buf[30] = {0};
+
+	for (j = 0; j < mode->num_channels; j++) {
+		chan = &mode->channels[j];
+
+		if (!(chan->flag & HOSTAPD_CHAN_DISABLED))
+			++total_valid_chnls;
+	}
+
+        for (j = 0; j < mode->num_channels; j++) {
+                chan = &mode->channels[j];
+
+                if (chan->flag & HOSTAPD_CHAN_DISABLED)
+                        continue;
+
+                ret = os_snprintf(temp_buf, 30, "Channel[%d]", chan->chan);
+                if (os_snprintf_error(30, ret))
+                        return len;
+
+                ret = os_snprintf(buf + len, buflen - len, "%-13s : %d - 20MHz ",
+                                  temp_buf, chan->freq);
+                if (os_snprintf_error(buflen - len, ret))
+                        return len;
+                len += ret;
+
+		if (hostapd_is_6ghz_channel_supported_bw(j, total_valid_chnls, 40)) {
+                        ret = os_snprintf(buf + len, buflen - len, "40MHz ");
+                        if (os_snprintf_error(buflen - len, ret))
+                                return len;
+                        len += ret;
+                }
+
+		if (hostapd_is_6ghz_channel_supported_bw(j, total_valid_chnls, 80)) {
+			ret = os_snprintf(buf + len, buflen - len, "80MHz ");
+                        if (os_snprintf_error(buflen - len, ret))
+                                return len;
+			len += ret;
+		}
+
+		if (hostapd_is_6ghz_channel_supported_bw(j, total_valid_chnls, 160)) {
+                        ret = os_snprintf(buf + len, buflen - len, "160MHz ");
+                        if (os_snprintf_error(buflen - len, ret))
+                                return len;
+                        len += ret;
+                }
+
+		if (hostapd_is_6ghz_channel_supported_bw(j, total_valid_chnls, 320)) {
+                        ret = os_snprintf(buf + len, buflen - len, "320MHz ");
+                        if (os_snprintf_error(buflen - len, ret))
+                                return len;
+                        len += ret;
+		}
+
+		ret = os_snprintf(buf + len, buflen - len,"\n");
+                if (os_snprintf_error(buflen - len, ret))
+                        return len;
+                len += ret;
+	}
+
+	return len;
+}
+
 static int hostapd_ctrl_iface_channel_bw(struct hostapd_iface *iface,
 					 char *buf, size_t buflen)
 {
@@ -3490,15 +3574,35 @@ static int hostapd_ctrl_iface_channel_bw(struct hostapd_iface *iface,
 	struct hostapd_hw_modes *mode;
 	int len = 0;
 	u16 num_modes, flags;
-	u8 dfs_domain;
+	u8 dfs_domain,i;
 
 	mode = hostapd_get_hw_feature_data(hapd, &num_modes, &flags,
 					   &dfs_domain);
 
-	if (mode->mode != HOSTAPD_MODE_IEEE80211A)
-		len = hostapd_2ghz_channel_bw(mode, buf, buflen);
-	else
-		len = hostapd_5ghz_channel_bw(mode, buf, buflen);
+	if (!iface->current_mode)
+		return len;
+
+	for (i=0; i < num_modes; ++i) {
+		if (iface->current_mode->mode == mode[i].mode ) {
+			if (mode[i].mode != HOSTAPD_MODE_IEEE80211A) {
+				len = hostapd_2ghz_channel_bw(&mode[i],
+							      buf,
+							      buflen);
+			} else {
+				if ((is_5ghz_freq(iface->current_mode->channels->freq) &&
+				    is_5ghz_freq(mode[i].channels->freq))) {
+					len = hostapd_5ghz_channel_bw(&mode[i],
+								      buf,
+								      buflen);
+				} else if ((is_6ghz_freq(iface->current_mode->channels->freq) &&
+					    is_6ghz_freq(mode[i].channels->freq))) {
+					len = hostapd_6ghz_channel_bw(&mode[i],
+								      buf,
+								      buflen);
+				}
+			}
+		}
+	}
 
 	return len;
 
-- 
2.17.1

