From 8a29f081883b69f76af45754cd1a5a1b5ff63cdf Mon Sep 17 00:00:00 2001
From: Wen Gong <quic_wgong@quicinc.com>
Date: Tue, 15 Nov 2022 03:04:22 -0500
Subject: [PATCH 111/112] wifi: ath12k: skip peer delete if ieee80211_sta
 exsits while unassign_vif_chanctx for station

Sometimes mac80211 will call unassign_vif_chanctx and assign_vif_chanctx
of struct ieee80211_ops from ieee80211_mgd_assoc() with below call stack.

It leads connect fail for station as below log, because peer is delete
in unassign_vif_chanctx, and vdev is not started in assign_vif_chanctx
caused by vdev_start_delay setting in ath12k_hw_params, so the management
packet is dropped.

Change to skip the peer delete for this condition, and connect success.

Signed-off-by: Wen Gong <quic_wgong@quicinc.com>
Signed-off-by: Amutha Ravikumar <quic_aravikum@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 37 ++++++++++++++++++++-------
 1 file changed, 28 insertions(+), 9 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -12475,6 +12475,7 @@ ath12k_mac_op_unassign_vif_chanctx(struc
 	struct ath12k_link_vif *arvif;
 	struct ath12k_hw *ah = hw->priv;
 	struct ath12k_base *ab;
+	struct ath12k_peer *peer;
 	struct ath12k *ar;
 	int ret;
 	bool is_pending_stop = false;
@@ -12580,17 +12581,33 @@ stop_primary:
 		ahvif->num_vdev_started--;
 	}
 
+	peer = ath12k_peer_find_by_vdev_id(ab, arvif->vdev_id);
 	if (ab->hw_params->vdev_start_delay &&
-            ahvif->vdev_type == WMI_VDEV_TYPE_STA) {
-                ret = ath12k_peer_delete(ar, arvif->vdev_id, arvif->bssid);
-                if (ret)
-                        ath12k_warn(ar->ab,
-                                    "failed to delete peer %pM for vdev %d: %d\n",
-                                    arvif->bssid, arvif->vdev_id, ret);
-                else
-                        ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
-                                   "mac removed peer %pM  vdev %d after vdev stop\n",
-                                   arvif->bssid, arvif->vdev_id);
+            ahvif->vdev_type == WMI_VDEV_TYPE_STA && peer) {
+		struct ieee80211_sta *sta;
+		unsigned int sta_link_id = 0xff;
+
+		if (vif->valid_links)
+			sta = ieee80211_find_sta_by_link_addrs(hw, peer->addr,
+							       NULL, &sta_link_id);
+		else
+			sta = ieee80211_find_sta_by_ifaddr(hw, peer->addr, NULL);
+		ath12k_dbg(ab, ATH12K_DBG_MAC,
+			   "peer delete check links 0x%x vdev id %i peer %pM link id %d sta %pK\n",
+			   vif->valid_links, arvif->vdev_id,
+			   peer->addr, sta_link_id, sta);
+
+		if (!sta && !peer->sta) {
+			ret = ath12k_peer_delete(ar, arvif->vdev_id, arvif->bssid);
+			if (ret)
+				ath12k_warn(ar->ab,
+					    "failed to delete peer %pM for vdev %d: %d\n",
+					    arvif->bssid, arvif->vdev_id, ret);
+			else
+				ath12k_dbg(ar->ab, ATH12K_DBG_MAC,
+					   "mac removed peer %pM  vdev %d after vdev stop\n",
+					   arvif->bssid, arvif->vdev_id);
+		}
         }
 
 	if (ab->hw_params->vdev_start_delay &&
--- a/net/mac80211/sta_info.c
+++ b/net/mac80211/sta_info.c
@@ -1487,6 +1487,43 @@ struct ieee80211_sta *ieee80211_find_sta
 }
 EXPORT_SYMBOL_GPL(ieee80211_find_sta_by_ifaddr);
 
+struct ieee80211_sta *
+ieee80211_find_sta_by_link_addrs(struct ieee80211_hw *hw,
+                                 const u8 *addr,
+                                 const u8 *localaddr,
+                                 unsigned int *link_id)
+{
+        struct ieee80211_local *local = hw_to_local(hw);
+        struct link_sta_info *link_sta;
+        struct rhlist_head *tmp;
+
+        for_each_link_sta_info(local, addr, link_sta, tmp) {
+                struct sta_info *sta = link_sta->sta;
+                struct ieee80211_link_data *link;
+                u8 _link_id = link_sta->link_id;
+
+                if (!localaddr) {
+                        if (link_id)
+                                *link_id = _link_id;
+                        return &sta->sta;
+                }
+
+                link = rcu_dereference(sta->sdata->link[_link_id]);
+                if (!link)
+                        continue;
+
+                if (memcmp(link->conf->addr, localaddr, ETH_ALEN))
+                        continue;
+
+                if (link_id)
+                        *link_id = _link_id;
+                return &sta->sta;
+        }
+
+        return NULL;
+}
+EXPORT_SYMBOL_GPL(ieee80211_find_sta_by_link_addrs);
+
 struct ieee80211_sta *ieee80211_find_sta(struct ieee80211_vif *vif,
 					 const u8 *addr)
 {
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -6298,6 +6298,22 @@ struct ieee80211_sta *ieee80211_find_sta
 					       const u8 *localaddr);
 
 /**
+ * ieee80211_find_sta_by_link_addrs - find STA by link addresses
+ * @hw: pointer as obtained from ieee80211_alloc_hw()
+ * @addr: remote station's link address
+ * @localaddr: local link address, use %NULL for any (but avoid that)
+ * @link_id: pointer to obtain the link ID if the STA is found,
+ *      may be %NULL if the link ID is not needed
+ *
+ * Obtain the STA by link address, must use RCU protection.
+ */
+struct ieee80211_sta *
+ieee80211_find_sta_by_link_addrs(struct ieee80211_hw *hw,
+                                 const u8 *addr,
+                                 const u8 *localaddr,
+                                 unsigned int *link_id);
+
+/**
  * ieee80211_sta_block_awake - block station from waking up
  * @hw: the hardware
  * @pubsta: the station
