From 8bb73e12be5be1bce24275631e4ee37886edf051 Mon Sep 17 00:00:00 2001
From: saleemuddin shaik <quic_saleemud@quicinc.com>
Date: Sat, 4 Mar 2023 14:03:08 +0530
Subject: ath12k: add statistic support for counting wmm failed sent
 packets.

if the acknowledgement is not received for the packets sent in the air,
then incrementing the drop packets are counted based on WMM categories.

Signed-off-by: saleemuddin shaik <quic_saleemud@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h    |  1 +
 drivers/net/wireless/ath/ath12k/debugfs.c | 12 ++++++++++++
 drivers/net/wireless/ath/ath12k/dp_tx.c   |  7 +++++++
 3 files changed, 20 insertions(+)

diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index 1b03d46..8443f46 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -733,6 +733,7 @@ struct ath12k_wmm_stats {
 	int rx_type;
 	u64 total_wmm_tx_pkts[WME_NUM_AC];
 	u64 total_wmm_rx_pkts[WME_NUM_AC];
+	u64 total_wmm_tx_drop[WME_NUM_AC];
 };
 
 #define ATH12K_DSCP_PRIORITY 7
diff --git a/drivers/net/wireless/ath/ath12k/debugfs.c b/drivers/net/wireless/ath/ath12k/debugfs.c
index 6509567..e6056ba 100644
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -1355,6 +1355,7 @@ static ssize_t ath12k_read_wmm_stats(struct file *file,
 	ssize_t retval;
 	u64 total_wmm_sent_pkts = 0;
 	u64 total_wmm_received_pkts = 0;
+	u64 total_wmm_fail_sent = 0;
 
 	buf = kzalloc(size, GFP_KERNEL);
 	if (!buf) {
@@ -1366,12 +1367,15 @@ static ssize_t ath12k_read_wmm_stats(struct file *file,
 	for (count = 0; count < WME_NUM_AC; count++) {
 		total_wmm_sent_pkts += ar->wmm_stats.total_wmm_tx_pkts[count];
 		total_wmm_received_pkts += ar->wmm_stats.total_wmm_rx_pkts[count];
+		total_wmm_fail_sent += ar->wmm_stats.total_wmm_tx_drop[count];
 	}
 
 	len += scnprintf(buf + len, size - len, "Total number of wmm_sent: %llu\n",
 			 total_wmm_sent_pkts);
 	len += scnprintf(buf + len, size - len, "total number of wmm_received: %llu\n",
 			 total_wmm_received_pkts);
+	len += scnprintf(buf + len, size - len, "total number of wmm_fail_sent: %llu\n",
+			 total_wmm_fail_sent);
 	len += scnprintf(buf + len, size - len, "Num of BE wmm_sent: %llu\n",
 			 ar->wmm_stats.total_wmm_tx_pkts[WME_AC_BE]);
 	len += scnprintf(buf + len, size - len, "Num of BK wmm_sent: %llu\n",
@@ -1388,6 +1392,14 @@ static ssize_t ath12k_read_wmm_stats(struct file *file,
 			 ar->wmm_stats.total_wmm_rx_pkts[WME_AC_VI]);
 	len += scnprintf(buf + len, size - len, "num of vo wmm_received: %llu\n",
 			 ar->wmm_stats.total_wmm_rx_pkts[WME_AC_VO]);
+	len += scnprintf(buf + len, size - len, "num of be wmm_tx_dropped: %llu\n",
+			 ar->wmm_stats.total_wmm_tx_drop[WME_AC_BE]);
+	len += scnprintf(buf + len, size - len, "num of bk wmm_tx_dropped: %llu\n",
+			 ar->wmm_stats.total_wmm_tx_drop[WME_AC_BK]);
+	len += scnprintf(buf + len, size - len, "num of vi wmm_tx_dropped: %llu\n",
+			 ar->wmm_stats.total_wmm_tx_drop[WME_AC_VI]);
+	len += scnprintf(buf + len, size - len, "num of vo wmm_tx_dropped: %llu\n",
+			 ar->wmm_stats.total_wmm_tx_drop[WME_AC_VO]);
 
 	mutex_unlock(&ar->conf_mutex);
 
diff --git a/drivers/net/wireless/ath/ath12k/dp_tx.c b/drivers/net/wireless/ath/ath12k/dp_tx.c
index d79007b..a80662a 100644
--- a/drivers/net/wireless/ath/ath12k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_tx.c
@@ -733,6 +733,7 @@ static inline void ath12k_dp_tx_status_parse(struct ath12k_base *ab,
 		ts->rate_stats = desc->rate_stats.info0;
 	else
 		ts->rate_stats = 0;
+	ts->tid = FIELD_GET(HAL_WBM_RELEASE_TX_INFO3_TID, desc->info3);
 
 	ts->peer_id = FIELD_GET(HAL_WBM_RELEASE_TX_INFO3_PEER_ID, desc->info3);
 	ts->flags = FIELD_GET(HAL_WBM_RELEASE_TX_INFO2_FIRST_MSDU, desc->info2) |
@@ -798,6 +799,12 @@ static void ath12k_dp_tx_complete_msdu(struct ath12k *ar,
 
 	ath12k_dp_tx_status_parse(ab, tx_status, &ts);
 
+	ar->wmm_stats.tx_type = ath12k_tid_to_ac(ts.tid > ATH12K_DSCP_PRIORITY ? 0:ts.tid);
+	if (ar->wmm_stats.tx_type) {
+		if (ts.status != HAL_WBM_TQM_REL_REASON_FRAME_ACKED)
+			ar->wmm_stats.total_wmm_tx_drop[ar->wmm_stats.tx_type]++;
+	}
+
 	if (unlikely(!rcu_access_pointer(ab->pdevs_active[ar->pdev_idx]))) {
 		dev_kfree_skb_any(msdu);
 		return;
-- 
2.17.1

