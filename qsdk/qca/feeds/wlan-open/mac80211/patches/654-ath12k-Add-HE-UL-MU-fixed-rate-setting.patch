From 949d75d8a16e19d8b9ad55c337ef0dde9580a234 Mon Sep 17 00:00:00 2001
From: Muna Sinada <msinada@codeaurora.org
Date: Wed, 23 Sep 2020 05:55:02 -0700
Subject: [PATCH] ath12k:Add HE UL MU fixed rate setting

HE UL MU fixed rate is informed to HE STA by HE Basic Trigger frame.
The added code is reusing parts of the existing code path used for HE
fixed rate, this includes nl80211 definitions, policies and parsing
code required to pass HE UL MU fixed rate settings.

Signed-off-by: Muna Sinada <msinada@codeaurora.org>
Signed-off-by: Rajat Soni <quic_rajson@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 105 +++++++++++++++++++++++---
 drivers/net/wireless/ath/ath12k/wmi.h |   1 +
 2 files changed, 94 insertions(+), 12 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -4648,6 +4648,20 @@ ath12k_mac_bitrate_mask_num_he_rates(str
 }
 
 static int
+ath12k_mac_bitrate_mask_num_he_ul_rates(struct ath12k *ar,
+				    enum nl80211_band band,
+				    const struct cfg80211_bitrate_mask *mask)
+{
+	int num_rates = 0;
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(mask->control[band].he_ul_mcs); i++)
+		num_rates += hweight16(mask->control[band].he_ul_mcs[i]);
+
+	return num_rates;
+}
+
+static int
 ath12k_mac_bitrate_mask_num_eht_rates(struct ath12k *ar,
 				      enum nl80211_band band,
 				      const struct cfg80211_bitrate_mask *mask)
@@ -9484,10 +9498,11 @@ static int ath12k_mac_set_rate_params(st
 				      u32 rate, u8 nss, u8 sgi, u8 ldpc,
 				      u8 he_gi, u8 he_ltf, bool he_fixed_rate,
 				      u8 eht_gi, u8 eht_ltf,
-				      bool eht_fixed_rate)
+				      bool eht_fixed_rate,
+				      int he_ul_rate, u8 he_ul_nss)
 {
 	struct ath12k *ar = arvif->ar;
-	u32 vdev_param;
+	u32 vdev_param, rate_code;
 	int ret;
 
 	lockdep_assert_held(&ar->conf_mutex);
@@ -9564,6 +9579,21 @@ static int ath12k_mac_set_rate_params(st
 		}
 	}
 
+	if ((he_ul_rate < 0) || !he_ul_nss)
+		return 0;
+
+	rate_code = ATH12K_HW_RATE_CODE(he_ul_rate, he_ul_nss - 1,
+					WMI_RATE_PREAMBLE_HE);
+
+	vdev_param = WMI_VDEV_PARAM_UL_FIXED_RATE;
+	ret = ath12k_wmi_vdev_set_param_cmd(ar, arvif->vdev_id,
+					    vdev_param, rate_code);
+
+	if (ret) {
+		ath12k_warn(ar->ab, "failed to set HE UL Fixed Rate:%d, error:%d\n",
+			    he_ul_rate, ret);
+	}
+
 	return 0;
 }
 
@@ -9618,6 +9648,21 @@ ath12k_mac_he_mcs_range_present(struct a
 }
 
 static bool
+ath12k_mac_he_ul_mcs_present(struct ath12k *ar,
+				enum nl80211_band band,
+				const struct cfg80211_bitrate_mask *mask)
+{
+	int i;
+
+	for (i = 0; i < NL80211_HE_NSS_MAX; i++) {
+		if (mask->control[band].he_ul_mcs[i])
+			return true;
+	}
+
+	return false;
+}
+
+static bool
 ath12k_mac_eht_mcs_range_present(struct ath12k *ar,
 				 enum nl80211_band band,
 				 const struct cfg80211_bitrate_mask *mask)
@@ -9691,14 +9736,16 @@ ath12k_mac_validate_fixed_rate_settings(
 					const struct cfg80211_bitrate_mask *mask)
 {
 	bool eht_fixed_rate = false, he_fixed_rate = false, vht_fixed_rate = false;
+	bool he_ul_fixed_rate = false;
 	struct ath12k_peer *peer, *tmp;
-	const u16 *vht_mcs_mask, *he_mcs_mask, *eht_mcs_mask;
-	u8 vht_nss, he_nss, eht_nss;
+	const u16 *vht_mcs_mask, *he_mcs_mask, *eht_mcs_mask, *he_ul_mcs_mask;
+	u8 vht_nss, he_nss, eht_nss, he_ul_nss;
 	bool ret = true;
 
 	vht_mcs_mask = mask->control[band].vht_mcs;
 	he_mcs_mask = mask->control[band].he_mcs;
 	eht_mcs_mask = mask->control[band].eht_mcs;
+	he_ul_mcs_mask = mask->control[band].he_ul_mcs;
 
 	if (ath12k_mac_bitrate_mask_num_vht_rates(ar, band, mask) == 1)
 		vht_fixed_rate = true;
@@ -9709,12 +9756,16 @@ ath12k_mac_validate_fixed_rate_settings(
 	if (ath12k_mac_bitrate_mask_num_eht_rates(ar, band, mask) == 1)
 		eht_fixed_rate = true;
 
-	if (!vht_fixed_rate && !he_fixed_rate && !eht_fixed_rate)
+	if (ath12k_mac_bitrate_mask_num_he_ul_rates(ar, band, mask) == 1)
+		he_ul_fixed_rate = true;
+
+	if (!vht_fixed_rate && !he_fixed_rate && !eht_fixed_rate && !he_ul_fixed_rate)
 		return true;
 
 	vht_nss = ath12k_mac_max_vht_nss(vht_mcs_mask);
 	he_nss =  ath12k_mac_max_he_nss(he_mcs_mask);
 	eht_nss = ath12k_mac_max_eht_nss(eht_mcs_mask);
+	he_ul_nss =  ath12k_mac_max_he_nss(he_ul_mcs_mask);
 
 	rcu_read_lock();
 	spin_lock_bh(&ar->ab->base_lock);
@@ -9735,6 +9786,14 @@ ath12k_mac_validate_fixed_rate_settings(
 				ret = false;
 				goto exit;
 			}
+			/* TODO:
+			*	check when UL is valid
+			*/
+			if (he_ul_fixed_rate && (!peer->sta->deflink.he_cap.has_he ||
+					peer->sta->deflink.rx_nss < he_ul_nss)) {
+				ret = false;
+				goto exit;
+			}
 		}
 	}
 exit:
@@ -9757,17 +9816,19 @@ ath12k_mac_op_set_bitrate_mask(struct ie
 	const u16 *vht_mcs_mask;
 	const u16 *he_mcs_mask;
 	const u16 *eht_mcs_mask;
+	const u16 *he_ul_mcs_mask;
 	u8 he_ltf = 0;
 	u8 he_gi = 0;
 	u8 eht_ltf = 0;
 	u8 eht_gi = 0;
 	u32 rate;
-	u8 nss;
+	u8 nss, he_ul_nss = 0;
 	u8 sgi;
 	u8 ldpc;
 	int single_nss;
-	int ret;
+	int ret, i;
 	int num_rates;
+	int he_ul_rate = -1;
 	bool he_fixed_rate = false;
 	bool eht_fixed_rate = false;
 
@@ -9788,6 +9849,7 @@ ath12k_mac_op_set_bitrate_mask(struct ie
 	ht_mcs_mask = mask->control[band].ht_mcs;
 	vht_mcs_mask = mask->control[band].vht_mcs;
 	he_mcs_mask = mask->control[band].he_mcs;
+	he_ul_mcs_mask = mask->control[band].he_ul_mcs;
 	eht_mcs_mask = mask->control[band].eht_mcs;
 	ldpc = !!(ar->ht_cap_info & WMI_HT_CAP_LDPC);
 
@@ -9803,6 +9865,23 @@ ath12k_mac_op_set_bitrate_mask(struct ie
 	eht_gi = mask->control[band].eht_gi;
 	eht_ltf = mask->control[band].eht_ltf;
 
+	for (i = 0; i < ARRAY_SIZE(mask->control[band].he_ul_mcs); i++) {
+		if (hweight16(mask->control[band].he_ul_mcs[i]) == 1) {
+			he_ul_nss = i + 1;
+			he_ul_rate = ffs((int)
+					mask->control[band].he_ul_mcs[i]) - 1;
+			break;
+		}
+	}
+	num_rates = ath12k_mac_bitrate_mask_num_he_ul_rates(ar, band,
+			mask);
+	if (ath12k_mac_he_ul_mcs_present(ar, band, mask) &&
+			num_rates != 1) {
+		ath12k_warn(ar->ab,
+				"Setting HE UL MCS Fixed Rate range is not supported\n");
+		return -EINVAL;
+	}
+
 	/* mac80211 doesn't support sending a fixed HT/VHT MCS alone, rather it
 	 * requires passing at least one of used basic rates along with them.
 	 * Fixed rate setting across different preambles(legacy, HT, VHT) is
@@ -9921,9 +10000,9 @@ ath12k_mac_op_set_bitrate_mask(struct ie
 
 	ret = ath12k_mac_set_rate_params(arvif, rate, nss, sgi, ldpc, he_gi,
 					 he_ltf, he_fixed_rate, eht_gi, eht_ltf,
-					 eht_fixed_rate);
+					 eht_fixed_rate, he_ul_rate, he_ul_nss);
 	if (ret) {
-		ath12k_warn(ar->ab, "failed to set rate params on vdev %i: %d\n",
+		ath12k_warn(ar->ab, "failed to set fixed rate params on vdev %i: %d\n",
 			    arvif->vdev_id, ret);
 	}
 
--- a/drivers/net/wireless/ath/ath12k/wmi.h
+++ b/drivers/net/wireless/ath/ath12k/wmi.h
@@ -1110,6 +1110,7 @@ enum wmi_tlv_vdev_param {
 	WMI_VDEV_PARAM_BA_MODE = 0x7e,
 	WMI_VDEV_PARAM_AUTORATE_MISC_CFG = 0x80,
 	WMI_VDEV_PARAM_SET_HE_SOUNDING_MODE = 0x87,
+	WMI_VDEV_PARAM_UL_FIXED_RATE,
 	WMI_VDEV_PARAM_6GHZ_PARAMS = 0x99,
 	WMI_VDEV_PARAM_PROTOTYPE = 0x8000,
 	WMI_VDEV_PARAM_BSS_COLOR,
