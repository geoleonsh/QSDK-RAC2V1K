From d26647b6f536034cb5c55d1142f514bc5cee0d4b Mon Sep 17 00:00:00 2001
From: Harshitha Prem <quic_hprem@quicinc.com>
Date: Wed, 26 Apr 2023 11:15:54 +0530
Subject: [PATCH] cfg80211/mac80211: SLO WDS link add

Currently,when EHT WDS virtual ap interface is
brought up multiple crashes and warn ons are seen
as it is not fully supported yet.

In order to handle this, link id information on which
WDS STA was trying to associate should be passed from hostapd
to create the AP/VLAN interface which is part of
MLO+WDS feature (yet to be supported).

Until then, use master VAP's link for creating AP/VLAN
interface regardless of the WDS STA associated link.

Signed-off-by: Harshitha Prem <quic_hprem@quicinc.com>
---
 net/mac80211/chan.c  |  6 ++++++
 net/mac80211/iface.c | 23 ++++++++++++++++++++++-
 net/wireless/util.c  |  3 ++-
 3 files changed, 30 insertions(+), 2 deletions(-)

--- a/net/mac80211/chan.c
+++ b/net/mac80211/chan.c
@@ -1072,6 +1072,9 @@ __ieee80211_link_copy_chanctx_to_vlans(s
 		if (WARN_ON(!vlan_conf))
 			continue;
 
+		if (rcu_access_pointer(sdata->vif.link_conf[link_id]) == vlan_conf)
+			continue;
+
 		rcu_assign_pointer(vlan_conf->chanctx_conf, conf);
 	}
 	rcu_read_unlock();
@@ -2069,6 +2072,14 @@ void ieee80211_link_vlan_copy_chanctx(st
 	if (WARN_ON(sdata->vif.type != NL80211_IFTYPE_AP_VLAN || !sdata->bss))
 		return;
 
+	/* TODO: This check would help only for SLO WDS VAP. For MLO WDS VAP,
+		we have to extend the logic for all the links
+	*/
+	if (sdata->vif.valid_links) {
+		link_id = ffs(sdata->vif.valid_links) - 1;
+		link_conf = rcu_dereference(sdata->vif.link_conf[link_id]);
+	}
+
 	ap = container_of(sdata->bss, struct ieee80211_sub_if_data, u.ap);
 
 	mutex_lock(&local->chanctx_mtx);
@@ -2078,9 +2089,6 @@ void ieee80211_link_vlan_copy_chanctx(st
 	conf = rcu_dereference_protected(ap_conf->chanctx_conf,
 					 lockdep_is_held(&local->chanctx_mtx));
 	rcu_assign_pointer(link_conf->chanctx_conf, conf);
-	memcpy(&sdata->vif.link_conf[link_id]->chandef,
-	       &ap->vif.link_conf[link_id]->chandef,
-	       sizeof(struct cfg80211_chan_def));
 	rcu_read_unlock();
 	mutex_unlock(&local->chanctx_mtx);
 }
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -405,6 +405,7 @@ static void ieee80211_do_stop(struct iee
 	struct cfg80211_chan_def chandef;
 	bool cancel_scan;
 	struct cfg80211_nan_func *func;
+	int link_id;
 
 	clear_bit(SDATA_STATE_RUNNING, &sdata->state);
 	synchronize_rcu(); /* flush _ieee80211_wake_txqs() */
@@ -433,6 +434,13 @@ static void ieee80211_do_stop(struct iee
 			break;
 		list_del_rcu(&sdata->u.mntr.list);
 		break;
+	case NL80211_IFTYPE_AP_VLAN:
+		for_each_set_bit(link_id, &sdata->vif.valid_links, IEEE80211_MLD_MAX_NUM_LINKS) {
+			rcu_assign_pointer(sdata->vif.link_conf[link_id], NULL);
+			rcu_assign_pointer(sdata->link[link_id], NULL);
+		}
+		sdata->vif.valid_links = 0;
+		break;
 	default:
 		break;
 	}
@@ -1381,7 +1389,30 @@ int ieee80211_do_open(struct wireless_de
 		memcpy(sdata->vif.hw_queue, master->vif.hw_queue,
 		       sizeof(sdata->vif.hw_queue));
 		sdata->vif.bss_conf.chandef = master->vif.bss_conf.chandef;
+		if (master->vif.valid_links) {
+			int link_id;
+			unsigned long add = master->vif.valid_links;
+			unsigned long rem = 0xffff & ~master->vif.valid_links;
+
+			for_each_set_bit(link_id, &add,
+					 IEEE80211_MLD_MAX_NUM_LINKS) {
+				wdev->valid_links |= BIT(link_id);
+				ether_addr_copy(wdev->links[link_id].addr,
+						master->wdev.links[link_id].addr);
+				rcu_assign_pointer(sdata->vif.link_conf[link_id],
+						   master->vif.link_conf[link_id]);
+				rcu_assign_pointer(sdata->link[link_id],
+						   master->link[link_id]);
+			}
 
+			for_each_set_bit(link_id, &rem,
+					 IEEE80211_MLD_MAX_NUM_LINKS) {
+				rcu_assign_pointer(sdata->vif.link_conf[link_id], NULL);
+				rcu_assign_pointer(sdata->link[link_id], NULL);
+			}
+
+			sdata->vif.valid_links = master->vif.valid_links;
+		}
 		mutex_lock(&local->key_mtx);
 		sdata->crypto_tx_tailroom_needed_cnt +=
 			master->crypto_tx_tailroom_needed_cnt;
--- a/net/wireless/util.c
+++ b/net/wireless/util.c
@@ -2781,7 +2781,8 @@ void cfg80211_remove_link(struct wireles
 
 	wdev->valid_links &= ~BIT(link_id);
 
-	rdev_del_intf_link(rdev, wdev, link_id);
+	if (wdev->iftype != NL80211_IFTYPE_AP_VLAN)
+		rdev_del_intf_link(rdev, wdev, link_id);
 
 	eth_zero_addr(wdev->links[link_id].addr);
 }
--- a/net/mac80211/link.c
+++ b/net/mac80211/link.c
@@ -17,6 +17,36 @@ void ieee80211_link_setup(struct ieee802
 		ieee80211_mgd_setup_link(link);
 }
 
+static void ieee80211_update_apvlan_links(struct ieee80211_sub_if_data *sdata)
+{
+	struct ieee80211_sub_if_data *vlan;
+
+	list_for_each_entry(vlan, &sdata->u.ap.vlans, u.vlan.list) {
+		int link_id;
+		unsigned long add = sdata->vif.valid_links;
+		unsigned long rem = 0xffff & ~sdata->vif.valid_links;
+
+		if (!vlan)
+			continue;
+
+		for_each_set_bit(link_id, &add,
+				 IEEE80211_MLD_MAX_NUM_LINKS) {
+			rcu_assign_pointer(vlan->vif.link_conf[link_id],
+					   sdata->vif.link_conf[link_id]);
+			rcu_assign_pointer(vlan->link[link_id],
+					   sdata->link[link_id]);
+		}
+
+		for_each_set_bit(link_id, &rem,
+				 IEEE80211_MLD_MAX_NUM_LINKS) {
+			rcu_assign_pointer(vlan->vif.link_conf[link_id], NULL);
+			rcu_assign_pointer(vlan->link[link_id], NULL);
+		}
+
+		vlan->vif.valid_links = sdata->vif.valid_links;
+	}
+}
+
 void ieee80211_link_init(struct ieee80211_sub_if_data *sdata,
 			 int link_id,
 			 struct ieee80211_link_data *link,
@@ -49,6 +79,9 @@ void ieee80211_link_init(struct ieee8021
 	link->ap_power_level = IEEE80211_UNSET_POWER_LEVEL;
 	link->user_power_level = local->user_power_level;
 
+	if (sdata->vif.type == NL80211_IFTYPE_AP)
+		ieee80211_update_apvlan_links(sdata);
+
 	if (!deflink) {
 		switch (sdata->vif.type) {
 		case NL80211_IFTYPE_AP:
@@ -207,6 +240,11 @@ static int ieee80211_vif_update_links(st
 
 	memset(to_free, 0, sizeof(links));
 
+	/* TODO: currently, SLO wds AP/VLAN's link pointer is same as master VAP
+		hence, skip update link for AP_VLAN */
+	if (sdata->vif.type == NL80211_IFTYPE_AP_VLAN)
+		return 0;
+
 	if (old_links == new_links)
 		return 0;
 
