From 12445dad4747014edf3fb781167c3b1d9c8d676f Mon Sep 17 00:00:00 2001
From: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
Date: Tue, 27 Jun 2023 16:13:32 +0530
Subject: [PATCH] wifi: ath12k: Fix deadlock b/w drain tx and mgmt tx
 worker procedure

Rename the ath12k_mac_drain_tx() into ath12k_mac_radio_drain_tx().

Move the ath12k_mac_radio_drain_tx() out of ath12k_mac_radio_stop()
to run the drain tx without ath12k hw (ah) mutex lock/un. Since
it undergoes the mgmt tx pending drain procedure and the mgmt tx worker
run under the ah mutex lock/un, so drain tx should happen out of ah
mutex lock/un. Introduce the drain tx on multiple hw level under ah,
this get called out of the ath12k hw lock/un, since ah is the private
data structure of hw.

Signed-off-by: Karthikeyan Periyasamy <quic_periyasa@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.c |  2 +-
 drivers/net/wireless/ath/ath12k/mac.c  | 23 ++++++++++++++++++-----
 drivers/net/wireless/ath/ath12k/mac.h  |  2 +-
 3 files changed, 20 insertions(+), 7 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/core.c
+++ b/drivers/net/wireless/ath/ath12k/core.c
@@ -1822,7 +1822,7 @@ static void ath12k_core_pre_reconfigure_
 			if (arvif->is_started)
 				ath12k_debugfs_remove_interface(arvif);
 
-		ath12k_mac_drain_tx(ar);
+		ath12k_mac_radio_drain_tx(ar);
 		complete(&ar->scan.started);
 		complete(&ar->scan.completed);
 		complete(&ar->peer_assoc_done);
--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -9239,7 +9239,7 @@ skip_peer_find:
 
 }
 
-void ath12k_mac_drain_tx(struct ath12k *ar)
+void ath12k_mac_radio_drain_tx(struct ath12k *ar)
 {
 	/* make sure rcu-protected mac80211 tx path itself is drained */
 	synchronize_net();
@@ -9424,7 +9424,6 @@ static int ath12k_mac_radio_start(struct
 	struct ath12k_pdev *pdev = ar->pdev;
 	int ret;
 
-	ath12k_mac_drain_tx(ar);
 	mutex_lock(&ar->conf_mutex);
 
 	switch (ar->state) {
@@ -9605,8 +9604,6 @@ static void ath12k_mac_radio_stop(struct
 	struct htt_ppdu_stats_info *ppdu_stats, *tmp;
 	int ret;
 
-	ath12k_mac_drain_tx(ar);
-
 	mutex_lock(&ar->conf_mutex);
 	ret = ath12k_mac_config_mon_status_default(ar, false);
 	if (ret && (ret != -ENOTSUPP))
@@ -9678,6 +9675,19 @@ static void ath12k_mgmt_rx_reo_deinit_ti
 	reo_context->timer_init_done = false;
 }
 
+static void ath12k_mac_drain_tx(struct ath12k_hw *ah)
+{
+	struct ath12k *ar;
+	int i;
+
+	ar = ah->radio;
+
+	for (i = 0; i < ah->num_radio; i++) {
+		ath12k_mac_radio_drain_tx(ar);
+		ar++;
+	}
+}
+
 static int ath12k_mac_op_start(struct ieee80211_hw *hw)
 {
 	struct ath12k_hw *ah = hw->priv;
@@ -9689,6 +9699,8 @@ static int ath12k_mac_op_start(struct ie
 
 	ath12k_mgmt_rx_reo_init_timer(ag);
 
+	ath12k_mac_drain_tx(ah);
+
 	mutex_lock(&ah->conf_mutex);
 	ar = ah->radio;
 	ab = ar->ab;
@@ -9734,11 +9746,12 @@ static void ath12k_mac_op_stop(struct ie
 
 	ath12k_mgmt_rx_reo_deinit_timer(ag);
 
+	ath12k_mac_drain_tx(ah);
+
 	mutex_lock(&ah->conf_mutex);
 	ar = ah->radio;
 
 	/* TODO Maintain state for ah? */
-
 	for (i = ah->num_radio - 1, ar = ar + (ah->num_radio - 1); i >= 0; i--) {
 		ath12k_mac_radio_stop(ar);
 		ar--;
--- a/drivers/net/wireless/ath/ath12k/mac.h
+++ b/drivers/net/wireless/ath/ath12k/mac.h
@@ -215,7 +215,7 @@ struct ath12k *ath12k_mac_get_ar_by_pdev
 void ath12k_mac_fill_reg_tpc_info(struct ath12k *ar,
                                   struct ath12k_link_vif *arvif,
                                   struct ieee80211_chanctx_conf *ctx);
-void ath12k_mac_drain_tx(struct ath12k *ar);
+void ath12k_mac_radio_drain_tx(struct ath12k *ar);
 void ath12k_mac_peer_cleanup_all(struct ath12k *ar);
 int ath12k_mac_tx_mgmt_pending_free(int buf_id, void *skb, void *ctx);
 u8 ath12k_mac_bw_to_mac80211_bw(u8 bw);
