From 581b7eb9fb63e21a277e71799756f6f629581ebf Mon Sep 17 00:00:00 2001
From: Nagarajan Maran <quic_nmaran@quicinc.com>
Date: Thu, 8 Jun 2023 18:30:49 +0530
Subject: [PATCH] iw: Add support to get SAWF stats

Signed-off-by: Nagarajan Maran <quic_nmaran@quicinc.com>
---
 iw.h         |   1 +
 sawf_stats.c | 398 ++++++++++++++++++++++++++++++++++++++++++++++++++-
 sawf_stats.h | 367 +++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 764 insertions(+), 2 deletions(-)
 create mode 100644 sawf_stats.h

--- a/sawf_stats.c
+++ b/sawf_stats.c
@@ -28,6 +28,7 @@
 
 #include "nl80211.h"
 #include "iw.h"
+#include "sawf_stats.h"
 
 #define OUI_QCA 0x001374
 #define STREAMING_STATS_MIN_ARGUMENTS		1
@@ -35,7 +36,7 @@
 #define STREAMING_STATS_MAX_VALUE		3
 #define STREAMING_STATS_BASIC_EN_EXTND_DIS	1
 #define STREAMING_STATS_BASIC_DIS_EXTND_EN	2
-
+#define MAX_RANGE(type) pow(2, 8 * sizeof(type)) - 1
 
 SECTION(streaming_stats);
 
@@ -100,3 +101,401 @@ err:
 }
 
 COMMAND(streaming_stats, handle, "<value> [-l <link_id>]", NL80211_CMD_VENDOR, 0, CIB_NETDEV, handle_streaming_stats, ".");
+
+SECTION(sawf_stats);
+#define MAC_ADDR_LEN	18
+#define TELEMETRY_GET_STATS_MIN_ARG 3
+#define TELEMETRY_GET_STATS_MAX_ARG 4
+#define SAWFDELAY_STATS		0x00400000
+#define SAWFTX_STATS		0x00800000
+
+const char *stats_if_hw_tx_comp_delay_bucket[DELAY_BUCKET_MAX + 1] = {
+	"0 to 250 us", "250 to 500 us",
+	"500 to 750 us", "750 to 1000 us",
+	"1000 to 1500 us", "1500 to 2000 us",
+	"2000 to 2500 us", "2500 to 5000 us",
+	"5000 to 6000 us", "6000 to 7000 ms",
+	"7000 to 8000 us", "8000 to 9000 us", "9000+ us"
+};
+
+static void print_hist_stats(struct delay_hist_stats *hstats,
+                            enum hist_types hist_type)
+{
+	uint8_t index = 0;
+	uint64_t count = 0;
+
+	for (index = 0; index < HIST_BUCKET_MAX; index++) {
+		count = hstats->hist.freq[index];
+		if (!count)
+			continue;
+		if (index > DELAY_BUCKET_MAX) {
+			printf("%s: Packets = %" PRIu64 "\n",
+			       "Invalid index", count);
+			continue;
+		}
+		switch (hist_type) {
+		case HIST_TYPE_HW_TX_COMP_DELAY:
+			printf("%s: Packets = %" PRIu64 "\n",
+			       stats_if_hw_tx_comp_delay_bucket[index],
+			       count);
+			break;
+		default:
+			break;
+		}
+	}
+
+        printf("Min = %d\n", hstats->min);
+        printf("Max = %d\n", hstats->max);
+        printf("Avg = %d\n", hstats->avg);
+}
+
+static void print_telemetry_delay_stats(struct telemetry_sawf_delay_stat *delay_stats)
+{
+       printf("\nDelay Bins\n");
+
+       print_hist_stats(&delay_stats->delay_hist,
+                        HIST_TYPE_HW_TX_COMP_DELAY);
+
+       printf("NwDelay Moving average = %u\n",
+              delay_stats->nwdelay_avg);
+       printf("SwDelay Moving average = %u\n",
+              delay_stats->swdelay_avg);
+       printf("HwDelay Moving average = %u\n",
+              delay_stats->hwdelay_avg);
+       printf("Delay bound success = %" PRIu64 "\n",
+              delay_stats->delay_bound_success);
+       printf("Delay bound failure = %" PRIu64 "\n",
+              delay_stats->delay_bound_failure);
+
+       return;
+}
+
+static void print_telemetry_tx_stats(struct telemetry_sawf_tx_stat *tx_stats)
+{
+       printf("Tx_info_success_num        = %u\n",
+               tx_stats->tx_success.num_pkts);
+       printf("Tx_info_success_bytes      = %" PRIu64 "\n",
+               tx_stats->tx_success.bytes);
+       printf("Tx_info_ingress_num        = %u\n",
+               tx_stats->tx_ingress.num_pkts);
+       printf("Tx_info_ingress_bytes      = %" PRIu64 "\n",
+               tx_stats->tx_ingress.bytes);
+       printf("Tx_info_Throughput         = %u\n",
+               tx_stats->throughput);
+       printf("Tx_info_ingress_rate       = %u\n",
+               tx_stats->ingress_rate);
+
+       printf("Tx_info_drop_num           = %u\n",
+               tx_stats->dropped.fw_rem.num_pkts);
+       printf("Tx_info_drop_bytes         = %" PRIu64 "\n",
+               tx_stats->dropped.fw_rem.bytes);
+       printf("Tx_info_drop_fw_rem_notx   = %u\n",
+               tx_stats->dropped.fw_rem_notx);
+       printf("Tx_info_drop_Tx_fw_rem_tx  = %u\n",
+               tx_stats->dropped.fw_rem_tx);
+       printf("Tx_info_drop_Tx_age_out    = %u\n",
+               tx_stats->dropped.age_out);
+
+       printf("Tx_info_drop_fw_reason1    = %u\n",
+               tx_stats->dropped.fw_reason1);
+       printf("Tx_info_drop_fw_reason2    = %u\n",
+               tx_stats->dropped.fw_reason2);
+       printf("Tx_info_drop_fw_reason3    = %u\n",
+               tx_stats->dropped.fw_reason3);
+       printf("Tx_info_tx_failed          = %u\n",
+               tx_stats->tx_failed);
+       printf("Tx_info_queue_depth        = %u\n",
+               tx_stats->queue_depth);
+       printf("Service_intvl_success_cnt  = %" PRIu64 "\n",
+               tx_stats->svc_intval_stats.success_cnt);
+       printf("Service_intvl_failure_cnt  = %" PRIu64 "\n",
+               tx_stats->svc_intval_stats.failure_cnt);
+       printf("Burst_size_success_cnt     = %" PRIu64 "\n",
+               tx_stats->burst_size_stats.success_cnt);
+       printf("Burst_size_failure_cnt     = %" PRIu64 "\n",
+               tx_stats->burst_size_stats.failure_cnt);
+}
+
+static int error_stats_handler(struct sockaddr_nl *nla, struct nlmsgerr *err,
+                         void *arg)
+{
+	struct unified_stats *telemetry_stats = (struct unified_stats*)arg;
+
+	telemetry_stats->err = EINVAL;
+	return NL_STOP;
+}
+
+static void print_sawf_stats(struct unified_stats *telemetry_stats,
+			     uint8_t svc_id)
+{
+	int tid, q_id;
+	struct telemetry_sawfdelay_stats *delay_stats = telemetry_stats->feat[STATS_FEAT_SAWFDELAY];
+	struct telemetry_sawftx_stats *tx_stats = telemetry_stats->feat[STATS_FEAT_SAWFTX];
+	struct telemetry_sawf_tx_stat *sawftx_stats;
+	struct telemetry_sawf_delay_stat *sawfdelay_stats;
+
+	if(tx_stats) {
+		if (!svc_id) {
+			for (tid = 0; tid < MAX_TID; tid++) {
+				for (q_id = 0; q_id < MAX_SAWF_Q; q_id++) {
+					sawftx_stats = &tx_stats->tx[tid][q_id];
+					printf("----TIDX: %d----   ", tid);
+					printf("----QUEUE: %d----\n", q_id);
+					print_telemetry_tx_stats(sawftx_stats);
+				}
+			}
+		} else {
+			sawftx_stats = &tx_stats->tx[0][0];
+			printf("----TIDX: %d----   ", tx_stats->tid);
+			printf("----QUEUE: %d----\n", tx_stats->msduq);
+			print_telemetry_tx_stats(sawftx_stats);
+		}
+	}
+
+        if(delay_stats) {
+                if (!svc_id) {
+                        for (tid = 0; tid < MAX_TID; tid++) {
+                                for (q_id = 0; q_id < MAX_SAWF_Q; q_id++) {
+                                        sawfdelay_stats = &delay_stats->delay[tid][q_id];
+					printf("----TIDX: %d----   ", tid);
+					printf("----QUEUE: %d----\n", q_id);
+                                        print_telemetry_delay_stats(sawfdelay_stats);
+                                }
+                        }
+                } else {
+                        sawfdelay_stats = &delay_stats->delay[0][0];
+			printf("----TIDX: %d----   ", delay_stats->tid);
+			printf("----QUEUE: %d----\n", delay_stats->msduq);
+                        print_telemetry_delay_stats(sawfdelay_stats);
+                }
+        }
+}
+
+static int complete_telemetry_stats(struct nl_msg *msg, void *arg)
+{
+	struct unified_stats *telemetry_stats = (struct unified_stats*)arg;
+
+	telemetry_stats->err = 0;
+	return NL_OK;
+}
+
+static int print_telemetry_stats(struct nl_msg *msg, void *arg)
+{
+	struct nlattr *tb_msg[NL80211_ATTR_MAX + 1];
+	struct nlattr *stats[QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MAX + 1];
+	struct nlattr *feat[QCA_WLAN_VENDOR_ATTR_FEAT_MAX + 1];
+	struct genlmsghdr *gnlh = nlmsg_data(nlmsg_hdr(msg));
+        static struct nla_policy stats_policy[QCA_WLAN_VENDOR_ATTR_STATS_MAX + 1] = {
+		[QCA_WLAN_VENDOR_ATTR_STATS_LEVEL] = { .type = NLA_U8 },
+		[QCA_WLAN_VENDOR_ATTR_STATS_OBJECT] = { .type = NLA_U8 },
+		[QCA_WLAN_VENDOR_ATTR_STATS_OBJ_ID] = { .type = NLA_UNSPEC },
+		[QCA_WLAN_VENDOR_ATTR_STATS_PARENT_IF] = { .type = NLA_UNSPEC },
+		[QCA_WLAN_VENDOR_ATTR_STATS_TYPE] = { .type = NLA_U8 },
+		[QCA_WLAN_VENDOR_ATTR_STATS_RECURSIVE] = { .type = NLA_NESTED },
+		[QCA_WLAN_VENDOR_ATTR_STATS_MULTI_REPLY] = { .type = NLA_FLAG },
+		[QCA_WLAN_VENDOR_ATTR_STATS_SERVICEID] = { .type = NLA_U8 },
+		};
+	struct telemetry_sawfdelay_stats *delay_stats;
+	struct telemetry_sawftx_stats *tx_stats;
+	static int filled_buf_len_delay, filled_buf_len_tx;
+	struct unified_stats *telemetry_stats = (struct unified_stats*)arg;
+	size_t len;
+
+	nla_parse(tb_msg, NL80211_ATTR_MAX, genlmsg_attrdata(gnlh, 0),
+		  genlmsg_attrlen(gnlh, 0), NULL);
+
+	if (tb_msg[NL80211_ATTR_VENDOR_DATA])
+		nla_parse_nested(stats, QCA_WLAN_VENDOR_ATTR_STATS_MAX,
+				 tb_msg[NL80211_ATTR_VENDOR_DATA], stats_policy);
+	else
+		return NL_STOP;
+
+	if (!stats[QCA_WLAN_VENDOR_ATTR_STATS_LEVEL] ||
+	    !stats[QCA_WLAN_VENDOR_ATTR_STATS_OBJECT] ||
+	    !stats[QCA_WLAN_VENDOR_ATTR_STATS_OBJ_ID] ||
+	    !stats[QCA_WLAN_VENDOR_ATTR_STATS_TYPE] ||
+	    !stats[QCA_WLAN_VENDOR_ATTR_STATS_RECURSIVE] ||
+	    !stats[QCA_WLAN_VENDOR_ATTR_STATS_SERVICEID]) {
+		printf("SAWF STATS: Invalid data received\n");
+		return NL_SKIP;
+	}
+
+	if (stats[QCA_WLAN_VENDOR_ATTR_STATS_MULTI_REPLY]) {
+		delay_stats = telemetry_stats->feat[STATS_FEAT_SAWFDELAY];
+		tx_stats = telemetry_stats->feat[STATS_FEAT_SAWFTX];
+	} else {
+		filled_buf_len_delay = 0;
+		filled_buf_len_tx = 0;
+		delay_stats = NULL;
+		tx_stats = NULL;
+	}
+
+	nla_parse_nested(feat, QCA_WLAN_VENDOR_ATTR_FEAT_MAX,
+			 stats[QCA_WLAN_VENDOR_ATTR_STATS_RECURSIVE], NULL);
+
+	if (feat[QCA_WLAN_VENDOR_ATTR_FEAT_SAWFDELAY]) {
+		if (!delay_stats) {
+			void *temp_delay;
+			temp_delay = malloc(sizeof(struct telemetry_sawfdelay_stats));
+			if (!temp_delay)
+				return NL_STOP;
+			len = nla_len(feat[QCA_WLAN_VENDOR_ATTR_FEAT_SAWFDELAY]);
+			memcpy((uint8_t *)temp_delay, nla_data(feat[QCA_WLAN_VENDOR_ATTR_FEAT_SAWFDELAY]),
+			       len);
+			delay_stats = temp_delay;
+			filled_buf_len_delay += len;
+		} else {
+			len = nla_len(feat[QCA_WLAN_VENDOR_ATTR_FEAT_SAWFDELAY]);
+			memcpy((uint8_t *)delay_stats + filled_buf_len_delay,
+			       nla_data(feat[QCA_WLAN_VENDOR_ATTR_FEAT_SAWFDELAY]),
+			       len);
+			filled_buf_len_delay += len;
+		}
+		telemetry_stats->feat[STATS_FEAT_SAWFDELAY] = delay_stats;
+	}
+
+	if (feat[QCA_WLAN_VENDOR_ATTR_FEAT_SAWFTX]) {
+		if (!tx_stats) {
+			void *temp_tx;
+			temp_tx = malloc(sizeof(struct telemetry_sawftx_stats));
+			if (!temp_tx)
+				return NL_STOP;
+			len = nla_len(feat[QCA_WLAN_VENDOR_ATTR_FEAT_SAWFTX]);
+			memcpy((uint8_t *)temp_tx, nla_data(feat[QCA_WLAN_VENDOR_ATTR_FEAT_SAWFTX]),
+			       len);
+			tx_stats = temp_tx;
+			filled_buf_len_tx += len;
+		} else {
+			len = nla_len(feat[QCA_WLAN_VENDOR_ATTR_FEAT_SAWFTX]);
+			memcpy((uint8_t *)tx_stats + filled_buf_len_tx,
+			       nla_data(feat[QCA_WLAN_VENDOR_ATTR_FEAT_SAWFTX]),
+			       len);
+			filled_buf_len_tx += len;
+		}
+		telemetry_stats->feat[STATS_FEAT_SAWFTX] = tx_stats;
+	}
+
+	return NL_OK;
+}
+
+static void free_unified_stats(struct unified_stats *telemetry_stats)
+{
+	int i;
+
+	for (i = 0; i < STATS_FEAT_MAX; i++) {
+		if (telemetry_stats->feat[i])
+			free(telemetry_stats->feat[i]);
+		telemetry_stats->feat[i] = NULL;
+	}
+	free(telemetry_stats);
+}
+
+static int handle_sawf_stats(struct nl80211_state *state,
+                                         struct nl_msg *msg, int argc, char **argv,
+                                         enum id_input id)
+{
+	struct nlattr *telemetry;
+	unsigned char mac_addr[MAC_ADDR_LEN];
+	unsigned long stats = 0;
+	uint8_t value;
+	int ret;
+	struct nl_cb *cb;
+	struct unified_stats *telemetry_stats;
+	char *end;
+
+	if (argc < TELEMETRY_GET_STATS_MIN_ARG || argc > TELEMETRY_GET_STATS_MAX_ARG)
+		goto err;
+
+	if (mac_addr_a2n(mac_addr, argv[0])) {
+		printf("Invalid MAC address\n");
+		return -EINVAL;
+	}
+	argc--;
+	argv++;
+
+	if (!strcmp("svc_id", argv[0])) {
+		argc--;
+		argv++;
+		errno = 0;
+		value = strtoul(argv[0], &end, 10);
+		if (*end != '\0' || value > MAX_RANGE(uint8_t) || errno == ERANGE)
+			goto err;
+
+		argc--;
+		argv++;
+	} else {
+		goto err;
+	}
+
+	if (!argc)
+		goto err;
+
+	while (argc) {
+		if (!strcmp("sawfdelay",argv[0]))
+			stats |= SAWFDELAY_STATS;
+		else if (!strcmp("sawftx",argv[0]))
+			stats |= SAWFTX_STATS;
+		else
+			goto err;
+		argc--;
+		argv++;
+	}
+
+	nla_put_u32(msg, NL80211_ATTR_VENDOR_ID, OUI_QCA);
+	nla_put_u32(msg, NL80211_ATTR_VENDOR_SUBCMD,
+		    QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_GETSTATS);
+
+	telemetry = nla_nest_start(msg, NL80211_ATTR_VENDOR_DATA);
+	if (!telemetry)
+		return -ENOBUFS;
+
+	if (nla_put_u8(msg, QCA_WLAN_VENDOR_ATTR_TELEMETRIC_LEVEL,
+		       STATS_LVL_ADVANCE) ||
+	    nla_put_u8(msg, QCA_WLAN_VENDOR_ATTR_TELEMETRIC_OBJECT,
+		       STATS_OBJ_STA) ||
+	    nla_put_u8(msg, QCA_WLAN_VENDOR_ATTR_TELEMETRIC_TYPE,
+		       STATS_TYPE_DATA) ||
+	    nla_put_u64(msg, QCA_WLAN_VENDOR_ATTR_TELEMETRIC_FEATURE_FLAG,
+			stats) ||
+	    nla_put(msg, QCA_WLAN_VENDOR_ATTR_TELEMETRIC_STA_MAC,
+		    ETH_ALEN, mac_addr) ||
+	    nla_put_u8(msg, QCA_WLAN_VENDOR_ATTR_TELEMETRIC_SERVICEID,
+		       value) ||
+	    nla_put_flag(msg, QCA_WLAN_VENDOR_ATTR_TELEMETRIC_AGGREGATE))
+		return -ENOBUFS;
+
+	nla_nest_end(msg, telemetry);
+	telemetry_stats = malloc(sizeof(struct unified_stats));
+	if (!telemetry_stats)
+		return NL_SKIP;
+
+	memset(telemetry_stats, 0, sizeof(struct unified_stats));
+
+	ret = nl_send_auto_complete(state->nl_sock, msg);
+	if (ret < 0)
+		goto unified_stats_free;
+
+	telemetry_stats->err = -1;
+
+	cb = nl_cb_alloc(iw_debug ? NL_CB_DEBUG : NL_CB_DEFAULT);
+	nl_cb_err(cb, NL_CB_CUSTOM, error_stats_handler, telemetry_stats);
+	nl_cb_set(cb, NL_CB_VALID, NL_CB_CUSTOM, print_telemetry_stats, telemetry_stats);
+	nl_cb_set(cb, NL_CB_ACK, NL_CB_CUSTOM, complete_telemetry_stats, telemetry_stats);
+
+	while (telemetry_stats->err < 0)
+		nl_recvmsgs(state->nl_sock, cb);
+
+	if (telemetry_stats->err != EINVAL)
+		print_sawf_stats(telemetry_stats, value);
+	nl_cb_put(cb); // free the cb
+
+unified_stats_free:
+	free_unified_stats(telemetry_stats);
+	return HANDLER_RET_DONE;
+err:
+	printf("Invalid SAWF stats get command, format: Usage\n");
+	printf("iw dev <devname> sawf_stats get <sta_mac> [svc_id <service_id>] ");
+	printf("<[sawftx] [sawfdelay]>\n");
+	return HANDLER_RET_DONE;
+}
+COMMAND(sawf_stats, get, "<sta_mac> svc_id <service_id> <[sawftx] [sawfdelay]>", NL80211_CMD_VENDOR, 0, CIB_NETDEV, handle_sawf_stats, ".");
--- /dev/null
+++ b/sawf_stats.h
@@ -0,0 +1,368 @@
+/*
+ * Copyright (c) 2023, Qualcomm Innovation Center, Inc. All rights reserved.
+
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+/**
+ * enum qca_wlan_vendor_attr_telemetric: Defines attributes to be used in
+ * request message of QCA_NL80211_VENDOR_SUBCMD_TELEMETRIC_DATA vendor command.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_LEVEL: Defines stats levels like Basic or
+ * Advance or Debug.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_OBJECT: Defines stats objects like STA or
+ * VAP or Radio or SoC.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_TYPE: Defines stats types like Data or
+ * control.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_AGGREGATE: Defines aggregation flag for
+ * driver agrregation.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_FEATURE_FLAG: Defines feature flags for
+ * which stats is requested.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_STA_MAC: Defines STA MAC Address if the
+ * request is for particular STA object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_SERVICEID: Defines serviceid for sawf stats.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MAX: Defines maximum attribute counts to be
+ * used in QCA_NL80211_VENDOR_SUBCMD_TELEMETRIC_DATA vendor command request.
+ */
+enum qca_wlan_vendor_attr_telemetric {
+	QCA_WLAN_VENDOR_TELEMETRY_INVALID = 0,
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_LEVEL,
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_OBJECT,
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_TYPE,
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_AGGREGATE,
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_FEATURE_FLAG,
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_STA_MAC,
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_SERVICEID,
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MLD_LINK,
+
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_AFTER_LAST,
+	QCA_WLAN_VENDOR_ATTR_TELEMETRIC_MAX =
+		QCA_WLAN_VENDOR_ATTR_TELEMETRIC_AFTER_LAST -1,
+};
+
+/**
+ * enum qca_wlan_vendor_attr_stats: Defines attributes to be used in response of
+ * QCA_NL80211_VENDOR_SUBCMD_TELEMETRIC_DATA vendor command.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_STATS_LEVEL: Used for stats levels like Basic or
+ * Advance or Debug.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_STATS_OBJECT: Required (u8)
+ * Used with the command, carrying stats, to specify for which stats_object_e.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_STATS_OBJ_ID: Used for Object ID like for STA MAC
+ * address or for VAP or Radio or SoC respective interface name.
+ *
+ * QCA_WLAN_VENDOR_ATTR_STATS_SERVICEID: Used for sawf levels stats like per
+ * peer or per peer per serviceclass.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_STATS_PARENT_IF: Used for Parent Object interface name
+ * like for STA VAP name, for VAP Radio interface name and for Radio SoC
+ * interface name.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_STATS_TYPE: Used for stats types like Data or
+ * control.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_STATS_RECURSIVE: Required (NESTED Flag)
+ * Used with the command to specify the nested stats.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_STATS_MULTI_REPLY: Set this flag if current reply
+ * messageis holding data from previous reply.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_STATS_MAX: Defines maximum attriutes can be used in
+ * QCA_NL80211_VENDOR_SUBCMD_TELEMETRIC_DATA vendor command response.
+ */
+
+enum qca_wlan_vendor_attr_stats {
+	QCA_WLAN_VENDOR_ATTR_STATS_LEVEL = 1,
+	QCA_WLAN_VENDOR_ATTR_STATS_OBJECT,
+	QCA_WLAN_VENDOR_ATTR_STATS_OBJ_ID,
+	QCA_WLAN_VENDOR_ATTR_STATS_SERVICEID,
+	QCA_WLAN_VENDOR_ATTR_STATS_PARENT_IF,
+	QCA_WLAN_VENDOR_ATTR_STATS_TYPE,
+	QCA_WLAN_VENDOR_ATTR_STATS_RECURSIVE,
+	QCA_WLAN_VENDOR_ATTR_STATS_MULTI_REPLY,
+	QCA_WLAN_VENDOR_ATTR_STATS_MAX,
+};
+
+/**
+ * enum qca_wlan_vendor_attr_feat: Defines nested attributes to be used in
+ * response of QCA_NL80211_VENDOR_SUBCMD_TELEMETRIC_DATA vendor command.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_ME: Used for Multicast Enhancement stats for a
+ * particular stats object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_RX: Used for Rx stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_TX: Used for Tx stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_AST: Used for AST stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_CFR: Used for CFR stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_FWD: Used for BSS stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_RAW: Used for RAW mode stats for a particular
+ * object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_TSO: Used for TSO stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_TWT: Used for TWT stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_VOW: Used for VOW  stats for a particular object.
+*
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_WDI: Used for WDI stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_WMI: Used for WMI stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_IGMP: Used for IGMP stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_LINK: Used for Link related stats for a particular
+ * object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_MESH: Used for Mesh related stats for a particular
+ * object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_RATE: Used for Rate stats for a particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_NAWDS: Used for NAWDS related stats for a
+ * particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_DELAY: Used for DELAY related stats for a
+ * particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_JITTER: Used for JITTER related stats for a
+ * particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_TXCAP: Used for TXCAP realted stats for a
+ * particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_MONITOR: Used for MONITOR realted stats for a
+ * particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_SAWFDELAY: Used for SAWFDELAY related stats for a
+ * particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_SAWFTX: Used for SAWFTX related stats for a
+ * particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_DETER: Used for DETERMINISTIC related stats for a
+ * particular object.
+ *
+ * @QCA_WLAN_VENDOR_ATTR_FEAT_MAX: Defines Maximum count of feature attributes.
+ */
+enum qca_wlan_vendor_attr_feat {
+	QCA_WLAN_VENDOR_ATTR_FEAT_ME = 1,
+	QCA_WLAN_VENDOR_ATTR_FEAT_RX,
+	QCA_WLAN_VENDOR_ATTR_FEAT_TX,
+	QCA_WLAN_VENDOR_ATTR_FEAT_AST,
+	QCA_WLAN_VENDOR_ATTR_FEAT_CFR,
+	QCA_WLAN_VENDOR_ATTR_FEAT_FWD,
+	QCA_WLAN_VENDOR_ATTR_FEAT_RAW,
+	QCA_WLAN_VENDOR_ATTR_FEAT_TSO,
+	QCA_WLAN_VENDOR_ATTR_FEAT_TWT,
+	QCA_WLAN_VENDOR_ATTR_FEAT_VOW,
+	QCA_WLAN_VENDOR_ATTR_FEAT_WDI,
+	QCA_WLAN_VENDOR_ATTR_FEAT_WMI,
+	QCA_WLAN_VENDOR_ATTR_FEAT_IGMP,
+	QCA_WLAN_VENDOR_ATTR_FEAT_LINK,
+	QCA_WLAN_VENDOR_ATTR_FEAT_MESH,
+	QCA_WLAN_VENDOR_ATTR_FEAT_RATE,
+	QCA_WLAN_VENDOR_ATTR_FEAT_NAWDS,
+	QCA_WLAN_VENDOR_ATTR_FEAT_DELAY,
+	QCA_WLAN_VENDOR_ATTR_FEAT_JITTER,
+	QCA_WLAN_VENDOR_ATTR_FEAT_TXCAP,
+	QCA_WLAN_VENDOR_ATTR_FEAT_MONITOR,
+	QCA_WLAN_VENDOR_ATTR_FEAT_SAWFDELAY,
+	QCA_WLAN_VENDOR_ATTR_FEAT_SAWFTX,
+	QCA_WLAN_VENDOR_ATTR_FEAT_DETER,
+	/**
+	 * New attribute must be add before this.
+	 * Also define the corresponding feature
+	 * index in stats_feat_index_e.
+	 */
+	QCA_WLAN_VENDOR_ATTR_FEAT_MAX,
+};
+
+/**
+ * enum stats_level: Defines detailing levels
+ * @STATS_LVL_BASIC:    Very minimal stats data
+ * @STATS_LVL_ADVANCE:  Mostly feature specific stats data
+ * @STATS_LVL_DEBUG:    Stats data for debug purpose
+ * @STATS_LVL_MAX:      Max supported Stats levels
+ */
+enum stats_level {
+	STATS_LVL_BASIC,
+	STATS_LVL_ADVANCE,
+	STATS_LVL_DEBUG,
+	STATS_LVL_MAX = STATS_LVL_DEBUG,
+};
+
+/**
+ * enum stats_object: Defines the Stats specific to object
+ * @STATS_OBJ_STA:   Stats for station/peer associated to AP
+ * @STATS_OBJ_VAP:   Stats for VAP
+ * @STATS_OBJ_MLD:   Stats for MLD group
+ * @STATS_OBJ_RADIO: Stats for particular Radio
+ * @STATS_OBJ_AP:    Stats for SoC
+ * @STATS_OBJ_MAX:   Max supported objects
+ */
+enum stats_object {
+	STATS_OBJ_STA,
+	STATS_OBJ_VAP,
+	STATS_OBJ_MLD,
+	STATS_OBJ_RADIO,
+	STATS_OBJ_AP,
+	STATS_OBJ_MAX = STATS_OBJ_AP,
+};
+
+/**
+ * enum stats_type: Defines the Stats for specific category
+ * @STATS_TYPE_DATA: Stats for Data frames
+ * @STATS_TYPE_CTRL: Stats for Control/Management frames
+ * @STATS_TYPE_MAX:  Max supported types
+ */
+enum stats_type {
+	STATS_TYPE_DATA,
+	STATS_TYPE_CTRL,
+	STATS_TYPE_MAX = STATS_TYPE_CTRL,
+};
+
+#define MAX_TID 8
+#define MAX_Q  8
+#define MAX_SAWF_Q 2
+
+struct sawf_fw_mpdu_stats {
+	uint64_t success_cnt;
+	uint64_t failure_cnt;
+};
+
+struct dp_pkt_info {
+	uint32_t num_pkts;
+	uint64_t bytes;
+};
+
+struct telemetry_sawf_tx_stat {
+       struct dp_pkt_info tx_success;
+       struct dp_pkt_info tx_ingress;
+       struct {
+               struct dp_pkt_info fw_rem;
+               uint32_t fw_rem_notx;
+               uint32_t fw_rem_tx;
+               uint32_t age_out;
+               uint32_t fw_reason1;
+               uint32_t fw_reason2;
+               uint32_t fw_reason3;
+       } dropped;
+       struct sawf_fw_mpdu_stats svc_intval_stats;
+       struct sawf_fw_mpdu_stats burst_size_stats;
+       uint32_t tx_failed;
+       uint32_t queue_depth;
+       uint32_t throughput;
+       uint32_t ingress_rate;
+};
+
+struct telemetry_sawftx_stats {
+       struct telemetry_sawf_tx_stat tx[MAX_TID][MAX_Q];
+       uint8_t tid;
+       uint8_t msduq;
+};
+
+enum stats_if_hist_bucket_index {
+	HIST_BUCKET_0,
+	HIST_BUCKET_1,
+	HIST_BUCKET_2,
+	HIST_BUCKET_3,
+	HIST_BUCKET_4,
+	HIST_BUCKET_5,
+	HIST_BUCKET_6,
+	HIST_BUCKET_7,
+	HIST_BUCKET_8,
+	HIST_BUCKET_9,
+	HIST_BUCKET_10,
+	HIST_BUCKET_11,
+	HIST_BUCKET_12,
+	HIST_BUCKET_MAX,
+};
+
+enum stats_if_delay_bucket_index {
+	DELAY_BUCKET_0,
+	DELAY_BUCKET_1,
+	DELAY_BUCKET_2,
+	DELAY_BUCKET_3,
+	DELAY_BUCKET_4,
+	DELAY_BUCKET_5,
+	DELAY_BUCKET_6,
+	DELAY_BUCKET_7,
+	DELAY_BUCKET_8,
+	DELAY_BUCKET_9,
+	DELAY_BUCKET_10,
+	DELAY_BUCKET_11,
+	DELAY_BUCKET_12,
+	DELAY_BUCKET_MAX,
+};
+
+enum hist_types {
+	HIST_TYPE_SW_ENQEUE_DELAY,
+	HIST_TYPE_HW_COMP_DELAY,
+	HIST_TYPE_REAP_STACK,
+	HIST_TYPE_HW_TX_COMP_DELAY,
+	HIST_TYPE_MAX,
+};
+
+struct hist_bucket {
+	enum hist_types hist_type;
+	uint64_t freq[HIST_BUCKET_MAX];
+};
+
+struct delay_hist_stats {
+	struct hist_bucket hist;
+	int32_t max;
+	int32_t min;
+	int32_t avg;
+};
+
+struct telemetry_sawf_delay_stat {
+       struct delay_hist_stats delay_hist;
+       uint8_t cur_win;
+       uint32_t nwdelay_avg;
+       uint32_t swdelay_avg;
+       uint32_t hwdelay_avg;
+       uint64_t delay_bound_success;
+       uint64_t delay_bound_failure;
+};
+
+struct telemetry_sawfdelay_stats {
+       struct telemetry_sawf_delay_stat delay[MAX_TID][MAX_Q];
+       uint8_t tid;
+       uint8_t msduq;
+};
+
+enum stats_feat {
+	STATS_FEAT_SAWFDELAY = 0,
+	STATS_FEAT_SAWFTX = 1,
+	STATS_FEAT_MAX = 2,
+};
+
+struct unified_stats {
+	void *feat[STATS_FEAT_MAX];
+	int err;
+};
+
--- a/iw.h
+++ b/iw.h
@@ -82,6 +82,7 @@ enum qca_nl80211_vendor_subcmds {
 	QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_SLA_BREACH_DETECTION_CFG = 212,
 	QCA_NL80211_VENDOR_SUBCMD_SAWF_STREAMING_STATS = 213,
 	QCA_NL80211_VENDOR_SUBCMD_SAWF_SLA_BREACH = 214,
+	QCA_NL80211_VENDOR_SUBCMD_TELEMETRY_GETSTATS = 334,
 };
 /* Attributes for data used by
  * QCA_NL80211_VENDOR_SUBCMD_SET_WIFI_CONFIGURATION and
