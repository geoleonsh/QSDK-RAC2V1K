From bf9281b1bbdaec35efa2d666008b7255b26f17d4 Mon Sep 17 00:00:00 2001
From: saleemuddin shaik <quic_saleemud@quicinc.com>
Date: Sat, 4 Mar 2023 13:59:52 +0530
Subject: ath12k: add statistic support for counting wmm received packets

Taken tid value from the reo dest ring and
the packets are counted based on WMM categories.

Signed-off-by: saleemuddin shaik <quic_saleemud@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/core.h    |  2 ++
 drivers/net/wireless/ath/ath12k/debugfs.c | 15 ++++++++++++++-
 drivers/net/wireless/ath/ath12k/dp_rx.c   | 12 +++++++++++-
 3 files changed, 27 insertions(+), 2 deletions(-)

diff --git a/drivers/net/wireless/ath/ath12k/core.h b/drivers/net/wireless/ath/ath12k/core.h
index becfc2a..1b03d46 100644
--- a/drivers/net/wireless/ath/ath12k/core.h
+++ b/drivers/net/wireless/ath/ath12k/core.h
@@ -730,7 +730,9 @@ struct ath12k_chan_info {
 
 struct ath12k_wmm_stats {
 	int tx_type;
+	int rx_type;
 	u64 total_wmm_tx_pkts[WME_NUM_AC];
+	u64 total_wmm_rx_pkts[WME_NUM_AC];
 };
 
 #define ATH12K_DSCP_PRIORITY 7
diff --git a/drivers/net/wireless/ath/ath12k/debugfs.c b/drivers/net/wireless/ath/ath12k/debugfs.c
index 3918aac..6509567 100644
--- a/drivers/net/wireless/ath/ath12k/debugfs.c
+++ b/drivers/net/wireless/ath/ath12k/debugfs.c
@@ -1354,6 +1354,7 @@ static ssize_t ath12k_read_wmm_stats(struct file *file,
 	char *buf;
 	ssize_t retval;
 	u64 total_wmm_sent_pkts = 0;
+	u64 total_wmm_received_pkts = 0;
 
 	buf = kzalloc(size, GFP_KERNEL);
 	if (!buf) {
@@ -1362,11 +1363,15 @@ static ssize_t ath12k_read_wmm_stats(struct file *file,
 	}
 
 	mutex_lock(&ar->conf_mutex);
-	for (count = 0; count < WME_NUM_AC; count++)
+	for (count = 0; count < WME_NUM_AC; count++) {
 		total_wmm_sent_pkts += ar->wmm_stats.total_wmm_tx_pkts[count];
+		total_wmm_received_pkts += ar->wmm_stats.total_wmm_rx_pkts[count];
+	}
 
 	len += scnprintf(buf + len, size - len, "Total number of wmm_sent: %llu\n",
 			 total_wmm_sent_pkts);
+	len += scnprintf(buf + len, size - len, "total number of wmm_received: %llu\n",
+			 total_wmm_received_pkts);
 	len += scnprintf(buf + len, size - len, "Num of BE wmm_sent: %llu\n",
 			 ar->wmm_stats.total_wmm_tx_pkts[WME_AC_BE]);
 	len += scnprintf(buf + len, size - len, "Num of BK wmm_sent: %llu\n",
@@ -1375,6 +1380,14 @@ static ssize_t ath12k_read_wmm_stats(struct file *file,
 			 ar->wmm_stats.total_wmm_tx_pkts[WME_AC_VI]);
 	len += scnprintf(buf + len, size - len, "Num of VO wmm_sent: %llu\n",
 			 ar->wmm_stats.total_wmm_tx_pkts[WME_AC_VO]);
+	len += scnprintf(buf + len, size - len, "num of be wmm_received: %llu\n",
+			 ar->wmm_stats.total_wmm_rx_pkts[WME_AC_BE]);
+	len += scnprintf(buf + len, size - len, "num of bk wmm_received: %llu\n",
+			 ar->wmm_stats.total_wmm_rx_pkts[WME_AC_BK]);
+	len += scnprintf(buf + len, size - len, "num of vi wmm_received: %llu\n",
+			 ar->wmm_stats.total_wmm_rx_pkts[WME_AC_VI]);
+	len += scnprintf(buf + len, size - len, "num of vo wmm_received: %llu\n",
+			 ar->wmm_stats.total_wmm_rx_pkts[WME_AC_VO]);
 
 	mutex_unlock(&ar->conf_mutex);
 
diff --git a/drivers/net/wireless/ath/ath12k/dp_rx.c b/drivers/net/wireless/ath/ath12k/dp_rx.c
index a3d1ed8..21fce33 100644
--- a/drivers/net/wireless/ath/ath12k/dp_rx.c
+++ b/drivers/net/wireless/ath/ath12k/dp_rx.c
@@ -2574,6 +2574,7 @@ static void ath12k_dp_rx_h_undecap(struct ath12k *ar, struct sk_buff *msdu,
 		/* TODO: Handle undecap for these formats */
 		break;
 	}
+	ar->wmm_stats.total_wmm_rx_pkts[ar->wmm_stats.rx_type]++;
 }
 
 struct ath12k_peer *
@@ -2670,12 +2671,15 @@ static void ath12k_dp_rx_h_mpdu(struct ath12k *ar,
 	struct ieee80211_hdr *hdr;
 	struct ath12k_peer *peer;
 	struct ieee80211_rx_status *rx_status = rx_info->rx_status;
+	struct ath12k_dp_rx_tid *rx_tid;
 	u32 err_bitmap;
+	u8 tid;
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
 	u32 vp;
 #endif
 	struct wireless_dev *wdev = NULL;
 
+	tid = ath12k_dp_rx_h_tid(ab, rx_desc);
 	/* PN for multicast packets will be checked in mac80211 */
 	rxcb = ATH12K_SKB_RXCB(msdu);
 	fill_crypto_hdr = ath12k_dp_rx_h_is_mcbc(ar->ab, rx_desc);
@@ -2693,7 +2697,11 @@ static void ath12k_dp_rx_h_mpdu(struct ath12k *ar,
 		 * path, so its safe to skip checking errors here */
 		if (*fast_rx &&
 		    ath12k_dp_rx_check_fast_rx(ar, msdu, rx_desc, peer)) {
-		        wdev = ieee80211_vif_to_wdev(peer->vif);
+			rx_tid = &peer->rx_tid[tid];
+			ar->wmm_stats.rx_type =
+				ath12k_tid_to_ac(rx_tid->tid > ATH12K_DSCP_PRIORITY ? 0: rx_tid->tid);
+			ar->wmm_stats.total_wmm_rx_pkts[ar->wmm_stats.rx_type]++;
+			wdev = ieee80211_vif_to_wdev(peer->vif);
 		        if (wdev) {
 #ifdef CPTCFG_MAC80211_PPE_SUPPORT
 				vp = peer->vif->ppe_vp_num;
@@ -3350,6 +3358,8 @@ try_again:
 		rxcb->tid = u32_get_bits(desc.rx_mpdu_info.info0,
 					 RX_MPDU_DESC_INFO0_TID);
 
+		ar->wmm_stats.rx_type = ath12k_tid_to_ac(rxcb->tid > ATH12K_DSCP_PRIORITY ? 0: rxcb->tid);
+
 		if (ath12k_debugfs_is_extd_rx_stats_enabled(ar) && rxcb->peer_id) {
 			rcu_read_lock();
 			spin_lock_bh(&src_ab->base_lock);
-- 
2.17.1

