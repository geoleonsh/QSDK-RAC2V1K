From 0485855f151d730cfd449511e0f6b3f336d336b4 Mon Sep 17 00:00:00 2001
From: Aishwarya R <quic_aisr@quicinc.com>
Date: Wed, 13 Apr 2022 15:44:15 +0530
Subject: [PATCH] ath12k fix kernel panic during mac_setup_channels_rates

Fixed Unable to handle kernel read from unreadable memory kernel panic
when parsing band->chan_6g.

Signed-off-by: Aishwarya R <quic_aisr@quicinc.com>
---
 drivers/net/wireless/ath/ath12k/mac.c | 128 +++++++++++++++++++++++++++++-----------------------------
 1 file changed, 65 insertions(+), 63 deletions(-)

--- a/drivers/net/wireless/ath/ath12k/mac.c
+++ b/drivers/net/wireless/ath/ath12k/mac.c
@@ -9082,74 +9082,75 @@ static int ath12k_mac_setup_channels_rat
 	}
 
 	if (supported_bands & WMI_HOST_WLAN_5G_CAP) {
-		if (reg_cap->high_5ghz_chan <= ATH12K_MAX_6G_FREQ &&
-		    reg_cap->low_5ghz_chan >= ATH12K_MIN_6G_FREQ) {
-			band = &ar->mac.sbands[NL80211_BAND_6GHZ];
-			band->band = NL80211_BAND_6GHZ;
-			for (i = 0; i < NL80211_REG_NUM_POWER_MODES; i++) {
-				channels = kmemdup(ath12k_6ghz_channels,
-						   sizeof(ath12k_6ghz_channels), GFP_KERNEL);
-				chan_6g = kzalloc(sizeof(*chan_6g), GFP_ATOMIC);
-				if (!channels || !chan_6g) {
-					kfree(ar->mac.sbands[NL80211_BAND_2GHZ].channels);
-					break;
-				}
-				chan_6g->channels = channels;
-				chan_6g->n_channels = ARRAY_SIZE(ath12k_6ghz_channels);
-				band->chan_6g[i] = chan_6g;
-				channels = NULL;
-				chan_6g = NULL;
-			}
-
-			if (i < NL80211_REG_NUM_POWER_MODES) {
-				for (i = i - 1; i >= 0; i--) {
-					chan_6g = band->chan_6g[i];
-					kfree(chan_6g->channels);
-					kfree(chan_6g);
-				}
-				return -ENOMEM;
-			}
-			ar->supports_6ghz = true;
-			band->n_bitrates = ath12k_a_rates_size;
-			band->bitrates = ath12k_a_rates;
-			ar->hw->wiphy->bands[NL80211_BAND_6GHZ] = band;
+		/* If 5g end and 6g start overlaps, decide band based on
+                 * the difference between target limit and ATH12K_5G_MAX_CENTER.
+                 */
+                if ((reg_cap->low_5ghz_chan >= ATH12K_MIN_5G_FREQ) &&
+                    ((reg_cap->high_5ghz_chan < ATH12K_MAX_5G_FREQ) ||
+                    ((reg_cap->high_5ghz_chan - ATH12K_5G_MAX_CENTER) < (ATH12K_HALF_20MHZ_BW * 2)))) {
+                        channels = kmemdup(ath12k_5ghz_channels,
+                                           sizeof(ath12k_5ghz_channels),
+                                           GFP_KERNEL);
+                        if (!channels) {
+                                kfree(ar->mac.sbands[NL80211_BAND_2GHZ].channels);
+                                for (i = 0; i < NL80211_REG_NUM_POWER_MODES; i++)
+                                         kfree(ar->mac.sbands[NL80211_BAND_6GHZ].chan_6g[i]);
+
+                                return -ENOMEM;
+                        }
+
+                        band = &ar->mac.sbands[NL80211_BAND_5GHZ];
+                        band->band = NL80211_BAND_5GHZ;
+                        band->n_channels = ARRAY_SIZE(ath12k_5ghz_channels);
+                        band->channels = channels;
+                        band->n_bitrates = ath12k_a_rates_size;
+                        band->bitrates = ath12k_a_rates;
+                        ar->hw->wiphy->bands[NL80211_BAND_5GHZ] = band;
+
+                        if (ar->ab->hw_params->single_pdev_only) {
+                                phy_id = ath12k_get_phy_id(ar, WMI_HOST_WLAN_5G_CAP);
+                        }
 			ath12k_mac_update_ch_list(ar, band,
-						  reg_cap->low_5ghz_chan,
-						  reg_cap->high_5ghz_chan);
-
-			band->n_channels = band->chan_6g[0]->n_channels;
-			band->channels = band->chan_6g[0]->channels;
-		}
-
-		if ((reg_cap->low_5ghz_chan >= ATH12K_MIN_5G_FREQ) &&
-		    ((reg_cap->high_5ghz_chan < ATH12K_MAX_5G_FREQ) ||
-		    ((reg_cap->high_5ghz_chan - ATH12K_5G_MAX_CENTER) < (ATH12K_HALF_20MHZ_BW * 2)))) {
-			channels = kmemdup(ath12k_5ghz_channels,
-					   sizeof(ath12k_5ghz_channels),
-					   GFP_KERNEL);
-			if (!channels) {
-				kfree(ar->mac.sbands[NL80211_BAND_2GHZ].channels);
-				kfree(ar->mac.sbands[NL80211_BAND_6GHZ].channels);
-				return -ENOMEM;
-			}
-
-			band = &ar->mac.sbands[NL80211_BAND_5GHZ];
-			band->band = NL80211_BAND_5GHZ;
-			band->n_channels = ARRAY_SIZE(ath12k_5ghz_channels);
-			band->channels = channels;
-			band->n_bitrates = ath12k_a_rates_size;
-			band->bitrates = ath12k_a_rates;
-			ar->hw->wiphy->bands[NL80211_BAND_5GHZ] = band;
-
-			if (ar->ab->hw_params->single_pdev_only) {
-				phy_id = ath12k_get_phy_id(ar, WMI_HOST_WLAN_5G_CAP);
-				reg_cap = &ar->ab->hal_reg_cap[phy_id];
-			}
-
-			ath12k_mac_update_ch_list(ar, band,
-						  reg_cap->low_5ghz_chan,
-						  reg_cap->high_5ghz_chan);
+                                                  reg_cap->low_5ghz_chan,
+                                                  reg_cap->high_5ghz_chan);
 
+			} else if (reg_cap->low_5ghz_chan >= ATH12K_MIN_6G_FREQ &&
+                           reg_cap->high_5ghz_chan <= ATH12K_MAX_6G_FREQ) {
+                        band = &ar->mac.sbands[NL80211_BAND_6GHZ];
+                        band->band = NL80211_BAND_6GHZ;
+                        for (i = 0; i < NL80211_REG_NUM_POWER_MODES; i++) {
+                                channels = kmemdup(ath12k_6ghz_channels,
+                                                sizeof(ath12k_6ghz_channels),
+                                                GFP_KERNEL);
+                                chan_6g = kzalloc(sizeof(*chan_6g), GFP_ATOMIC);
+
+                                if (!channels || !chan_6g) {
+                                        kfree(ar->mac.sbands[NL80211_BAND_2GHZ].channels);
+                                        break;
+                                }
+
+                                chan_6g->channels = channels;
+                                chan_6g->n_channels = ARRAY_SIZE(ath12k_6ghz_channels);
+                                band->chan_6g[i] = chan_6g;
+                                channels = NULL;
+                                chan_6g = NULL;
+                        }
+
+                        if (i < NL80211_REG_NUM_POWER_MODES) {
+                                for (i = i - 1; i >= 0; i--) {
+                                        chan_6g = band->chan_6g[i];
+                                        kfree(chan_6g->channels);
+                                        kfree(chan_6g);
+                                }
+                                return -ENOMEM;
+                        }
+                        ar->supports_6ghz = true;
+                        band->n_bitrates = ath12k_a_rates_size;
+                        band->bitrates = ath12k_a_rates;
+                        ar->hw->wiphy->bands[NL80211_BAND_6GHZ] = band;
+                        ath12k_mac_update_ch_list(ar, band,
+						reg_cap->low_5ghz_chan,
+                                                 reg_cap->high_5ghz_chan);
 			/* For 6G sband, the strcut channels and int numchannels will
                         * have the default value. During ieee80211_hw_register(),
                         * all sbands are parsed and at that time code can crash while
